{"snapshots":{"H:/New/HabitV8/error.md":{"filePath":"H:/New/HabitV8/error.md","baseContent":"\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:device_info_plus/device_info_plus.dart';\nimport 'dart:io';\n\nclass NotificationService {\nstatic final FlutterLocalNotificationsPlugin _notificationsPlugin =\nFlutterLocalNotificationsPlugin();\n\nstatic bool _isInitialized = false;\n\n/// Initialize the notification service\nstatic Future<void> initialize() async {\nif (_isInitialized) return;\n\n    // Android initialization settings\n    const AndroidInitializationSettings initializationSettingsAndroid =\n        AndroidInitializationSettings('@mipmap/ic_launcher');\n\n    // iOS initialization settings\n    const DarwinInitializationSettings initializationSettingsIOS =\n        DarwinInitializationSettings(\n      requestAlertPermission: true,\n      requestBadgePermission: true,\n      requestSoundPermission: true,\n    );\n\n    // Combined initialization settings\n    const InitializationSettings initializationSettings =\n        InitializationSettings(\n      android: initializationSettingsAndroid,\n      iOS: initializationSettingsIOS,\n    );\n\n    // Initialize the plugin\n    await _notificationsPlugin.initialize(\n      initializationSettings,\n      onDidReceiveNotificationResponse: _onNotificationTapped,\n    );\n\n    // Request permissions for Android 13+\n    if (Platform.isAndroid) {\n      await _requestAndroidPermissions();\n    }\n\n    _isInitialized = true;\n}\n\n/// Check if device is running Android 12+ (API level 31+)\nstatic Future<bool> _isAndroid12Plus() async {\nif (!Platform.isAndroid) return false;\n\n    try {\n      final DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();\n      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;\n      return androidInfo.version.sdkInt >= 31; // Android 12 = API 31\n    } catch (e) {\n      print('Error checking Android version: $e');\n      return false; // Assume older version if error\n    }\n}\n\n/// Request Android notification permissions with enhanced exact alarm handling\nstatic Future<void> _requestAndroidPermissions() async {\nfinal AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n_notificationsPlugin.resolvePlatformSpecificImplementation<\nAndroidFlutterLocalNotificationsPlugin>();\n\n    if (androidImplementation != null) {\n      // Request notification permission\n      await androidImplementation.requestNotificationsPermission();\n\n      // Check if we're on Android 12+ and handle exact alarms accordingly\n      final bool isAndroid12Plus = await _isAndroid12Plus();\n\n      if (isAndroid12Plus) {\n        print('Android 12+ detected - requesting exact alarm permissions');\n\n        // Request exact alarms permission (Android 12+)\n        try {\n          final bool? exactAlarmPermission =\n              await androidImplementation.requestExactAlarmsPermission();\n          print('Exact alarm permission granted: $exactAlarmPermission');\n\n          if (exactAlarmPermission != true) {\n            print(\n                'WARNING: Exact alarm permission not granted. Scheduled notifications may not work on Android 12+');\n            print(\n                'User may need to manually enable \"Alarms & reminders\" in app settings');\n          }\n        } catch (e) {\n          print('Error requesting exact alarm permission: $e');\n        }\n      } else {\n        print('Android 11 or below detected - exact alarm permissions not required');\n      }\n    }\n}\n\n/// Handle notification tap\nstatic void _onNotificationTapped(NotificationResponse notificationResponse) {\nfinal String? payload = notificationResponse.payload;\nif (payload != null) {\nprint('Notification tapped with payload: $payload');\n// Handle navigation or actions based on payload\n}\n}\n\n/// Show an immediate notification\nstatic Future<void> showNotification({\nrequired int id,\nrequired String title,\nrequired String body,\nString? payload,\n}) async {\nif (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_channel',\n      'Habit Notifications',\n      channelDescription: 'Notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n      showWhen: false,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    await _notificationsPlugin.show(\n      id,\n      title,\n      body,\n      platformChannelSpecifics,\n      payload: payload,\n    );\n}\n\n/// Schedule a notification for a specific time using device local time\n","baseTimestamp":1754377548262,"deltas":[{"timestamp":1754438112360,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"import 'package:flutter_local_notifications/flutter_local_notifications.dart';"},{"type":"DELETE","lineNumber":2,"oldContent":"import 'package:timezone/timezone.dart' as tz;"},{"type":"DELETE","lineNumber":3,"oldContent":"import 'package:device_info_plus/device_info_plus.dart';"},{"type":"DELETE","lineNumber":4,"oldContent":"import 'dart:io';"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"class NotificationService {"},{"type":"DELETE","lineNumber":7,"oldContent":"static final FlutterLocalNotificationsPlugin _notificationsPlugin ="},{"type":"DELETE","lineNumber":8,"oldContent":"FlutterLocalNotificationsPlugin();"},{"type":"DELETE","lineNumber":9,"oldContent":""},{"type":"DELETE","lineNumber":10,"oldContent":"static bool _isInitialized = false;"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"/// Initialize the notification service"},{"type":"DELETE","lineNumber":13,"oldContent":"static Future<void> initialize() async {"},{"type":"DELETE","lineNumber":14,"oldContent":"if (_isInitialized) return;"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"DELETE","lineNumber":16,"oldContent":"    // Android initialization settings"},{"type":"DELETE","lineNumber":17,"oldContent":"    const AndroidInitializationSettings initializationSettingsAndroid ="},{"type":"DELETE","lineNumber":18,"oldContent":"        AndroidInitializationSettings('@mipmap/ic_launcher');"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"    // iOS initialization settings"},{"type":"DELETE","lineNumber":21,"oldContent":"    const DarwinInitializationSettings initializationSettingsIOS ="},{"type":"DELETE","lineNumber":22,"oldContent":"        DarwinInitializationSettings("},{"type":"DELETE","lineNumber":23,"oldContent":"      requestAlertPermission: true,"},{"type":"DELETE","lineNumber":24,"oldContent":"      requestBadgePermission: true,"},{"type":"DELETE","lineNumber":25,"oldContent":"      requestSoundPermission: true,"},{"type":"DELETE","lineNumber":26,"oldContent":"    );"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":28,"oldContent":"    // Combined initialization settings"},{"type":"DELETE","lineNumber":29,"oldContent":"    const InitializationSettings initializationSettings ="},{"type":"DELETE","lineNumber":30,"oldContent":"        InitializationSettings("},{"type":"DELETE","lineNumber":31,"oldContent":"      android: initializationSettingsAndroid,"},{"type":"DELETE","lineNumber":32,"oldContent":"      iOS: initializationSettingsIOS,"},{"type":"DELETE","lineNumber":33,"oldContent":"    );"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"    // Initialize the plugin"},{"type":"DELETE","lineNumber":36,"oldContent":"    await _notificationsPlugin.initialize("},{"type":"DELETE","lineNumber":37,"oldContent":"      initializationSettings,"},{"type":"DELETE","lineNumber":38,"oldContent":"      onDidReceiveNotificationResponse: _onNotificationTapped,"},{"type":"DELETE","lineNumber":39,"oldContent":"    );"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    // Request permissions for Android 13+"},{"type":"DELETE","lineNumber":42,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":43,"oldContent":"      await _requestAndroidPermissions();"},{"type":"DELETE","lineNumber":44,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"    _isInitialized = true;"},{"type":"DELETE","lineNumber":47,"oldContent":"}"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"/// Check if device is running Android 12+ (API level 31+)"},{"type":"DELETE","lineNumber":50,"oldContent":"static Future<bool> _isAndroid12Plus() async {"},{"type":"DELETE","lineNumber":51,"oldContent":"if (!Platform.isAndroid) return false;"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":53,"oldContent":"    try {"},{"type":"DELETE","lineNumber":54,"oldContent":"      final DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();"},{"type":"DELETE","lineNumber":55,"oldContent":"      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;"},{"type":"DELETE","lineNumber":56,"oldContent":"      return androidInfo.version.sdkInt >= 31; // Android 12 = API 31"},{"type":"DELETE","lineNumber":57,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":58,"oldContent":"      print('Error checking Android version: $e');"},{"type":"DELETE","lineNumber":59,"oldContent":"      return false; // Assume older version if error"},{"type":"DELETE","lineNumber":60,"oldContent":"    }"},{"type":"DELETE","lineNumber":61,"oldContent":"}"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":"/// Request Android notification permissions with enhanced exact alarm handling"},{"type":"DELETE","lineNumber":64,"oldContent":"static Future<void> _requestAndroidPermissions() async {"},{"type":"DELETE","lineNumber":65,"oldContent":"final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":66,"oldContent":"_notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":67,"oldContent":"AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":69,"oldContent":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":70,"oldContent":"      // Request notification permission"},{"type":"DELETE","lineNumber":71,"oldContent":"      await androidImplementation.requestNotificationsPermission();"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"      // Check if we're on Android 12+ and handle exact alarms accordingly"},{"type":"DELETE","lineNumber":74,"oldContent":"      final bool isAndroid12Plus = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"      if (isAndroid12Plus) {"},{"type":"DELETE","lineNumber":77,"oldContent":"        print('Android 12+ detected - requesting exact alarm permissions');"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":79,"oldContent":"        // Request exact alarms permission (Android 12+)"},{"type":"DELETE","lineNumber":80,"oldContent":"        try {"},{"type":"DELETE","lineNumber":81,"oldContent":"          final bool? exactAlarmPermission ="},{"type":"DELETE","lineNumber":82,"oldContent":"              await androidImplementation.requestExactAlarmsPermission();"},{"type":"DELETE","lineNumber":83,"oldContent":"          print('Exact alarm permission granted: $exactAlarmPermission');"},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":"          if (exactAlarmPermission != true) {"},{"type":"DELETE","lineNumber":86,"oldContent":"            print("},{"type":"DELETE","lineNumber":87,"oldContent":"                'WARNING: Exact alarm permission not granted. Scheduled notifications may not work on Android 12+');"},{"type":"DELETE","lineNumber":88,"oldContent":"            print("},{"type":"DELETE","lineNumber":89,"oldContent":"                'User may need to manually enable \"Alarms & reminders\" in app settings');"},{"type":"DELETE","lineNumber":90,"oldContent":"          }"},{"type":"DELETE","lineNumber":91,"oldContent":"        } catch (e) {"},{"type":"DELETE","lineNumber":92,"oldContent":"          print('Error requesting exact alarm permission: $e');"},{"type":"DELETE","lineNumber":93,"oldContent":"        }"},{"type":"DELETE","lineNumber":94,"oldContent":"      } else {"},{"type":"DELETE","lineNumber":95,"oldContent":"        print('Android 11 or below detected - exact alarm permissions not required');"},{"type":"DELETE","lineNumber":96,"oldContent":"      }"},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"DELETE","lineNumber":98,"oldContent":"}"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"/// Handle notification tap"},{"type":"DELETE","lineNumber":101,"oldContent":"static void _onNotificationTapped(NotificationResponse notificationResponse) {"},{"type":"DELETE","lineNumber":102,"oldContent":"final String? payload = notificationResponse.payload;"},{"type":"DELETE","lineNumber":103,"oldContent":"if (payload != null) {"},{"type":"DELETE","lineNumber":104,"oldContent":"print('Notification tapped with payload: $payload');"},{"type":"DELETE","lineNumber":105,"oldContent":"// Handle navigation or actions based on payload"},{"type":"DELETE","lineNumber":106,"oldContent":"}"},{"type":"DELETE","lineNumber":107,"oldContent":"}"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"/// Show an immediate notification"},{"type":"DELETE","lineNumber":110,"oldContent":"static Future<void> showNotification({"},{"type":"DELETE","lineNumber":111,"oldContent":"required int id,"},{"type":"DELETE","lineNumber":112,"oldContent":"required String title,"},{"type":"DELETE","lineNumber":113,"oldContent":"required String body,"},{"type":"DELETE","lineNumber":114,"oldContent":"String? payload,"},{"type":"DELETE","lineNumber":115,"oldContent":"}) async {"},{"type":"DELETE","lineNumber":116,"oldContent":"if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"DELETE","lineNumber":118,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":119,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":120,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":121,"oldContent":"      'Habit Notifications',"},{"type":"DELETE","lineNumber":122,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":123,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":124,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":125,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":126,"oldContent":"    );"},{"type":"DELETE","lineNumber":127,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":129,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":132,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":133,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":134,"oldContent":"    );"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"    await _notificationsPlugin.show("},{"type":"DELETE","lineNumber":137,"oldContent":"      id,"},{"type":"DELETE","lineNumber":138,"oldContent":"      title,"},{"type":"DELETE","lineNumber":139,"oldContent":"      body,"},{"type":"DELETE","lineNumber":140,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":141,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":142,"oldContent":"    );"},{"type":"DELETE","lineNumber":143,"oldContent":"}"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":145,"oldContent":"/// Schedule a notification for a specific time using device local time"},{"type":"DELETE","lineNumber":146,"oldContent":""}]},{"timestamp":1754454586299,"changes":[{"type":"INSERT","lineNumber":0,"content":"warning: [options] To suppress warnings about obsolete options, use -Xlint:-options."},{"type":"INSERT","lineNumber":1,"content":"3 warnings"},{"type":"INSERT","lineNumber":2,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":3,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":4,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":5,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":6,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":7,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":8,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":9,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":10,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":11,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":12,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":13,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":14,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":15,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":16,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":17,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":18,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":19,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":20,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":21,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":22,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":23,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":24,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":25,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":26,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":27,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":28,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":29,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":30,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":31,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":32,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":33,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":34,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":35,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":36,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":37,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":38,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":39,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":40,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":41,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":42,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":43,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":44,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":45,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":46,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":47,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":48,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":49,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":50,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":51,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":52,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":53,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":54,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":55,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":56,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":57,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":58,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":59,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":60,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":61,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":62,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":63,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":64,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":65,"content":"... 3 more"},{"type":"INSERT","lineNumber":66,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":67,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":68,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":69,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":70,"content":"... 22 more"},{"type":"INSERT","lineNumber":71,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":72,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":73,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":74,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":75,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":76,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":77,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":78,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":79,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":80,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":81,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":82,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":83,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":84,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":85,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":86,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":87,"content":"... 24 more"},{"type":"INSERT","lineNumber":88,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":89,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":90,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":91,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":92,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":93,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":94,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":95,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":96,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":97,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":98,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":99,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":100,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":101,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":102,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":103,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":104,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":105,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":106,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":107,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":108,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":109,"content":"... 24 more"},{"type":"INSERT","lineNumber":110,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":111,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":112,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":113,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":114,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":115,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":116,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"INSERT","lineNumber":117,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"INSERT","lineNumber":118,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":119,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":120,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":121,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":122,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":123,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":124,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":125,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":126,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":127,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":128,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":129,"content":"... 24 more"},{"type":"INSERT","lineNumber":130,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":131,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":132,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":133,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":134,"content":"... 23 more"},{"type":"INSERT","lineNumber":135,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":136,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":137,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":138,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":139,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"INSERT","lineNumber":140,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"INSERT","lineNumber":141,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":142,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":143,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":144,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":145,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":146,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":147,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":148,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":149,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":150,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":151,"content":"... 25 more"},{"type":"INSERT","lineNumber":152,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":153,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":154,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":155,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":156,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":157,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":158,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":159,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":160,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":161,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":162,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":163,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":164,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":165,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":166,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":167,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":168,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":169,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":170,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":171,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":172,"content":"... 25 more"},{"type":"INSERT","lineNumber":173,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":174,"content":"... 25 more"},{"type":"INSERT","lineNumber":175,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":176,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":177,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":178,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":179,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":180,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":181,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":182,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":183,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":184,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":185,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":186,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":187,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":188,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":189,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":190,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":191,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":192,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":193,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":194,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":195,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":196,"content":"... 24 more"},{"type":"INSERT","lineNumber":198,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":199,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":200,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":201,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":202,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":203,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":204,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":205,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":206,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":207,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":208,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":209,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":210,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":211,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":212,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":213,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":214,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":215,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":216,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":217,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":218,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":219,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":220,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":221,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":222,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":223,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":224,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":225,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":226,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":227,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":228,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":229,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":230,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":231,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":232,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":233,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":234,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":235,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":236,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":237,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":238,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":239,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":240,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":241,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":242,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":243,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":244,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":245,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":246,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":247,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":248,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":249,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":250,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":251,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":252,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":253,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":254,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":255,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":256,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":257,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":258,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":259,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":260,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":261,"content":"... 3 more"},{"type":"INSERT","lineNumber":262,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":263,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":264,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":265,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":266,"content":"... 22 more"},{"type":"INSERT","lineNumber":267,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":268,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":269,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":270,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":271,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":272,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":273,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":274,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":275,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":276,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":277,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":278,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":279,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":280,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":281,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":282,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":283,"content":"... 24 more"},{"type":"INSERT","lineNumber":284,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":285,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":286,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":287,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":288,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":289,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":290,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":291,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":292,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":293,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":294,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":295,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":296,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":297,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":298,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":299,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":300,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":301,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":302,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":303,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":304,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":305,"content":"... 24 more"},{"type":"INSERT","lineNumber":306,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":307,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":308,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":309,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":310,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":311,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":312,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"INSERT","lineNumber":313,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"INSERT","lineNumber":314,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":315,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":316,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":317,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":318,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":319,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":320,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":321,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":322,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":323,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":324,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":325,"content":"... 24 more"},{"type":"INSERT","lineNumber":326,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":327,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":328,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":329,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":330,"content":"... 23 more"},{"type":"INSERT","lineNumber":331,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":332,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":333,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":334,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":335,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"INSERT","lineNumber":336,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"INSERT","lineNumber":337,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":338,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":339,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":340,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":341,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":342,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":343,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":344,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":345,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":346,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":347,"content":"... 25 more"},{"type":"INSERT","lineNumber":348,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":349,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":350,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":351,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":352,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":353,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":354,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":355,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":356,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":357,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":358,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":359,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":360,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":361,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":362,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":363,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":364,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":365,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":366,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":367,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":368,"content":"... 25 more"},{"type":"INSERT","lineNumber":369,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":370,"content":"... 25 more"},{"type":"INSERT","lineNumber":371,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":372,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":373,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":374,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":375,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":376,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":377,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":378,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":379,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":380,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":381,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":382,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":383,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":384,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":385,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":386,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":387,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":388,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":389,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":390,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":391,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":392,"content":"... 24 more"},{"type":"INSERT","lineNumber":393,"content":""},{"type":"INSERT","lineNumber":394,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":395,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":396,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":397,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":398,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":399,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":400,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":401,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":402,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":403,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":404,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":405,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":406,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":407,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":408,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":409,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":410,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":411,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":412,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":413,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":414,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":415,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":416,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":417,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":418,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":419,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":420,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":421,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":422,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":423,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":424,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":425,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":426,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":427,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":428,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":429,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":430,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":431,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":432,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":433,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":434,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":435,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":436,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":437,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":438,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":439,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":440,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":441,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":442,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":443,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":444,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":445,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":446,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":447,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":448,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":449,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":450,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":451,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":452,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":453,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":454,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":455,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":456,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":457,"content":"... 3 more"},{"type":"INSERT","lineNumber":458,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":459,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":460,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":461,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":462,"content":"... 22 more"},{"type":"INSERT","lineNumber":463,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":464,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":465,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":466,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":467,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":468,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":469,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":470,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":471,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":472,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":473,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":474,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":475,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":476,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":477,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":478,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":479,"content":"... 24 more"},{"type":"INSERT","lineNumber":480,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":481,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":482,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":483,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":484,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":485,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":486,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":487,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":488,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":489,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":490,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":491,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":492,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":493,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":494,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":495,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":496,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":497,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":498,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":499,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":500,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":501,"content":"... 24 more"},{"type":"INSERT","lineNumber":502,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":503,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":504,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":505,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":506,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":507,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":508,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"INSERT","lineNumber":509,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"INSERT","lineNumber":510,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":511,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":512,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":513,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":514,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":515,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":516,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":517,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":518,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":519,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":520,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":521,"content":"... 24 more"},{"type":"INSERT","lineNumber":522,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":523,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":524,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":525,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":526,"content":"... 23 more"},{"type":"INSERT","lineNumber":527,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":528,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":529,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":530,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":531,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"INSERT","lineNumber":532,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"INSERT","lineNumber":533,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":534,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":535,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":536,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":537,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":538,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":539,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":540,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":541,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":542,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":543,"content":"... 25 more"},{"type":"INSERT","lineNumber":544,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":545,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":546,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":547,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":548,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":549,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":550,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":551,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":552,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":553,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":554,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":555,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":556,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":557,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":558,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":559,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":560,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":561,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":562,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":563,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":564,"content":"... 25 more"},{"type":"INSERT","lineNumber":565,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":566,"content":"... 25 more"},{"type":"INSERT","lineNumber":567,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":568,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":569,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":570,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":571,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":572,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":573,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":574,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":575,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":576,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":577,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":578,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":579,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":580,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":581,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":582,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":583,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":584,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":585,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":586,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":587,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":588,"content":"... 24 more"},{"type":"INSERT","lineNumber":589,"content":""},{"type":"INSERT","lineNumber":590,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":591,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":592,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":593,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":594,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":595,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":596,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":597,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":598,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":599,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":600,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":601,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":602,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":603,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":604,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":605,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":606,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":607,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":608,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":609,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":610,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":611,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":612,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":613,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":614,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":615,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":616,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":617,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":618,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":619,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":620,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":621,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":622,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":623,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":624,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":625,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":626,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":627,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":628,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":629,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":630,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":631,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":632,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":633,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":634,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":635,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":636,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":637,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":638,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":639,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":640,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":641,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":642,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":643,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":644,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":645,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":646,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":647,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":648,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":649,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":650,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":651,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":652,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":653,"content":"... 3 more"},{"type":"INSERT","lineNumber":654,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":655,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":656,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":657,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":658,"content":"... 22 more"},{"type":"INSERT","lineNumber":659,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":660,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":661,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":662,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":663,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":664,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":665,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":666,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":667,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":668,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":669,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":670,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":671,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":672,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":673,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":674,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":675,"content":"... 24 more"},{"type":"INSERT","lineNumber":676,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":677,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":678,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":679,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":680,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":681,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":682,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":683,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":684,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":685,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":686,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":687,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":688,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":689,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":690,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":691,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":692,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":693,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":694,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":695,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":696,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":697,"content":"... 24 more"},{"type":"INSERT","lineNumber":698,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":699,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":700,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":701,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":702,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"INSERT","lineNumber":703,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":704,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"INSERT","lineNumber":705,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"INSERT","lineNumber":706,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":707,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":708,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":709,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":710,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":711,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":712,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":713,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":714,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":715,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":716,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":717,"content":"... 24 more"},{"type":"INSERT","lineNumber":718,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":719,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":720,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":721,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":722,"content":"... 23 more"},{"type":"INSERT","lineNumber":723,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":724,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":725,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":726,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":727,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"INSERT","lineNumber":728,"content":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"INSERT","lineNumber":729,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"INSERT","lineNumber":730,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":731,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":732,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":733,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":734,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":735,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":736,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":737,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":738,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":739,"content":"... 25 more"},{"type":"INSERT","lineNumber":740,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":741,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":742,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":743,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":744,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":745,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":746,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":747,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":748,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":749,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":750,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":751,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":752,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":753,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":754,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":755,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":756,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":757,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":758,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":759,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":760,"content":"... 25 more"},{"type":"INSERT","lineNumber":761,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":762,"content":"... 25 more"},{"type":"INSERT","lineNumber":763,"content":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"INSERT","lineNumber":764,"content":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"INSERT","lineNumber":765,"content":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"INSERT","lineNumber":766,"content":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":767,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"INSERT","lineNumber":768,"content":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"INSERT","lineNumber":769,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"INSERT","lineNumber":770,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"INSERT","lineNumber":771,"content":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"INSERT","lineNumber":772,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"INSERT","lineNumber":773,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"INSERT","lineNumber":774,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"INSERT","lineNumber":775,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":776,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":777,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":778,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":779,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":780,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":781,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":782,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":783,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":784,"content":"... 24 more"},{"type":"INSERT","lineNumber":785,"content":""},{"type":"INSERT","lineNumber":786,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:349:13: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":787,"content":"exception:             GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":788,"content":"exception:             ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":789,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:404:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":790,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":791,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":792,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:409:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":793,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":794,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":795,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:637:143: warning: 'static field YEAR_IN_MILLIS: Long' is deprecated. Deprecated in Java."},{"type":"INSERT","lineNumber":796,"content":"exception:                                 val cursor = CalendarContract.Instances.query(contentResolver, EVENT_INSTANCE_DELETION, startDate - DateUtils.YEAR_IN_MILLIS, startDate - 1)"},{"type":"INSERT","lineNumber":797,"content":"exception:                            "}]}]},"H:/New/HabitV8/lib/services/notification_service.dart":{"filePath":"H:/New/HabitV8/lib/services/notification_service.dart","baseContent":"import 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:device_info_plus/device_info_plus.dart';\nimport 'dart:io';\n\nclass NotificationService {\n  static final FlutterLocalNotificationsPlugin _notificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  static bool _isInitialized = false;\n\n  /// Initialize the notification service\n  static Future<void> initialize() async {\n    if (_isInitialized) return;\n\n    // Android initialization settings\n    const AndroidInitializationSettings initializationSettingsAndroid =\n        AndroidInitializationSettings('@mipmap/ic_launcher');\n\n    // iOS initialization settings\n    const DarwinInitializationSettings initializationSettingsIOS =\n        DarwinInitializationSettings(\n      requestAlertPermission: true,\n      requestBadgePermission: true,\n      requestSoundPermission: true,\n    );\n\n    // Combined initialization settings\n    const InitializationSettings initializationSettings =\n        InitializationSettings(\n      android: initializationSettingsAndroid,\n      iOS: initializationSettingsIOS,\n    );\n\n    // Initialize the plugin\n    await _notificationsPlugin.initialize(\n      initializationSettings,\n      onDidReceiveNotificationResponse: _onNotificationTapped,\n    );\n\n    // Request permissions for Android 13+\n    if (Platform.isAndroid) {\n      await _requestAndroidPermissions();\n    }\n\n    _isInitialized = true;\n  }\n\n  /// Check if device is running Android 12+ (API level 31+)\n  static Future<bool> _isAndroid12Plus() async {\n    if (!Platform.isAndroid) return false;\n\n    try {\n      final DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();\n      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;\n      return androidInfo.version.sdkInt >= 31; // Android 12 = API 31\n    } catch (e) {\n      print('Error checking Android version: $e');\n      return false; // Assume older version if error\n    }\n  }\n\n  /// Request Android notification permissions with enhanced exact alarm handling\n  static Future<void> _requestAndroidPermissions() async {\n    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n        _notificationsPlugin.resolvePlatformSpecificImplementation<\n            AndroidFlutterLocalNotificationsPlugin>();\n\n    if (androidImplementation != null) {\n      // Request notification permission\n      await androidImplementation.requestNotificationsPermission();\n\n      // Check if we're on Android 12+ and handle exact alarms accordingly\n      final bool isAndroid12Plus = await _isAndroid12Plus();\n\n      if (isAndroid12Plus) {\n        print('Android 12+ detected - requesting exact alarm permissions');\n\n        // Request exact alarms permission (Android 12+)\n        try {\n          final bool? exactAlarmPermission =\n              await androidImplementation.requestExactAlarmsPermission();\n          print('Exact alarm permission granted: $exactAlarmPermission');\n\n          if (exactAlarmPermission != true) {\n            print(\n                'WARNING: Exact alarm permission not granted. Scheduled notifications may not work on Android 12+');\n            print(\n                'User may need to manually enable \"Alarms & reminders\" in app settings');\n          }\n        } catch (e) {\n          print('Error requesting exact alarm permission: $e');\n        }\n      } else {\n        print('Android 11 or below detected - exact alarm permissions not required');\n      }\n    }\n  }\n\n  /// Handle notification tap\n  static void _onNotificationTapped(NotificationResponse notificationResponse) {\n    final String? payload = notificationResponse.payload;\n    if (payload != null) {\n      print('Notification tapped with payload: $payload');\n      // Handle navigation or actions based on payload\n    }\n  }\n\n  /// Show an immediate notification\n  static Future<void> showNotification({\n    required int id,\n    required String title,\n    required String body,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_channel',\n      'Habit Notifications',\n      channelDescription: 'Notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n      showWhen: false,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    await _notificationsPlugin.show(\n      id,\n      title,\n      body,\n      platformChannelSpecifics,\n      payload: payload,\n    );\n  }\n\n  /// Schedule a notification for a specific time using device local time\n  static Future<void> scheduleNotification({\n    required int id,\n    required String title,\n    required String body,\n    required DateTime scheduledTime,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_scheduled_channel',\n      'Scheduled Habit Notifications',\n      channelDescription: 'Scheduled notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    // Simple and reliable timezone conversion\n    final deviceNow = DateTime.now();\n    final localScheduledTime = scheduledTime.toLocal();\n\n    print('Device current time: $deviceNow');\n    print('Target scheduled time: $localScheduledTime');\n    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');\n\n    // Create TZDateTime directly from the local scheduled time\n    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);\n\n    print('TZ Scheduled time: $tzScheduledTime');\n    print('TZ Local timezone: ${tz.local.name}');\n\n    await _notificationsPlugin.zonedSchedule(\n      id,\n      title,\n      body,\n      tzScheduledTime,\n      platformChannelSpecifics,\n      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n      payload: payload,\n    );\n  }\n\n  /// Schedule daily recurring notifications\n  static Future<void> scheduleDailyNotification({\n    required int id,\n    required String title,\n    required String body,\n    required int hour,\n    required int minute,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_daily_channel',\n      'Daily Habit Notifications',\n      channelDescription: 'Daily recurring notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\n    tz.TZDateTime scheduledDate = tz.TZDateTime(\n      tz.local,\n      now.year,\n      now.month,\n      now.day,\n      hour,\n      minute,\n    );\n\n    // If the scheduled time is in the past, schedule for tomorrow\n    if (scheduledDate.isBefore(now)) {\n      scheduledDate = scheduledDate.add(const Duration(days: 1));\n    }\n\n    await _notificationsPlugin.zonedSchedule(\n      id,\n      title,\n      body,\n      scheduledDate,\n      platformChannelSpecifics,\n      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n      matchDateTimeComponents: DateTimeComponents.time,\n      payload: payload,\n    );\n  }\n\n  /// Cancel a specific notification\n  static Future<void> cancelNotification(int id) async {\n    await _notificationsPlugin.cancel(id);\n  }\n\n  /// Cancel all notifications\n  static Future<void> cancelAllNotifications() async {\n    await _notificationsPlugin.cancelAll();\n  }\n\n  /// Get pending notifications\n  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {\n    return await _notificationsPlugin.pendingNotificationRequests();\n  }\n\n  /// Check if notifications are enabled\n  static Future<bool> areNotificationsEnabled() async {\n    if (Platform.isAndroid) {\n      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n          _notificationsPlugin.resolvePlatformSpecificImplementation<\n              AndroidFlutterLocalNotificationsPlugin>();\n\n      if (androidImplementation != null) {\n        return await androidImplementation.areNotificationsEnabled() ?? false;\n      }\n    }\n\n    // For iOS, we assume they're enabled if the user granted permission\n    return true;\n  }\n\n  /// Test notification - useful for debugging\n  static Future<void> showTestNotification() async {\n    await showNotification(\n      id: 999,\n      title: '🎯 Test Notification',\n      body: 'This is a test notification to verify the system is working!',\n      payload: 'test_notification',\n    );\n  }\n\n  /// Schedule a habit reminder notification\n  static Future<void> scheduleHabitReminder({\n    required int habitId,\n    required String habitName,\n    required DateTime reminderTime,\n  }) async {\n    await scheduleNotification(\n      id: habitId,\n      title: '🎯 Habit Reminder',\n      body: 'Time to complete: $habitName',\n      scheduledTime: reminderTime,\n      payload: 'habit_reminder_$habitId',\n    );\n  }\n\n  /// Schedule a daily habit reminder\n  static Future<void> scheduleDailyHabitReminder({\n    required int habitId,\n    required String habitName,\n    required int hour,\n    required int minute,\n  }) async {\n    await scheduleDailyNotification(\n      id: habitId,\n      title: '🎯 Daily Habit Reminder',\n      body: 'Don\\'t forget: $habitName',\n      hour: hour,\n      minute: minute,\n      payload: 'daily_habit_$habitId',\n    );\n  }\n\n  /// Debug method to check exact alarm permissions and timezone\n  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {\n    final Map<String, dynamic> debugInfo = {};\n\n    if (Platform.isAndroid) {\n      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n          _notificationsPlugin.resolvePlatformSpecificImplementation<\n              AndroidFlutterLocalNotificationsPlugin>();\n\n      if (androidImplementation != null) {\n        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();\n      }\n    }\n\n    // Get device's actual local timezone instead of hardcoded one\n    final now = DateTime.now();\n    final tzNow = tz.TZDateTime.now(tz.local);\n\n    debugInfo['deviceLocalTime'] = now.toString();\n    debugInfo['tzLocalTime'] = tzNow.toString();\n    debugInfo['timezone'] = tz.local.name;\n    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;\n    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();\n\n    // Test scheduled time (10 seconds from now)\n    final testTime = now.add(const Duration(seconds: 10));\n    debugInfo['testScheduledTime'] = testTime.toString();\n\n    return debugInfo;\n  }\n\n  /// Enhanced test method for scheduled notifications with logging\n  static Future<void> testScheduledNotification() async {\n    print('=== Testing Scheduled Notification ===');\n\n    final debugInfo = await getSchedulingDebugInfo();\n    print('Debug Info: $debugInfo');\n\n    final now = tz.TZDateTime.now(tz.local);\n    final scheduledTime = now.add(const Duration(seconds: 10)); // Changed to 10 seconds for more time\n\n    print('Current time: $now');\n    print('Scheduled time: $scheduledTime');\n    print('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');\n\n    try {\n      await scheduleNotification(\n        id: 1001,\n        title: '🔔 Debug Scheduled Test',\n        body: 'This notification was scheduled at ${now.toString().substring(11, 19)}',\n        scheduledTime: scheduledTime.toLocal(),\n        payload: 'debug_scheduled_test',\n      );\n      print('Scheduled notification successfully queued');\n\n      // Check if it was actually scheduled\n      final pending = await getPendingNotifications();\n      print('Pending notifications: ${pending.length}');\n      for (var notification in pending) {\n        print('- ID: ${notification.id}, Title: ${notification.title}');\n      }\n    } catch (e) {\n      print('Error scheduling notification: $e');\n    }\n  }\n}\n","baseTimestamp":1754377633656,"deltas":[{"timestamp":1754378034309,"changes":[{"type":"MODIFY","lineNumber":4,"content":"","oldContent":""},{"type":"INSERT","lineNumber":62,"content":"  /// Check if device is running Android 12+ (API level 31+) - public version"},{"type":"INSERT","lineNumber":63,"content":"  static Future<bool> isAndroid12Plus() async {"},{"type":"INSERT","lineNumber":64,"content":"    return await _isAndroid12Plus();"},{"type":"INSERT","lineNumber":65,"content":"  }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":69,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":70,"oldContent":"    if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":73,"content":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":74,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":76,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":79,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":81,"oldContent":"    );"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"    await _notificationsPlugin.show("},{"type":"DELETE","lineNumber":89,"oldContent":"      id,"},{"type":"DELETE","lineNumber":91,"oldContent":"      title,"},{"type":"DELETE","lineNumber":94,"oldContent":"      body,"},{"type":"DELETE","lineNumber":96,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":99,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":101,"oldContent":"    );"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":"  /// Schedule a notification for a specific time using device local time"},{"type":"DELETE","lineNumber":108,"oldContent":"  static Future<void> scheduleNotification({"},{"type":"DELETE","lineNumber":111,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":113,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":116,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":118,"oldContent":"    required DateTime scheduledTime,"},{"type":"DELETE","lineNumber":121,"oldContent":"    String? payload,"},{"type":"DELETE","lineNumber":123,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":126,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":128,"oldContent":""},{"type":"DELETE","lineNumber":130,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":132,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":135,"oldContent":"      'habit_scheduled_channel',"},{"type":"DELETE","lineNumber":137,"oldContent":"      'Scheduled Habit Notifications',"},{"type":"DELETE","lineNumber":140,"oldContent":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"DELETE","lineNumber":142,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":145,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":147,"oldContent":"    );"},{"type":"DELETE","lineNumber":151,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"    // Simple and reliable timezone conversion"},{"type":"DELETE","lineNumber":160,"oldContent":"    final deviceNow = DateTime.now();"},{"type":"DELETE","lineNumber":162,"oldContent":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"DELETE","lineNumber":165,"oldContent":"    print('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":132,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":133,"content":"        DarwinNotificationDetails();"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":136,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":137,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":138,"content":"    );"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"INSERT","lineNumber":140,"content":"    await _notificationsPlugin.show("},{"type":"INSERT","lineNumber":141,"content":"      id,"},{"type":"INSERT","lineNumber":142,"content":"      title,"},{"type":"INSERT","lineNumber":143,"content":"      body,"},{"type":"INSERT","lineNumber":144,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":145,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":146,"content":"    );"},{"type":"INSERT","lineNumber":147,"content":"  }"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"  /// Schedule a notification for a specific time using device local time"},{"type":"INSERT","lineNumber":150,"content":"  static Future<void> scheduleNotification({"},{"type":"INSERT","lineNumber":151,"content":"    required int id,"},{"type":"INSERT","lineNumber":152,"content":"    required String title,"},{"type":"INSERT","lineNumber":153,"content":"    required String body,"},{"type":"INSERT","lineNumber":154,"content":"    required DateTime scheduledTime,"},{"type":"INSERT","lineNumber":155,"content":"    String? payload,"},{"type":"INSERT","lineNumber":156,"content":"  }) async {"},{"type":"INSERT","lineNumber":157,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":160,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":161,"content":"      'habit_scheduled_channel',"},{"type":"INSERT","lineNumber":162,"content":"      'Scheduled Habit Notifications',"},{"type":"INSERT","lineNumber":163,"content":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"INSERT","lineNumber":164,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":165,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":166,"content":"    );"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"INSERT","lineNumber":168,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":169,"content":"        DarwinNotificationDetails();"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":172,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":173,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":174,"content":"    );"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"    // Simple and reliable timezone conversion"},{"type":"INSERT","lineNumber":177,"content":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":178,"content":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"INSERT","lineNumber":179,"content":""},{"type":"INSERT","lineNumber":180,"content":"    print('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":177,"oldContent":"  }"},{"type":"INSERT","lineNumber":191,"content":"      id,"},{"type":"INSERT","lineNumber":192,"content":"      title,"},{"type":"INSERT","lineNumber":193,"content":"      body,"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"DELETE","lineNumber":191,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":193,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":195,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":197,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":198,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":200,"oldContent":"    );"},{"type":"DELETE","lineNumber":203,"oldContent":""},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":214,"oldContent":"      id,"},{"type":"DELETE","lineNumber":216,"oldContent":"      title,"},{"type":"DELETE","lineNumber":218,"oldContent":"      body,"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"INSERT","lineNumber":251,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":256,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":257,"content":"    );"},{"type":"INSERT","lineNumber":263,"content":"  }"},{"type":"DELETE","lineNumber":257,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":261,"oldContent":"      payload: payload,"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"DELETE","lineNumber":263,"oldContent":"    );"},{"type":"DELETE","lineNumber":267,"oldContent":"  }"},{"type":"DELETE","lineNumber":273,"oldContent":""},{"type":"DELETE","lineNumber":340,"oldContent":"      }"},{"type":"DELETE","lineNumber":342,"oldContent":"    }"},{"type":"DELETE","lineNumber":344,"oldContent":""},{"type":"DELETE","lineNumber":346,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":349,"content":"      }"},{"type":"INSERT","lineNumber":350,"content":"    }"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"INSERT","lineNumber":352,"content":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":419,"content":"          final bool? canSchedule = await androidImplementation.canScheduleExactNotifications();"},{"type":"INSERT","lineNumber":420,"content":"          print('Can schedule exact alarms: $canSchedule');"},{"type":"INSERT","lineNumber":421,"content":"          return canSchedule ?? false;"},{"type":"INSERT","lineNumber":422,"content":"        } else {"},{"type":"INSERT","lineNumber":423,"content":"          // Android 11 and below don't need exact alarm permission"},{"type":"INSERT","lineNumber":424,"content":"          return true;"},{"type":"INSERT","lineNumber":425,"content":"        }"},{"type":"INSERT","lineNumber":426,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":427,"content":"        print('Error checking exact alarm permission: $e');"},{"type":"INSERT","lineNumber":428,"content":"        return false;"},{"type":"DELETE","lineNumber":416,"oldContent":"          final bool? canSchedule = await androidImplementation.canScheduleExactNotifications();"},{"type":"DELETE","lineNumber":419,"oldContent":"          print('Can schedule exact alarms: $canSchedule');"},{"type":"DELETE","lineNumber":422,"oldContent":"          return canSchedule ?? false;"},{"type":"DELETE","lineNumber":425,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":428,"oldContent":"          // Android 11 and below don't need exact alarm permission"},{"type":"DELETE","lineNumber":431,"oldContent":"          return true;"},{"type":"DELETE","lineNumber":434,"oldContent":"        }"},{"type":"DELETE","lineNumber":437,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":440,"oldContent":"        print('Error checking exact alarm permission: $e');"},{"type":"DELETE","lineNumber":442,"oldContent":"        return false;"},{"type":"DELETE","lineNumber":444,"oldContent":""},{"type":"DELETE","lineNumber":446,"oldContent":"}"},{"type":"INSERT","lineNumber":451,"content":"}"},{"type":"INSERT","lineNumber":452,"content":""}]},{"timestamp":1754378120516,"changes":[{"type":"INSERT","lineNumber":3,"content":"import 'dart:io';"},{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":"  /// Request Android notification permissions with enhanced exact alarm handling"},{"type":"DELETE","lineNumber":65,"oldContent":"  static Future<void> _requestAndroidPermissions() async {"},{"type":"MODIFY","lineNumber":67,"content":"  /// Request Android notification permissions with enhanced exact alarm handling","oldContent":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":68,"content":"  static Future<void> _requestAndroidPermissions() async {"},{"type":"INSERT","lineNumber":69,"content":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"MODIFY","lineNumber":74,"content":"      // Request notification permission","oldContent":"      // Request notification permission"},{"type":"INSERT","lineNumber":110,"content":"    }"},{"type":"INSERT","lineNumber":111,"content":"  }"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"  /// Show an immediate notification"},{"type":"INSERT","lineNumber":114,"content":"  static Future<void> showNotification({"},{"type":"INSERT","lineNumber":115,"content":"    required int id,"},{"type":"INSERT","lineNumber":116,"content":"    required String title,"},{"type":"INSERT","lineNumber":117,"content":"    required String body,"},{"type":"INSERT","lineNumber":118,"content":"    String? payload,"},{"type":"INSERT","lineNumber":119,"content":"  }) async {"},{"type":"INSERT","lineNumber":120,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":123,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":124,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":125,"content":"      'Habit Notifications',"},{"type":"INSERT","lineNumber":126,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":127,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":128,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":129,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":130,"content":"    );"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":"    }"},{"type":"DELETE","lineNumber":114,"oldContent":"  }"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"DELETE","lineNumber":120,"oldContent":"  /// Show an immediate notification"},{"type":"DELETE","lineNumber":122,"oldContent":"  static Future<void> showNotification({"},{"type":"DELETE","lineNumber":125,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":128,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":130,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":133,"oldContent":"    String? payload,"},{"type":"DELETE","lineNumber":136,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":138,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":146,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":148,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":150,"oldContent":"      'Habit Notifications',"},{"type":"DELETE","lineNumber":153,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":155,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":158,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":161,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":163,"oldContent":"    );"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"DELETE","lineNumber":168,"oldContent":"    print('Target scheduled time: $localScheduledTime');"},{"type":"DELETE","lineNumber":170,"oldContent":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":174,"oldContent":"    // Create TZDateTime directly from the local scheduled time"},{"type":"DELETE","lineNumber":176,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"DELETE","lineNumber":178,"oldContent":""},{"type":"DELETE","lineNumber":180,"oldContent":"    print('TZ Scheduled time: $tzScheduledTime');"},{"type":"DELETE","lineNumber":182,"oldContent":"    print('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":184,"oldContent":""},{"type":"DELETE","lineNumber":186,"oldContent":"    await _notificationsPlugin.zonedSchedule("},{"type":"DELETE","lineNumber":189,"oldContent":"      tzScheduledTime,"},{"type":"DELETE","lineNumber":191,"oldContent":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":181,"content":"    print('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":182,"content":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"    // Create TZDateTime directly from the local scheduled time"},{"type":"INSERT","lineNumber":185,"content":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":186,"content":""},{"type":"INSERT","lineNumber":187,"content":"    print('TZ Scheduled time: $tzScheduledTime');"},{"type":"INSERT","lineNumber":188,"content":"    print('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"    await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":191,"content":"      id,"},{"type":"INSERT","lineNumber":192,"content":"      title,"},{"type":"INSERT","lineNumber":193,"content":"      body,"},{"type":"INSERT","lineNumber":194,"content":"      tzScheduledTime,"},{"type":"INSERT","lineNumber":195,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"DELETE","lineNumber":204,"oldContent":"      id,"},{"type":"DELETE","lineNumber":205,"oldContent":"      title,"},{"type":"DELETE","lineNumber":207,"oldContent":"      body,"},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"INSERT","lineNumber":251,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":256,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":257,"content":"    );"},{"type":"DELETE","lineNumber":256,"oldContent":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":263,"content":"  }"},{"type":"DELETE","lineNumber":262,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":264,"oldContent":"    );"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"DELETE","lineNumber":269,"oldContent":"  }"},{"type":"DELETE","lineNumber":274,"oldContent":""},{"type":"MODIFY","lineNumber":344,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":349,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":351,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":352,"content":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":353,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":354,"content":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":356,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"MODIFY","lineNumber":416,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":419,"oldContent":"      }"},{"type":"DELETE","lineNumber":420,"oldContent":"    }"},{"type":"DELETE","lineNumber":421,"oldContent":"    return false;"},{"type":"DELETE","lineNumber":422,"oldContent":"  }"},{"type":"DELETE","lineNumber":425,"oldContent":""},{"type":"DELETE","lineNumber":427,"oldContent":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"DELETE","lineNumber":430,"oldContent":"  static Future<void> openExactAlarmSettings() async {"},{"type":"DELETE","lineNumber":432,"oldContent":"    if (!Platform.isAndroid) return;"},{"type":"DELETE","lineNumber":435,"oldContent":""},{"type":"DELETE","lineNumber":437,"oldContent":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":429,"content":"      }"},{"type":"INSERT","lineNumber":430,"content":"    }"},{"type":"INSERT","lineNumber":431,"content":"    return false;"},{"type":"INSERT","lineNumber":432,"content":"  }"},{"type":"INSERT","lineNumber":433,"content":""},{"type":"INSERT","lineNumber":434,"content":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"INSERT","lineNumber":435,"content":"  static Future<void> openExactAlarmSettings() async {"},{"type":"INSERT","lineNumber":436,"content":"    if (!Platform.isAndroid) return;"},{"type":"INSERT","lineNumber":437,"content":""},{"type":"INSERT","lineNumber":438,"content":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"MODIFY","lineNumber":452,"content":"","oldContent":""}]},{"timestamp":1754378367026,"changes":[{"type":"INSERT","lineNumber":65,"content":"  }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"DELETE","lineNumber":67,"oldContent":"  }"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":74,"oldContent":"      // Request notification permission"},{"type":"DELETE","lineNumber":111,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":113,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":121,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":124,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":126,"oldContent":"    );"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"    await _notificationsPlugin.show("},{"type":"DELETE","lineNumber":134,"oldContent":"      id,"},{"type":"DELETE","lineNumber":137,"oldContent":"      title,"},{"type":"DELETE","lineNumber":139,"oldContent":"      body,"},{"type":"DELETE","lineNumber":142,"oldContent":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":132,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":133,"content":"        DarwinNotificationDetails();"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":136,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":137,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":138,"content":"    );"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"INSERT","lineNumber":140,"content":"    await _notificationsPlugin.show("},{"type":"INSERT","lineNumber":141,"content":"      id,"},{"type":"INSERT","lineNumber":142,"content":"      title,"},{"type":"INSERT","lineNumber":143,"content":"      body,"},{"type":"INSERT","lineNumber":144,"content":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":174,"oldContent":"    print('Target scheduled time: $localScheduledTime');"},{"type":"MODIFY","lineNumber":176,"content":"    // Simple and reliable timezone conversion","oldContent":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":177,"content":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":178,"content":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"INSERT","lineNumber":180,"content":"    print('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":181,"content":"    print('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":182,"content":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"DELETE","lineNumber":181,"oldContent":"    // Simple and reliable timezone conversion"},{"type":"DELETE","lineNumber":184,"oldContent":"    final deviceNow = DateTime.now();"},{"type":"DELETE","lineNumber":186,"oldContent":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":192,"oldContent":"    print('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":194,"oldContent":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"MODIFY","lineNumber":196,"content":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,","oldContent":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":197,"content":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":256,"oldContent":"  }"},{"type":"INSERT","lineNumber":258,"content":"  }"},{"type":"MODIFY","lineNumber":264,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":270,"content":"  /// Get pending notifications","oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":350,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"MODIFY","lineNumber":352,"content":"    // Get device's actual local timezone instead of hardcoded one","oldContent":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":353,"content":"    final now = DateTime.now();"},{"type":"MODIFY","lineNumber":369,"content":"  /// Enhanced test method for scheduled notifications with comprehensive logging","oldContent":"  /// Enhanced test method for scheduled notifications with logging"},{"type":"INSERT","lineNumber":376,"content":"    // Check if exact alarms are enabled"},{"type":"INSERT","lineNumber":377,"content":"    final canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":378,"content":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"INSERT","lineNumber":379,"content":""},{"type":"INSERT","lineNumber":380,"content":"    if (!canScheduleExact) {"},{"type":"INSERT","lineNumber":381,"content":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"INSERT","lineNumber":382,"content":"      return;"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":384,"content":""},{"type":"DELETE","lineNumber":377,"oldContent":"    final scheduledTime = now.add(const Duration(seconds: 10)); // Changed to 10 seconds for more time"},{"type":"INSERT","lineNumber":386,"content":"    final scheduledTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":393,"content":"      // Cancel any existing test notifications first"},{"type":"INSERT","lineNumber":394,"content":"      await cancelNotification(1001);"},{"type":"INSERT","lineNumber":395,"content":"      print('Cancelled any existing test notifications');"},{"type":"INSERT","lineNumber":396,"content":""},{"type":"DELETE","lineNumber":387,"oldContent":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)}',"},{"type":"INSERT","lineNumber":400,"content":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"INSERT","lineNumber":412,"content":""},{"type":"INSERT","lineNumber":413,"content":"      // Add a verification step"},{"type":"INSERT","lineNumber":414,"content":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"INSERT","lineNumber":415,"content":"      print('Watch your device for the notification!');"},{"type":"INSERT","lineNumber":416,"content":"      "},{"type":"INSERT","lineNumber":419,"content":"      print('Stack trace: ${StackTrace.current}');"},{"type":"DELETE","lineNumber":423,"oldContent":"      }"},{"type":"INSERT","lineNumber":443,"content":"          return true;"},{"type":"INSERT","lineNumber":444,"content":"        }"},{"type":"INSERT","lineNumber":445,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":446,"content":"        print('Error checking exact alarm permission: $e');"},{"type":"INSERT","lineNumber":447,"content":"        return false;"},{"type":"INSERT","lineNumber":448,"content":"      }"},{"type":"DELETE","lineNumber":427,"oldContent":"          return true;"},{"type":"DELETE","lineNumber":430,"oldContent":"        }"},{"type":"DELETE","lineNumber":432,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":435,"oldContent":"        print('Error checking exact alarm permission: $e');"},{"type":"DELETE","lineNumber":438,"oldContent":"        return false;"},{"type":"INSERT","lineNumber":470,"content":"}"},{"type":"DELETE","lineNumber":452,"oldContent":""}]},{"timestamp":1754378379418,"changes":[{"type":"MODIFY","lineNumber":67,"content":"  /// Request Android notification permissions with enhanced exact alarm handling","oldContent":"  /// Request Android notification permissions with enhanced exact alarm handling"},{"type":"INSERT","lineNumber":124,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":125,"content":"      'Habit Notifications',"},{"type":"INSERT","lineNumber":126,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":127,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":128,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":129,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":130,"content":"    );"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"DELETE","lineNumber":126,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":129,"oldContent":"      'Habit Notifications',"},{"type":"DELETE","lineNumber":131,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":134,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":137,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":139,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":142,"oldContent":"    );"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"INSERT","lineNumber":175,"content":""},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":180,"oldContent":"    // Create TZDateTime directly from the local scheduled time"},{"type":"DELETE","lineNumber":182,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":184,"content":"    // Create TZDateTime directly from the local scheduled time"},{"type":"INSERT","lineNumber":185,"content":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":195,"content":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":197,"oldContent":"      platformChannelSpecifics,"},{"type":"MODIFY","lineNumber":258,"content":"  }","oldContent":"  }"},{"type":"INSERT","lineNumber":263,"content":"  }"},{"type":"DELETE","lineNumber":264,"oldContent":""},{"type":"INSERT","lineNumber":269,"content":""},{"type":"DELETE","lineNumber":270,"oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"DELETE","lineNumber":353,"oldContent":""},{"type":"DELETE","lineNumber":377,"oldContent":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":380,"content":"    if (!canScheduleExact) {"},{"type":"INSERT","lineNumber":381,"content":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"INSERT","lineNumber":382,"content":"      return;"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":385,"content":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":386,"content":"    final scheduledTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":387,"content":""},{"type":"DELETE","lineNumber":383,"oldContent":"    if (!canScheduleExact) {"},{"type":"DELETE","lineNumber":385,"oldContent":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"DELETE","lineNumber":387,"oldContent":"      return;"},{"type":"DELETE","lineNumber":389,"oldContent":"    }"},{"type":"INSERT","lineNumber":393,"content":"      // Cancel any existing test notifications first"},{"type":"INSERT","lineNumber":394,"content":"      await cancelNotification(1001);"},{"type":"INSERT","lineNumber":395,"content":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":394,"oldContent":"    final scheduledTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":400,"content":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"DELETE","lineNumber":401,"oldContent":"      // Cancel any existing test notifications first"},{"type":"DELETE","lineNumber":403,"oldContent":"      await cancelNotification(1001);"},{"type":"DELETE","lineNumber":405,"oldContent":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":407,"oldContent":""},{"type":"INSERT","lineNumber":412,"content":""},{"type":"INSERT","lineNumber":413,"content":"      // Add a verification step"},{"type":"INSERT","lineNumber":414,"content":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"INSERT","lineNumber":415,"content":"      print('Watch your device for the notification!');"},{"type":"INSERT","lineNumber":416,"content":""},{"type":"DELETE","lineNumber":412,"oldContent":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"INSERT","lineNumber":419,"content":"      print('Stack trace: ${StackTrace.current}');"},{"type":"DELETE","lineNumber":425,"oldContent":""},{"type":"DELETE","lineNumber":427,"oldContent":"      // Add a verification step"},{"type":"DELETE","lineNumber":429,"oldContent":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"DELETE","lineNumber":431,"oldContent":"      print('Watch your device for the notification!');"},{"type":"DELETE","lineNumber":433,"oldContent":"      "},{"type":"DELETE","lineNumber":437,"oldContent":"      print('Stack trace: ${StackTrace.current}');"},{"type":"INSERT","lineNumber":443,"content":"          return true;"},{"type":"INSERT","lineNumber":444,"content":"        }"},{"type":"INSERT","lineNumber":445,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":446,"content":"        print('Error checking exact alarm permission: $e');"},{"type":"INSERT","lineNumber":447,"content":"        return false;"},{"type":"INSERT","lineNumber":448,"content":"      }"},{"type":"DELETE","lineNumber":456,"oldContent":"          return true;"},{"type":"DELETE","lineNumber":458,"oldContent":"        }"},{"type":"DELETE","lineNumber":460,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":462,"oldContent":"        print('Error checking exact alarm permission: $e');"},{"type":"DELETE","lineNumber":464,"oldContent":"        return false;"},{"type":"DELETE","lineNumber":467,"oldContent":"      }"},{"type":"MODIFY","lineNumber":471,"content":"","oldContent":""}]},{"timestamp":1754379465023,"changes":[{"type":"INSERT","lineNumber":66,"content":""},{"type":"DELETE","lineNumber":67,"oldContent":"  /// Request Android notification permissions with enhanced exact alarm handling"},{"type":"DELETE","lineNumber":125,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":127,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":135,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":132,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":133,"content":"        DarwinNotificationDetails();"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":136,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":182,"oldContent":"    // Create TZDateTime directly from the local scheduled time"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"    // Create TZDateTime directly from the local scheduled time"},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"INSERT","lineNumber":257,"content":"    );"},{"type":"DELETE","lineNumber":258,"oldContent":"  }"},{"type":"MODIFY","lineNumber":380,"content":"    if (!canScheduleExact) {","oldContent":"    if (!canScheduleExact) {"},{"type":"DELETE","lineNumber":382,"oldContent":""},{"type":"DELETE","lineNumber":384,"oldContent":"    print('Current time: $now');"},{"type":"DELETE","lineNumber":386,"oldContent":"    print('Scheduled time: $scheduledTime');"},{"type":"INSERT","lineNumber":384,"content":""},{"type":"INSERT","lineNumber":387,"content":""},{"type":"INSERT","lineNumber":388,"content":"    print('Current time: $now');"},{"type":"INSERT","lineNumber":389,"content":"    print('Scheduled time: $scheduledTime');"},{"type":"DELETE","lineNumber":391,"oldContent":""},{"type":"DELETE","lineNumber":393,"oldContent":""},{"type":"DELETE","lineNumber":394,"oldContent":"      await scheduleNotification("},{"type":"MODIFY","lineNumber":396,"content":"","oldContent":"        id: 1001,"},{"type":"INSERT","lineNumber":397,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":398,"content":"        id: 1001,"},{"type":"INSERT","lineNumber":400,"content":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"DELETE","lineNumber":404,"oldContent":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"DELETE","lineNumber":412,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":415,"oldContent":"      print('Error scheduling notification: $e');"},{"type":"DELETE","lineNumber":417,"oldContent":"    }"},{"type":"INSERT","lineNumber":416,"content":"      "},{"type":"INSERT","lineNumber":417,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":418,"content":"      print('Error scheduling notification: $e');"},{"type":"INSERT","lineNumber":419,"content":"      print('Stack trace: ${StackTrace.current}');"},{"type":"INSERT","lineNumber":420,"content":"    }"},{"type":"DELETE","lineNumber":421,"oldContent":""},{"type":"DELETE","lineNumber":424,"oldContent":"      print('Stack trace: ${StackTrace.current}');"},{"type":"DELETE","lineNumber":444,"oldContent":"    }"},{"type":"DELETE","lineNumber":446,"oldContent":"    return false;"},{"type":"DELETE","lineNumber":448,"oldContent":"  }"},{"type":"DELETE","lineNumber":450,"oldContent":""},{"type":"DELETE","lineNumber":452,"oldContent":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"INSERT","lineNumber":449,"content":"    }"},{"type":"INSERT","lineNumber":450,"content":"    return false;"},{"type":"INSERT","lineNumber":451,"content":"  }"},{"type":"INSERT","lineNumber":452,"content":""},{"type":"INSERT","lineNumber":453,"content":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"INSERT","lineNumber":470,"content":"}"},{"type":"DELETE","lineNumber":471,"oldContent":""}]},{"timestamp":1754438353444,"changes":[{"type":"INSERT","lineNumber":4,"content":"import 'dart:convert';"},{"type":"INSERT","lineNumber":5,"content":"import '../data/habit_repository.dart';"},{"type":"INSERT","lineNumber":6,"content":"import 'logging_service.dart';"},{"type":"INSERT","lineNumber":14,"content":"  // Callback for handling notification actions"},{"type":"INSERT","lineNumber":15,"content":"  static Function(String habitId, String action)? onNotificationAction;"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"DELETE","lineNumber":104,"oldContent":"  /// Handle notification tap"},{"type":"INSERT","lineNumber":110,"content":"  /// Handle notification tap and actions"},{"type":"DELETE","lineNumber":108,"oldContent":"      print('Notification tapped with payload: $payload');"},{"type":"DELETE","lineNumber":109,"oldContent":"      // Handle navigation or actions based on payload"},{"type":"INSERT","lineNumber":114,"content":"      AppLogger.info('Notification tapped with payload: $payload');"},{"type":"INSERT","lineNumber":115,"content":"      "},{"type":"INSERT","lineNumber":116,"content":"      try {"},{"type":"INSERT","lineNumber":117,"content":"        final Map<String, dynamic> data = jsonDecode(payload);"},{"type":"INSERT","lineNumber":118,"content":"        final String? habitId = data['habitId'];"},{"type":"INSERT","lineNumber":119,"content":"        final String? action = notificationResponse.actionId;"},{"type":"INSERT","lineNumber":120,"content":"        "},{"type":"INSERT","lineNumber":121,"content":"        if (habitId != null && action != null) {"},{"type":"INSERT","lineNumber":122,"content":"          // Handle the action"},{"type":"INSERT","lineNumber":123,"content":"          _handleNotificationAction(habitId, action);"},{"type":"INSERT","lineNumber":124,"content":"        }"},{"type":"INSERT","lineNumber":125,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":126,"content":"        AppLogger.error('Error parsing notification payload', e);"},{"type":"INSERT","lineNumber":127,"content":"      }"},{"type":"INSERT","lineNumber":131,"content":"  /// Handle notification actions (Complete/Snooze)"},{"type":"INSERT","lineNumber":132,"content":"  static void _handleNotificationAction(String habitId, String action) {"},{"type":"INSERT","lineNumber":133,"content":"    switch (action) {"},{"type":"INSERT","lineNumber":134,"content":"      case 'complete':"},{"type":"INSERT","lineNumber":135,"content":"        onNotificationAction?.call(habitId, 'complete');"},{"type":"INSERT","lineNumber":136,"content":"        break;"},{"type":"INSERT","lineNumber":137,"content":"      case 'snooze':"},{"type":"INSERT","lineNumber":138,"content":"        onNotificationAction?.call(habitId, 'snooze');"},{"type":"INSERT","lineNumber":139,"content":"        break;"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"INSERT","lineNumber":141,"content":"  }"},{"type":"INSERT","lineNumber":142,"content":""},{"type":"INSERT","lineNumber":159,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":160,"content":"    );"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"DELETE","lineNumber":131,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":133,"oldContent":"    );"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"INSERT","lineNumber":213,"content":""},{"type":"DELETE","lineNumber":301,"oldContent":"  /// Schedule a habit reminder notification"},{"type":"DELETE","lineNumber":302,"oldContent":"  static Future<void> scheduleHabitReminder({"},{"type":"DELETE","lineNumber":303,"oldContent":"    required int habitId,"},{"type":"DELETE","lineNumber":304,"oldContent":"    required String habitName,"},{"type":"DELETE","lineNumber":305,"oldContent":"    required DateTime reminderTime,"},{"type":"INSERT","lineNumber":331,"content":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"INSERT","lineNumber":332,"content":"  static Future<void> showHabitNotification({"},{"type":"INSERT","lineNumber":333,"content":"    required int id,"},{"type":"INSERT","lineNumber":334,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":335,"content":"    required String title,"},{"type":"INSERT","lineNumber":336,"content":"    required String body,"},{"type":"DELETE","lineNumber":307,"oldContent":"    await scheduleNotification("},{"type":"DELETE","lineNumber":308,"oldContent":"      id: habitId,"},{"type":"DELETE","lineNumber":309,"oldContent":"      title: '🎯 Habit Reminder',"},{"type":"DELETE","lineNumber":310,"oldContent":"      body: 'Time to complete: $habitName',"},{"type":"DELETE","lineNumber":311,"oldContent":"      scheduledTime: reminderTime,"},{"type":"DELETE","lineNumber":312,"oldContent":"      payload: 'habit_reminder_$habitId',"},{"type":"INSERT","lineNumber":338,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":339,"content":""},{"type":"INSERT","lineNumber":340,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":341,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":342,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":343,"content":"      'Habit Notifications',"},{"type":"INSERT","lineNumber":344,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":345,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":346,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":347,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":348,"content":"      actions: ["},{"type":"INSERT","lineNumber":349,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":350,"content":"          'complete',"},{"type":"INSERT","lineNumber":351,"content":"          'Complete',"},{"type":"INSERT","lineNumber":352,"content":"          icon: DrawableResourceAndroidBitmap('ic_check'),"},{"type":"INSERT","lineNumber":353,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":354,"content":"        ),"},{"type":"INSERT","lineNumber":355,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":356,"content":"          'snooze',"},{"type":"INSERT","lineNumber":357,"content":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":358,"content":"          icon: DrawableResourceAndroidBitmap('ic_snooze'),"},{"type":"INSERT","lineNumber":359,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":360,"content":"        ),"},{"type":"INSERT","lineNumber":361,"content":"      ],"},{"type":"INSERT","lineNumber":363,"content":""},{"type":"INSERT","lineNumber":364,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":365,"content":"        DarwinNotificationDetails("},{"type":"INSERT","lineNumber":366,"content":"      categoryIdentifier: 'habit_category',"},{"type":"INSERT","lineNumber":367,"content":"    );"},{"type":"INSERT","lineNumber":368,"content":""},{"type":"INSERT","lineNumber":369,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":370,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":371,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":372,"content":"    );"},{"type":"INSERT","lineNumber":373,"content":""},{"type":"INSERT","lineNumber":374,"content":"    final payload = jsonEncode({"},{"type":"INSERT","lineNumber":375,"content":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":376,"content":"      'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":377,"content":"    });"},{"type":"INSERT","lineNumber":378,"content":""},{"type":"INSERT","lineNumber":379,"content":"    await _notificationsPlugin.show("},{"type":"INSERT","lineNumber":380,"content":"      id,"},{"type":"INSERT","lineNumber":381,"content":"      title,"},{"type":"INSERT","lineNumber":382,"content":"      body,"},{"type":"INSERT","lineNumber":383,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":384,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":385,"content":"    );"},{"type":"DELETE","lineNumber":316,"oldContent":"  /// Schedule a daily habit reminder"},{"type":"DELETE","lineNumber":317,"oldContent":"  static Future<void> scheduleDailyHabitReminder({"},{"type":"DELETE","lineNumber":318,"oldContent":"    required int habitId,"},{"type":"DELETE","lineNumber":319,"oldContent":"    required String habitName,"},{"type":"DELETE","lineNumber":320,"oldContent":"    required int hour,"},{"type":"DELETE","lineNumber":321,"oldContent":"    required int minute,"},{"type":"INSERT","lineNumber":388,"content":"  /// Schedule a habit notification with action buttons"},{"type":"INSERT","lineNumber":389,"content":"  static Future<void> scheduleHabitNotification({"},{"type":"INSERT","lineNumber":390,"content":"    required int id,"},{"type":"INSERT","lineNumber":391,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":392,"content":"    required String title,"},{"type":"INSERT","lineNumber":393,"content":"    required String body,"},{"type":"INSERT","lineNumber":394,"content":"    required DateTime scheduledTime,"},{"type":"DELETE","lineNumber":323,"oldContent":"    await scheduleDailyNotification("},{"type":"DELETE","lineNumber":324,"oldContent":"      id: habitId,"},{"type":"DELETE","lineNumber":325,"oldContent":"      title: '🎯 Daily Habit Reminder',"},{"type":"DELETE","lineNumber":326,"oldContent":"      body: 'Don\\'t forget: $habitName',"},{"type":"DELETE","lineNumber":327,"oldContent":"      hour: hour,"},{"type":"DELETE","lineNumber":328,"oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":329,"oldContent":"      payload: 'daily_habit_$habitId',"},{"type":"INSERT","lineNumber":396,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":399,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":400,"content":"      'habit_scheduled_channel',"},{"type":"INSERT","lineNumber":401,"content":"      'Scheduled Habit Notifications',"},{"type":"INSERT","lineNumber":402,"content":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"INSERT","lineNumber":403,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":404,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":405,"content":"      actions: ["},{"type":"INSERT","lineNumber":406,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":407,"content":"          'complete',"},{"type":"INSERT","lineNumber":408,"content":"          'Complete',"},{"type":"INSERT","lineNumber":409,"content":"          icon: DrawableResourceAndroidBitmap('ic_check'),"},{"type":"INSERT","lineNumber":410,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":411,"content":"        ),"},{"type":"INSERT","lineNumber":412,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":413,"content":"          'snooze',"},{"type":"INSERT","lineNumber":414,"content":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":415,"content":"          icon: DrawableResourceAndroidBitmap('ic_snooze'),"},{"type":"INSERT","lineNumber":416,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":417,"content":"        ),"},{"type":"INSERT","lineNumber":418,"content":"      ],"},{"type":"INSERT","lineNumber":420,"content":""},{"type":"INSERT","lineNumber":421,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":422,"content":"        DarwinNotificationDetails("},{"type":"INSERT","lineNumber":423,"content":"      categoryIdentifier: 'habit_category',"},{"type":"INSERT","lineNumber":424,"content":"    );"},{"type":"INSERT","lineNumber":425,"content":""},{"type":"INSERT","lineNumber":426,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":427,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":428,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":429,"content":"    );"},{"type":"INSERT","lineNumber":430,"content":""},{"type":"INSERT","lineNumber":431,"content":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":432,"content":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"INSERT","lineNumber":433,"content":""},{"type":"INSERT","lineNumber":434,"content":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":435,"content":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":436,"content":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":437,"content":""},{"type":"INSERT","lineNumber":438,"content":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":439,"content":""},{"type":"INSERT","lineNumber":440,"content":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"INSERT","lineNumber":441,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":442,"content":""},{"type":"INSERT","lineNumber":443,"content":"    final payload = jsonEncode({"},{"type":"INSERT","lineNumber":444,"content":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":445,"content":"      'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":446,"content":"    });"},{"type":"INSERT","lineNumber":447,"content":""},{"type":"INSERT","lineNumber":448,"content":"    await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":449,"content":"      id,"},{"type":"INSERT","lineNumber":450,"content":"      title,"},{"type":"INSERT","lineNumber":451,"content":"      body,"},{"type":"INSERT","lineNumber":452,"content":"      tzScheduledTime,"},{"type":"INSERT","lineNumber":453,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":454,"content":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"INSERT","lineNumber":455,"content":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":456,"content":"          UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"INSERT","lineNumber":457,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":458,"content":"    );"},{"type":"INSERT","lineNumber":461,"content":"  /// Snooze a notification for 30 minutes"},{"type":"INSERT","lineNumber":462,"content":"  static Future<void> snoozeNotification({"},{"type":"INSERT","lineNumber":463,"content":"    required int id,"},{"type":"INSERT","lineNumber":464,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":465,"content":"    required String title,"},{"type":"INSERT","lineNumber":466,"content":"    required String body,"},{"type":"INSERT","lineNumber":467,"content":"  }) async {"},{"type":"INSERT","lineNumber":468,"content":"    // Cancel the current notification"},{"type":"INSERT","lineNumber":469,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":470,"content":"    "},{"type":"INSERT","lineNumber":471,"content":"    // Schedule a new one for 30 minutes later"},{"type":"INSERT","lineNumber":472,"content":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"INSERT","lineNumber":473,"content":"    "},{"type":"INSERT","lineNumber":474,"content":"    await scheduleHabitNotification("},{"type":"INSERT","lineNumber":475,"content":"      id: id,"},{"type":"INSERT","lineNumber":476,"content":"      habitId: habitId,"},{"type":"INSERT","lineNumber":477,"content":"      title: title,"},{"type":"INSERT","lineNumber":478,"content":"      body: body,"},{"type":"INSERT","lineNumber":479,"content":"      scheduledTime: snoozeTime,"},{"type":"INSERT","lineNumber":480,"content":"    );"},{"type":"INSERT","lineNumber":481,"content":"    "},{"type":"INSERT","lineNumber":482,"content":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"INSERT","lineNumber":483,"content":"  }"},{"type":"INSERT","lineNumber":484,"content":""},{"type":"INSERT","lineNumber":531,"content":""},{"type":"DELETE","lineNumber":380,"oldContent":"    if (!canScheduleExact) {"},{"type":"DELETE","lineNumber":383,"oldContent":""},{"type":"DELETE","lineNumber":387,"oldContent":"    print('Current time: $now');"},{"type":"INSERT","lineNumber":539,"content":""},{"type":"INSERT","lineNumber":540,"content":"    print('Current time: $now');"},{"type":"INSERT","lineNumber":546,"content":"      await cancelNotification(1001);"},{"type":"INSERT","lineNumber":547,"content":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":396,"oldContent":"      await cancelNotification(1001);"},{"type":"DELETE","lineNumber":398,"oldContent":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":414,"oldContent":"      "},{"type":"INSERT","lineNumber":567,"content":"      print('Watch your device for the notification!');"},{"type":"INSERT","lineNumber":568,"content":""},{"type":"DELETE","lineNumber":418,"oldContent":"      print('Watch your device for the notification!');"},{"type":"DELETE","lineNumber":420,"oldContent":"  }"},{"type":"INSERT","lineNumber":573,"content":"  }"},{"type":"DELETE","lineNumber":446,"oldContent":"    }"},{"type":"INSERT","lineNumber":599,"content":"        return false;"},{"type":"INSERT","lineNumber":600,"content":"      }"},{"type":"INSERT","lineNumber":601,"content":"    }"},{"type":"DELETE","lineNumber":450,"oldContent":"        return false;"},{"type":"DELETE","lineNumber":453,"oldContent":"      }"}]},{"timestamp":1754438386724,"changes":[{"type":"INSERT","lineNumber":5,"content":"import 'logging_service.dart';"},{"type":"DELETE","lineNumber":6,"oldContent":"import '../data/habit_repository.dart';"},{"type":"DELETE","lineNumber":8,"oldContent":"import 'logging_service.dart';"},{"type":"INSERT","lineNumber":13,"content":"  // Callback for handling notification actions"},{"type":"INSERT","lineNumber":14,"content":"  static Function(String habitId, String action)? onNotificationAction;"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":17,"oldContent":"  // Callback for handling notification actions"},{"type":"DELETE","lineNumber":19,"oldContent":"  static Function(String habitId, String action)? onNotificationAction;"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"INSERT","lineNumber":109,"content":"  /// Handle notification tap and actions"},{"type":"MODIFY","lineNumber":113,"content":"      AppLogger.info('Notification tapped with payload: $payload');","oldContent":"  /// Handle notification tap and actions"},{"type":"INSERT","lineNumber":114,"content":"      "},{"type":"INSERT","lineNumber":115,"content":"      try {"},{"type":"INSERT","lineNumber":116,"content":"        final Map<String, dynamic> data = jsonDecode(payload);"},{"type":"INSERT","lineNumber":117,"content":"        final String? habitId = data['habitId'];"},{"type":"INSERT","lineNumber":118,"content":"        final String? action = notificationResponse.actionId;"},{"type":"INSERT","lineNumber":119,"content":"        "},{"type":"INSERT","lineNumber":120,"content":"        if (habitId != null && action != null) {"},{"type":"INSERT","lineNumber":121,"content":"          // Handle the action"},{"type":"INSERT","lineNumber":122,"content":"          _handleNotificationAction(habitId, action);"},{"type":"INSERT","lineNumber":123,"content":"        }"},{"type":"INSERT","lineNumber":124,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":125,"content":"        AppLogger.error('Error parsing notification payload', e);"},{"type":"INSERT","lineNumber":126,"content":"      }"},{"type":"INSERT","lineNumber":130,"content":"  /// Handle notification actions (Complete/Snooze)"},{"type":"INSERT","lineNumber":131,"content":"  static void _handleNotificationAction(String habitId, String action) {"},{"type":"INSERT","lineNumber":132,"content":"    switch (action) {"},{"type":"INSERT","lineNumber":133,"content":"      case 'complete':"},{"type":"INSERT","lineNumber":134,"content":"        onNotificationAction?.call(habitId, 'complete');"},{"type":"INSERT","lineNumber":135,"content":"        break;"},{"type":"INSERT","lineNumber":136,"content":"      case 'snooze':"},{"type":"INSERT","lineNumber":137,"content":"        onNotificationAction?.call(habitId, 'snooze');"},{"type":"INSERT","lineNumber":138,"content":"        break;"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":"  }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"DELETE","lineNumber":118,"oldContent":"      AppLogger.info('Notification tapped with payload: $payload');"},{"type":"DELETE","lineNumber":120,"oldContent":"      "},{"type":"DELETE","lineNumber":122,"oldContent":"      try {"},{"type":"DELETE","lineNumber":124,"oldContent":"        final Map<String, dynamic> data = jsonDecode(payload);"},{"type":"DELETE","lineNumber":126,"oldContent":"        final String? habitId = data['habitId'];"},{"type":"DELETE","lineNumber":128,"oldContent":"        final String? action = notificationResponse.actionId;"},{"type":"DELETE","lineNumber":130,"oldContent":"        "},{"type":"DELETE","lineNumber":132,"oldContent":"        if (habitId != null && action != null) {"},{"type":"DELETE","lineNumber":134,"oldContent":"          // Handle the action"},{"type":"DELETE","lineNumber":136,"oldContent":"          _handleNotificationAction(habitId, action);"},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":140,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":142,"oldContent":"        AppLogger.error('Error parsing notification payload', e);"},{"type":"DELETE","lineNumber":144,"oldContent":"      }"},{"type":"INSERT","lineNumber":158,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":159,"content":"    );"},{"type":"INSERT","lineNumber":160,"content":""},{"type":"DELETE","lineNumber":149,"oldContent":"  /// Handle notification actions (Complete/Snooze)"},{"type":"DELETE","lineNumber":150,"oldContent":"  static void _handleNotificationAction(String habitId, String action) {"},{"type":"DELETE","lineNumber":152,"oldContent":"    switch (action) {"},{"type":"DELETE","lineNumber":153,"oldContent":"      case 'complete':"},{"type":"DELETE","lineNumber":155,"oldContent":"        onNotificationAction?.call(habitId, 'complete');"},{"type":"DELETE","lineNumber":157,"oldContent":"        break;"},{"type":"DELETE","lineNumber":158,"oldContent":"      case 'snooze':"},{"type":"DELETE","lineNumber":160,"oldContent":"        onNotificationAction?.call(habitId, 'snooze');"},{"type":"DELETE","lineNumber":162,"oldContent":"        break;"},{"type":"DELETE","lineNumber":164,"oldContent":"    }"},{"type":"DELETE","lineNumber":166,"oldContent":"  }"},{"type":"DELETE","lineNumber":168,"oldContent":""},{"type":"DELETE","lineNumber":186,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":188,"oldContent":"    );"},{"type":"DELETE","lineNumber":190,"oldContent":""},{"type":"INSERT","lineNumber":212,"content":""},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":332,"oldContent":"    );"},{"type":"DELETE","lineNumber":333,"oldContent":"  }"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":335,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":336,"oldContent":"    );"},{"type":"DELETE","lineNumber":338,"oldContent":"  }"},{"type":"DELETE","lineNumber":340,"oldContent":""},{"type":"DELETE","lineNumber":342,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":344,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":346,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"DELETE","lineNumber":348,"oldContent":""},{"type":"DELETE","lineNumber":349,"oldContent":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":336,"content":"  }) async {"},{"type":"DELETE","lineNumber":351,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":353,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":355,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":357,"oldContent":""},{"type":"DELETE","lineNumber":359,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":361,"oldContent":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"DELETE","lineNumber":363,"oldContent":""},{"type":"DELETE","lineNumber":365,"oldContent":"        // Check exact alarm permission status"},{"type":"DELETE","lineNumber":367,"oldContent":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":369,"oldContent":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"DELETE","lineNumber":371,"oldContent":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":373,"oldContent":"      }"},{"type":"DELETE","lineNumber":375,"oldContent":"    }"},{"type":"DELETE","lineNumber":377,"oldContent":""},{"type":"DELETE","lineNumber":378,"oldContent":"          icon: DrawableResourceAndroidBitmap('ic_check'),"},{"type":"DELETE","lineNumber":379,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"DELETE","lineNumber":381,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":383,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":385,"oldContent":""},{"type":"DELETE","lineNumber":387,"oldContent":"    debugInfo['deviceLocalTime'] = now.toString();"},{"type":"DELETE","lineNumber":389,"oldContent":"    debugInfo['tzLocalTime'] = tzNow.toString();"},{"type":"DELETE","lineNumber":390,"oldContent":"          icon: DrawableResourceAndroidBitmap('ic_snooze'),"},{"type":"DELETE","lineNumber":391,"oldContent":"    debugInfo['timezone'] = tz.local.name;"},{"type":"DELETE","lineNumber":393,"oldContent":"    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;"},{"type":"DELETE","lineNumber":395,"oldContent":"    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();"},{"type":"INSERT","lineNumber":359,"content":"    );"},{"type":"DELETE","lineNumber":398,"oldContent":"    // Test scheduled time (10 seconds from now)"},{"type":"DELETE","lineNumber":399,"oldContent":""},{"type":"DELETE","lineNumber":400,"oldContent":"    final testTime = now.add(const Duration(seconds: 10));"},{"type":"DELETE","lineNumber":402,"oldContent":"    debugInfo['testScheduledTime'] = testTime.toString();"},{"type":"DELETE","lineNumber":404,"oldContent":""},{"type":"DELETE","lineNumber":406,"oldContent":"    return debugInfo;"},{"type":"DELETE","lineNumber":408,"oldContent":"  }"},{"type":"DELETE","lineNumber":410,"oldContent":""},{"type":"DELETE","lineNumber":411,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":412,"oldContent":"  /// Enhanced test method for scheduled notifications with comprehensive logging"},{"type":"INSERT","lineNumber":366,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":414,"oldContent":"  static Future<void> testScheduledNotification() async {"},{"type":"DELETE","lineNumber":416,"oldContent":"    print('=== Testing Scheduled Notification ===');"},{"type":"DELETE","lineNumber":419,"oldContent":""},{"type":"DELETE","lineNumber":420,"oldContent":"    final debugInfo = await getSchedulingDebugInfo();"},{"type":"DELETE","lineNumber":422,"oldContent":"    print('Debug Info: $debugInfo');"},{"type":"DELETE","lineNumber":424,"oldContent":""},{"type":"DELETE","lineNumber":426,"oldContent":"    // Check if exact alarms are enabled"},{"type":"DELETE","lineNumber":428,"oldContent":"    final canScheduleExact = await canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":430,"oldContent":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"DELETE","lineNumber":432,"oldContent":"    if (!canScheduleExact) {"},{"type":"DELETE","lineNumber":435,"oldContent":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"DELETE","lineNumber":437,"oldContent":"      return;"},{"type":"DELETE","lineNumber":440,"oldContent":"    }"},{"type":"INSERT","lineNumber":383,"content":"  }"},{"type":"DELETE","lineNumber":443,"oldContent":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":445,"oldContent":"    final scheduledTime = now.add(const Duration(seconds: 10));"},{"type":"DELETE","lineNumber":447,"oldContent":"    print('Scheduled time: $scheduledTime');"},{"type":"DELETE","lineNumber":449,"oldContent":"    print('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');"},{"type":"DELETE","lineNumber":451,"oldContent":""},{"type":"DELETE","lineNumber":453,"oldContent":"    try {"},{"type":"DELETE","lineNumber":455,"oldContent":"      // Cancel any existing test notifications first"},{"type":"DELETE","lineNumber":457,"oldContent":""},{"type":"DELETE","lineNumber":458,"oldContent":"      await scheduleNotification("},{"type":"INSERT","lineNumber":392,"content":"  }) async {"},{"type":"DELETE","lineNumber":461,"oldContent":"        id: 1001,"},{"type":"DELETE","lineNumber":464,"oldContent":"        title: '🔔 Debug Scheduled Test',"},{"type":"DELETE","lineNumber":466,"oldContent":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"DELETE","lineNumber":468,"oldContent":"        scheduledTime: scheduledTime.toLocal(),"},{"type":"DELETE","lineNumber":470,"oldContent":"        payload: 'debug_scheduled_test',"},{"type":"DELETE","lineNumber":472,"oldContent":"      );"},{"type":"DELETE","lineNumber":474,"oldContent":"      print('Scheduled notification successfully queued');"},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"DELETE","lineNumber":478,"oldContent":"      // Check if it was actually scheduled"},{"type":"DELETE","lineNumber":480,"oldContent":"      final pending = await getPendingNotifications();"},{"type":"DELETE","lineNumber":482,"oldContent":"      print('Pending notifications: ${pending.length}');"},{"type":"DELETE","lineNumber":483,"oldContent":"          icon: DrawableResourceAndroidBitmap('ic_check'),"},{"type":"DELETE","lineNumber":484,"oldContent":"      for (var notification in pending) {"},{"type":"DELETE","lineNumber":486,"oldContent":"        print('- ID: ${notification.id}, Title: ${notification.title}');"},{"type":"DELETE","lineNumber":488,"oldContent":"      }"},{"type":"DELETE","lineNumber":490,"oldContent":""},{"type":"DELETE","lineNumber":492,"oldContent":"      // Add a verification step"},{"type":"DELETE","lineNumber":494,"oldContent":"          icon: DrawableResourceAndroidBitmap('ic_snooze'),"},{"type":"DELETE","lineNumber":495,"oldContent":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"DELETE","lineNumber":497,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":499,"oldContent":"      print('Error scheduling notification: $e');"},{"type":"DELETE","lineNumber":501,"oldContent":"      print('Stack trace: ${StackTrace.current}');"},{"type":"INSERT","lineNumber":414,"content":"    );"},{"type":"DELETE","lineNumber":504,"oldContent":"    }"},{"type":"DELETE","lineNumber":506,"oldContent":""},{"type":"DELETE","lineNumber":508,"oldContent":"  /// Check if exact alarm permission is granted (Android 12+)"},{"type":"DELETE","lineNumber":510,"oldContent":"  static Future<bool> canScheduleExactAlarms() async {"},{"type":"DELETE","lineNumber":512,"oldContent":"    if (!Platform.isAndroid) return true;"},{"type":"DELETE","lineNumber":513,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":514,"oldContent":""},{"type":"INSERT","lineNumber":421,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":516,"oldContent":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":518,"oldContent":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":520,"oldContent":"            AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":522,"oldContent":""},{"type":"DELETE","lineNumber":524,"oldContent":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":526,"oldContent":"      try {"},{"type":"DELETE","lineNumber":528,"oldContent":"        // Check if device is Android 12+"},{"type":"DELETE","lineNumber":530,"oldContent":"        final bool isAndroid12Plus = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":532,"oldContent":""},{"type":"DELETE","lineNumber":534,"oldContent":"        if (isAndroid12Plus) {"},{"type":"DELETE","lineNumber":536,"oldContent":"          // On Android 12+, check if exact alarms are permitted"},{"type":"DELETE","lineNumber":538,"oldContent":"          final bool? canSchedule = await androidImplementation.canScheduleExactNotifications();"},{"type":"DELETE","lineNumber":540,"oldContent":"          print('Can schedule exact alarms: $canSchedule');"},{"type":"DELETE","lineNumber":542,"oldContent":"          return canSchedule ?? false;"},{"type":"DELETE","lineNumber":544,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":546,"oldContent":"          // Android 11 and below don't need exact alarm permission"},{"type":"DELETE","lineNumber":548,"oldContent":"          return true;"},{"type":"DELETE","lineNumber":550,"oldContent":"        }"},{"type":"DELETE","lineNumber":552,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":555,"oldContent":"        print('Error checking exact alarm permission: $e');"},{"type":"DELETE","lineNumber":557,"oldContent":"    return false;"},{"type":"DELETE","lineNumber":559,"oldContent":"  }"},{"type":"DELETE","lineNumber":562,"oldContent":""},{"type":"DELETE","lineNumber":564,"oldContent":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"DELETE","lineNumber":567,"oldContent":"  static Future<void> openExactAlarmSettings() async {"},{"type":"DELETE","lineNumber":569,"oldContent":"    if (!Platform.isAndroid) return;"},{"type":"DELETE","lineNumber":571,"oldContent":""},{"type":"DELETE","lineNumber":573,"oldContent":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":575,"oldContent":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":576,"oldContent":"            AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":454,"content":"  }"},{"type":"DELETE","lineNumber":579,"oldContent":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":581,"oldContent":"      try {"},{"type":"DELETE","lineNumber":583,"oldContent":"        await androidImplementation.requestExactAlarmsPermission();"},{"type":"DELETE","lineNumber":585,"oldContent":"        print('Opened exact alarm settings');"},{"type":"DELETE","lineNumber":587,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":589,"oldContent":"        print('Error opening exact alarm settings: $e');"},{"type":"DELETE","lineNumber":591,"oldContent":"      }"},{"type":"DELETE","lineNumber":593,"oldContent":"    }"},{"type":"DELETE","lineNumber":595,"oldContent":"  }"},{"type":"DELETE","lineNumber":597,"oldContent":"}"},{"type":"DELETE","lineNumber":599,"oldContent":""},{"type":"DELETE","lineNumber":601,"oldContent":"    }"},{"type":"DELETE","lineNumber":603,"oldContent":"      }"},{"type":"DELETE","lineNumber":605,"oldContent":"        return false;"},{"type":"DELETE","lineNumber":607,"oldContent":"  }"},{"type":"DELETE","lineNumber":609,"oldContent":""},{"type":"DELETE","lineNumber":611,"oldContent":"      print('Watch your device for the notification!');"},{"type":"DELETE","lineNumber":613,"oldContent":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":615,"oldContent":"      await cancelNotification(1001);"},{"type":"DELETE","lineNumber":617,"oldContent":"    print('Current time: $now');"},{"type":"DELETE","lineNumber":619,"oldContent":""},{"type":"INSERT","lineNumber":478,"content":"  }"},{"type":"INSERT","lineNumber":480,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":481,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":482,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":483,"content":""},{"type":"INSERT","lineNumber":484,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":485,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":486,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":487,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":488,"content":""},{"type":"INSERT","lineNumber":489,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":490,"content":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"INSERT","lineNumber":491,"content":""},{"type":"INSERT","lineNumber":492,"content":"        // Check exact alarm permission status"},{"type":"INSERT","lineNumber":493,"content":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":494,"content":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"INSERT","lineNumber":495,"content":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"INSERT","lineNumber":496,"content":"      }"},{"type":"INSERT","lineNumber":497,"content":"    }"},{"type":"INSERT","lineNumber":498,"content":""},{"type":"INSERT","lineNumber":499,"content":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":500,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":501,"content":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":502,"content":""},{"type":"INSERT","lineNumber":503,"content":"    debugInfo['deviceLocalTime'] = now.toString();"},{"type":"INSERT","lineNumber":504,"content":"    debugInfo['tzLocalTime'] = tzNow.toString();"},{"type":"INSERT","lineNumber":505,"content":"    debugInfo['timezone'] = tz.local.name;"},{"type":"INSERT","lineNumber":506,"content":"    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;"},{"type":"INSERT","lineNumber":507,"content":"    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();"},{"type":"INSERT","lineNumber":508,"content":""},{"type":"INSERT","lineNumber":509,"content":"    // Test scheduled time (10 seconds from now)"},{"type":"INSERT","lineNumber":510,"content":"    final testTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":511,"content":"    debugInfo['testScheduledTime'] = testTime.toString();"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"    return debugInfo;"},{"type":"INSERT","lineNumber":516,"content":"  /// Enhanced test method for scheduled notifications with comprehensive logging"},{"type":"INSERT","lineNumber":517,"content":"  static Future<void> testScheduledNotification() async {"},{"type":"INSERT","lineNumber":518,"content":"    print('=== Testing Scheduled Notification ===');"},{"type":"INSERT","lineNumber":519,"content":""},{"type":"INSERT","lineNumber":520,"content":"    final debugInfo = await getSchedulingDebugInfo();"},{"type":"INSERT","lineNumber":521,"content":"    print('Debug Info: $debugInfo');"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"INSERT","lineNumber":523,"content":"    // Check if exact alarms are enabled"},{"type":"INSERT","lineNumber":524,"content":"    final canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":525,"content":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"INSERT","lineNumber":526,"content":""},{"type":"INSERT","lineNumber":527,"content":"    if (!canScheduleExact) {"},{"type":"INSERT","lineNumber":528,"content":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"INSERT","lineNumber":529,"content":"      return;"},{"type":"INSERT","lineNumber":530,"content":"    }"},{"type":"INSERT","lineNumber":531,"content":""},{"type":"INSERT","lineNumber":532,"content":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":533,"content":"    final scheduledTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":534,"content":""},{"type":"INSERT","lineNumber":535,"content":"    print('Current time: $now');"},{"type":"INSERT","lineNumber":536,"content":"    print('Scheduled time: $scheduledTime');"},{"type":"INSERT","lineNumber":537,"content":"    print('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');"},{"type":"INSERT","lineNumber":538,"content":""},{"type":"INSERT","lineNumber":539,"content":"    try {"},{"type":"INSERT","lineNumber":540,"content":"      // Cancel any existing test notifications first"},{"type":"INSERT","lineNumber":541,"content":"      await cancelNotification(1001);"},{"type":"INSERT","lineNumber":542,"content":"      print('Cancelled any existing test notifications');"},{"type":"INSERT","lineNumber":543,"content":""},{"type":"INSERT","lineNumber":544,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":545,"content":"        id: 1001,"},{"type":"INSERT","lineNumber":546,"content":"        title: '🔔 Debug Scheduled Test',"},{"type":"INSERT","lineNumber":547,"content":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',"},{"type":"INSERT","lineNumber":548,"content":"        scheduledTime: scheduledTime.toLocal(),"},{"type":"INSERT","lineNumber":549,"content":"        payload: 'debug_scheduled_test',"},{"type":"INSERT","lineNumber":550,"content":"      );"},{"type":"INSERT","lineNumber":551,"content":"      print('Scheduled notification successfully queued');"},{"type":"INSERT","lineNumber":552,"content":""},{"type":"INSERT","lineNumber":553,"content":"      // Check if it was actually scheduled"},{"type":"INSERT","lineNumber":554,"content":"      final pending = await getPendingNotifications();"},{"type":"INSERT","lineNumber":555,"content":"      print('Pending notifications: ${pending.length}');"},{"type":"INSERT","lineNumber":556,"content":"      for (var notification in pending) {"},{"type":"INSERT","lineNumber":557,"content":"        print('- ID: ${notification.id}, Title: ${notification.title}');"},{"type":"INSERT","lineNumber":558,"content":"      }"},{"type":"INSERT","lineNumber":559,"content":""},{"type":"INSERT","lineNumber":560,"content":"      // Add a verification step"},{"type":"INSERT","lineNumber":561,"content":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"INSERT","lineNumber":562,"content":"      print('Watch your device for the notification!');"},{"type":"INSERT","lineNumber":563,"content":""},{"type":"INSERT","lineNumber":564,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":565,"content":"      print('Error scheduling notification: $e');"},{"type":"INSERT","lineNumber":566,"content":"      print('Stack trace: ${StackTrace.current}');"},{"type":"INSERT","lineNumber":567,"content":"    }"},{"type":"INSERT","lineNumber":568,"content":"  }"},{"type":"INSERT","lineNumber":569,"content":""},{"type":"INSERT","lineNumber":570,"content":"  /// Check if exact alarm permission is granted (Android 12+)"},{"type":"INSERT","lineNumber":571,"content":"  static Future<bool> canScheduleExactAlarms() async {"},{"type":"INSERT","lineNumber":572,"content":"    if (!Platform.isAndroid) return true;"},{"type":"INSERT","lineNumber":573,"content":""},{"type":"INSERT","lineNumber":574,"content":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":575,"content":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":576,"content":"            AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":577,"content":""},{"type":"INSERT","lineNumber":578,"content":"    if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":579,"content":"      try {"},{"type":"INSERT","lineNumber":580,"content":"        // Check if device is Android 12+"},{"type":"INSERT","lineNumber":581,"content":"        final bool isAndroid12Plus = await _isAndroid12Plus();"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"        if (isAndroid12Plus) {"},{"type":"INSERT","lineNumber":584,"content":"          // On Android 12+, check if exact alarms are permitted"},{"type":"INSERT","lineNumber":585,"content":"          final bool? canSchedule = await androidImplementation.canScheduleExactNotifications();"},{"type":"INSERT","lineNumber":586,"content":"          print('Can schedule exact alarms: $canSchedule');"},{"type":"INSERT","lineNumber":587,"content":"          return canSchedule ?? false;"},{"type":"INSERT","lineNumber":588,"content":"        } else {"},{"type":"INSERT","lineNumber":589,"content":"          // Android 11 and below don't need exact alarm permission"},{"type":"INSERT","lineNumber":590,"content":"          return true;"},{"type":"INSERT","lineNumber":591,"content":"        }"},{"type":"INSERT","lineNumber":592,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":593,"content":"        print('Error checking exact alarm permission: $e');"},{"type":"INSERT","lineNumber":594,"content":"        return false;"},{"type":"INSERT","lineNumber":595,"content":"      }"},{"type":"INSERT","lineNumber":596,"content":"    }"},{"type":"INSERT","lineNumber":597,"content":"    return false;"},{"type":"INSERT","lineNumber":598,"content":"  }"},{"type":"INSERT","lineNumber":599,"content":""},{"type":"INSERT","lineNumber":600,"content":"  /// Open Android settings to allow exact alarms (Android 12+)"},{"type":"INSERT","lineNumber":601,"content":"  static Future<void> openExactAlarmSettings() async {"},{"type":"INSERT","lineNumber":602,"content":"    if (!Platform.isAndroid) return;"},{"type":"INSERT","lineNumber":603,"content":""},{"type":"INSERT","lineNumber":604,"content":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":605,"content":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":606,"content":"            AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":607,"content":""},{"type":"INSERT","lineNumber":608,"content":"    if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":609,"content":"      try {"},{"type":"INSERT","lineNumber":610,"content":"        await androidImplementation.requestExactAlarmsPermission();"},{"type":"INSERT","lineNumber":611,"content":"        print('Opened exact alarm settings');"},{"type":"INSERT","lineNumber":612,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":613,"content":"        print('Error opening exact alarm settings: $e');"},{"type":"INSERT","lineNumber":614,"content":"      }"},{"type":"INSERT","lineNumber":615,"content":"    }"},{"type":"INSERT","lineNumber":616,"content":"  }"},{"type":"INSERT","lineNumber":617,"content":"}"},{"type":"INSERT","lineNumber":618,"content":""}]},{"timestamp":1754438724794,"changes":[{"type":"MODIFY","lineNumber":13,"content":"  // Callback for handling notification actions","oldContent":"  // Callback for handling notification actions"},{"type":"MODIFY","lineNumber":16,"content":"  /// Initialize the notification service","oldContent":"  /// Initialize the notification service"},{"type":"MODIFY","lineNumber":109,"content":"  /// Handle notification tap and actions","oldContent":"  /// Handle notification tap and actions"},{"type":"DELETE","lineNumber":114,"oldContent":"      "},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"DELETE","lineNumber":117,"oldContent":"  }"},{"type":"DELETE","lineNumber":119,"oldContent":""},{"type":"DELETE","lineNumber":121,"oldContent":"  /// Show an immediate notification"},{"type":"DELETE","lineNumber":123,"oldContent":"        "},{"type":"DELETE","lineNumber":124,"oldContent":"  static Future<void> showNotification({"},{"type":"INSERT","lineNumber":119,"content":""},{"type":"DELETE","lineNumber":127,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":130,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":133,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":135,"oldContent":"    String? payload,"},{"type":"DELETE","lineNumber":136,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"INSERT","lineNumber":128,"content":"  }"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":142,"oldContent":""},{"type":"DELETE","lineNumber":145,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":148,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":151,"oldContent":"      'habit_channel',"},{"type":"INSERT","lineNumber":142,"content":"  /// Show an immediate notification"},{"type":"INSERT","lineNumber":143,"content":"  static Future<void> showNotification({"},{"type":"INSERT","lineNumber":144,"content":"    required int id,"},{"type":"INSERT","lineNumber":145,"content":"    required String title,"},{"type":"INSERT","lineNumber":146,"content":"    required String body,"},{"type":"INSERT","lineNumber":147,"content":"    String? payload,"},{"type":"INSERT","lineNumber":148,"content":"  }) async {"},{"type":"INSERT","lineNumber":149,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"INSERT","lineNumber":151,"content":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":152,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":153,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":158,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":159,"content":"    );"},{"type":"INSERT","lineNumber":160,"content":""},{"type":"DELETE","lineNumber":163,"oldContent":"      showWhen: false,"},{"type":"DELETE","lineNumber":164,"oldContent":"    );"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"MODIFY","lineNumber":212,"content":"","oldContent":""},{"type":"DELETE","lineNumber":330,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":336,"content":"  }) async {"},{"type":"DELETE","lineNumber":342,"oldContent":"    );"},{"type":"DELETE","lineNumber":346,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":355,"oldContent":"  }"},{"type":"MODIFY","lineNumber":359,"content":"    );","oldContent":"  }) async {"},{"type":"INSERT","lineNumber":366,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":370,"oldContent":"    );"},{"type":"DELETE","lineNumber":374,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":383,"content":"  }"},{"type":"DELETE","lineNumber":393,"oldContent":"  }"},{"type":"INSERT","lineNumber":392,"content":"  }) async {"},{"type":"DELETE","lineNumber":407,"oldContent":"  }"},{"type":"INSERT","lineNumber":405,"content":"          'Complete',"},{"type":"INSERT","lineNumber":406,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":407,"content":"        ),"},{"type":"INSERT","lineNumber":408,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":409,"content":"          'snooze',"},{"type":"INSERT","lineNumber":410,"content":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":411,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":412,"content":"        ),"},{"type":"INSERT","lineNumber":413,"content":"      ],"},{"type":"INSERT","lineNumber":414,"content":"    );"},{"type":"INSERT","lineNumber":415,"content":""},{"type":"INSERT","lineNumber":416,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":417,"content":"        DarwinNotificationDetails("},{"type":"INSERT","lineNumber":418,"content":"      categoryIdentifier: 'habit_category',"},{"type":"INSERT","lineNumber":419,"content":"    );"},{"type":"INSERT","lineNumber":420,"content":""},{"type":"INSERT","lineNumber":421,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":422,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":423,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":424,"content":"    );"},{"type":"INSERT","lineNumber":425,"content":""},{"type":"INSERT","lineNumber":426,"content":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":427,"content":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"INSERT","lineNumber":428,"content":""},{"type":"INSERT","lineNumber":429,"content":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":430,"content":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":431,"content":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":432,"content":""},{"type":"INSERT","lineNumber":433,"content":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":434,"content":""},{"type":"INSERT","lineNumber":435,"content":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"INSERT","lineNumber":436,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":437,"content":""},{"type":"INSERT","lineNumber":438,"content":"    final payload = jsonEncode({"},{"type":"INSERT","lineNumber":439,"content":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":440,"content":"      'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":441,"content":"    });"},{"type":"INSERT","lineNumber":442,"content":""},{"type":"INSERT","lineNumber":443,"content":"    await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":444,"content":"      id,"},{"type":"INSERT","lineNumber":445,"content":"      title,"},{"type":"INSERT","lineNumber":446,"content":"      body,"},{"type":"INSERT","lineNumber":447,"content":"      tzScheduledTime,"},{"type":"INSERT","lineNumber":448,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":449,"content":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"INSERT","lineNumber":450,"content":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":451,"content":"          UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"INSERT","lineNumber":452,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":453,"content":"    );"},{"type":"INSERT","lineNumber":454,"content":"  }"},{"type":"INSERT","lineNumber":455,"content":""},{"type":"INSERT","lineNumber":456,"content":"  /// Snooze a notification for 30 minutes"},{"type":"INSERT","lineNumber":457,"content":"  static Future<void> snoozeNotification({"},{"type":"INSERT","lineNumber":458,"content":"    required int id,"},{"type":"INSERT","lineNumber":459,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":460,"content":"    required String title,"},{"type":"INSERT","lineNumber":461,"content":"    required String body,"},{"type":"INSERT","lineNumber":462,"content":"  }) async {"},{"type":"INSERT","lineNumber":463,"content":"    // Cancel the current notification"},{"type":"INSERT","lineNumber":464,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":465,"content":""},{"type":"INSERT","lineNumber":466,"content":"    // Schedule a new one for 30 minutes later"},{"type":"INSERT","lineNumber":467,"content":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"INSERT","lineNumber":468,"content":""},{"type":"INSERT","lineNumber":469,"content":"    await scheduleHabitNotification("},{"type":"INSERT","lineNumber":470,"content":"      id: id,"},{"type":"INSERT","lineNumber":471,"content":"      habitId: habitId,"},{"type":"INSERT","lineNumber":472,"content":"      title: title,"},{"type":"INSERT","lineNumber":473,"content":"      body: body,"},{"type":"INSERT","lineNumber":474,"content":"      scheduledTime: snoozeTime,"},{"type":"INSERT","lineNumber":475,"content":"    );"},{"type":"INSERT","lineNumber":476,"content":""},{"type":"INSERT","lineNumber":477,"content":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"INSERT","lineNumber":478,"content":"  }"},{"type":"INSERT","lineNumber":479,"content":""},{"type":"DELETE","lineNumber":411,"oldContent":"          'Complete',"},{"type":"DELETE","lineNumber":416,"oldContent":"          showsUserInterface: false,"},{"type":"DELETE","lineNumber":419,"oldContent":"        ),"},{"type":"DELETE","lineNumber":422,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":425,"oldContent":"          'snooze',"},{"type":"DELETE","lineNumber":428,"oldContent":"          'Snooze 30min',"},{"type":"DELETE","lineNumber":432,"oldContent":"          showsUserInterface: false,"},{"type":"DELETE","lineNumber":435,"oldContent":"        ),"},{"type":"DELETE","lineNumber":438,"oldContent":"      ],"},{"type":"DELETE","lineNumber":441,"oldContent":""},{"type":"DELETE","lineNumber":443,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":446,"oldContent":"        DarwinNotificationDetails("},{"type":"DELETE","lineNumber":449,"oldContent":"      categoryIdentifier: 'habit_category',"},{"type":"DELETE","lineNumber":452,"oldContent":"    );"},{"type":"DELETE","lineNumber":456,"oldContent":""},{"type":"DELETE","lineNumber":458,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":514,"content":"  }"},{"type":"INSERT","lineNumber":515,"content":""},{"type":"DELETE","lineNumber":461,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":464,"oldContent":"    );"},{"type":"DELETE","lineNumber":468,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"    final deviceNow = DateTime.now();"},{"type":"DELETE","lineNumber":473,"oldContent":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"DELETE","lineNumber":479,"oldContent":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":482,"oldContent":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"DELETE","lineNumber":485,"oldContent":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":488,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"DELETE","lineNumber":494,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"DELETE","lineNumber":500,"oldContent":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":503,"oldContent":""},{"type":"DELETE","lineNumber":506,"oldContent":"    final payload = jsonEncode({"},{"type":"DELETE","lineNumber":509,"oldContent":"      'habitId': habitId,"},{"type":"DELETE","lineNumber":512,"oldContent":"      'type': 'habit_reminder',"},{"type":"DELETE","lineNumber":515,"oldContent":"    });"},{"type":"DELETE","lineNumber":517,"oldContent":""},{"type":"DELETE","lineNumber":520,"oldContent":"    await _notificationsPlugin.zonedSchedule("},{"type":"DELETE","lineNumber":523,"oldContent":"      id,"},{"type":"DELETE","lineNumber":526,"oldContent":"      title,"},{"type":"DELETE","lineNumber":528,"oldContent":"      body,"},{"type":"DELETE","lineNumber":531,"oldContent":"      tzScheduledTime,"},{"type":"DELETE","lineNumber":534,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":536,"oldContent":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"DELETE","lineNumber":539,"oldContent":"      uiLocalNotificationDateInterpretation:"},{"type":"DELETE","lineNumber":542,"oldContent":"          UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"DELETE","lineNumber":545,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":548,"oldContent":"    );"},{"type":"DELETE","lineNumber":552,"oldContent":""},{"type":"DELETE","lineNumber":554,"oldContent":"  /// Snooze a notification for 30 minutes"},{"type":"DELETE","lineNumber":557,"oldContent":"  static Future<void> snoozeNotification({"},{"type":"DELETE","lineNumber":560,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":563,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":566,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":569,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":572,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":575,"oldContent":"    // Cancel the current notification"},{"type":"DELETE","lineNumber":578,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":581,"oldContent":"    "},{"type":"DELETE","lineNumber":584,"oldContent":"    // Schedule a new one for 30 minutes later"},{"type":"DELETE","lineNumber":587,"oldContent":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"DELETE","lineNumber":590,"oldContent":"    "},{"type":"DELETE","lineNumber":593,"oldContent":"    await scheduleHabitNotification("},{"type":"DELETE","lineNumber":596,"oldContent":"      id: id,"},{"type":"DELETE","lineNumber":599,"oldContent":"      habitId: habitId,"},{"type":"DELETE","lineNumber":602,"oldContent":"      title: title,"},{"type":"DELETE","lineNumber":605,"oldContent":"      body: body,"},{"type":"DELETE","lineNumber":608,"oldContent":"      scheduledTime: snoozeTime,"},{"type":"DELETE","lineNumber":611,"oldContent":"    );"},{"type":"DELETE","lineNumber":614,"oldContent":"    "},{"type":"DELETE","lineNumber":615,"oldContent":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"DELETE","lineNumber":616,"oldContent":""},{"type":"DELETE","lineNumber":617,"oldContent":"  }"},{"type":"DELETE","lineNumber":618,"oldContent":""}]},{"timestamp":1754439651387,"changes":[{"type":"INSERT","lineNumber":12,"content":""},{"type":"DELETE","lineNumber":13,"oldContent":"  // Callback for handling notification actions"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":16,"oldContent":"  /// Initialize the notification service"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"DELETE","lineNumber":109,"oldContent":"  /// Handle notification tap and actions"},{"type":"MODIFY","lineNumber":114,"content":"      ","oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"INSERT","lineNumber":119,"content":"        "},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":"  }"},{"type":"DELETE","lineNumber":125,"oldContent":""},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"INSERT","lineNumber":128,"content":"  }"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"INSERT","lineNumber":134,"content":"        onNotificationAction?.call(habitId, 'complete');"},{"type":"INSERT","lineNumber":135,"content":"        break;"},{"type":"INSERT","lineNumber":136,"content":"      case 'snooze':"},{"type":"INSERT","lineNumber":137,"content":"        onNotificationAction?.call(habitId, 'snooze');"},{"type":"INSERT","lineNumber":138,"content":"        break;"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":"  }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"DELETE","lineNumber":136,"oldContent":"        onNotificationAction?.call(habitId, 'complete');"},{"type":"DELETE","lineNumber":138,"oldContent":"        break;"},{"type":"DELETE","lineNumber":141,"oldContent":"      case 'snooze':"},{"type":"DELETE","lineNumber":143,"oldContent":"        onNotificationAction?.call(habitId, 'snooze');"},{"type":"DELETE","lineNumber":146,"oldContent":"        break;"},{"type":"DELETE","lineNumber":148,"oldContent":"    }"},{"type":"DELETE","lineNumber":151,"oldContent":"  }"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":160,"content":""},{"type":"INSERT","lineNumber":161,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":163,"oldContent":""},{"type":"INSERT","lineNumber":211,"content":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":212,"oldContent":""},{"type":"MODIFY","lineNumber":336,"content":"  }) async {","oldContent":"  }) async {"},{"type":"DELETE","lineNumber":356,"oldContent":"    );"},{"type":"INSERT","lineNumber":359,"content":"    );"},{"type":"DELETE","lineNumber":363,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":366,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":379,"oldContent":"  }"},{"type":"INSERT","lineNumber":383,"content":"  }"},{"type":"DELETE","lineNumber":389,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":392,"content":"  }) async {"},{"type":"DELETE","lineNumber":402,"oldContent":"          'Complete',"},{"type":"MODIFY","lineNumber":404,"content":"          'complete',","oldContent":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":405,"content":"          'Complete',"},{"type":"INSERT","lineNumber":406,"content":"          showsUserInterface: false,"},{"type":"DELETE","lineNumber":408,"oldContent":"          'complete',"},{"type":"DELETE","lineNumber":410,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":412,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":415,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"DELETE","lineNumber":417,"oldContent":""},{"type":"DELETE","lineNumber":419,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":421,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":424,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":426,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":429,"oldContent":""},{"type":"DELETE","lineNumber":431,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":434,"oldContent":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"DELETE","lineNumber":437,"oldContent":""},{"type":"DELETE","lineNumber":439,"oldContent":"        // Check exact alarm permission status"},{"type":"DELETE","lineNumber":441,"oldContent":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":444,"oldContent":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"DELETE","lineNumber":446,"oldContent":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":448,"oldContent":"      }"},{"type":"DELETE","lineNumber":451,"oldContent":"    }"},{"type":"DELETE","lineNumber":453,"oldContent":""},{"type":"DELETE","lineNumber":456,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"DELETE","lineNumber":458,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":461,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":463,"oldContent":""},{"type":"DELETE","lineNumber":466,"oldContent":"    debugInfo['deviceLocalTime'] = now.toString();"},{"type":"DELETE","lineNumber":469,"oldContent":"    debugInfo['tzLocalTime'] = tzNow.toString();"},{"type":"DELETE","lineNumber":471,"oldContent":"    debugInfo['timezone'] = tz.local.name;"},{"type":"DELETE","lineNumber":474,"oldContent":"    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;"},{"type":"DELETE","lineNumber":476,"oldContent":"    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();"},{"type":"DELETE","lineNumber":479,"oldContent":""},{"type":"DELETE","lineNumber":481,"oldContent":"    // Test scheduled time (10 seconds from now)"},{"type":"DELETE","lineNumber":484,"oldContent":"    final testTime = now.add(const Duration(seconds: 10));"},{"type":"DELETE","lineNumber":486,"oldContent":"    debugInfo['testScheduledTime'] = testTime.toString();"},{"type":"DELETE","lineNumber":488,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":"    return debugInfo;"},{"type":"DELETE","lineNumber":494,"oldContent":"  /// Enhanced test method for scheduled notifications with comprehensive logging"},{"type":"DELETE","lineNumber":496,"oldContent":"  static Future<void> testScheduledNotification() async {"},{"type":"DELETE","lineNumber":499,"oldContent":"    print('=== Testing Scheduled Notification ===');"},{"type":"DELETE","lineNumber":501,"oldContent":""},{"type":"DELETE","lineNumber":503,"oldContent":""},{"type":"DELETE","lineNumber":504,"oldContent":"    final debugInfo = await getSchedulingDebugInfo();"},{"type":"INSERT","lineNumber":465,"content":"    "},{"type":"DELETE","lineNumber":506,"oldContent":"    print('Debug Info: $debugInfo');"},{"type":"DELETE","lineNumber":508,"oldContent":""},{"type":"DELETE","lineNumber":509,"oldContent":""},{"type":"INSERT","lineNumber":468,"content":"    "},{"type":"DELETE","lineNumber":511,"oldContent":"    // Check if exact alarms are enabled"},{"type":"DELETE","lineNumber":514,"oldContent":"    final canScheduleExact = await canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":516,"oldContent":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"DELETE","lineNumber":519,"oldContent":""},{"type":"DELETE","lineNumber":521,"oldContent":"    if (!canScheduleExact) {"},{"type":"DELETE","lineNumber":522,"oldContent":""},{"type":"INSERT","lineNumber":476,"content":"    "},{"type":"DELETE","lineNumber":524,"oldContent":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"DELETE","lineNumber":526,"oldContent":"      return;"},{"type":"INSERT","lineNumber":480,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":481,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":482,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":483,"content":""},{"type":"INSERT","lineNumber":484,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":485,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":486,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":487,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":488,"content":""},{"type":"INSERT","lineNumber":489,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":490,"content":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"INSERT","lineNumber":491,"content":""},{"type":"INSERT","lineNumber":492,"content":"        // Check exact alarm permission status"},{"type":"INSERT","lineNumber":493,"content":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":494,"content":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"INSERT","lineNumber":495,"content":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"INSERT","lineNumber":496,"content":"      }"},{"type":"INSERT","lineNumber":499,"content":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":500,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":501,"content":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":502,"content":""},{"type":"INSERT","lineNumber":503,"content":"    debugInfo['deviceLocalTime'] = now.toString();"},{"type":"INSERT","lineNumber":504,"content":"    debugInfo['tzLocalTime'] = tzNow.toString();"},{"type":"INSERT","lineNumber":505,"content":"    debugInfo['timezone'] = tz.local.name;"},{"type":"INSERT","lineNumber":506,"content":"    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;"},{"type":"INSERT","lineNumber":507,"content":"    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();"},{"type":"INSERT","lineNumber":508,"content":""},{"type":"INSERT","lineNumber":509,"content":"    // Test scheduled time (10 seconds from now)"},{"type":"INSERT","lineNumber":510,"content":"    final testTime = now.add(const Duration(seconds: 10));"},{"type":"INSERT","lineNumber":511,"content":"    debugInfo['testScheduledTime'] = testTime.toString();"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"    return debugInfo;"},{"type":"INSERT","lineNumber":514,"content":"  }"},{"type":"INSERT","lineNumber":515,"content":""},{"type":"INSERT","lineNumber":516,"content":"  /// Enhanced test method for scheduled notifications with comprehensive logging"},{"type":"INSERT","lineNumber":517,"content":"  static Future<void> testScheduledNotification() async {"},{"type":"INSERT","lineNumber":518,"content":"    print('=== Testing Scheduled Notification ===');"},{"type":"INSERT","lineNumber":519,"content":""},{"type":"INSERT","lineNumber":520,"content":"    final debugInfo = await getSchedulingDebugInfo();"},{"type":"INSERT","lineNumber":521,"content":"    print('Debug Info: $debugInfo');"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"INSERT","lineNumber":523,"content":"    // Check if exact alarms are enabled"},{"type":"INSERT","lineNumber":524,"content":"    final canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":525,"content":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"INSERT","lineNumber":526,"content":""},{"type":"INSERT","lineNumber":527,"content":"    if (!canScheduleExact) {"},{"type":"INSERT","lineNumber":528,"content":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"INSERT","lineNumber":529,"content":"      return;"},{"type":"INSERT","lineNumber":530,"content":"    }"},{"type":"INSERT","lineNumber":531,"content":""},{"type":"DELETE","lineNumber":551,"oldContent":"  }"},{"type":"DELETE","lineNumber":553,"oldContent":""}]},{"timestamp":1754440048797,"changes":[{"type":"MODIFY","lineNumber":119,"content":"        ","oldContent":"        "},{"type":"DELETE","lineNumber":124,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"  }"},{"type":"DELETE","lineNumber":128,"oldContent":""},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"INSERT","lineNumber":128,"content":"  }"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"DELETE","lineNumber":135,"oldContent":"  /// Show an immediate notification"},{"type":"DELETE","lineNumber":137,"oldContent":"  static Future<void> showNotification({"},{"type":"DELETE","lineNumber":140,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":143,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":145,"oldContent":"    required String body,"},{"type":"INSERT","lineNumber":142,"content":"  /// Show an immediate notification"},{"type":"INSERT","lineNumber":143,"content":"  static Future<void> showNotification({"},{"type":"INSERT","lineNumber":144,"content":"    required int id,"},{"type":"INSERT","lineNumber":145,"content":"    required String title,"},{"type":"INSERT","lineNumber":146,"content":"    required String body,"},{"type":"MODIFY","lineNumber":160,"content":"","oldContent":""},{"type":"INSERT","lineNumber":289,"content":"  /// Schedule daily habit reminder - wrapper method for specific habit reminders"},{"type":"INSERT","lineNumber":290,"content":"  static Future<void> scheduleDailyHabitReminder({"},{"type":"INSERT","lineNumber":291,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":292,"content":"    required String habitName,"},{"type":"INSERT","lineNumber":293,"content":"    required DateTime reminderTime,"},{"type":"INSERT","lineNumber":294,"content":"  }) async {"},{"type":"INSERT","lineNumber":295,"content":"    final id = habitId.hashCode; // Generate unique ID from habit ID"},{"type":"INSERT","lineNumber":296,"content":"    final hour = reminderTime.hour;"},{"type":"INSERT","lineNumber":297,"content":"    final minute = reminderTime.minute;"},{"type":"INSERT","lineNumber":298,"content":"    "},{"type":"INSERT","lineNumber":299,"content":"    await scheduleDailyNotification("},{"type":"INSERT","lineNumber":300,"content":"      id: id,"},{"type":"INSERT","lineNumber":301,"content":"      title: 'Habit Reminder',"},{"type":"INSERT","lineNumber":302,"content":"      body: 'Time to complete your habit: $habitName',"},{"type":"INSERT","lineNumber":303,"content":"      hour: hour,"},{"type":"INSERT","lineNumber":304,"content":"      minute: minute,"},{"type":"INSERT","lineNumber":305,"content":"      payload: jsonEncode({"},{"type":"INSERT","lineNumber":306,"content":"        'habitId': habitId,"},{"type":"INSERT","lineNumber":307,"content":"        'habitName': habitName,"},{"type":"INSERT","lineNumber":308,"content":"        'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":309,"content":"      }),"},{"type":"INSERT","lineNumber":310,"content":"    );"},{"type":"INSERT","lineNumber":311,"content":"  }"},{"type":"INSERT","lineNumber":312,"content":""},{"type":"INSERT","lineNumber":359,"content":"    required String body,"},{"type":"DELETE","lineNumber":336,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":358,"oldContent":"    );"},{"type":"INSERT","lineNumber":383,"content":"    );"},{"type":"DELETE","lineNumber":365,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":390,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":382,"oldContent":"  }"},{"type":"INSERT","lineNumber":407,"content":"  }"},{"type":"DELETE","lineNumber":391,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":416,"content":"  }) async {"},{"type":"INSERT","lineNumber":427,"content":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":405,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":442,"oldContent":"    "},{"type":"DELETE","lineNumber":445,"oldContent":"    "},{"type":"DELETE","lineNumber":451,"oldContent":"    "},{"type":"DELETE","lineNumber":454,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":456,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":457,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":477,"content":"    );"},{"type":"INSERT","lineNumber":478,"content":"  }"},{"type":"INSERT","lineNumber":480,"content":"  /// Snooze a notification for 30 minutes"},{"type":"INSERT","lineNumber":481,"content":"  static Future<void> snoozeNotification({"},{"type":"INSERT","lineNumber":482,"content":"    required int id,"},{"type":"INSERT","lineNumber":483,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":484,"content":"    required String title,"},{"type":"INSERT","lineNumber":485,"content":"    required String body,"},{"type":"INSERT","lineNumber":486,"content":"  }) async {"},{"type":"INSERT","lineNumber":487,"content":"    // Cancel the current notification"},{"type":"INSERT","lineNumber":488,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":489,"content":"    "},{"type":"INSERT","lineNumber":490,"content":"    // Schedule a new one for 30 minutes later"},{"type":"INSERT","lineNumber":491,"content":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"INSERT","lineNumber":492,"content":"    "},{"type":"INSERT","lineNumber":493,"content":"    await scheduleHabitNotification("},{"type":"INSERT","lineNumber":494,"content":"      id: id,"},{"type":"INSERT","lineNumber":495,"content":"      habitId: habitId,"},{"type":"INSERT","lineNumber":496,"content":"      title: title,"},{"type":"INSERT","lineNumber":497,"content":"      body: body,"},{"type":"INSERT","lineNumber":498,"content":"      scheduledTime: snoozeTime,"},{"type":"INSERT","lineNumber":500,"content":"    "},{"type":"INSERT","lineNumber":501,"content":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"INSERT","lineNumber":502,"content":"  }"},{"type":"INSERT","lineNumber":503,"content":""},{"type":"INSERT","lineNumber":504,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":505,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":506,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":507,"content":""},{"type":"DELETE","lineNumber":463,"oldContent":"  }"},{"type":"DELETE","lineNumber":467,"oldContent":""},{"type":"DELETE","lineNumber":469,"oldContent":"  /// Snooze a notification for 30 minutes"},{"type":"DELETE","lineNumber":471,"oldContent":"  static Future<void> snoozeNotification({"},{"type":"DELETE","lineNumber":474,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":476,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":479,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":481,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":482,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"DELETE","lineNumber":485,"oldContent":"    // Cancel the current notification"},{"type":"DELETE","lineNumber":488,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":492,"oldContent":"    // Schedule a new one for 30 minutes later"},{"type":"DELETE","lineNumber":495,"oldContent":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"DELETE","lineNumber":499,"oldContent":"    await scheduleHabitNotification("},{"type":"DELETE","lineNumber":502,"oldContent":"      id: id,"},{"type":"DELETE","lineNumber":504,"oldContent":"      habitId: habitId,"},{"type":"DELETE","lineNumber":507,"oldContent":"      title: title,"},{"type":"DELETE","lineNumber":510,"oldContent":"      body: body,"},{"type":"DELETE","lineNumber":512,"oldContent":"      scheduledTime: snoozeTime,"},{"type":"DELETE","lineNumber":515,"oldContent":"    );"},{"type":"DELETE","lineNumber":519,"oldContent":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"DELETE","lineNumber":522,"oldContent":"  }"},{"type":"DELETE","lineNumber":525,"oldContent":""},{"type":"DELETE","lineNumber":527,"oldContent":"    }"},{"type":"DELETE","lineNumber":529,"oldContent":""},{"type":"DELETE","lineNumber":531,"oldContent":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":556,"content":"    final now = tz.TZDateTime.now(tz.local);"}]},{"timestamp":1754440344224,"changes":[{"type":"INSERT","lineNumber":118,"content":"        final String? action = notificationResponse.actionId;"},{"type":"DELETE","lineNumber":119,"oldContent":"        "},{"type":"MODIFY","lineNumber":126,"content":"      }","oldContent":"    }"},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"DELETE","lineNumber":129,"oldContent":"      }"},{"type":"DELETE","lineNumber":139,"oldContent":"  /// Show an immediate notification"},{"type":"INSERT","lineNumber":140,"content":"  }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"  /// Show an immediate notification"},{"type":"DELETE","lineNumber":143,"oldContent":"  }"},{"type":"DELETE","lineNumber":146,"oldContent":""},{"type":"INSERT","lineNumber":159,"content":"    );"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"DELETE","lineNumber":290,"oldContent":"  /// Cancel a specific notification"},{"type":"DELETE","lineNumber":292,"oldContent":"  static Future<void> cancelNotification(int id) async {"},{"type":"DELETE","lineNumber":294,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":296,"oldContent":"  }"},{"type":"DELETE","lineNumber":298,"oldContent":""},{"type":"DELETE","lineNumber":300,"oldContent":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":302,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":304,"oldContent":"    await _notificationsPlugin.cancelAll();"},{"type":"DELETE","lineNumber":306,"oldContent":"  }"},{"type":"DELETE","lineNumber":307,"oldContent":"    "},{"type":"DELETE","lineNumber":310,"oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":312,"oldContent":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"DELETE","lineNumber":314,"oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"DELETE","lineNumber":316,"oldContent":"  }"},{"type":"DELETE","lineNumber":318,"oldContent":""},{"type":"DELETE","lineNumber":320,"oldContent":"  /// Check if notifications are enabled"},{"type":"DELETE","lineNumber":322,"oldContent":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"DELETE","lineNumber":324,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":326,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":328,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":330,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":311,"content":"  }"},{"type":"INSERT","lineNumber":313,"content":"  /// Cancel a specific notification"},{"type":"INSERT","lineNumber":314,"content":"  static Future<void> cancelNotification(int id) async {"},{"type":"INSERT","lineNumber":315,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":334,"oldContent":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":318,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":319,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":320,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":321,"content":"  }"},{"type":"INSERT","lineNumber":322,"content":""},{"type":"INSERT","lineNumber":323,"content":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":324,"content":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"INSERT","lineNumber":325,"content":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"INSERT","lineNumber":326,"content":"  }"},{"type":"INSERT","lineNumber":327,"content":""},{"type":"INSERT","lineNumber":328,"content":"  /// Check if notifications are enabled"},{"type":"INSERT","lineNumber":329,"content":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"INSERT","lineNumber":330,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":331,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":332,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":333,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":334,"content":""},{"type":"INSERT","lineNumber":335,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":359,"content":"    required String body,"},{"type":"DELETE","lineNumber":381,"oldContent":"    required String body,"},{"type":"INSERT","lineNumber":383,"content":"    );"},{"type":"INSERT","lineNumber":390,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":405,"oldContent":"    );"},{"type":"INSERT","lineNumber":407,"content":"  }"},{"type":"DELETE","lineNumber":412,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":416,"content":"  }) async {"},{"type":"INSERT","lineNumber":427,"content":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":428,"oldContent":"  }"},{"type":"DELETE","lineNumber":438,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":450,"oldContent":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":477,"content":"    );"},{"type":"INSERT","lineNumber":478,"content":"  }"},{"type":"INSERT","lineNumber":480,"content":"  /// Snooze a notification for 30 minutes"},{"type":"INSERT","lineNumber":481,"content":"  static Future<void> snoozeNotification({"},{"type":"INSERT","lineNumber":482,"content":"    required int id,"},{"type":"INSERT","lineNumber":483,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":484,"content":"    required String title,"},{"type":"INSERT","lineNumber":485,"content":"    required String body,"},{"type":"INSERT","lineNumber":486,"content":"  }) async {"},{"type":"INSERT","lineNumber":487,"content":"    // Cancel the current notification"},{"type":"INSERT","lineNumber":488,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":489,"content":"    "},{"type":"INSERT","lineNumber":490,"content":"    // Schedule a new one for 30 minutes later"},{"type":"INSERT","lineNumber":491,"content":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"INSERT","lineNumber":492,"content":"    "},{"type":"INSERT","lineNumber":493,"content":"    await scheduleHabitNotification("},{"type":"INSERT","lineNumber":494,"content":"      id: id,"},{"type":"INSERT","lineNumber":495,"content":"      habitId: habitId,"},{"type":"INSERT","lineNumber":496,"content":"      title: title,"},{"type":"INSERT","lineNumber":497,"content":"      body: body,"},{"type":"INSERT","lineNumber":498,"content":"      scheduledTime: snoozeTime,"},{"type":"INSERT","lineNumber":500,"content":"    "},{"type":"INSERT","lineNumber":501,"content":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"INSERT","lineNumber":502,"content":"  }"},{"type":"INSERT","lineNumber":503,"content":""},{"type":"INSERT","lineNumber":504,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":505,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":506,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":507,"content":""},{"type":"DELETE","lineNumber":489,"oldContent":"    );"},{"type":"DELETE","lineNumber":491,"oldContent":"  }"},{"type":"DELETE","lineNumber":493,"oldContent":"  /// Snooze a notification for 30 minutes"},{"type":"DELETE","lineNumber":495,"oldContent":"  static Future<void> snoozeNotification({"},{"type":"DELETE","lineNumber":496,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":497,"oldContent":"    required String habitId,"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"DELETE","lineNumber":499,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":501,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":502,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":504,"oldContent":"    // Cancel the current notification"},{"type":"DELETE","lineNumber":506,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":507,"oldContent":"    "},{"type":"DELETE","lineNumber":509,"oldContent":"    // Schedule a new one for 30 minutes later"},{"type":"DELETE","lineNumber":511,"oldContent":"    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));"},{"type":"DELETE","lineNumber":513,"oldContent":"    "},{"type":"DELETE","lineNumber":514,"oldContent":"    await scheduleHabitNotification("},{"type":"DELETE","lineNumber":516,"oldContent":"      id: id,"},{"type":"DELETE","lineNumber":518,"oldContent":"      habitId: habitId,"},{"type":"DELETE","lineNumber":519,"oldContent":"      title: title,"},{"type":"DELETE","lineNumber":521,"oldContent":"      body: body,"},{"type":"DELETE","lineNumber":523,"oldContent":"      scheduledTime: snoozeTime,"},{"type":"DELETE","lineNumber":525,"oldContent":"    "},{"type":"DELETE","lineNumber":527,"oldContent":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"DELETE","lineNumber":529,"oldContent":"  }"},{"type":"DELETE","lineNumber":530,"oldContent":""},{"type":"DELETE","lineNumber":532,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":533,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":535,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"DELETE","lineNumber":537,"oldContent":""},{"type":"DELETE","lineNumber":547,"oldContent":"    }"},{"type":"DELETE","lineNumber":550,"oldContent":""},{"type":"INSERT","lineNumber":556,"content":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":579,"oldContent":"    final now = tz.TZDateTime.now(tz.local);"}]},{"timestamp":1754440758946,"changes":[{"type":"MODIFY","lineNumber":125,"content":"        AppLogger.error('Error parsing notification payload', e);","oldContent":"    }"},{"type":"MODIFY","lineNumber":140,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":143,"content":"  static Future<void> showNotification({","oldContent":"  static Future<void> showNotification({"},{"type":"MODIFY","lineNumber":298,"content":"    ","oldContent":""},{"type":"DELETE","lineNumber":300,"oldContent":"  }"},{"type":"DELETE","lineNumber":302,"oldContent":"  /// Cancel a specific notification"},{"type":"DELETE","lineNumber":304,"oldContent":"  static Future<void> cancelNotification(int id) async {"},{"type":"DELETE","lineNumber":305,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":304,"content":"      minute: minute,"},{"type":"INSERT","lineNumber":305,"content":"      payload: jsonEncode({"},{"type":"INSERT","lineNumber":306,"content":"        'habitId': habitId,"},{"type":"INSERT","lineNumber":307,"content":"        'habitName': habitName,"},{"type":"INSERT","lineNumber":308,"content":"        'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":309,"content":"      }),"},{"type":"INSERT","lineNumber":310,"content":"    );"},{"type":"INSERT","lineNumber":311,"content":"  }"},{"type":"INSERT","lineNumber":312,"content":""},{"type":"INSERT","lineNumber":313,"content":"  /// Cancel a specific notification"},{"type":"INSERT","lineNumber":314,"content":"  static Future<void> cancelNotification(int id) async {"},{"type":"INSERT","lineNumber":315,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":316,"content":"  }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":310,"oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":313,"oldContent":"      payload: jsonEncode({"},{"type":"DELETE","lineNumber":316,"oldContent":"        'habitId': habitId,"},{"type":"DELETE","lineNumber":319,"oldContent":"        'habitName': habitName,"},{"type":"DELETE","lineNumber":322,"oldContent":"        'type': 'habit_reminder',"},{"type":"DELETE","lineNumber":325,"oldContent":"      }),"},{"type":"DELETE","lineNumber":328,"oldContent":"    );"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":332,"oldContent":"  }"},{"type":"DELETE","lineNumber":335,"oldContent":""},{"type":"MODIFY","lineNumber":391,"content":"      android: androidPlatformChannelSpecifics,","oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"MODIFY","lineNumber":408,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":417,"content":"    if (!_isInitialized) await initialize();","oldContent":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":427,"content":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":429,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":478,"oldContent":""},{"type":"DELETE","lineNumber":480,"oldContent":"    );"},{"type":"DELETE","lineNumber":481,"oldContent":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":479,"content":""},{"type":"DELETE","lineNumber":483,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":485,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":487,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":489,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":493,"oldContent":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"DELETE","lineNumber":495,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"        // Check exact alarm permission status"},{"type":"DELETE","lineNumber":499,"oldContent":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":502,"oldContent":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"DELETE","lineNumber":505,"oldContent":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":508,"oldContent":"      }"},{"type":"DELETE","lineNumber":513,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":499,"content":"    );"},{"type":"DELETE","lineNumber":515,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":519,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":522,"oldContent":""},{"type":"INSERT","lineNumber":508,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":509,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":510,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":511,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":514,"content":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"INSERT","lineNumber":515,"content":""},{"type":"INSERT","lineNumber":516,"content":"        // Check exact alarm permission status"},{"type":"INSERT","lineNumber":517,"content":"        final bool canScheduleExact = await canScheduleExactAlarms();"},{"type":"INSERT","lineNumber":518,"content":"        debugInfo['canScheduleExactAlarms'] = canScheduleExact;"},{"type":"INSERT","lineNumber":519,"content":"        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();"},{"type":"INSERT","lineNumber":520,"content":"      }"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"INSERT","lineNumber":523,"content":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"INSERT","lineNumber":524,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":525,"content":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":526,"content":""},{"type":"DELETE","lineNumber":531,"oldContent":"    }"},{"type":"DELETE","lineNumber":532,"oldContent":""}]},{"timestamp":1754442310616,"changes":[{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"DELETE","lineNumber":140,"oldContent":"  }"},{"type":"INSERT","lineNumber":142,"content":"  /// Show an immediate notification"},{"type":"DELETE","lineNumber":143,"oldContent":"  static Future<void> showNotification({"},{"type":"MODIFY","lineNumber":298,"content":"","oldContent":"    "},{"type":"INSERT","lineNumber":302,"content":"      body: 'Time to complete your habit: $habitName',"},{"type":"INSERT","lineNumber":303,"content":"      hour: hour,"},{"type":"DELETE","lineNumber":305,"oldContent":"      body: 'Time to complete your habit: $habitName',"},{"type":"DELETE","lineNumber":307,"oldContent":"      hour: hour,"},{"type":"DELETE","lineNumber":309,"oldContent":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":311,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":314,"oldContent":"    await _notificationsPlugin.cancelAll();"},{"type":"DELETE","lineNumber":316,"oldContent":"  }"},{"type":"DELETE","lineNumber":319,"oldContent":""},{"type":"DELETE","lineNumber":321,"oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":318,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":319,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":320,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":321,"content":"  }"},{"type":"INSERT","lineNumber":322,"content":""},{"type":"INSERT","lineNumber":323,"content":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":390,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":391,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":407,"content":"  }"},{"type":"DELETE","lineNumber":408,"oldContent":""},{"type":"INSERT","lineNumber":416,"content":"  }) async {"},{"type":"DELETE","lineNumber":417,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"MODIFY","lineNumber":479,"content":"","oldContent":""},{"type":"DELETE","lineNumber":489,"oldContent":"    );"},{"type":"INSERT","lineNumber":495,"content":"      habitId: habitId,"},{"type":"INSERT","lineNumber":496,"content":"      title: title,"},{"type":"INSERT","lineNumber":497,"content":"      body: body,"},{"type":"INSERT","lineNumber":498,"content":"      scheduledTime: snoozeTime,"},{"type":"INSERT","lineNumber":499,"content":"    );"},{"type":"INSERT","lineNumber":500,"content":"    "},{"type":"INSERT","lineNumber":501,"content":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"INSERT","lineNumber":502,"content":"  }"},{"type":"INSERT","lineNumber":503,"content":""},{"type":"INSERT","lineNumber":504,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":505,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":506,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":507,"content":""},{"type":"DELETE","lineNumber":498,"oldContent":"      habitId: habitId,"},{"type":"DELETE","lineNumber":500,"oldContent":"      title: title,"},{"type":"DELETE","lineNumber":502,"oldContent":"      body: body,"},{"type":"DELETE","lineNumber":504,"oldContent":"      scheduledTime: snoozeTime,"},{"type":"DELETE","lineNumber":507,"oldContent":"    "},{"type":"DELETE","lineNumber":510,"oldContent":"    AppLogger.info('Notification snoozed for 30 minutes');"},{"type":"DELETE","lineNumber":512,"oldContent":"  }"},{"type":"DELETE","lineNumber":514,"oldContent":""},{"type":"DELETE","lineNumber":517,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":519,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":522,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"DELETE","lineNumber":524,"oldContent":""},{"type":"MODIFY","lineNumber":527,"content":"    debugInfo['deviceLocalTime'] = now.toString();","oldContent":"    debugInfo['deviceLocalTime'] = now.toString();"}]},{"timestamp":1754443018502,"changes":[{"type":"MODIFY","lineNumber":62,"content":"      AppLogger.error('Error checking Android version', e);","oldContent":"      print('Error checking Android version: $e');"},{"type":"MODIFY","lineNumber":304,"content":"      minute: minute,","oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":314,"oldContent":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":316,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":317,"oldContent":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":318,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":319,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":320,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"MODIFY","lineNumber":323,"content":"  /// Get pending notifications","oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":478,"content":"  }"},{"type":"DELETE","lineNumber":479,"oldContent":""},{"type":"MODIFY","lineNumber":495,"content":"      habitId: habitId,","oldContent":"      habitId: habitId,"},{"type":"DELETE","lineNumber":497,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":499,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":502,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":505,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":508,"oldContent":""},{"type":"DELETE","lineNumber":511,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":513,"oldContent":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"INSERT","lineNumber":508,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":509,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":510,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":511,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":513,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":514,"content":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"INSERT","lineNumber":515,"content":""},{"type":"INSERT","lineNumber":526,"content":""},{"type":"DELETE","lineNumber":527,"oldContent":"    debugInfo['deviceLocalTime'] = now.toString();"}]},{"timestamp":1754443040675,"changes":[{"type":"MODIFY","lineNumber":86,"content":"        AppLogger.info('Android 12+ detected - requesting exact alarm permissions');","oldContent":"        print('Android 12+ detected - requesting exact alarm permissions');"},{"type":"MODIFY","lineNumber":92,"content":"          AppLogger.info('Exact alarm permission granted: $exactAlarmPermission');","oldContent":"          print('Exact alarm permission granted: $exactAlarmPermission');"},{"type":"MODIFY","lineNumber":95,"content":"            AppLogger.warning(","oldContent":"            print("},{"type":"MODIFY","lineNumber":97,"content":"            AppLogger.warning(","oldContent":"            print("},{"type":"MODIFY","lineNumber":101,"content":"          AppLogger.error('Error requesting exact alarm permission', e);","oldContent":"          print('Error requesting exact alarm permission: $e');"},{"type":"MODIFY","lineNumber":104,"content":"        AppLogger.info('Android 11 or below detected - exact alarm permissions not required');","oldContent":"        print('Android 11 or below detected - exact alarm permissions not required');"},{"type":"INSERT","lineNumber":303,"content":"      hour: hour,"},{"type":"DELETE","lineNumber":304,"oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":315,"oldContent":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":317,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":319,"oldContent":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":318,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":319,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":320,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":322,"content":""},{"type":"DELETE","lineNumber":323,"oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":494,"content":"      id: id,"},{"type":"DELETE","lineNumber":495,"oldContent":"      habitId: habitId,"},{"type":"INSERT","lineNumber":504,"content":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"INSERT","lineNumber":505,"content":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"INSERT","lineNumber":506,"content":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":507,"content":""},{"type":"DELETE","lineNumber":506,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":508,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":510,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"DELETE","lineNumber":514,"oldContent":""},{"type":"DELETE","lineNumber":515,"oldContent":""}]},{"timestamp":1754443059313,"changes":[{"type":"DELETE","lineNumber":209,"oldContent":"    print('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":210,"oldContent":"    print('Target scheduled time: $localScheduledTime');"},{"type":"DELETE","lineNumber":211,"oldContent":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":209,"content":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":210,"content":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":211,"content":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":216,"oldContent":"    print('TZ Scheduled time: $tzScheduledTime');"},{"type":"MODIFY","lineNumber":216,"content":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');","oldContent":"    print('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":217,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":316,"oldContent":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":320,"oldContent":""},{"type":"DELETE","lineNumber":505,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":507,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":508,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":509,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"MODIFY","lineNumber":513,"content":"      if (androidImplementation != null) {","oldContent":"      if (androidImplementation != null) {"}]},{"timestamp":1754443080430,"changes":[{"type":"MODIFY","lineNumber":217,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');","oldContent":"    print('TZ Local timezone: ${tz.local.name}');"},{"type":"MODIFY","lineNumber":317,"content":"","oldContent":""},{"type":"DELETE","lineNumber":506,"oldContent":"    if (Platform.isAndroid) {"},{"type":"MODIFY","lineNumber":508,"content":"    if (Platform.isAndroid) {","oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":509,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":512,"content":""},{"type":"DELETE","lineNumber":513,"oldContent":"      if (androidImplementation != null) {"},{"type":"MODIFY","lineNumber":542,"content":"    AppLogger.info('=== Testing Scheduled Notification ===');","oldContent":"    print('=== Testing Scheduled Notification ===');"},{"type":"MODIFY","lineNumber":545,"content":"    AppLogger.info('Debug Info: $debugInfo');","oldContent":"    print('Debug Info: $debugInfo');"},{"type":"MODIFY","lineNumber":549,"content":"    AppLogger.info('Can schedule exact alarms: $canScheduleExact');","oldContent":"    print('Can schedule exact alarms: $canScheduleExact');"},{"type":"MODIFY","lineNumber":552,"content":"      AppLogger.error('ERROR: Exact alarm permission not granted!');","oldContent":"      print('ERROR: Exact alarm permission not granted!');"},{"type":"DELETE","lineNumber":559,"oldContent":"    print('Current time: $now');"},{"type":"DELETE","lineNumber":560,"oldContent":"    print('Scheduled time: $scheduledTime');"},{"type":"DELETE","lineNumber":561,"oldContent":"    print('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');"},{"type":"INSERT","lineNumber":559,"content":"    AppLogger.info('Current time: $now');"},{"type":"INSERT","lineNumber":560,"content":"    AppLogger.info('Scheduled time: $scheduledTime');"},{"type":"INSERT","lineNumber":561,"content":"    AppLogger.info('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');"},{"type":"MODIFY","lineNumber":566,"content":"      AppLogger.info('Cancelled any existing test notifications');","oldContent":"      print('Cancelled any existing test notifications');"},{"type":"MODIFY","lineNumber":575,"content":"      AppLogger.info('Scheduled notification successfully queued');","oldContent":"      print('Scheduled notification successfully queued');"},{"type":"MODIFY","lineNumber":579,"content":"      AppLogger.info('Pending notifications: ${pending.length}');","oldContent":"      print('Pending notifications: ${pending.length}');"},{"type":"MODIFY","lineNumber":581,"content":"        AppLogger.info('- ID: ${notification.id}, Title: ${notification.title}');","oldContent":"        print('- ID: ${notification.id}, Title: ${notification.title}');"},{"type":"DELETE","lineNumber":585,"oldContent":"      print('Verification: Notification system should deliver the notification in 10 seconds');"},{"type":"MODIFY","lineNumber":585,"content":"      AppLogger.info('Verification: Notification system should deliver the notification in 10 seconds');","oldContent":"      print('Watch your device for the notification!');"},{"type":"INSERT","lineNumber":586,"content":"      AppLogger.info('Watch your device for the notification!');"},{"type":"DELETE","lineNumber":589,"oldContent":"      print('Error scheduling notification: $e');"},{"type":"DELETE","lineNumber":590,"oldContent":"      print('Stack trace: ${StackTrace.current}');"},{"type":"INSERT","lineNumber":589,"content":"      AppLogger.error('Error scheduling notification', e);"},{"type":"INSERT","lineNumber":590,"content":"      AppLogger.error('Stack trace: ${StackTrace.current}');"}]},{"timestamp":1754443101907,"changes":[{"type":"MODIFY","lineNumber":44,"content":"","oldContent":"    );"},{"type":"INSERT","lineNumber":316,"content":"  }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"INSERT","lineNumber":343,"content":""},{"type":"INSERT","lineNumber":344,"content":"  /// Test notification - useful for debugging"},{"type":"INSERT","lineNumber":345,"content":"  static Future<void> showTestNotification() async {"},{"type":"INSERT","lineNumber":346,"content":"    await showNotification("},{"type":"INSERT","lineNumber":347,"content":"      id: 999,"},{"type":"INSERT","lineNumber":348,"content":"      title: '🎯 Test Notification',"},{"type":"INSERT","lineNumber":349,"content":"      body: 'This is a test notification to verify the system is working!',"},{"type":"INSERT","lineNumber":350,"content":"      payload: 'test_notification',"},{"type":"INSERT","lineNumber":351,"content":"    );"},{"type":"DELETE","lineNumber":345,"oldContent":"  /// Schedule a notification for a specific time using device local time"},{"type":"DELETE","lineNumber":346,"oldContent":"  static Future<void> scheduleNotification({"},{"type":"DELETE","lineNumber":347,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":348,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":349,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":350,"oldContent":"    required DateTime scheduledTime,"},{"type":"DELETE","lineNumber":351,"oldContent":"    String? payload,"},{"type":"DELETE","lineNumber":352,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":353,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"MODIFY","lineNumber":394,"content":"","oldContent":"        DarwinNotificationDetails();"},{"type":"INSERT","lineNumber":507,"content":""},{"type":"DELETE","lineNumber":509,"oldContent":""},{"type":"MODIFY","lineNumber":586,"content":"      AppLogger.info('Watch your device for the notification!');","oldContent":"      print('Watch your device for the notification!');"},{"type":"MODIFY","lineNumber":610,"content":"          AppLogger.info('Can schedule exact alarms: $canSchedule');","oldContent":"          print('Can schedule exact alarms: $canSchedule');"},{"type":"MODIFY","lineNumber":617,"content":"        AppLogger.error('Error checking exact alarm permission', e);","oldContent":"        print('Error checking exact alarm permission: $e');"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":644,"oldContent":""},{"type":"DELETE","lineNumber":645,"oldContent":"  static Future<void> openExactAlarmSettings() async {"},{"type":"DELETE","lineNumber":646,"oldContent":"    // For iOS, we assume they're enabled if the user granted permission"},{"type":"DELETE","lineNumber":647,"oldContent":"    if (!Platform.isAndroid) return;"},{"type":"DELETE","lineNumber":648,"oldContent":"}"},{"type":"DELETE","lineNumber":649,"oldContent":"    return true;"},{"type":"DELETE","lineNumber":650,"oldContent":""},{"type":"DELETE","lineNumber":651,"oldContent":"  }"},{"type":"DELETE","lineNumber":652,"oldContent":"    final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":653,"oldContent":""},{"type":"DELETE","lineNumber":654,"oldContent":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":655,"oldContent":"  /// Test notification - useful for debugging"},{"type":"DELETE","lineNumber":656,"oldContent":"            AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":657,"oldContent":"  static Future<void> showTestNotification() async {"},{"type":"DELETE","lineNumber":658,"oldContent":""},{"type":"DELETE","lineNumber":659,"oldContent":"    await showNotification("},{"type":"DELETE","lineNumber":660,"oldContent":"    if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":661,"oldContent":"      id: 999,"},{"type":"DELETE","lineNumber":662,"oldContent":"      try {"},{"type":"DELETE","lineNumber":663,"oldContent":"      title: '🎯 Test Notification',"},{"type":"DELETE","lineNumber":664,"oldContent":"        await androidImplementation.requestExactAlarmsPermission();"},{"type":"DELETE","lineNumber":665,"oldContent":"      body: 'This is a test notification to verify the system is working!',"},{"type":"DELETE","lineNumber":666,"oldContent":"        print('Opened exact alarm settings');"},{"type":"DELETE","lineNumber":667,"oldContent":"      payload: 'test_notification',"},{"type":"DELETE","lineNumber":668,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":669,"oldContent":"    );"},{"type":"DELETE","lineNumber":670,"oldContent":"        print('Error opening exact alarm settings: $e');"},{"type":"DELETE","lineNumber":671,"oldContent":"  }"},{"type":"DELETE","lineNumber":672,"oldContent":"      }"},{"type":"DELETE","lineNumber":673,"oldContent":""},{"type":"DELETE","lineNumber":674,"oldContent":"    }"},{"type":"DELETE","lineNumber":675,"oldContent":"  /// Schedule a habit reminder notification"},{"type":"DELETE","lineNumber":676,"oldContent":"  }"},{"type":"DELETE","lineNumber":677,"oldContent":"  static Future<void> scheduleHabitReminder({"},{"type":"DELETE","lineNumber":678,"oldContent":"    required int habitId,"},{"type":"DELETE","lineNumber":679,"oldContent":"    required String habitName,"},{"type":"DELETE","lineNumber":680,"oldContent":"    required DateTime reminderTime,"},{"type":"DELETE","lineNumber":681,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":682,"oldContent":"    await scheduleNotification("},{"type":"DELETE","lineNumber":683,"oldContent":"      id: habitId,"},{"type":"DELETE","lineNumber":684,"oldContent":"      title: '🎯 Habit Reminder',"},{"type":"DELETE","lineNumber":685,"oldContent":"      body: 'Time to complete: $habitName',"},{"type":"DELETE","lineNumber":686,"oldContent":"      scheduledTime: reminderTime,"},{"type":"DELETE","lineNumber":687,"oldContent":"      payload: 'habit_reminder_$habitId',"},{"type":"DELETE","lineNumber":688,"oldContent":"    );"},{"type":"DELETE","lineNumber":689,"oldContent":"  }"},{"type":"DELETE","lineNumber":690,"oldContent":""},{"type":"DELETE","lineNumber":691,"oldContent":""},{"type":"DELETE","lineNumber":692,"oldContent":"  /// Schedule a daily habit reminder"},{"type":"DELETE","lineNumber":693,"oldContent":"  static Future<void> scheduleDailyHabitReminder({"},{"type":"DELETE","lineNumber":694,"oldContent":"    required int habitId,"},{"type":"DELETE","lineNumber":695,"oldContent":"    required String habitName,"},{"type":"DELETE","lineNumber":696,"oldContent":"    required int hour,"},{"type":"DELETE","lineNumber":697,"oldContent":"    required int minute,"},{"type":"DELETE","lineNumber":698,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":699,"oldContent":"    await scheduleDailyNotification("},{"type":"DELETE","lineNumber":700,"oldContent":""},{"type":"DELETE","lineNumber":701,"oldContent":"      id: habitId,"},{"type":"DELETE","lineNumber":702,"oldContent":"    print('Current time: $now');"},{"type":"DELETE","lineNumber":703,"oldContent":"      title: '🎯 Daily Habit Reminder',"},{"type":"DELETE","lineNumber":704,"oldContent":"      body: 'Don\\'t forget: $habitName',"},{"type":"DELETE","lineNumber":705,"oldContent":"      hour: hour,"},{"type":"DELETE","lineNumber":706,"oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":707,"oldContent":"      payload: 'daily_habit_$habitId',"},{"type":"DELETE","lineNumber":708,"oldContent":"    );"},{"type":"DELETE","lineNumber":709,"oldContent":"      await cancelNotification(1001);"},{"type":"DELETE","lineNumber":710,"oldContent":"  }"},{"type":"DELETE","lineNumber":711,"oldContent":"      print('Cancelled any existing test notifications');"},{"type":"DELETE","lineNumber":712,"oldContent":""},{"type":"DELETE","lineNumber":713,"oldContent":"  /// Debug method to check exact alarm permissions and timezone"},{"type":"DELETE","lineNumber":714,"oldContent":"  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {"},{"type":"DELETE","lineNumber":715,"oldContent":"    final Map<String, dynamic> debugInfo = {};"},{"type":"DELETE","lineNumber":716,"oldContent":""},{"type":"DELETE","lineNumber":717,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":718,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":719,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":720,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":721,"oldContent":""},{"type":"DELETE","lineNumber":722,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":723,"oldContent":"        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();"},{"type":"DELETE","lineNumber":724,"oldContent":"      }"},{"type":"DELETE","lineNumber":725,"oldContent":"    }"},{"type":"DELETE","lineNumber":726,"oldContent":""},{"type":"DELETE","lineNumber":727,"oldContent":"    // Get device's actual local timezone instead of hardcoded one"},{"type":"DELETE","lineNumber":728,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":729,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":730,"oldContent":""},{"type":"DELETE","lineNumber":731,"oldContent":"    debugInfo['deviceLocalTime'] = now.toString();"},{"type":"DELETE","lineNumber":732,"oldContent":"      print('Watch your device for the notification!');"},{"type":"DELETE","lineNumber":733,"oldContent":"    debugInfo['tzLocalTime'] = tzNow.toString();"},{"type":"DELETE","lineNumber":734,"oldContent":""},{"type":"DELETE","lineNumber":735,"oldContent":"    debugInfo['timezone'] = tz.local.name;"},{"type":"DELETE","lineNumber":736,"oldContent":"    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;"},{"type":"DELETE","lineNumber":737,"oldContent":"    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();"},{"type":"DELETE","lineNumber":738,"oldContent":""},{"type":"DELETE","lineNumber":739,"oldContent":"    // Test scheduled time (10 seconds from now)"},{"type":"DELETE","lineNumber":740,"oldContent":"  }"},{"type":"DELETE","lineNumber":741,"oldContent":"    final testTime = now.add(const Duration(seconds: 10));"},{"type":"DELETE","lineNumber":742,"oldContent":"    debugInfo['testScheduledTime'] = testTime.toString();"},{"type":"DELETE","lineNumber":743,"oldContent":""},{"type":"DELETE","lineNumber":744,"oldContent":"    return debugInfo;"},{"type":"DELETE","lineNumber":745,"oldContent":"  }"},{"type":"DELETE","lineNumber":746,"oldContent":""},{"type":"DELETE","lineNumber":747,"oldContent":"  /// Enhanced test method for scheduled notifications with logging"},{"type":"DELETE","lineNumber":748,"oldContent":"  static Future<void> testScheduledNotification() async {"},{"type":"DELETE","lineNumber":749,"oldContent":"    print('=== Testing Scheduled Notification ===');"},{"type":"DELETE","lineNumber":750,"oldContent":""},{"type":"DELETE","lineNumber":751,"oldContent":"    final debugInfo = await getSchedulingDebugInfo();"},{"type":"DELETE","lineNumber":752,"oldContent":"    print('Debug Info: $debugInfo');"},{"type":"DELETE","lineNumber":753,"oldContent":""},{"type":"DELETE","lineNumber":754,"oldContent":"    final now = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":755,"oldContent":"    final scheduledTime = now.add(const Duration(seconds: 10)); // Changed to 10 seconds for more time"},{"type":"DELETE","lineNumber":756,"oldContent":""},{"type":"DELETE","lineNumber":757,"oldContent":"    print('Current time: $now');"},{"type":"DELETE","lineNumber":758,"oldContent":"    print('Scheduled time: $scheduledTime');"},{"type":"DELETE","lineNumber":759,"oldContent":"    print('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');"},{"type":"DELETE","lineNumber":760,"oldContent":""},{"type":"DELETE","lineNumber":761,"oldContent":"    try {"},{"type":"DELETE","lineNumber":762,"oldContent":"      await scheduleNotification("},{"type":"DELETE","lineNumber":763,"oldContent":"        id: 1001,"},{"type":"DELETE","lineNumber":764,"oldContent":"        title: '🔔 Debug Scheduled Test',"},{"type":"DELETE","lineNumber":765,"oldContent":"        body: 'This notification was scheduled at ${now.toString().substring(11, 19)}',"},{"type":"DELETE","lineNumber":766,"oldContent":"        scheduledTime: scheduledTime.toLocal(),"},{"type":"DELETE","lineNumber":767,"oldContent":"        return false;"},{"type":"DELETE","lineNumber":768,"oldContent":"        payload: 'debug_scheduled_test',"},{"type":"DELETE","lineNumber":769,"oldContent":"      }"},{"type":"DELETE","lineNumber":770,"oldContent":"      );"},{"type":"DELETE","lineNumber":771,"oldContent":"    }"},{"type":"DELETE","lineNumber":772,"oldContent":"      print('Scheduled notification successfully queued');"},{"type":"DELETE","lineNumber":773,"oldContent":""},{"type":"DELETE","lineNumber":774,"oldContent":"      // Check if it was actually scheduled"},{"type":"DELETE","lineNumber":775,"oldContent":"      final pending = await getPendingNotifications();"},{"type":"DELETE","lineNumber":776,"oldContent":"      print('Pending notifications: ${pending.length}');"},{"type":"DELETE","lineNumber":777,"oldContent":"      for (var notification in pending) {"},{"type":"DELETE","lineNumber":778,"oldContent":"        print('- ID: ${notification.id}, Title: ${notification.title}');"},{"type":"DELETE","lineNumber":779,"oldContent":"      }"},{"type":"DELETE","lineNumber":780,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":781,"oldContent":"      print('Error scheduling notification: $e');"},{"type":"DELETE","lineNumber":782,"oldContent":"    }"},{"type":"DELETE","lineNumber":783,"oldContent":"  }"},{"type":"DELETE","lineNumber":784,"oldContent":"}"},{"type":"DELETE","lineNumber":785,"oldContent":""}]},{"timestamp":1754444051623,"changes":[{"type":"INSERT","lineNumber":1,"content":"import 'package:timezone/timezone.dart' as tz;"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":7,"content":"class NotificationService {"},{"type":"INSERT","lineNumber":8,"content":"  static final FlutterLocalNotificationsPlugin _notificationsPlugin ="},{"type":"INSERT","lineNumber":9,"content":"      FlutterLocalNotificationsPlugin();"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":12,"content":""},{"type":"INSERT","lineNumber":13,"content":"  // Callback for handling notification actions"},{"type":"INSERT","lineNumber":14,"content":"  static Function(String habitId, String action)? onNotificationAction;"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"INSERT","lineNumber":17,"content":"  static Future<void> initialize() async {"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":21,"content":"    const AndroidInitializationSettings initializationSettingsAndroid ="},{"type":"DELETE","lineNumber":13,"oldContent":"  // Callback for handling notification actions"},{"type":"DELETE","lineNumber":14,"oldContent":"  static Function(String habitId, String action)? onNotificationAction;"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"INSERT","lineNumber":24,"content":"    // iOS initialization settings"},{"type":"INSERT","lineNumber":25,"content":"    const DarwinInitializationSettings initializationSettingsIOS ="},{"type":"INSERT","lineNumber":27,"content":"      requestAlertPermission: true,"},{"type":"INSERT","lineNumber":29,"content":"      requestSoundPermission: true,"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":33,"content":"    const InitializationSettings initializationSettings ="},{"type":"INSERT","lineNumber":35,"content":"      android: initializationSettingsAndroid,"},{"type":"INSERT","lineNumber":37,"content":"    );"},{"type":"INSERT","lineNumber":39,"content":"    // Initialize the plugin"},{"type":"INSERT","lineNumber":41,"content":"      initializationSettings,"},{"type":"INSERT","lineNumber":43,"content":"    );"},{"type":"INSERT","lineNumber":45,"content":"    // Request permissions for Android 13+"},{"type":"INSERT","lineNumber":47,"content":"      await _requestAndroidPermissions();"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":51,"content":"  }"},{"type":"INSERT","lineNumber":53,"content":"  /// Check if device is running Android 12+ (API level 31+)"},{"type":"INSERT","lineNumber":55,"content":"    if (!Platform.isAndroid) return false;"},{"type":"INSERT","lineNumber":57,"content":"    try {"},{"type":"INSERT","lineNumber":59,"content":"      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;"},{"type":"DELETE","lineNumber":34,"oldContent":"      print('Error checking Android version: $e');"},{"type":"INSERT","lineNumber":61,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":62,"content":"      AppLogger.error('Error checking Android version', e);"},{"type":"INSERT","lineNumber":63,"content":"      return false; // Assume older version if error"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"  static Future<void> _requestAndroidPermissions() async {"},{"type":"DELETE","lineNumber":38,"oldContent":"        _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"      // Request notification permission"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"      final bool isAndroid12Plus = await _isAndroid12Plus();"},{"type":"DELETE","lineNumber":43,"oldContent":"      if (isAndroid12Plus) {"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"        try {"},{"type":"DELETE","lineNumber":46,"oldContent":"              await androidImplementation.requestExactAlarmsPermission();"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"            print("},{"type":"DELETE","lineNumber":49,"oldContent":"            print("},{"type":"DELETE","lineNumber":50,"oldContent":"          }"},{"type":"DELETE","lineNumber":51,"oldContent":"          print('Error requesting exact alarm permission: $e');"},{"type":"DELETE","lineNumber":52,"oldContent":"      } else {"},{"type":"DELETE","lineNumber":53,"oldContent":"      }"},{"type":"DELETE","lineNumber":55,"oldContent":"  /// Handle notification tap"},{"type":"DELETE","lineNumber":56,"oldContent":"    final String? payload = notificationResponse.payload;"},{"type":"DELETE","lineNumber":57,"oldContent":"      print('Notification tapped with payload: $payload');"},{"type":"DELETE","lineNumber":58,"oldContent":"    }"},{"type":"DELETE","lineNumber":60,"oldContent":"  static Future<void> showNotification({"},{"type":"DELETE","lineNumber":61,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":62,"oldContent":"      AppLogger.error('Error checking Android version', e);"},{"type":"DELETE","lineNumber":63,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":64,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":65,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":66,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"MODIFY","lineNumber":288,"content":"","oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":342,"oldContent":"    return true;"},{"type":"MODIFY","lineNumber":343,"content":"","oldContent":""},{"type":"DELETE","lineNumber":346,"oldContent":"  /// Test notification - useful for debugging"},{"type":"INSERT","lineNumber":352,"content":"  }"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"MODIFY","lineNumber":635,"content":"        AppLogger.info('Opened exact alarm settings');","oldContent":"        print('Opened exact alarm settings');"},{"type":"MODIFY","lineNumber":637,"content":"        AppLogger.error('Error opening exact alarm settings', e);","oldContent":"        print('Error opening exact alarm settings: $e');"}]},{"timestamp":1754444606240,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import 'package:device_info_plus/device_info_plus.dart';","oldContent":"import 'package:timezone/timezone.dart' as tz;"},{"type":"DELETE","lineNumber":8,"oldContent":"class NotificationService {"},{"type":"DELETE","lineNumber":10,"oldContent":"  static final FlutterLocalNotificationsPlugin _notificationsPlugin ="},{"type":"DELETE","lineNumber":12,"oldContent":"      FlutterLocalNotificationsPlugin();"},{"type":"DELETE","lineNumber":14,"oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"  static Future<void> initialize() async {"},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":"    const AndroidInitializationSettings initializationSettingsAndroid ="},{"type":"DELETE","lineNumber":33,"oldContent":"    // iOS initialization settings"},{"type":"DELETE","lineNumber":35,"oldContent":"    const DarwinInitializationSettings initializationSettingsIOS ="},{"type":"DELETE","lineNumber":38,"oldContent":"      requestAlertPermission: true,"},{"type":"DELETE","lineNumber":41,"oldContent":"      requestSoundPermission: true,"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"    const InitializationSettings initializationSettings ="},{"type":"INSERT","lineNumber":34,"content":"        InitializationSettings("},{"type":"DELETE","lineNumber":49,"oldContent":"      android: initializationSettingsAndroid,"},{"type":"INSERT","lineNumber":36,"content":"      iOS: initializationSettingsIOS,"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":40,"content":"    await _notificationsPlugin.initialize("},{"type":"INSERT","lineNumber":42,"content":"      onDidReceiveNotificationResponse: _onNotificationTapped,"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":46,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":50,"content":"    _isInitialized = true;"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":58,"content":"      final DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();"},{"type":"DELETE","lineNumber":63,"oldContent":"      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;"},{"type":"INSERT","lineNumber":60,"content":"      return androidInfo.version.sdkInt >= 31; // Android 12 = API 31"},{"type":"INSERT","lineNumber":64,"content":"    }"},{"type":"INSERT","lineNumber":65,"content":"  }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":77,"content":""},{"type":"DELETE","lineNumber":78,"oldContent":"    if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"DELETE","lineNumber":200,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":227,"oldContent":"    required DateTime scheduledTime,"},{"type":"DELETE","lineNumber":228,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":229,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":231,"oldContent":""},{"type":"DELETE","lineNumber":232,"oldContent":"      'habit_scheduled_channel',"},{"type":"DELETE","lineNumber":233,"oldContent":"      'Scheduled Habit Notifications',"},{"type":"DELETE","lineNumber":234,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":235,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":236,"oldContent":""},{"type":"DELETE","lineNumber":237,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":238,"oldContent":""},{"type":"DELETE","lineNumber":239,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":240,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":241,"oldContent":"    );"},{"type":"DELETE","lineNumber":242,"oldContent":""},{"type":"DELETE","lineNumber":243,"oldContent":"    final deviceNow = DateTime.now();"},{"type":"DELETE","lineNumber":244,"oldContent":""},{"type":"DELETE","lineNumber":245,"oldContent":"    print('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":246,"oldContent":"    print('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":247,"oldContent":""},{"type":"DELETE","lineNumber":248,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"DELETE","lineNumber":249,"oldContent":""},{"type":"DELETE","lineNumber":250,"oldContent":"    print('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":251,"oldContent":""},{"type":"DELETE","lineNumber":252,"oldContent":"      id,"},{"type":"DELETE","lineNumber":253,"oldContent":"      title,"},{"type":"DELETE","lineNumber":254,"oldContent":"      tzScheduledTime,"},{"type":"DELETE","lineNumber":255,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":256,"oldContent":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":228,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"INSERT","lineNumber":234,"content":"    required int id,"},{"type":"INSERT","lineNumber":237,"content":"    required int hour,"},{"type":"INSERT","lineNumber":240,"content":"  }) async {"},{"type":"INSERT","lineNumber":243,"content":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":246,"content":"      'Daily Habit Notifications',"},{"type":"INSERT","lineNumber":249,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":252,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":255,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":258,"content":"    );"},{"type":"DELETE","lineNumber":280,"oldContent":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":261,"content":"    tz.TZDateTime scheduledDate = tz.TZDateTime("},{"type":"INSERT","lineNumber":263,"content":"      now.year,"},{"type":"INSERT","lineNumber":266,"content":"      hour,"},{"type":"INSERT","lineNumber":268,"content":"    );"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"INSERT","lineNumber":270,"content":"    // If the scheduled time is in the past, schedule for tomorrow"},{"type":"INSERT","lineNumber":271,"content":"    if (scheduledDate.isBefore(now)) {"},{"type":"INSERT","lineNumber":272,"content":"      scheduledDate = scheduledDate.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":273,"content":"    }"},{"type":"INSERT","lineNumber":274,"content":""},{"type":"INSERT","lineNumber":275,"content":"    await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":276,"content":"      id,"},{"type":"INSERT","lineNumber":277,"content":"      title,"},{"type":"INSERT","lineNumber":278,"content":"      body,"},{"type":"INSERT","lineNumber":279,"content":"      scheduledDate,"},{"type":"INSERT","lineNumber":280,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":281,"content":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"INSERT","lineNumber":282,"content":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":283,"content":"          UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"INSERT","lineNumber":284,"content":"      matchDateTimeComponents: DateTimeComponents.time,"},{"type":"DELETE","lineNumber":336,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":337,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":338,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":339,"oldContent":""},{"type":"INSERT","lineNumber":337,"content":"      }"},{"type":"INSERT","lineNumber":340,"content":"    // For iOS, we assume they're enabled if the user granted permission"},{"type":"INSERT","lineNumber":342,"content":"  }"},{"type":"INSERT","lineNumber":343,"content":""},{"type":"DELETE","lineNumber":350,"oldContent":"  }"},{"type":"MODIFY","lineNumber":352,"content":"  }","oldContent":""},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":638,"content":"      }"},{"type":"INSERT","lineNumber":639,"content":"    }"},{"type":"INSERT","lineNumber":640,"content":"  }"},{"type":"INSERT","lineNumber":641,"content":"}"},{"type":"INSERT","lineNumber":642,"content":""}]}]},"H:/New/HabitV8/lib/main.dart":{"filePath":"H:/New/HabitV8/lib/main.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:hive_flutter/hive_flutter.dart';\nimport 'package:timezone/data/latest.dart' as tz;\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:go_router/go_router.dart';\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'services/notification_service.dart';\nimport 'services/permission_service.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialize Hive\n  await Hive.initFlutter();\n\n  // Initialize timezone data\n  tz.initializeTimeZones();\n\n  // Properly detect and set the device's local timezone\n  await _setCorrectTimezone();\n\n  // Initialize notification service\n  await NotificationService.initialize();\n\n  // Request permissions\n  await PermissionService.requestAllPermissions();\n\n  runApp(const ProviderScope(child: MyApp()));\n}\n\n/// Detect and set the correct local timezone based on device settings\nFuture<void> _setCorrectTimezone() async {\n  try {\n    // Get the device's current timezone offset\n    final now = DateTime.now();\n    final deviceOffset = now.timeZoneOffset;\n\n    print('Device timezone offset: ${deviceOffset.inHours} hours');\n    print('Device local time: $now');\n\n    // Try to find the correct timezone location based on offset\n    // For Pacific Time (Seattle area), offset should be -7 or -8 hours\n    String timezoneName;\n\n    if (deviceOffset.inHours == -8) {\n      timezoneName = 'America/Los_Angeles'; // PST (Pacific Standard Time)\n    } else if (deviceOffset.inHours == -7) {\n      timezoneName = 'America/Los_Angeles'; // PDT (Pacific Daylight Time)\n    } else if (deviceOffset.inHours == -5) {\n      timezoneName = 'America/New_York'; // EST/EDT\n    } else if (deviceOffset.inHours == -6) {\n      timezoneName = 'America/Chicago'; // CST/CDT\n    } else if (deviceOffset.inHours == -7) {\n      timezoneName = 'America/Denver'; // MST/MDT\n    } else {\n      // Default to Los Angeles for Seattle area\n      timezoneName = 'America/Los_Angeles';\n      print('Unknown offset ${deviceOffset.inHours}, defaulting to America/Los_Angeles');\n    }\n\n    // Set the timezone\n    tz.setLocalLocation(tz.getLocation(timezoneName));\n\n    final tzNow = tz.TZDateTime.now(tz.local);\n    print('Timezone set to: ${tz.local.name}');\n    print('TZ library time: $tzNow');\n    print('Time difference: ${now.difference(tzNow.toLocal()).inMinutes} minutes');\n\n  } catch (e) {\n    print('Error setting timezone: $e');\n    // Fallback to default Los Angeles timezone for Seattle area\n    try {\n      tz.setLocalLocation(tz.getLocation('America/Los_Angeles'));\n      print('Fallback: Set timezone to America/Los_Angeles');\n    } catch (fallbackError) {\n      print('Fallback timezone setting failed: $fallbackError');\n    }\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      title: 'HabitV8',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        useMaterial3: true,\n      ),\n      routerConfig: _router,\n    );\n  }\n}\n\nfinal GoRouter _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (context, state) => const NotificationTestScreen(),\n    ),\n  ],\n);\n\nclass NotificationTestScreen extends StatelessWidget {\n  const NotificationTestScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('HabitV8 - Notification Test'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: [\n            const Text(\n              'Notification System Test',\n              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),\n              textAlign: TextAlign.center,\n            ),\n            const SizedBox(height: 32),\n            ElevatedButton(\n              onPressed: () async {\n                await NotificationService.showTestNotification();\n                ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(content: Text('Test notification sent!')),\n                );\n              },\n              child: const Text('Send Test Notification'),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () async {\n                // Use the enhanced debug method\n                await NotificationService.testScheduledNotification();\n\n                ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(content: Text('Debug scheduled notification started - check console logs!')),\n                );\n              },\n              child: const Text('Debug Scheduled Notification (10s)'),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () async {\n                // Show debug info in a dialog\n                final debugInfo = await NotificationService.getSchedulingDebugInfo();\n\n                showDialog(\n                  context: context,\n                  builder: (context) => AlertDialog(\n                    title: const Text('Notification Debug Info'),\n                    content: SingleChildScrollView(\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        mainAxisSize: MainAxisSize.min,\n                        children: [\n                          ...debugInfo.entries.map((entry) =>\n                            Padding(\n                              padding: const EdgeInsets.symmetric(vertical: 4),\n                              child: Text('${entry.key}: ${entry.value}'),\n                            )\n                          ),\n                        ],\n                      ),\n                    ),\n                    actions: [\n                      TextButton(\n                        onPressed: () => Navigator.of(context).pop(),\n                        child: const Text('OK'),\n                      ),\n                    ],\n                  ),\n                );\n              },\n              child: const Text('Show Debug Info'),\n            ),\n            const SizedBox(height: 32),\n            FutureBuilder<bool>(\n              future: NotificationService.areNotificationsEnabled(),\n              builder: (context, snapshot) {\n                if (snapshot.hasData) {\n                  return Card(\n                    child: Padding(\n                      padding: const EdgeInsets.all(16.0),\n                      child: Column(\n                        children: [\n                          Icon(\n                            snapshot.data! ? Icons.notifications_active : Icons.notifications_off,\n                            size: 48,\n                            color: snapshot.data! ? Colors.green : Colors.red,\n                          ),\n                          const SizedBox(height: 8),\n                          Text(\n                            snapshot.data!\n                                ? 'Notifications Enabled ✅'\n                                : 'Notifications Disabled ❌',\n                            style: TextStyle(\n                              fontSize: 18,\n                              fontWeight: FontWeight.bold,\n                              color: snapshot.data! ? Colors.green : Colors.red,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  );\n                }\n                return const CircularProgressIndicator();\n              },\n            ),\n            const SizedBox(height: 16),\n            FutureBuilder<List<PendingNotificationRequest>>(\n              future: NotificationService.getPendingNotifications(),\n              builder: (context, snapshot) {\n                if (snapshot.hasData) {\n                  return Card(\n                    child: Padding(\n                      padding: const EdgeInsets.all(16.0),\n                      child: Column(\n                        children: [\n                          Text(\n                            'Pending Notifications: ${snapshot.data!.length}',\n                            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                          ),\n                          if (snapshot.data!.isNotEmpty) ...[\n                            const SizedBox(height: 8),\n                            ...snapshot.data!.map((notification) =>\n                              Text('ID: ${notification.id} - ${notification.title}')\n                            ),\n                          ],\n                        ],\n                      ),\n                    ),\n                  );\n                }\n                return const CircularProgressIndicator();\n              },\n            ),\n            const SizedBox(height: 16),\n            \n            // Exact Alarm Permission Check (Android 12+)\n            ElevatedButton(\n              onPressed: () async {\n                final canSchedule = await NotificationService.canScheduleExactAlarms();\n                final isAndroid12Plus = await NotificationService._isAndroid12Plus();\n                \n                if (!context.mounted) return;\n                \n                showDialog(\n                  context: context,\n                  builder: (context) => AlertDialog(\n                    title: const Text('Exact Alarm Permission'),\n                    content: Column(\n                      mainAxisSize: MainAxisSize.min,\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        if (isAndroid12Plus) ...[\n                          Text('Android 12+ detected'),\n                          const SizedBox(height: 8),\n                          Text('Can schedule exact alarms: ${canSchedule ? \"✅ YES\" : \"❌ NO\"}'),\n                          const SizedBox(height: 16),\n                          if (!canSchedule) ...[\n                            const Text(\n                              'Scheduled notifications require exact alarm permission on Android 12+.',\n                              style: TextStyle(color: Colors.red),\n                            ),\n                            const SizedBox(height: 8),\n                            const Text('Tap \"Open Settings\" to enable \"Alarms & reminders\" for this app.'),\n                          ] else ...[\n                            const Text(\n                              'Exact alarm permission is granted! Scheduled notifications should work.',\n                              style: TextStyle(color: Colors.green),\n                            ),\n                          ],\n                        ] else ...[\n                          const Text('Android 11 or below - exact alarm permissions not required.'),\n                          const Text('Scheduled notifications should work automatically.'),\n                        ],\n                      ],\n                    ),\n                    actions: [\n                      if (isAndroid12Plus && !canSchedule)\n                        TextButton(\n                          onPressed: () async {\n                            Navigator.of(context).pop();\n                            await NotificationService.openExactAlarmSettings();\n                          },\n                          child: const Text('Open Settings'),\n                        ),\n                      TextButton(\n                        onPressed: () => Navigator.of(context).pop(),\n                        child: const Text('OK'),\n                      ),\n                    ],\n                  ),\n                );\n              },\n              child: const Text('Check Exact Alarm Permission'),\n            ),\n            const SizedBox(height: 32),\n          ],\n        ),\n      ),\n    );\n  }\n}\n","baseTimestamp":1754378019572,"deltas":[{"timestamp":1754378052358,"changes":[{"type":"MODIFY","lineNumber":250,"content":"                final isAndroid12Plus = await NotificationService.isAndroid12Plus();","oldContent":"                final isAndroid12Plus = await NotificationService._isAndroid12Plus();"}]},{"timestamp":1754378120498,"changes":[{"type":"MODIFY","lineNumber":245,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":251,"content":"","oldContent":"                "},{"type":"MODIFY","lineNumber":253,"content":"","oldContent":"                "}]},{"timestamp":1754378560879,"changes":[{"type":"INSERT","lineNumber":9,"content":"import 'ui/home_screen.dart';"},{"type":"MODIFY","lineNumber":102,"content":"      builder: (context, state) => const HomeScreen(),","oldContent":"      builder: (context, state) => const NotificationTestScreen(),"},{"type":"DELETE","lineNumber":106,"oldContent":"class NotificationTestScreen extends StatelessWidget {"},{"type":"DELETE","lineNumber":107,"oldContent":"  const NotificationTestScreen({super.key});"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"  @override"},{"type":"DELETE","lineNumber":110,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":111,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":112,"oldContent":"      appBar: AppBar("},{"type":"DELETE","lineNumber":113,"oldContent":"        title: const Text('HabitV8 - Notification Test'),"},{"type":"DELETE","lineNumber":114,"oldContent":"      ),"},{"type":"DELETE","lineNumber":115,"oldContent":"      body: Padding("},{"type":"DELETE","lineNumber":116,"oldContent":"        padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":117,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":118,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.stretch,"},{"type":"DELETE","lineNumber":119,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":120,"oldContent":"            const Text("},{"type":"DELETE","lineNumber":121,"oldContent":"              'Notification System Test',"},{"type":"DELETE","lineNumber":122,"oldContent":"              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),"},{"type":"DELETE","lineNumber":123,"oldContent":"              textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":124,"oldContent":"            ),"},{"type":"DELETE","lineNumber":125,"oldContent":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":126,"oldContent":"            ElevatedButton("},{"type":"DELETE","lineNumber":127,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":128,"oldContent":"                await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":129,"oldContent":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":130,"oldContent":"                  const SnackBar(content: Text('Test notification sent!')),"},{"type":"DELETE","lineNumber":131,"oldContent":"                );"},{"type":"DELETE","lineNumber":132,"oldContent":"              },"},{"type":"DELETE","lineNumber":133,"oldContent":"              child: const Text('Send Test Notification'),"},{"type":"DELETE","lineNumber":134,"oldContent":"            ),"},{"type":"DELETE","lineNumber":135,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":136,"oldContent":"            ElevatedButton("},{"type":"DELETE","lineNumber":137,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":138,"oldContent":"                // Use the enhanced debug method"},{"type":"DELETE","lineNumber":139,"oldContent":"                await NotificationService.testScheduledNotification();"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":142,"oldContent":"                  const SnackBar(content: Text('Debug scheduled notification started - check console logs!')),"},{"type":"DELETE","lineNumber":143,"oldContent":"                );"},{"type":"DELETE","lineNumber":144,"oldContent":"              },"},{"type":"DELETE","lineNumber":145,"oldContent":"              child: const Text('Debug Scheduled Notification (10s)'),"},{"type":"DELETE","lineNumber":146,"oldContent":"            ),"},{"type":"DELETE","lineNumber":147,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":148,"oldContent":"            ElevatedButton("},{"type":"DELETE","lineNumber":149,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":150,"oldContent":"                // Show debug info in a dialog"},{"type":"DELETE","lineNumber":151,"oldContent":"                final debugInfo = await NotificationService.getSchedulingDebugInfo();"},{"type":"DELETE","lineNumber":152,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"                showDialog("},{"type":"DELETE","lineNumber":154,"oldContent":"                  context: context,"},{"type":"DELETE","lineNumber":155,"oldContent":"                  builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":156,"oldContent":"                    title: const Text('Notification Debug Info'),"},{"type":"DELETE","lineNumber":157,"oldContent":"                    content: SingleChildScrollView("},{"type":"DELETE","lineNumber":158,"oldContent":"                      child: Column("},{"type":"DELETE","lineNumber":159,"oldContent":"                        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":160,"oldContent":"                        mainAxisSize: MainAxisSize.min,"},{"type":"DELETE","lineNumber":161,"oldContent":"                        children: ["},{"type":"DELETE","lineNumber":162,"oldContent":"                          ...debugInfo.entries.map((entry) =>"},{"type":"DELETE","lineNumber":163,"oldContent":"                            Padding("},{"type":"DELETE","lineNumber":164,"oldContent":"                              padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"DELETE","lineNumber":165,"oldContent":"                              child: Text('${entry.key}: ${entry.value}'),"},{"type":"DELETE","lineNumber":166,"oldContent":"                            )"},{"type":"DELETE","lineNumber":167,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":168,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":169,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":170,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":171,"oldContent":"                    actions: ["},{"type":"DELETE","lineNumber":172,"oldContent":"                      TextButton("},{"type":"DELETE","lineNumber":173,"oldContent":"                        onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":174,"oldContent":"                        child: const Text('OK'),"},{"type":"DELETE","lineNumber":175,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":176,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":177,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":178,"oldContent":"                );"},{"type":"DELETE","lineNumber":179,"oldContent":"              },"},{"type":"DELETE","lineNumber":180,"oldContent":"              child: const Text('Show Debug Info'),"},{"type":"DELETE","lineNumber":181,"oldContent":"            ),"},{"type":"DELETE","lineNumber":182,"oldContent":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":183,"oldContent":"            FutureBuilder<bool>("},{"type":"DELETE","lineNumber":184,"oldContent":"              future: NotificationService.areNotificationsEnabled(),"},{"type":"DELETE","lineNumber":185,"oldContent":"              builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":186,"oldContent":"                if (snapshot.hasData) {"},{"type":"DELETE","lineNumber":187,"oldContent":"                  return Card("},{"type":"DELETE","lineNumber":188,"oldContent":"                    child: Padding("},{"type":"DELETE","lineNumber":189,"oldContent":"                      padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":190,"oldContent":"                      child: Column("},{"type":"DELETE","lineNumber":191,"oldContent":"                        children: ["},{"type":"DELETE","lineNumber":192,"oldContent":"                          Icon("},{"type":"DELETE","lineNumber":193,"oldContent":"                            snapshot.data! ? Icons.notifications_active : Icons.notifications_off,"},{"type":"DELETE","lineNumber":194,"oldContent":"                            size: 48,"},{"type":"DELETE","lineNumber":195,"oldContent":"                            color: snapshot.data! ? Colors.green : Colors.red,"},{"type":"DELETE","lineNumber":196,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":197,"oldContent":"                          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":198,"oldContent":"                          Text("},{"type":"DELETE","lineNumber":199,"oldContent":"                            snapshot.data!"},{"type":"DELETE","lineNumber":200,"oldContent":"                                ? 'Notifications Enabled ✅'"},{"type":"DELETE","lineNumber":201,"oldContent":"                                : 'Notifications Disabled ❌',"},{"type":"DELETE","lineNumber":202,"oldContent":"                            style: TextStyle("},{"type":"DELETE","lineNumber":203,"oldContent":"                              fontSize: 18,"},{"type":"DELETE","lineNumber":204,"oldContent":"                              fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":205,"oldContent":"                              color: snapshot.data! ? Colors.green : Colors.red,"},{"type":"DELETE","lineNumber":206,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":207,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":208,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":209,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":210,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":211,"oldContent":"                  );"},{"type":"DELETE","lineNumber":212,"oldContent":"                }"},{"type":"DELETE","lineNumber":213,"oldContent":"                return const CircularProgressIndicator();"},{"type":"DELETE","lineNumber":214,"oldContent":"              },"},{"type":"DELETE","lineNumber":215,"oldContent":"            ),"},{"type":"DELETE","lineNumber":216,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":217,"oldContent":"            FutureBuilder<List<PendingNotificationRequest>>("},{"type":"DELETE","lineNumber":218,"oldContent":"              future: NotificationService.getPendingNotifications(),"},{"type":"DELETE","lineNumber":219,"oldContent":"              builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":220,"oldContent":"                if (snapshot.hasData) {"},{"type":"DELETE","lineNumber":221,"oldContent":"                  return Card("},{"type":"DELETE","lineNumber":222,"oldContent":"                    child: Padding("},{"type":"DELETE","lineNumber":223,"oldContent":"                      padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":224,"oldContent":"                      child: Column("},{"type":"DELETE","lineNumber":225,"oldContent":"                        children: ["},{"type":"DELETE","lineNumber":226,"oldContent":"                          Text("},{"type":"DELETE","lineNumber":227,"oldContent":"                            'Pending Notifications: ${snapshot.data!.length}',"},{"type":"DELETE","lineNumber":228,"oldContent":"                            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),"},{"type":"DELETE","lineNumber":229,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":230,"oldContent":"                          if (snapshot.data!.isNotEmpty) ...["},{"type":"DELETE","lineNumber":231,"oldContent":"                            const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":232,"oldContent":"                            ...snapshot.data!.map((notification) =>"},{"type":"DELETE","lineNumber":233,"oldContent":"                              Text('ID: ${notification.id} - ${notification.title}')"},{"type":"DELETE","lineNumber":234,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":235,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":236,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":237,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":238,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":239,"oldContent":"                  );"},{"type":"DELETE","lineNumber":240,"oldContent":"                }"},{"type":"DELETE","lineNumber":241,"oldContent":"                return const CircularProgressIndicator();"},{"type":"DELETE","lineNumber":242,"oldContent":"              },"},{"type":"DELETE","lineNumber":243,"oldContent":"            ),"},{"type":"DELETE","lineNumber":244,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":246,"oldContent":"            // Exact Alarm Permission Check (Android 12+)"},{"type":"DELETE","lineNumber":247,"oldContent":"            ElevatedButton("},{"type":"DELETE","lineNumber":248,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":249,"oldContent":"                final canSchedule = await NotificationService.canScheduleExactAlarms();"},{"type":"DELETE","lineNumber":250,"oldContent":"                final isAndroid12Plus = await NotificationService.isAndroid12Plus();"},{"type":"DELETE","lineNumber":251,"oldContent":""},{"type":"DELETE","lineNumber":252,"oldContent":"                if (!context.mounted) return;"},{"type":"DELETE","lineNumber":253,"oldContent":""},{"type":"DELETE","lineNumber":254,"oldContent":"                showDialog("},{"type":"DELETE","lineNumber":255,"oldContent":"                  context: context,"},{"type":"DELETE","lineNumber":256,"oldContent":"                  builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":257,"oldContent":"                    title: const Text('Exact Alarm Permission'),"},{"type":"DELETE","lineNumber":258,"oldContent":"                    content: Column("},{"type":"DELETE","lineNumber":259,"oldContent":"                      mainAxisSize: MainAxisSize.min,"},{"type":"DELETE","lineNumber":260,"oldContent":"                      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":261,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":262,"oldContent":"                        if (isAndroid12Plus) ...["},{"type":"DELETE","lineNumber":263,"oldContent":"                          Text('Android 12+ detected'),"},{"type":"DELETE","lineNumber":264,"oldContent":"                          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":265,"oldContent":"                          Text('Can schedule exact alarms: ${canSchedule ? \"✅ YES\" : \"❌ NO\"}'),"},{"type":"DELETE","lineNumber":266,"oldContent":"                          const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":267,"oldContent":"                          if (!canSchedule) ...["},{"type":"DELETE","lineNumber":268,"oldContent":"                            const Text("},{"type":"DELETE","lineNumber":269,"oldContent":"                              'Scheduled notifications require exact alarm permission on Android 12+.',"},{"type":"DELETE","lineNumber":270,"oldContent":"                              style: TextStyle(color: Colors.red),"},{"type":"DELETE","lineNumber":271,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":272,"oldContent":"                            const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":273,"oldContent":"                            const Text('Tap \"Open Settings\" to enable \"Alarms & reminders\" for this app.'),"},{"type":"DELETE","lineNumber":274,"oldContent":"                          ] else ...["},{"type":"DELETE","lineNumber":275,"oldContent":"                            const Text("},{"type":"DELETE","lineNumber":276,"oldContent":"                              'Exact alarm permission is granted! Scheduled notifications should work.',"},{"type":"DELETE","lineNumber":277,"oldContent":"                              style: TextStyle(color: Colors.green),"},{"type":"DELETE","lineNumber":278,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":279,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":280,"oldContent":"                        ] else ...["},{"type":"DELETE","lineNumber":281,"oldContent":"                          const Text('Android 11 or below - exact alarm permissions not required.'),"},{"type":"DELETE","lineNumber":282,"oldContent":"                          const Text('Scheduled notifications should work automatically.'),"},{"type":"DELETE","lineNumber":283,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":284,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":285,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":286,"oldContent":"                    actions: ["},{"type":"DELETE","lineNumber":287,"oldContent":"                      if (isAndroid12Plus && !canSchedule)"},{"type":"DELETE","lineNumber":288,"oldContent":"                        TextButton("},{"type":"DELETE","lineNumber":289,"oldContent":"                          onPressed: () async {"},{"type":"DELETE","lineNumber":290,"oldContent":"                            Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":291,"oldContent":"                            await NotificationService.openExactAlarmSettings();"},{"type":"DELETE","lineNumber":292,"oldContent":"                          },"},{"type":"DELETE","lineNumber":293,"oldContent":"                          child: const Text('Open Settings'),"},{"type":"DELETE","lineNumber":294,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":295,"oldContent":"                      TextButton("},{"type":"DELETE","lineNumber":296,"oldContent":"                        onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":297,"oldContent":"                        child: const Text('OK'),"},{"type":"DELETE","lineNumber":298,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":299,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":300,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":301,"oldContent":"                );"},{"type":"DELETE","lineNumber":302,"oldContent":"              },"},{"type":"DELETE","lineNumber":303,"oldContent":"              child: const Text('Check Exact Alarm Permission'),"},{"type":"DELETE","lineNumber":304,"oldContent":"            ),"},{"type":"DELETE","lineNumber":305,"oldContent":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":306,"oldContent":"          ],"},{"type":"DELETE","lineNumber":307,"oldContent":"        ),"},{"type":"DELETE","lineNumber":308,"oldContent":"      ),"},{"type":"DELETE","lineNumber":309,"oldContent":"    );"},{"type":"DELETE","lineNumber":310,"oldContent":"  }"},{"type":"DELETE","lineNumber":311,"oldContent":"}"},{"type":"DELETE","lineNumber":312,"oldContent":""}]},{"timestamp":1754378997252,"changes":[{"type":"INSERT","lineNumber":1,"content":"import 'package:flutter/services.dart';"},{"type":"MODIFY","lineNumber":3,"content":"import 'package:go_router/go_router.dart';","oldContent":"import 'package:hive_flutter/hive_flutter.dart';"},{"type":"DELETE","lineNumber":5,"oldContent":"import 'package:go_router/go_router.dart';"},{"type":"DELETE","lineNumber":6,"oldContent":"import 'package:flutter_local_notifications/flutter_local_notifications.dart';"},{"type":"MODIFY","lineNumber":8,"content":"import 'ui/screens/timeline_screen.dart';","oldContent":"import 'ui/home_screen.dart';"},{"type":"INSERT","lineNumber":9,"content":"import 'ui/screens/all_habits_screen.dart';"},{"type":"INSERT","lineNumber":10,"content":"import 'ui/screens/stats_screen.dart';"},{"type":"INSERT","lineNumber":11,"content":"import 'ui/screens/insights_screen.dart';"},{"type":"INSERT","lineNumber":12,"content":"import 'ui/screens/settings_screen.dart';"},{"type":"INSERT","lineNumber":13,"content":"import 'ui/screens/create_habit_screen.dart';"},{"type":"DELETE","lineNumber":14,"oldContent":"  // Initialize Hive"},{"type":"DELETE","lineNumber":15,"oldContent":"  await Hive.initFlutter();"},{"type":"INSERT","lineNumber":18,"content":"  // Edge-to-edge design"},{"type":"INSERT","lineNumber":19,"content":"  SystemChrome.setSystemUIOverlayStyle("},{"type":"INSERT","lineNumber":20,"content":"    const SystemUiOverlayStyle("},{"type":"INSERT","lineNumber":21,"content":"      statusBarColor: Colors.transparent,"},{"type":"INSERT","lineNumber":22,"content":"      statusBarIconBrightness: Brightness.dark,"},{"type":"INSERT","lineNumber":23,"content":"      systemNavigationBarColor: Colors.transparent,"},{"type":"INSERT","lineNumber":24,"content":"      systemNavigationBarIconBrightness: Brightness.dark,"},{"type":"INSERT","lineNumber":25,"content":"    ),"},{"type":"INSERT","lineNumber":26,"content":"  );"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"  // Properly detect and set the device's local timezone"},{"type":"DELETE","lineNumber":32,"oldContent":"/// Detect and set the correct local timezone based on device settings"},{"type":"DELETE","lineNumber":35,"oldContent":"    // Get the device's current timezone offset"},{"type":"DELETE","lineNumber":39,"oldContent":"    print('Device timezone offset: ${deviceOffset.inHours} hours');"},{"type":"DELETE","lineNumber":40,"oldContent":"    print('Device local time: $now');"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Try to find the correct timezone location based on offset"},{"type":"DELETE","lineNumber":43,"oldContent":"    // For Pacific Time (Seattle area), offset should be -7 or -8 hours"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"MODIFY","lineNumber":48,"content":"      timezoneName = 'America/Los_Angeles'; // PST","oldContent":"      timezoneName = 'America/Los_Angeles'; // PST (Pacific Standard Time)"},{"type":"MODIFY","lineNumber":50,"content":"      timezoneName = 'America/Los_Angeles'; // PDT","oldContent":"      timezoneName = 'America/Los_Angeles'; // PDT (Pacific Daylight Time)"},{"type":"DELETE","lineNumber":54,"oldContent":"    } else if (deviceOffset.inHours == -7) {"},{"type":"DELETE","lineNumber":55,"oldContent":"      timezoneName = 'America/Denver'; // MST/MDT"},{"type":"DELETE","lineNumber":57,"oldContent":"      // Default to Los Angeles for Seattle area"},{"type":"DELETE","lineNumber":59,"oldContent":"      print('Unknown offset ${deviceOffset.inHours}, defaulting to America/Los_Angeles');"},{"type":"DELETE","lineNumber":62,"oldContent":"    // Set the timezone"},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":65,"oldContent":"    final tzNow = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":66,"oldContent":"    print('Timezone set to: ${tz.local.name}');"},{"type":"DELETE","lineNumber":67,"oldContent":"    print('TZ library time: $tzNow');"},{"type":"DELETE","lineNumber":68,"oldContent":"    print('Time difference: ${now.difference(tzNow.toLocal()).inMinutes} minutes');"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"    // Fallback to default Los Angeles timezone for Seattle area"},{"type":"DELETE","lineNumber":75,"oldContent":"      print('Fallback: Set timezone to America/Los_Angeles');"},{"type":"DELETE","lineNumber":90,"oldContent":"        primarySwatch: Colors.blue,"},{"type":"INSERT","lineNumber":79,"content":"        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),"},{"type":"INSERT","lineNumber":81,"content":"      darkTheme: ThemeData("},{"type":"INSERT","lineNumber":82,"content":"        useMaterial3: true,"},{"type":"INSERT","lineNumber":83,"content":"        colorScheme: ColorScheme.fromSeed("},{"type":"INSERT","lineNumber":84,"content":"          seedColor: Colors.blue,"},{"type":"INSERT","lineNumber":85,"content":"          brightness: Brightness.dark,"},{"type":"INSERT","lineNumber":86,"content":"        ),"},{"type":"INSERT","lineNumber":87,"content":"      ),"},{"type":"INSERT","lineNumber":95,"content":"    ShellRoute("},{"type":"INSERT","lineNumber":96,"content":"      builder: (context, state, child) {"},{"type":"INSERT","lineNumber":97,"content":"        return MainNavigationShell(child: child);"},{"type":"INSERT","lineNumber":98,"content":"      },"},{"type":"INSERT","lineNumber":99,"content":"      routes: ["},{"type":"INSERT","lineNumber":100,"content":"        GoRoute("},{"type":"INSERT","lineNumber":101,"content":"          path: '/timeline',"},{"type":"INSERT","lineNumber":102,"content":"          builder: (context, state) => const TimelineScreen(),"},{"type":"INSERT","lineNumber":103,"content":"        ),"},{"type":"INSERT","lineNumber":104,"content":"        GoRoute("},{"type":"INSERT","lineNumber":105,"content":"          path: '/',"},{"type":"INSERT","lineNumber":106,"content":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"INSERT","lineNumber":107,"content":"        ),"},{"type":"INSERT","lineNumber":108,"content":"        GoRoute("},{"type":"INSERT","lineNumber":109,"content":"          path: '/stats',"},{"type":"INSERT","lineNumber":110,"content":"          builder: (context, state) => const StatsScreen(),"},{"type":"INSERT","lineNumber":111,"content":"        ),"},{"type":"INSERT","lineNumber":112,"content":"        GoRoute("},{"type":"INSERT","lineNumber":113,"content":"          path: '/insights',"},{"type":"INSERT","lineNumber":114,"content":"          builder: (context, state) => const InsightsScreen(),"},{"type":"INSERT","lineNumber":115,"content":"        ),"},{"type":"INSERT","lineNumber":116,"content":"        GoRoute("},{"type":"INSERT","lineNumber":117,"content":"          path: '/settings',"},{"type":"INSERT","lineNumber":118,"content":"          builder: (context, state) => const SettingsScreen(),"},{"type":"INSERT","lineNumber":119,"content":"        ),"},{"type":"INSERT","lineNumber":120,"content":"      ],"},{"type":"INSERT","lineNumber":121,"content":"    ),"},{"type":"DELETE","lineNumber":101,"oldContent":"      path: '/',"},{"type":"DELETE","lineNumber":102,"oldContent":"      builder: (context, state) => const NotificationTestScreen(),"},{"type":"DELETE","lineNumber":103,"oldContent":"      builder: (context, state) => const HomeScreen(),"},{"type":"INSERT","lineNumber":123,"content":"      path: '/create-habit',"},{"type":"INSERT","lineNumber":124,"content":"      builder: (context, state) => const CreateHabitScreen(),"},{"type":"INSERT","lineNumber":125,"content":"    ),"},{"type":"INSERT","lineNumber":129,"content":"class MainNavigationShell extends StatefulWidget {"},{"type":"INSERT","lineNumber":130,"content":"  final Widget child;"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"INSERT","lineNumber":134,"content":"  @override"},{"type":"INSERT","lineNumber":135,"content":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"INSERT","lineNumber":136,"content":"}"},{"type":"INSERT","lineNumber":137,"content":""},{"type":"INSERT","lineNumber":138,"content":"class _MainNavigationShellState extends State<MainNavigationShell> {"},{"type":"INSERT","lineNumber":139,"content":"  int _selectedIndex = 1; // Start with All Habits (index 1)"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"  final List<NavigationDestination> _destinations = ["},{"type":"INSERT","lineNumber":142,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":143,"content":"      icon: Icon(Icons.timeline_outlined),"},{"type":"INSERT","lineNumber":144,"content":"      selectedIcon: Icon(Icons.timeline),"},{"type":"INSERT","lineNumber":145,"content":"      label: 'Timeline',"},{"type":"INSERT","lineNumber":146,"content":"    ),"},{"type":"INSERT","lineNumber":147,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":148,"content":"      icon: Icon(Icons.list_alt_outlined),"},{"type":"INSERT","lineNumber":149,"content":"      selectedIcon: Icon(Icons.list_alt),"},{"type":"INSERT","lineNumber":150,"content":"      label: 'All Habits',"},{"type":"INSERT","lineNumber":151,"content":"    ),"},{"type":"INSERT","lineNumber":152,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":153,"content":"      icon: Icon(Icons.analytics_outlined),"},{"type":"INSERT","lineNumber":154,"content":"      selectedIcon: Icon(Icons.analytics),"},{"type":"INSERT","lineNumber":155,"content":"      label: 'Stats',"},{"type":"INSERT","lineNumber":156,"content":"    ),"},{"type":"INSERT","lineNumber":157,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":158,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":159,"content":"      selectedIcon: Icon(Icons.insights),"},{"type":"INSERT","lineNumber":160,"content":"      label: 'Insights',"},{"type":"INSERT","lineNumber":161,"content":"    ),"},{"type":"INSERT","lineNumber":162,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":163,"content":"      icon: Icon(Icons.settings_outlined),"},{"type":"INSERT","lineNumber":164,"content":"      selectedIcon: Icon(Icons.settings),"},{"type":"INSERT","lineNumber":165,"content":"      label: 'Settings',"},{"type":"INSERT","lineNumber":166,"content":"    ),"},{"type":"INSERT","lineNumber":167,"content":"  ];"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"  final List<String> _routes = ["},{"type":"INSERT","lineNumber":170,"content":"    '/timeline',"},{"type":"INSERT","lineNumber":171,"content":"    '/',"},{"type":"INSERT","lineNumber":172,"content":"    '/stats',"},{"type":"INSERT","lineNumber":173,"content":"    '/insights',"},{"type":"INSERT","lineNumber":174,"content":"    '/settings',"},{"type":"INSERT","lineNumber":175,"content":"  ];"},{"type":"INSERT","lineNumber":176,"content":""},{"type":"INSERT","lineNumber":177,"content":"  @override"},{"type":"INSERT","lineNumber":178,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":179,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":180,"content":"      body: widget.child,"},{"type":"INSERT","lineNumber":181,"content":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":182,"content":"        selectedIndex: _selectedIndex,"},{"type":"INSERT","lineNumber":183,"content":"        onDestinationSelected: (index) {"},{"type":"INSERT","lineNumber":184,"content":"          setState(() {"},{"type":"INSERT","lineNumber":185,"content":"            _selectedIndex = index;"},{"type":"INSERT","lineNumber":186,"content":"          });"},{"type":"INSERT","lineNumber":187,"content":"          context.go(_routes[index]);"},{"type":"INSERT","lineNumber":188,"content":"        },"},{"type":"INSERT","lineNumber":189,"content":"        destinations: _destinations,"},{"type":"INSERT","lineNumber":190,"content":"      ),"},{"type":"INSERT","lineNumber":191,"content":"      floatingActionButton: FloatingActionButton("},{"type":"INSERT","lineNumber":192,"content":"        onPressed: () {"},{"type":"INSERT","lineNumber":193,"content":"          context.push('/create-habit');"},{"type":"INSERT","lineNumber":194,"content":"        },"},{"type":"INSERT","lineNumber":195,"content":"        child: const Icon(Icons.add),"},{"type":"INSERT","lineNumber":196,"content":"      ),"},{"type":"INSERT","lineNumber":197,"content":"    );"},{"type":"INSERT","lineNumber":198,"content":"  }"},{"type":"INSERT","lineNumber":199,"content":"}"},{"type":"INSERT","lineNumber":200,"content":""}]},{"timestamp":1754379464945,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import 'package:timezone/data/latest.dart' as tz;","oldContent":"import 'package:hive_flutter/hive_flutter.dart';"},{"type":"INSERT","lineNumber":7,"content":"import 'services/permission_service.dart';"},{"type":"DELETE","lineNumber":9,"oldContent":"import 'ui/home_screen.dart';"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":"void main() async {"},{"type":"MODIFY","lineNumber":15,"content":"void main() async {","oldContent":"  WidgetsFlutterBinding.ensureInitialized();"},{"type":"INSERT","lineNumber":16,"content":"  WidgetsFlutterBinding.ensureInitialized();"},{"type":"DELETE","lineNumber":19,"oldContent":"  // Initialize timezone data"},{"type":"DELETE","lineNumber":21,"oldContent":"  tz.initializeTimeZones();"},{"type":"DELETE","lineNumber":25,"oldContent":"  await _setCorrectTimezone();"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":"  // Initialize notification service"},{"type":"DELETE","lineNumber":31,"oldContent":"  await NotificationService.initialize();"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"  // Initialize timezone data"},{"type":"INSERT","lineNumber":29,"content":"  tz.initializeTimeZones();"},{"type":"INSERT","lineNumber":30,"content":"  await _setCorrectTimezone();"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"  // Initialize notification service"},{"type":"INSERT","lineNumber":33,"content":"  await NotificationService.initialize();"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"DELETE","lineNumber":48,"oldContent":"      timezoneName = 'America/Los_Angeles'; // PST (Pacific Standard Time)"},{"type":"DELETE","lineNumber":50,"oldContent":"      timezoneName = 'America/Los_Angeles'; // PDT (Pacific Daylight Time)"},{"type":"INSERT","lineNumber":49,"content":"    } else if (deviceOffset.inHours == -7) {"},{"type":"INSERT","lineNumber":51,"content":"    } else if (deviceOffset.inHours == -5) {"},{"type":"DELETE","lineNumber":67,"oldContent":"        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),"},{"type":"DELETE","lineNumber":70,"oldContent":"      darkTheme: ThemeData("},{"type":"DELETE","lineNumber":72,"oldContent":"        useMaterial3: true,"},{"type":"DELETE","lineNumber":74,"oldContent":"        colorScheme: ColorScheme.fromSeed("},{"type":"DELETE","lineNumber":76,"oldContent":"          seedColor: Colors.blue,"},{"type":"DELETE","lineNumber":78,"oldContent":"          brightness: Brightness.dark,"},{"type":"DELETE","lineNumber":80,"oldContent":"        ),"},{"type":"DELETE","lineNumber":82,"oldContent":"      ),"},{"type":"INSERT","lineNumber":79,"content":"        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),"},{"type":"INSERT","lineNumber":81,"content":"      darkTheme: ThemeData("},{"type":"INSERT","lineNumber":82,"content":"        useMaterial3: true,"},{"type":"INSERT","lineNumber":83,"content":"        colorScheme: ColorScheme.fromSeed("},{"type":"INSERT","lineNumber":84,"content":"          seedColor: Colors.blue,"},{"type":"INSERT","lineNumber":85,"content":"          brightness: Brightness.dark,"},{"type":"INSERT","lineNumber":86,"content":"        ),"},{"type":"INSERT","lineNumber":87,"content":"      ),"},{"type":"DELETE","lineNumber":90,"oldContent":"    ShellRoute("},{"type":"DELETE","lineNumber":92,"oldContent":"      builder: (context, state, child) {"},{"type":"DELETE","lineNumber":94,"oldContent":"        return MainNavigationShell(child: child);"},{"type":"DELETE","lineNumber":96,"oldContent":"      },"},{"type":"DELETE","lineNumber":98,"oldContent":"      routes: ["},{"type":"INSERT","lineNumber":95,"content":"    ShellRoute("},{"type":"INSERT","lineNumber":96,"content":"      builder: (context, state, child) {"},{"type":"INSERT","lineNumber":97,"content":"        return MainNavigationShell(child: child);"},{"type":"INSERT","lineNumber":98,"content":"      },"},{"type":"INSERT","lineNumber":99,"content":"      routes: ["},{"type":"DELETE","lineNumber":101,"oldContent":"    GoRoute("},{"type":"DELETE","lineNumber":106,"oldContent":"  ],"},{"type":"DELETE","lineNumber":108,"oldContent":");"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"}"},{"type":"DELETE","lineNumber":116,"oldContent":"  }"},{"type":"DELETE","lineNumber":118,"oldContent":"    );"},{"type":"DELETE","lineNumber":120,"oldContent":"      ),"},{"type":"DELETE","lineNumber":122,"oldContent":"        child: const Icon(Icons.add),"},{"type":"DELETE","lineNumber":124,"oldContent":"        },"},{"type":"DELETE","lineNumber":126,"oldContent":"          context.push('/create-habit');"},{"type":"DELETE","lineNumber":128,"oldContent":"        onPressed: () {"},{"type":"DELETE","lineNumber":130,"oldContent":"      floatingActionButton: FloatingActionButton("},{"type":"DELETE","lineNumber":132,"oldContent":"      ),"},{"type":"DELETE","lineNumber":134,"oldContent":"        destinations: _destinations,"},{"type":"DELETE","lineNumber":136,"oldContent":"        },"},{"type":"DELETE","lineNumber":138,"oldContent":"          context.go(_routes[index]);"},{"type":"DELETE","lineNumber":140,"oldContent":"          });"},{"type":"DELETE","lineNumber":141,"oldContent":"            _selectedIndex = index;"},{"type":"INSERT","lineNumber":122,"content":"    GoRoute("},{"type":"DELETE","lineNumber":143,"oldContent":"          setState(() {"},{"type":"DELETE","lineNumber":145,"oldContent":"        onDestinationSelected: (index) {"},{"type":"DELETE","lineNumber":147,"oldContent":"        selectedIndex: _selectedIndex,"},{"type":"DELETE","lineNumber":148,"oldContent":"      bottomNavigationBar: NavigationBar("},{"type":"DELETE","lineNumber":149,"oldContent":"      body: widget.child,"},{"type":"DELETE","lineNumber":150,"oldContent":"    return Scaffold("},{"type":"INSERT","lineNumber":126,"content":"  ],"},{"type":"INSERT","lineNumber":127,"content":");"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"DELETE","lineNumber":152,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":154,"oldContent":"  @override"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"  ];"},{"type":"DELETE","lineNumber":160,"oldContent":"    '/settings',"},{"type":"DELETE","lineNumber":162,"oldContent":"    '/insights',"},{"type":"DELETE","lineNumber":164,"oldContent":"    '/stats',"},{"type":"DELETE","lineNumber":166,"oldContent":"    '/',"},{"type":"DELETE","lineNumber":168,"oldContent":"    '/timeline',"},{"type":"DELETE","lineNumber":170,"oldContent":"  final List<String> _routes = ["},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":174,"oldContent":"  ];"},{"type":"DELETE","lineNumber":176,"oldContent":"    ),"},{"type":"DELETE","lineNumber":178,"oldContent":"      label: 'Settings',"},{"type":"DELETE","lineNumber":180,"oldContent":"      selectedIcon: Icon(Icons.settings),"},{"type":"DELETE","lineNumber":182,"oldContent":"      icon: Icon(Icons.settings_outlined),"},{"type":"DELETE","lineNumber":184,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":186,"oldContent":"    ),"},{"type":"DELETE","lineNumber":188,"oldContent":"      label: 'Insights',"},{"type":"DELETE","lineNumber":190,"oldContent":"      selectedIcon: Icon(Icons.insights),"},{"type":"DELETE","lineNumber":192,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":194,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":196,"oldContent":"    ),"},{"type":"DELETE","lineNumber":198,"oldContent":"      label: 'Stats',"},{"type":"INSERT","lineNumber":155,"content":"      label: 'Stats',"},{"type":"INSERT","lineNumber":156,"content":"    ),"},{"type":"INSERT","lineNumber":157,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":158,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":159,"content":"      selectedIcon: Icon(Icons.insights),"},{"type":"INSERT","lineNumber":160,"content":"      label: 'Insights',"},{"type":"INSERT","lineNumber":161,"content":"    ),"},{"type":"INSERT","lineNumber":162,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":163,"content":"      icon: Icon(Icons.settings_outlined),"},{"type":"INSERT","lineNumber":164,"content":"      selectedIcon: Icon(Icons.settings),"},{"type":"INSERT","lineNumber":165,"content":"      label: 'Settings',"},{"type":"INSERT","lineNumber":166,"content":"    ),"},{"type":"INSERT","lineNumber":167,"content":"  ];"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"  final List<String> _routes = ["},{"type":"INSERT","lineNumber":170,"content":"    '/timeline',"},{"type":"INSERT","lineNumber":171,"content":"    '/',"},{"type":"INSERT","lineNumber":172,"content":"    '/stats',"},{"type":"INSERT","lineNumber":173,"content":"    '/insights',"},{"type":"INSERT","lineNumber":174,"content":"    '/settings',"},{"type":"INSERT","lineNumber":175,"content":"  ];"},{"type":"INSERT","lineNumber":176,"content":""},{"type":"INSERT","lineNumber":177,"content":"  @override"},{"type":"INSERT","lineNumber":178,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":179,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":180,"content":"      body: widget.child,"},{"type":"INSERT","lineNumber":181,"content":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":182,"content":"        selectedIndex: _selectedIndex,"},{"type":"INSERT","lineNumber":183,"content":"        onDestinationSelected: (index) {"},{"type":"INSERT","lineNumber":184,"content":"          setState(() {"},{"type":"INSERT","lineNumber":185,"content":"            _selectedIndex = index;"},{"type":"INSERT","lineNumber":186,"content":"          });"},{"type":"INSERT","lineNumber":187,"content":"          context.go(_routes[index]);"},{"type":"INSERT","lineNumber":188,"content":"        },"},{"type":"INSERT","lineNumber":189,"content":"        destinations: _destinations,"},{"type":"INSERT","lineNumber":190,"content":"      ),"},{"type":"INSERT","lineNumber":191,"content":"      floatingActionButton: FloatingActionButton("},{"type":"INSERT","lineNumber":192,"content":"        onPressed: () {"},{"type":"INSERT","lineNumber":193,"content":"          context.push('/create-habit');"},{"type":"INSERT","lineNumber":194,"content":"        },"},{"type":"INSERT","lineNumber":195,"content":"        child: const Icon(Icons.add),"},{"type":"INSERT","lineNumber":196,"content":"      ),"},{"type":"INSERT","lineNumber":197,"content":"    );"},{"type":"INSERT","lineNumber":198,"content":"  }"},{"type":"INSERT","lineNumber":199,"content":"}"},{"type":"INSERT","lineNumber":200,"content":""}]},{"timestamp":1754381606469,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import 'package:go_router/go_router.dart';","oldContent":"import 'package:hive_flutter/hive_flutter.dart';"},{"type":"INSERT","lineNumber":8,"content":"import 'services/theme_service.dart';"},{"type":"INSERT","lineNumber":14,"content":"import 'ui/screens/create_habit_screen.dart';"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":15,"oldContent":"import 'ui/screens/create_habit_screen.dart';"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"INSERT","lineNumber":24,"content":"      systemNavigationBarColor: Colors.transparent,"},{"type":"INSERT","lineNumber":25,"content":"      systemNavigationBarIconBrightness: Brightness.dark,"},{"type":"INSERT","lineNumber":26,"content":"    ),"},{"type":"INSERT","lineNumber":27,"content":"  );"},{"type":"DELETE","lineNumber":25,"oldContent":"      systemNavigationBarColor: Colors.transparent,"},{"type":"DELETE","lineNumber":28,"oldContent":"      systemNavigationBarIconBrightness: Brightness.dark,"},{"type":"DELETE","lineNumber":31,"oldContent":"    ),"},{"type":"DELETE","lineNumber":34,"oldContent":"  );"},{"type":"DELETE","lineNumber":48,"oldContent":"    } else if (deviceOffset.inHours == -7) {"},{"type":"MODIFY","lineNumber":50,"content":"    } else if (deviceOffset.inHours == -7) {","oldContent":"    } else if (deviceOffset.inHours == -5) {"},{"type":"INSERT","lineNumber":52,"content":"    } else if (deviceOffset.inHours == -5) {"},{"type":"MODIFY","lineNumber":71,"content":"class MyApp extends ConsumerWidget {","oldContent":"class MyApp extends StatelessWidget {"},{"type":"DELETE","lineNumber":73,"oldContent":"        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),"},{"type":"DELETE","lineNumber":75,"oldContent":"      darkTheme: ThemeData("},{"type":"DELETE","lineNumber":76,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":77,"oldContent":"        useMaterial3: true,"},{"type":"DELETE","lineNumber":78,"oldContent":"        colorScheme: ColorScheme.fromSeed("},{"type":"INSERT","lineNumber":75,"content":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":76,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"DELETE","lineNumber":80,"oldContent":"          seedColor: Colors.blue,"},{"type":"DELETE","lineNumber":82,"oldContent":"          brightness: Brightness.dark,"},{"type":"DELETE","lineNumber":83,"oldContent":"      theme: ThemeData("},{"type":"DELETE","lineNumber":84,"oldContent":"        ),"},{"type":"DELETE","lineNumber":85,"oldContent":"        useMaterial3: true,"},{"type":"DELETE","lineNumber":86,"oldContent":"      ),"},{"type":"DELETE","lineNumber":87,"oldContent":"      ),"},{"type":"INSERT","lineNumber":80,"content":"      theme: themeState.lightTheme,"},{"type":"INSERT","lineNumber":81,"content":"      darkTheme: themeState.darkTheme,"},{"type":"INSERT","lineNumber":82,"content":"      themeMode: themeState.themeMode,"},{"type":"DELETE","lineNumber":92,"oldContent":"    ShellRoute("},{"type":"INSERT","lineNumber":88,"content":"final GoRouter _router = GoRouter("},{"type":"INSERT","lineNumber":89,"content":"  routes: ["},{"type":"INSERT","lineNumber":90,"content":"    ShellRoute("},{"type":"DELETE","lineNumber":96,"oldContent":"final GoRouter _router = GoRouter("},{"type":"DELETE","lineNumber":99,"oldContent":"  routes: ["},{"type":"DELETE","lineNumber":113,"oldContent":"    GoRoute("},{"type":"DELETE","lineNumber":116,"oldContent":"  ],"},{"type":"DELETE","lineNumber":117,"oldContent":");"},{"type":"DELETE","lineNumber":119,"oldContent":""},{"type":"INSERT","lineNumber":117,"content":"    GoRoute("},{"type":"INSERT","lineNumber":121,"content":"  ],"},{"type":"INSERT","lineNumber":122,"content":");"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"DELETE","lineNumber":131,"oldContent":"      label: 'Stats',"},{"type":"INSERT","lineNumber":127,"content":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"  @override"},{"type":"INSERT","lineNumber":130,"content":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"INSERT","lineNumber":131,"content":"}"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"class _MainNavigationShellState extends State<MainNavigationShell> {"},{"type":"INSERT","lineNumber":134,"content":"  int _selectedIndex = 1; // Start with All Habits (index 1)"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"INSERT","lineNumber":136,"content":"  final List<NavigationDestination> _destinations = ["},{"type":"INSERT","lineNumber":137,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":138,"content":"      icon: Icon(Icons.timeline_outlined),"},{"type":"INSERT","lineNumber":139,"content":"      selectedIcon: Icon(Icons.timeline),"},{"type":"INSERT","lineNumber":140,"content":"      label: 'Timeline',"},{"type":"DELETE","lineNumber":135,"oldContent":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":143,"content":"      icon: Icon(Icons.list_alt_outlined),"},{"type":"INSERT","lineNumber":144,"content":"      selectedIcon: Icon(Icons.list_alt),"},{"type":"INSERT","lineNumber":145,"content":"      label: 'All Habits',"},{"type":"INSERT","lineNumber":146,"content":"    ),"},{"type":"INSERT","lineNumber":147,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":148,"content":"      icon: Icon(Icons.analytics_outlined),"},{"type":"INSERT","lineNumber":149,"content":"      selectedIcon: Icon(Icons.analytics),"},{"type":"INSERT","lineNumber":150,"content":"      label: 'Stats',"},{"type":"INSERT","lineNumber":151,"content":"    ),"},{"type":"INSERT","lineNumber":152,"content":"    const NavigationDestination("},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"  @override"},{"type":"DELETE","lineNumber":144,"oldContent":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"DELETE","lineNumber":147,"oldContent":"}"},{"type":"DELETE","lineNumber":151,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"class _MainNavigationShellState extends State<MainNavigationShell> {"},{"type":"DELETE","lineNumber":156,"oldContent":"  int _selectedIndex = 1; // Start with All Habits (index 1)"},{"type":"DELETE","lineNumber":158,"oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":"  final List<NavigationDestination> _destinations = ["},{"type":"DELETE","lineNumber":165,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":168,"oldContent":"      icon: Icon(Icons.timeline_outlined),"},{"type":"DELETE","lineNumber":171,"oldContent":"      selectedIcon: Icon(Icons.timeline),"},{"type":"DELETE","lineNumber":174,"oldContent":"      label: 'Timeline',"},{"type":"DELETE","lineNumber":177,"oldContent":"    ),"},{"type":"DELETE","lineNumber":180,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":183,"oldContent":"      icon: Icon(Icons.list_alt_outlined),"},{"type":"DELETE","lineNumber":186,"oldContent":"      selectedIcon: Icon(Icons.list_alt),"},{"type":"DELETE","lineNumber":189,"oldContent":"      label: 'All Habits',"},{"type":"DELETE","lineNumber":192,"oldContent":"    ),"},{"type":"DELETE","lineNumber":195,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":198,"oldContent":"      icon: Icon(Icons.analytics_outlined),"},{"type":"DELETE","lineNumber":200,"oldContent":"      selectedIcon: Icon(Icons.analytics),"}]},{"timestamp":1754381851183,"changes":[{"type":"INSERT","lineNumber":9,"content":"import 'services/logging_service.dart';"},{"type":"DELETE","lineNumber":14,"oldContent":"void main() async {"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"void main() async {"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"  // Initialize timezone data"},{"type":"MODIFY","lineNumber":29,"content":"","oldContent":"  tz.initializeTimeZones();"},{"type":"INSERT","lineNumber":30,"content":"  // Initialize timezone data"},{"type":"INSERT","lineNumber":31,"content":"  tz.initializeTimeZones();"},{"type":"MODIFY","lineNumber":63,"content":"    AppLogger.error('Error setting timezone', e);","oldContent":"    print('Error setting timezone: $e');"},{"type":"MODIFY","lineNumber":67,"content":"      AppLogger.error('Fallback timezone setting failed', fallbackError);","oldContent":"      print('Fallback timezone setting failed: $fallbackError');"},{"type":"DELETE","lineNumber":71,"oldContent":"class MyApp extends StatelessWidget {"},{"type":"INSERT","lineNumber":73,"content":"  const MyApp({super.key});"},{"type":"INSERT","lineNumber":80,"content":"      title: 'HabitV8',"},{"type":"DELETE","lineNumber":81,"oldContent":"      title: 'HabitV8',"},{"type":"DELETE","lineNumber":83,"oldContent":"final GoRouter _router = GoRouter("},{"type":"DELETE","lineNumber":85,"oldContent":"  routes: ["},{"type":"DELETE","lineNumber":87,"oldContent":"    ShellRoute("},{"type":"INSERT","lineNumber":89,"content":"final GoRouter _router = GoRouter("},{"type":"INSERT","lineNumber":90,"content":"  routes: ["},{"type":"INSERT","lineNumber":91,"content":"    ShellRoute("},{"type":"DELETE","lineNumber":110,"oldContent":"    GoRoute("},{"type":"DELETE","lineNumber":113,"oldContent":"  ],"},{"type":"DELETE","lineNumber":115,"oldContent":");"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"INSERT","lineNumber":118,"content":"    GoRoute("},{"type":"DELETE","lineNumber":122,"oldContent":"  const MainNavigationShell({super.key, required this.child});"},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"  @override"},{"type":"INSERT","lineNumber":122,"content":"  ],"},{"type":"INSERT","lineNumber":123,"content":");"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"DELETE","lineNumber":128,"oldContent":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"DELETE","lineNumber":130,"oldContent":"}"},{"type":"INSERT","lineNumber":128,"content":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":130,"content":"  @override"},{"type":"INSERT","lineNumber":131,"content":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"INSERT","lineNumber":132,"content":"}"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"DELETE","lineNumber":134,"oldContent":"    ),"},{"type":"DELETE","lineNumber":136,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":139,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":141,"oldContent":"      selectedIcon: Icon(Icons.insights),"},{"type":"DELETE","lineNumber":144,"oldContent":"      label: 'Insights',"},{"type":"DELETE","lineNumber":149,"oldContent":"      icon: Icon(Icons.settings_outlined),"},{"type":"DELETE","lineNumber":152,"oldContent":"      selectedIcon: Icon(Icons.settings),"},{"type":"DELETE","lineNumber":154,"oldContent":"      label: 'Settings',"},{"type":"DELETE","lineNumber":157,"oldContent":"    ),"},{"type":"DELETE","lineNumber":159,"oldContent":"  ];"},{"type":"DELETE","lineNumber":161,"oldContent":""},{"type":"INSERT","lineNumber":154,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":155,"content":"      selectedIcon: Icon(Icons.insights),"},{"type":"INSERT","lineNumber":156,"content":"      label: 'Insights',"},{"type":"INSERT","lineNumber":157,"content":"    ),"},{"type":"INSERT","lineNumber":158,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":159,"content":"      icon: Icon(Icons.settings_outlined),"},{"type":"INSERT","lineNumber":160,"content":"      selectedIcon: Icon(Icons.settings),"},{"type":"INSERT","lineNumber":161,"content":"      label: 'Settings',"},{"type":"INSERT","lineNumber":162,"content":"    ),"},{"type":"INSERT","lineNumber":163,"content":"  ];"},{"type":"INSERT","lineNumber":164,"content":""}]},{"timestamp":1754442624526,"changes":[{"type":"INSERT","lineNumber":6,"content":"import 'package:shared_preferences/shared_preferences.dart';"},{"type":"DELETE","lineNumber":17,"oldContent":"  WidgetsFlutterBinding.ensureInitialized();"},{"type":"INSERT","lineNumber":19,"content":"  WidgetsFlutterBinding.ensureInitialized();"},{"type":"INSERT","lineNumber":29,"content":"  );"},{"type":"DELETE","lineNumber":30,"oldContent":"  );"},{"type":"DELETE","lineNumber":63,"oldContent":"    print('Error setting timezone: $e');"},{"type":"INSERT","lineNumber":65,"content":"    try {"},{"type":"DELETE","lineNumber":67,"oldContent":"      print('Fallback timezone setting failed: $fallbackError');"},{"type":"INSERT","lineNumber":69,"content":"    }"},{"type":"DELETE","lineNumber":80,"oldContent":"      theme: themeState.lightTheme,"},{"type":"INSERT","lineNumber":82,"content":"      theme: themeState.lightTheme,"},{"type":"DELETE","lineNumber":87,"oldContent":"final GoRouter _router = GoRouter("},{"type":"DELETE","lineNumber":89,"oldContent":"  routes: ["},{"type":"INSERT","lineNumber":90,"content":"final GoRouter _router = GoRouter("},{"type":"INSERT","lineNumber":91,"content":"  routes: ["},{"type":"DELETE","lineNumber":115,"oldContent":"    GoRoute("},{"type":"INSERT","lineNumber":119,"content":"    GoRoute("},{"type":"INSERT","lineNumber":121,"content":"      builder: (context, state) => const CreateHabitScreen(),"},{"type":"INSERT","lineNumber":122,"content":"    ),"},{"type":"DELETE","lineNumber":122,"oldContent":"      builder: (context, state) => const CreateHabitScreen(),"},{"type":"DELETE","lineNumber":124,"oldContent":"    ),"},{"type":"DELETE","lineNumber":126,"oldContent":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"  const MainNavigationShell({super.key, required this.child});"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":""},{"type":"INSERT","lineNumber":149,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":150,"content":"      icon: Icon(Icons.analytics_outlined),"},{"type":"INSERT","lineNumber":151,"content":"      selectedIcon: Icon(Icons.analytics),"},{"type":"INSERT","lineNumber":152,"content":"      label: 'Stats',"},{"type":"INSERT","lineNumber":153,"content":"    ),"},{"type":"INSERT","lineNumber":154,"content":"    const NavigationDestination("},{"type":"DELETE","lineNumber":150,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":152,"oldContent":"      icon: Icon(Icons.analytics_outlined),"},{"type":"DELETE","lineNumber":155,"oldContent":"      selectedIcon: Icon(Icons.analytics),"},{"type":"DELETE","lineNumber":158,"oldContent":"      label: 'Stats',"},{"type":"DELETE","lineNumber":161,"oldContent":"    ),"},{"type":"DELETE","lineNumber":163,"oldContent":"    const NavigationDestination("},{"type":"INSERT","lineNumber":175,"content":"  void initState() {"},{"type":"INSERT","lineNumber":176,"content":"    super.initState();"},{"type":"INSERT","lineNumber":177,"content":"    _loadDefaultScreen();"},{"type":"INSERT","lineNumber":178,"content":"  }"},{"type":"INSERT","lineNumber":179,"content":""},{"type":"INSERT","lineNumber":180,"content":"  Future<void> _loadDefaultScreen() async {"},{"type":"INSERT","lineNumber":181,"content":"    final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":182,"content":"    final defaultScreen = prefs.getString('default_screen') ?? '/';"},{"type":"INSERT","lineNumber":183,"content":"    final index = _routes.indexOf(defaultScreen);"},{"type":"INSERT","lineNumber":184,"content":"    if (index != -1) {"},{"type":"INSERT","lineNumber":185,"content":"      setState(() {"},{"type":"INSERT","lineNumber":186,"content":"        _selectedIndex = index;"},{"type":"INSERT","lineNumber":187,"content":"      });"},{"type":"INSERT","lineNumber":188,"content":"    }"},{"type":"INSERT","lineNumber":189,"content":"  }"},{"type":"INSERT","lineNumber":190,"content":""},{"type":"INSERT","lineNumber":191,"content":"  @override"}]},{"timestamp":1754442641889,"changes":[{"type":"MODIFY","lineNumber":30,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":90,"content":"final GoRouter _router = GoRouter(","oldContent":"final GoRouter _router = GoRouter("},{"type":"DELETE","lineNumber":121,"oldContent":"  ],"},{"type":"MODIFY","lineNumber":123,"content":"  ],","oldContent":");"},{"type":"INSERT","lineNumber":124,"content":");"},{"type":"DELETE","lineNumber":129,"oldContent":"  @override"},{"type":"MODIFY","lineNumber":131,"content":"  @override","oldContent":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"INSERT","lineNumber":132,"content":"  State<MainNavigationShell> createState() => _MainNavigationShellState();"},{"type":"MODIFY","lineNumber":136,"content":"  int _selectedIndex = 1; // Default fallback to All Habits (index 1)","oldContent":"  int _selectedIndex = 1; // Start with All Habits (index 1)"},{"type":"INSERT","lineNumber":137,"content":"  bool _hasInitialized = false;"},{"type":"DELETE","lineNumber":149,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":151,"oldContent":"      selectedIcon: Icon(Icons.insights),"},{"type":"DELETE","lineNumber":154,"oldContent":"      label: 'Insights',"},{"type":"INSERT","lineNumber":155,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":156,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":157,"content":"      selectedIcon: Icon(Icons.insights),"},{"type":"INSERT","lineNumber":158,"content":"      label: 'Insights',"},{"type":"DELETE","lineNumber":159,"oldContent":"    const NavigationDestination("},{"type":"INSERT","lineNumber":175,"content":"  // Map screen names to route indices"},{"type":"INSERT","lineNumber":176,"content":"  final Map<String, int> _screenNameToIndex = {"},{"type":"INSERT","lineNumber":177,"content":"    'Timeline': 0,"},{"type":"INSERT","lineNumber":178,"content":"    'All Habits': 1,"},{"type":"INSERT","lineNumber":179,"content":"    'Stats': 2,"},{"type":"INSERT","lineNumber":180,"content":"    'Insights': 3,"},{"type":"INSERT","lineNumber":181,"content":"    'Settings': 4,"},{"type":"INSERT","lineNumber":182,"content":"  };"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"DELETE","lineNumber":175,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":177,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":179,"oldContent":"      body: widget.child,"},{"type":"DELETE","lineNumber":181,"oldContent":"      bottomNavigationBar: NavigationBar("},{"type":"DELETE","lineNumber":183,"oldContent":"        selectedIndex: _selectedIndex,"},{"type":"DELETE","lineNumber":185,"oldContent":"        onDestinationSelected: (index) {"},{"type":"INSERT","lineNumber":191,"content":"    try {"},{"type":"INSERT","lineNumber":192,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":193,"content":"      final defaultScreen = prefs.getString('default_screen') ?? 'All Habits';"},{"type":"INSERT","lineNumber":194,"content":"      final index = _screenNameToIndex[defaultScreen] ?? 1;"},{"type":"INSERT","lineNumber":195,"content":""},{"type":"INSERT","lineNumber":196,"content":"      setState(() {"},{"type":"INSERT","lineNumber":197,"content":"        _selectedIndex = index;"},{"type":"INSERT","lineNumber":198,"content":"        _hasInitialized = true;"},{"type":"INSERT","lineNumber":199,"content":"      });"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"      // Navigate to the default screen after initialization"},{"type":"INSERT","lineNumber":202,"content":"      WidgetsBinding.instance.addPostFrameCallback((_) {"},{"type":"INSERT","lineNumber":203,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":204,"content":"          context.go(_routes[index]);"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"      });"},{"type":"INSERT","lineNumber":207,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":208,"content":"      AppLogger.error('Error loading default screen', e);"},{"type":"INSERT","lineNumber":209,"content":"      setState(() {"},{"type":"INSERT","lineNumber":210,"content":"        _selectedIndex = 1; // Fallback to All Habits"},{"type":"INSERT","lineNumber":211,"content":"        _hasInitialized = true;"},{"type":"INSERT","lineNumber":212,"content":"      });"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"  }"},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"  @override"},{"type":"INSERT","lineNumber":217,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":218,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":219,"content":"      body: widget.child,"},{"type":"INSERT","lineNumber":220,"content":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":221,"content":"        selectedIndex: _selectedIndex,"},{"type":"INSERT","lineNumber":222,"content":"        onDestinationSelected: (index) {"},{"type":"DELETE","lineNumber":188,"oldContent":"    final prefs = await SharedPreferences.getInstance();"},{"type":"DELETE","lineNumber":190,"oldContent":"    final defaultScreen = prefs.getString('default_screen') ?? '/';"},{"type":"DELETE","lineNumber":192,"oldContent":"    final index = _routes.indexOf(defaultScreen);"},{"type":"DELETE","lineNumber":194,"oldContent":"    if (index != -1) {"},{"type":"DELETE","lineNumber":196,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":198,"oldContent":"        _selectedIndex = index;"},{"type":"DELETE","lineNumber":200,"oldContent":"      });"},{"type":"DELETE","lineNumber":202,"oldContent":"    }"},{"type":"DELETE","lineNumber":204,"oldContent":"  }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":208,"oldContent":"  @override"}]},{"timestamp":1754442653975,"changes":[{"type":"INSERT","lineNumber":29,"content":"  );"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"INSERT","lineNumber":89,"content":""},{"type":"DELETE","lineNumber":90,"oldContent":"final GoRouter _router = GoRouter("},{"type":"INSERT","lineNumber":91,"content":"  initialLocation: '/', // This will be overridden by the navigation shell"},{"type":"INSERT","lineNumber":107,"content":"          path: '/all-habits',"},{"type":"INSERT","lineNumber":108,"content":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"INSERT","lineNumber":109,"content":"        ),"},{"type":"INSERT","lineNumber":110,"content":"        GoRoute("},{"type":"INSERT","lineNumber":127,"content":"    ),"},{"type":"DELETE","lineNumber":124,"oldContent":"    ),"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":155,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":160,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":161,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":158,"oldContent":"    ),"},{"type":"INSERT","lineNumber":164,"content":"    ),"},{"type":"DELETE","lineNumber":175,"oldContent":"  @override"},{"type":"DELETE","lineNumber":178,"oldContent":"  void initState() {"},{"type":"DELETE","lineNumber":181,"oldContent":"    super.initState();"},{"type":"DELETE","lineNumber":184,"oldContent":"    _loadDefaultScreen();"},{"type":"INSERT","lineNumber":188,"content":""},{"type":"INSERT","lineNumber":189,"content":"  @override"},{"type":"INSERT","lineNumber":190,"content":"  void initState() {"},{"type":"INSERT","lineNumber":191,"content":"    super.initState();"},{"type":"INSERT","lineNumber":192,"content":"    _loadDefaultScreen();"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":191,"oldContent":"          setState(() {"},{"type":"DELETE","lineNumber":192,"oldContent":"            _selectedIndex = index;"},{"type":"DELETE","lineNumber":194,"oldContent":"          });"},{"type":"DELETE","lineNumber":197,"oldContent":"          context.go(_routes[index]);"},{"type":"DELETE","lineNumber":200,"oldContent":"        },"},{"type":"DELETE","lineNumber":203,"oldContent":"        destinations: _destinations,"},{"type":"DELETE","lineNumber":206,"oldContent":"      ),"},{"type":"DELETE","lineNumber":209,"oldContent":"      floatingActionButton: FloatingActionButton("},{"type":"DELETE","lineNumber":212,"oldContent":"        onPressed: () {"},{"type":"DELETE","lineNumber":215,"oldContent":"          context.push('/create-habit');"},{"type":"DELETE","lineNumber":218,"oldContent":"        },"},{"type":"DELETE","lineNumber":221,"oldContent":"        child: const Icon(Icons.add),"},{"type":"DELETE","lineNumber":223,"oldContent":"      ),"},{"type":"DELETE","lineNumber":225,"oldContent":"    );"},{"type":"DELETE","lineNumber":227,"oldContent":"  }"},{"type":"DELETE","lineNumber":229,"oldContent":"}"},{"type":"DELETE","lineNumber":232,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"        onDestinationSelected: (index) {"},{"type":"DELETE","lineNumber":235,"oldContent":"        selectedIndex: _selectedIndex,"},{"type":"DELETE","lineNumber":237,"oldContent":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":225,"content":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":226,"content":"        selectedIndex: _selectedIndex,"},{"type":"INSERT","lineNumber":227,"content":"        onDestinationSelected: (index) {"},{"type":"INSERT","lineNumber":228,"content":"          setState(() {"},{"type":"INSERT","lineNumber":229,"content":"            _selectedIndex = index;"},{"type":"INSERT","lineNumber":230,"content":"          });"},{"type":"INSERT","lineNumber":231,"content":"          context.go(_routes[index]);"},{"type":"INSERT","lineNumber":232,"content":"        },"},{"type":"INSERT","lineNumber":233,"content":"        destinations: _destinations,"},{"type":"INSERT","lineNumber":234,"content":"      ),"},{"type":"INSERT","lineNumber":235,"content":"      floatingActionButton: FloatingActionButton("},{"type":"INSERT","lineNumber":236,"content":"        onPressed: () {"},{"type":"INSERT","lineNumber":237,"content":"          context.push('/create-habit');"},{"type":"INSERT","lineNumber":238,"content":"        },"},{"type":"INSERT","lineNumber":239,"content":"        child: const Icon(Icons.add),"},{"type":"INSERT","lineNumber":240,"content":"      ),"},{"type":"INSERT","lineNumber":241,"content":"    );"},{"type":"INSERT","lineNumber":242,"content":"  }"},{"type":"INSERT","lineNumber":243,"content":"}"},{"type":"INSERT","lineNumber":244,"content":""}]},{"timestamp":1754442672969,"changes":[{"type":"DELETE","lineNumber":107,"oldContent":"          path: '/stats',"},{"type":"DELETE","lineNumber":109,"oldContent":"          builder: (context, state) => const StatsScreen(),"},{"type":"INSERT","lineNumber":110,"content":"        GoRoute("},{"type":"INSERT","lineNumber":111,"content":"          path: '/stats',"},{"type":"INSERT","lineNumber":112,"content":"          builder: (context, state) => const StatsScreen(),"},{"type":"DELETE","lineNumber":114,"oldContent":"        GoRoute("},{"type":"INSERT","lineNumber":127,"content":"    ),"},{"type":"DELETE","lineNumber":131,"oldContent":"    ),"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"  bool _hasInitialized = false;"},{"type":"INSERT","lineNumber":159,"content":"    const NavigationDestination("},{"type":"INSERT","lineNumber":160,"content":"      icon: Icon(Icons.insights_outlined),"},{"type":"INSERT","lineNumber":163,"content":"    ),"},{"type":"DELETE","lineNumber":163,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":164,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":169,"oldContent":"    ),"},{"type":"DELETE","lineNumber":188,"oldContent":"  }"},{"type":"DELETE","lineNumber":190,"oldContent":""},{"type":"DELETE","lineNumber":193,"oldContent":"  Future<void> _loadDefaultScreen() async {"},{"type":"INSERT","lineNumber":192,"content":"  }"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":194,"content":"  Future<void> _loadDefaultScreen() async {"},{"type":"DELETE","lineNumber":203,"oldContent":"        _hasInitialized = true;"},{"type":"DELETE","lineNumber":216,"oldContent":"        _hasInitialized = true;"},{"type":"INSERT","lineNumber":214,"content":"      });"},{"type":"INSERT","lineNumber":215,"content":"    }"},{"type":"INSERT","lineNumber":216,"content":"  }"},{"type":"INSERT","lineNumber":217,"content":""},{"type":"INSERT","lineNumber":218,"content":"  @override"},{"type":"INSERT","lineNumber":219,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":220,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":221,"content":"      body: widget.child,"},{"type":"DELETE","lineNumber":219,"oldContent":"      });"},{"type":"DELETE","lineNumber":222,"oldContent":"    }"},{"type":"DELETE","lineNumber":225,"oldContent":"  }"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":231,"oldContent":"  @override"},{"type":"DELETE","lineNumber":234,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":237,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":239,"oldContent":"      body: widget.child,"},{"type":"DELETE","lineNumber":241,"oldContent":""},{"type":"DELETE","lineNumber":243,"oldContent":"}"},{"type":"INSERT","lineNumber":240,"content":"}"},{"type":"INSERT","lineNumber":241,"content":""}]},{"timestamp":1754444606174,"changes":[{"type":"DELETE","lineNumber":108,"oldContent":"        GoRoute("},{"type":"MODIFY","lineNumber":110,"content":"        GoRoute(","oldContent":"          path: '/stats',"},{"type":"INSERT","lineNumber":111,"content":"          path: '/stats',"},{"type":"MODIFY","lineNumber":159,"content":"    const NavigationDestination(","oldContent":"    const NavigationDestination("},{"type":"MODIFY","lineNumber":164,"content":"    const NavigationDestination(","oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":189,"oldContent":"  }"},{"type":"DELETE","lineNumber":191,"oldContent":""},{"type":"MODIFY","lineNumber":192,"content":"  }","oldContent":"  Future<void> _loadDefaultScreen() async {"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":194,"content":"  Future<void> _loadDefaultScreen() async {"},{"type":"DELETE","lineNumber":212,"oldContent":"      });"},{"type":"MODIFY","lineNumber":214,"content":"      });","oldContent":"    }"},{"type":"INSERT","lineNumber":215,"content":"    }"},{"type":"DELETE","lineNumber":218,"oldContent":"      bottomNavigationBar: NavigationBar("},{"type":"DELETE","lineNumber":220,"oldContent":"        selectedIndex: _selectedIndex,"},{"type":"DELETE","lineNumber":223,"oldContent":"        onDestinationSelected: (index) {"},{"type":"INSERT","lineNumber":222,"content":"      bottomNavigationBar: NavigationBar("},{"type":"INSERT","lineNumber":223,"content":"        selectedIndex: _selectedIndex,"},{"type":"INSERT","lineNumber":224,"content":"        onDestinationSelected: (index) {"},{"type":"DELETE","lineNumber":237,"oldContent":"}"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"INSERT","lineNumber":240,"content":"}"},{"type":"INSERT","lineNumber":241,"content":""}]}]},"H:/New/HabitV8/android/app/src/main/AndroidManifest.xml":{"filePath":"H:/New/HabitV8/android/app/src/main/AndroidManifest.xml","baseContent":"<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Notification permissions -->\n    <uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n    <uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\" />\n\n    <!-- Calendar permissions -->\n    <uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n    <uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n\n    <!-- Health and fitness permissions -->\n    <uses-permission android:name=\"android.permission.ACTIVITY_RECOGNITION\" />\n    <uses-permission android:name=\"android.permission.BODY_SENSORS\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n\n    <!-- Health Connect permissions for Android 14+ -->\n    <uses-permission android:name=\"android.permission.health.READ_STEPS\" />\n    <uses-permission android:name=\"android.permission.health.READ_HEART_RATE\" />\n    <uses-permission android:name=\"android.permission.health.READ_ACTIVE_CALORIES_BURNED\" />\n    <uses-permission android:name=\"android.permission.health.READ_DISTANCE\" />\n    <uses-permission android:name=\"android.permission.health.READ_EXERCISE\" />\n    <uses-permission android:name=\"android.permission.health.READ_SLEEP\" />\n\n    <!-- Storage permissions for data export/import -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n    <!-- Network permissions for potential future features -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n    <application\n        android:label=\"habitv8\"\n        android:name=\"${applicationName}\"\n        android:icon=\"@mipmap/ic_launcher\">\n        \n        <!-- Notification receivers for scheduled notifications -->\n        <receiver android:exported=\"false\" android:name=\"com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver\" />\n        <receiver android:exported=\"false\" android:name=\"com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n                <action android:name=\"android.intent.action.MY_PACKAGE_REPLACED\"/>\n                <action android:name=\"android.intent.action.QUICKBOOT_POWERON\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n            </intent-filter>\n        </receiver>\n        \n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:launchMode=\"singleTop\"\n            android:taskAffinity=\"\"\n            android:theme=\"@style/LaunchTheme\"\n            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n            android:hardwareAccelerated=\"true\"\n            android:windowSoftInputMode=\"adjustResize\">\n            <!-- Specifies an Android theme to apply to this Activity as soon as\n                 the Android process has started. This theme is visible to the user\n                 while the Flutter UI initializes. After that, this theme continues\n                 to determine the Window background behind the Flutter UI. -->\n            <meta-data\n              android:name=\"io.flutter.embedding.android.NormalTheme\"\n              android:resource=\"@style/NormalTheme\"\n              />\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <!-- Don't delete the meta-data below.\n             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->\n        <meta-data\n            android:name=\"flutterEmbedding\"\n            android:value=\"2\" />\n    </application>\n    <!-- Required to query activities that can process text, see:\n         https://developer.android.com/training/package-visibility and\n         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.\n\n         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->\n    <queries>\n        <intent>\n            <action android:name=\"android.intent.action.PROCESS_TEXT\"/>\n            <data android:mimeType=\"text/plain\"/>\n        </intent>\n    </queries>\n</manifest>\n","baseTimestamp":1754378343120,"deltas":[{"timestamp":1754378379399,"changes":[{"type":"MODIFY","lineNumber":38,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":49,"content":"","oldContent":"        "}]},{"timestamp":1754379464822,"changes":[{"type":"MODIFY","lineNumber":38,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":49,"content":"        ","oldContent":""}]},{"timestamp":1754379526999,"changes":[{"type":"MODIFY","lineNumber":38,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":49,"content":"","oldContent":"        "}]}]},"H:/New/HabitV8/lib/ui/home_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/home_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:go_router/go_router.dart';\nimport '../services/notification_service.dart';\nimport 'screens/all_habits_screen.dart';\nimport 'screens/create_habit_screen.dart';\nimport 'screens/timeline_screen.dart';\nimport 'screens/stats_screen.dart';\nimport 'screens/insights_screen.dart';\nimport 'screens/settings_screen.dart';\n\nclass HomeScreen extends ConsumerStatefulWidget {\n  const HomeScreen({super.key});\n\n  @override\n  ConsumerState<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends ConsumerState<HomeScreen> {\n  int _selectedIndex = 0;\n  \n  final List<Widget> _screens = [\n    const HabitDashboard(),\n    const AllHabitsScreen(),\n    const TimelineScreen(),\n    const StatsScreen(),\n    const InsightsScreen(),\n  ];\n\n  final List<NavigationDestination> _destinations = [\n    const NavigationDestination(\n      icon: Icon(Icons.dashboard_outlined),\n      selectedIcon: Icon(Icons.dashboard),\n      label: 'Dashboard',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.list_outlined),\n      selectedIcon: Icon(Icons.list),\n      label: 'Habits',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.timeline_outlined),\n      selectedIcon: Icon(Icons.timeline),\n      label: 'Timeline',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.analytics_outlined),\n      selectedIcon: Icon(Icons.analytics),\n      label: 'Stats',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.insights_outlined),\n      selectedIcon: Icon(Icons.insights),\n      label: 'Insights',\n    ),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _screens[_selectedIndex],\n      bottomNavigationBar: NavigationBar(\n        onDestinationSelected: (int index) {\n          setState(() {\n            _selectedIndex = index;\n          });\n        },\n        selectedIndex: _selectedIndex,\n        destinations: _destinations,\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // Navigate to create habit screen\n          Navigator.of(context).push(\n            MaterialPageRoute(\n              builder: (context) => const CreateHabitScreen(),\n            ),\n          );\n        },\n        child: const Icon(Icons.add),\n        tooltip: 'Add New Habit',\n      ),\n    );\n  }\n}\n\nclass HabitDashboard extends ConsumerWidget {\n  const HabitDashboard({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('HabitV8'),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.settings),\n            onPressed: () {\n              Navigator.of(context).push(\n                MaterialPageRoute(\n                  builder: (context) => const SettingsScreen(),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Welcome section\n            Card(\n              child: Padding(\n                padding: const EdgeInsets.all(16.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'Good ${_getGreeting()}!',\n                      style: Theme.of(context).textTheme.headlineSmall,\n                    ),\n                    const SizedBox(height: 8),\n                    Text(\n                      'Ready to build great habits today?',\n                      style: Theme.of(context).textTheme.bodyLarge,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n            \n            const SizedBox(height: 24),\n            \n            // Today's habits section\n            Text(\n              'Today\\'s Habits',\n              style: Theme.of(context).textTheme.headlineSmall,\n            ),\n            const SizedBox(height: 16),\n            \n            // Quick stats cards\n            Row(\n              children: [\n                Expanded(\n                  child: _buildStatCard(\n                    context,\n                    'Completed',\n                    '3/8',\n                    Icons.check_circle,\n                    Colors.green,\n                  ),\n                ),\n                const SizedBox(width: 16),\n                Expanded(\n                  child: _buildStatCard(\n                    context,\n                    'Streak',\n                    '5 days',\n                    Icons.local_fire_department,\n                    Colors.orange,\n                  ),\n                ),\n              ],\n            ),\n            \n            const SizedBox(height: 24),\n            \n            // Quick actions\n            Text(\n              'Quick Actions',\n              style: Theme.of(context).textTheme.headlineSmall,\n            ),\n            const SizedBox(height: 16),\n            \n            Row(\n              children: [\n                Expanded(\n                  child: _buildActionCard(\n                    context,\n                    'Add Habit',\n                    Icons.add_circle,\n                    Colors.blue,\n                    () {\n                      Navigator.of(context).push(\n                        MaterialPageRoute(\n                          builder: (context) => const CreateHabitScreen(),\n                        ),\n                      );\n                    },\n                  ),\n                ),\n                const SizedBox(width: 16),\n                Expanded(\n                  child: _buildActionCard(\n                    context,\n                    'Test Notifications',\n                    Icons.notifications,\n                    Colors.purple,\n                    () {\n                      _showNotificationTest(context);\n                    },\n                  ),\n                ),\n              ],\n            ),\n            \n            const SizedBox(height: 24),\n            \n            // Recent activity\n            Text(\n              'Recent Activity',\n              style: Theme.of(context).textTheme.headlineSmall,\n            ),\n            const SizedBox(height: 16),\n            \n            Card(\n              child: Padding(\n                padding: const EdgeInsets.all(16.0),\n                child: Column(\n                  children: [\n                    ListTile(\n                      leading: CircleAvatar(\n                        backgroundColor: Colors.green.withOpacity(0.2),\n                        child: const Icon(Icons.fitness_center, color: Colors.green),\n                      ),\n                      title: const Text('Morning Workout'),\n                      subtitle: const Text('Completed 10 minutes ago'),\n                      trailing: const Icon(Icons.check, color: Colors.green),\n                    ),\n                    const Divider(),\n                    ListTile(\n                      leading: CircleAvatar(\n                        backgroundColor: Colors.blue.withOpacity(0.2),\n                        child: const Icon(Icons.book, color: Colors.blue),\n                      ),\n                      title: const Text('Read 30 minutes'),\n                      subtitle: const Text('Due in 2 hours'),\n                      trailing: const Icon(Icons.schedule, color: Colors.orange),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildStatCard(\n    BuildContext context,\n    String title,\n    String value,\n    IconData icon,\n    Color color,\n  ) {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Icon(icon, size: 32, color: color),\n            const SizedBox(height: 8),\n            Text(\n              value,\n              style: Theme.of(context).textTheme.headlineSmall?.copyWith(\n                color: color,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            Text(\n              title,\n              style: Theme.of(context).textTheme.bodyMedium,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildActionCard(\n    BuildContext context,\n    String title,\n    IconData icon,\n    Color color,\n    VoidCallback onTap,\n  ) {\n    return Card(\n      child: InkWell(\n        onTap: onTap,\n        borderRadius: BorderRadius.circular(12),\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            children: [\n              Icon(icon, size: 32, color: color),\n              const SizedBox(height: 8),\n              Text(\n                title,\n                style: Theme.of(context).textTheme.bodyMedium,\n                textAlign: TextAlign.center,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  String _getGreeting() {\n    final hour = DateTime.now().hour;\n    if (hour < 12) return 'Morning';\n    if (hour < 17) return 'Afternoon';\n    return 'Evening';\n  }\n\n  void _showNotificationTest(BuildContext context) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Test Notifications'),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            const Text('Test your notification system:'),\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Expanded(\n                  child: ElevatedButton(\n                    onPressed: () async {\n                      await NotificationService.showTestNotification();\n                      Navigator.of(context).pop();\n                      ScaffoldMessenger.of(context).showSnackBar(\n                        const SnackBar(content: Text('Test notification sent!')),\n                      );\n                    },\n                    child: const Text('Immediate'),\n                  ),\n                ),\n                const SizedBox(width: 8),\n                Expanded(\n                  child: ElevatedButton(\n                    onPressed: () async {\n                      await NotificationService.testScheduledNotification();\n                      Navigator.of(context).pop();\n                      ScaffoldMessenger.of(context).showSnackBar(\n                        const SnackBar(content: Text('Scheduled notification in 10s!')),\n                      );\n                    },\n                    child: const Text('Scheduled'),\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(),\n            child: const Text('Cancel'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n","baseTimestamp":1754378551212,"deltas":[{"timestamp":1754378564018,"changes":[{"type":"MODIFY","lineNumber":20,"content":"","oldContent":"  "},{"type":"MODIFY","lineNumber":132,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":134,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":141,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":166,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":168,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":175,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":207,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":209,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":216,"content":"","oldContent":"            "}]},{"timestamp":1754378705887,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import 'package:go_router/go_router.dart';"},{"type":"DELETE","lineNumber":4,"oldContent":"import 'screens/all_habits_screen.dart';"},{"type":"DELETE","lineNumber":5,"oldContent":"import 'screens/create_habit_screen.dart';"},{"type":"DELETE","lineNumber":6,"oldContent":"import 'screens/timeline_screen.dart';"},{"type":"DELETE","lineNumber":7,"oldContent":"import 'screens/stats_screen.dart';"},{"type":"DELETE","lineNumber":8,"oldContent":"import 'screens/insights_screen.dart';"},{"type":"DELETE","lineNumber":9,"oldContent":"import 'screens/settings_screen.dart';"},{"type":"DELETE","lineNumber":11,"oldContent":"class HomeScreen extends ConsumerStatefulWidget {"},{"type":"INSERT","lineNumber":4,"content":"class HomeScreen extends ConsumerWidget {"},{"type":"DELETE","lineNumber":15,"oldContent":"  ConsumerState<HomeScreen> createState() => _HomeScreenState();"},{"type":"DELETE","lineNumber":16,"oldContent":"}"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"class _HomeScreenState extends ConsumerState<HomeScreen> {"},{"type":"DELETE","lineNumber":19,"oldContent":"  int _selectedIndex = 0;"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"  final List<Widget> _screens = ["},{"type":"DELETE","lineNumber":22,"oldContent":"    const HabitDashboard(),"},{"type":"DELETE","lineNumber":23,"oldContent":"    const AllHabitsScreen(),"},{"type":"DELETE","lineNumber":24,"oldContent":"    const TimelineScreen(),"},{"type":"DELETE","lineNumber":25,"oldContent":"    const StatsScreen(),"},{"type":"DELETE","lineNumber":26,"oldContent":"    const InsightsScreen(),"},{"type":"DELETE","lineNumber":27,"oldContent":"  ];"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":"  final List<NavigationDestination> _destinations = ["},{"type":"DELETE","lineNumber":30,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":31,"oldContent":"      icon: Icon(Icons.dashboard_outlined),"},{"type":"DELETE","lineNumber":32,"oldContent":"      selectedIcon: Icon(Icons.dashboard),"},{"type":"DELETE","lineNumber":33,"oldContent":"      label: 'Dashboard',"},{"type":"DELETE","lineNumber":34,"oldContent":"    ),"},{"type":"DELETE","lineNumber":35,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":36,"oldContent":"      icon: Icon(Icons.list_outlined),"},{"type":"DELETE","lineNumber":37,"oldContent":"      selectedIcon: Icon(Icons.list),"},{"type":"DELETE","lineNumber":38,"oldContent":"      label: 'Habits',"},{"type":"DELETE","lineNumber":39,"oldContent":"    ),"},{"type":"DELETE","lineNumber":40,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":41,"oldContent":"      icon: Icon(Icons.timeline_outlined),"},{"type":"DELETE","lineNumber":42,"oldContent":"      selectedIcon: Icon(Icons.timeline),"},{"type":"DELETE","lineNumber":43,"oldContent":"      label: 'Timeline',"},{"type":"DELETE","lineNumber":44,"oldContent":"    ),"},{"type":"DELETE","lineNumber":45,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":46,"oldContent":"      icon: Icon(Icons.analytics_outlined),"},{"type":"DELETE","lineNumber":47,"oldContent":"      selectedIcon: Icon(Icons.analytics),"},{"type":"DELETE","lineNumber":48,"oldContent":"      label: 'Stats',"},{"type":"DELETE","lineNumber":49,"oldContent":"    ),"},{"type":"DELETE","lineNumber":50,"oldContent":"    const NavigationDestination("},{"type":"DELETE","lineNumber":51,"oldContent":"      icon: Icon(Icons.insights_outlined),"},{"type":"DELETE","lineNumber":52,"oldContent":"      selectedIcon: Icon(Icons.insights),"},{"type":"DELETE","lineNumber":53,"oldContent":"      label: 'Insights',"},{"type":"DELETE","lineNumber":54,"oldContent":"    ),"},{"type":"DELETE","lineNumber":55,"oldContent":"  ];"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"  @override"},{"type":"DELETE","lineNumber":58,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":59,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":60,"oldContent":"      body: _screens[_selectedIndex],"},{"type":"DELETE","lineNumber":61,"oldContent":"      bottomNavigationBar: NavigationBar("},{"type":"DELETE","lineNumber":62,"oldContent":"        onDestinationSelected: (int index) {"},{"type":"DELETE","lineNumber":63,"oldContent":"          setState(() {"},{"type":"DELETE","lineNumber":64,"oldContent":"            _selectedIndex = index;"},{"type":"DELETE","lineNumber":65,"oldContent":"          });"},{"type":"DELETE","lineNumber":66,"oldContent":"        },"},{"type":"DELETE","lineNumber":67,"oldContent":"        selectedIndex: _selectedIndex,"},{"type":"DELETE","lineNumber":68,"oldContent":"        destinations: _destinations,"},{"type":"DELETE","lineNumber":69,"oldContent":"      ),"},{"type":"DELETE","lineNumber":70,"oldContent":"      floatingActionButton: FloatingActionButton("},{"type":"DELETE","lineNumber":71,"oldContent":"        onPressed: () {"},{"type":"DELETE","lineNumber":72,"oldContent":"          // Navigate to create habit screen"},{"type":"DELETE","lineNumber":73,"oldContent":"          Navigator.of(context).push("},{"type":"DELETE","lineNumber":74,"oldContent":"            MaterialPageRoute("},{"type":"DELETE","lineNumber":75,"oldContent":"              builder: (context) => const CreateHabitScreen(),"},{"type":"DELETE","lineNumber":76,"oldContent":"            ),"},{"type":"DELETE","lineNumber":77,"oldContent":"          );"},{"type":"DELETE","lineNumber":78,"oldContent":"        },"},{"type":"DELETE","lineNumber":79,"oldContent":"        child: const Icon(Icons.add),"},{"type":"DELETE","lineNumber":80,"oldContent":"        tooltip: 'Add New Habit',"},{"type":"DELETE","lineNumber":81,"oldContent":"      ),"},{"type":"DELETE","lineNumber":82,"oldContent":"    );"},{"type":"DELETE","lineNumber":83,"oldContent":"  }"},{"type":"DELETE","lineNumber":84,"oldContent":"}"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"class HabitDashboard extends ConsumerWidget {"},{"type":"DELETE","lineNumber":87,"oldContent":"  const HabitDashboard({super.key});"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"  @override"},{"type":"DELETE","lineNumber":94,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":95,"oldContent":"          IconButton("},{"type":"DELETE","lineNumber":96,"oldContent":"            icon: const Icon(Icons.settings),"},{"type":"DELETE","lineNumber":97,"oldContent":"            onPressed: () {"},{"type":"DELETE","lineNumber":98,"oldContent":"              Navigator.of(context).push("},{"type":"DELETE","lineNumber":99,"oldContent":"                MaterialPageRoute("},{"type":"DELETE","lineNumber":100,"oldContent":"                  builder: (context) => const SettingsScreen(),"},{"type":"DELETE","lineNumber":101,"oldContent":"                ),"},{"type":"DELETE","lineNumber":102,"oldContent":"              );"},{"type":"DELETE","lineNumber":103,"oldContent":"            },"},{"type":"DELETE","lineNumber":104,"oldContent":"          ),"},{"type":"DELETE","lineNumber":105,"oldContent":"        ],"},{"type":"DELETE","lineNumber":107,"oldContent":"      body: SingleChildScrollView("},{"type":"INSERT","lineNumber":13,"content":"      body: Padding("},{"type":"DELETE","lineNumber":110,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":16,"content":"          crossAxisAlignment: CrossAxisAlignment.stretch,"},{"type":"DELETE","lineNumber":112,"oldContent":"            // Welcome section"},{"type":"DELETE","lineNumber":113,"oldContent":"            Card("},{"type":"DELETE","lineNumber":114,"oldContent":"              child: Padding("},{"type":"DELETE","lineNumber":115,"oldContent":"                padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":116,"oldContent":"                child: Column("},{"type":"DELETE","lineNumber":117,"oldContent":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":118,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":119,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":120,"oldContent":"                      'Good ${_getGreeting()}!',"},{"type":"DELETE","lineNumber":121,"oldContent":"                      style: Theme.of(context).textTheme.headlineSmall,"},{"type":"DELETE","lineNumber":122,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":123,"oldContent":"                    const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":124,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":125,"oldContent":"                      'Ready to build great habits today?',"},{"type":"DELETE","lineNumber":126,"oldContent":"                      style: Theme.of(context).textTheme.bodyLarge,"},{"type":"DELETE","lineNumber":127,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":128,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":129,"oldContent":"                ),"},{"type":"DELETE","lineNumber":130,"oldContent":"              ),"},{"type":"INSERT","lineNumber":18,"content":"            const Text("},{"type":"INSERT","lineNumber":19,"content":"              'Habit Tracker',"},{"type":"INSERT","lineNumber":20,"content":"              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),"},{"type":"INSERT","lineNumber":21,"content":"              textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":23,"content":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":133,"oldContent":"            const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":135,"oldContent":"            // Today's habits section"},{"type":"DELETE","lineNumber":136,"oldContent":"            Text("},{"type":"DELETE","lineNumber":137,"oldContent":"              'Today\\'s Habits',"},{"type":"DELETE","lineNumber":138,"oldContent":"              style: Theme.of(context).textTheme.headlineSmall,"},{"type":"INSERT","lineNumber":25,"content":"            // Quick notification test (keeping the working functionality)"},{"type":"INSERT","lineNumber":26,"content":"            ElevatedButton("},{"type":"INSERT","lineNumber":27,"content":"              onPressed: () async {"},{"type":"INSERT","lineNumber":28,"content":"                await NotificationService.showTestNotification();"},{"type":"INSERT","lineNumber":29,"content":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":30,"content":"                  const SnackBar(content: Text('Test notification sent!')),"},{"type":"INSERT","lineNumber":31,"content":"                );"},{"type":"INSERT","lineNumber":32,"content":"              },"},{"type":"INSERT","lineNumber":33,"content":"              child: const Text('Test Notification'),"},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"            // Quick stats cards"},{"type":"DELETE","lineNumber":143,"oldContent":"            Row("},{"type":"DELETE","lineNumber":144,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":145,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":146,"oldContent":"                  child: _buildStatCard("},{"type":"DELETE","lineNumber":147,"oldContent":"                    context,"},{"type":"DELETE","lineNumber":148,"oldContent":"                    'Completed',"},{"type":"DELETE","lineNumber":149,"oldContent":"                    '3/8',"},{"type":"DELETE","lineNumber":150,"oldContent":"                    Icons.check_circle,"},{"type":"DELETE","lineNumber":151,"oldContent":"                    Colors.green,"},{"type":"DELETE","lineNumber":152,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":153,"oldContent":"                ),"},{"type":"DELETE","lineNumber":154,"oldContent":"                const SizedBox(width: 16),"},{"type":"DELETE","lineNumber":155,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":156,"oldContent":"                  child: _buildStatCard("},{"type":"DELETE","lineNumber":157,"oldContent":"                    context,"},{"type":"DELETE","lineNumber":158,"oldContent":"                    'Streak',"},{"type":"DELETE","lineNumber":159,"oldContent":"                    '5 days',"},{"type":"DELETE","lineNumber":160,"oldContent":"                    Icons.local_fire_department,"},{"type":"DELETE","lineNumber":161,"oldContent":"                    Colors.orange,"},{"type":"DELETE","lineNumber":162,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":163,"oldContent":"                ),"},{"type":"DELETE","lineNumber":164,"oldContent":"              ],"},{"type":"INSERT","lineNumber":36,"content":"            ElevatedButton("},{"type":"INSERT","lineNumber":37,"content":"              onPressed: () async {"},{"type":"INSERT","lineNumber":38,"content":"                await NotificationService.testScheduledNotification();"},{"type":"INSERT","lineNumber":39,"content":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":40,"content":"                  const SnackBar(content: Text('Scheduled notification in 10s!')),"},{"type":"INSERT","lineNumber":41,"content":"                );"},{"type":"INSERT","lineNumber":42,"content":"              },"},{"type":"INSERT","lineNumber":43,"content":"              child: const Text('Test Scheduled Notification'),"},{"type":"DELETE","lineNumber":167,"oldContent":"            const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":46,"content":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":169,"oldContent":"            // Quick actions"},{"type":"DELETE","lineNumber":170,"oldContent":"            Text("},{"type":"DELETE","lineNumber":171,"oldContent":"              'Quick Actions',"},{"type":"DELETE","lineNumber":172,"oldContent":"              style: Theme.of(context).textTheme.headlineSmall,"},{"type":"DELETE","lineNumber":173,"oldContent":"            ),"},{"type":"DELETE","lineNumber":174,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":"            Row("},{"type":"DELETE","lineNumber":177,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":178,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":179,"oldContent":"                  child: _buildActionCard("},{"type":"DELETE","lineNumber":180,"oldContent":"                    context,"},{"type":"DELETE","lineNumber":181,"oldContent":"                    'Add Habit',"},{"type":"DELETE","lineNumber":182,"oldContent":"                    Icons.add_circle,"},{"type":"DELETE","lineNumber":183,"oldContent":"                    Colors.blue,"},{"type":"DELETE","lineNumber":184,"oldContent":"                    () {"},{"type":"DELETE","lineNumber":185,"oldContent":"                      Navigator.of(context).push("},{"type":"DELETE","lineNumber":186,"oldContent":"                        MaterialPageRoute("},{"type":"DELETE","lineNumber":187,"oldContent":"                          builder: (context) => const CreateHabitScreen(),"},{"type":"DELETE","lineNumber":188,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":189,"oldContent":"                      );"},{"type":"DELETE","lineNumber":190,"oldContent":"                    },"},{"type":"DELETE","lineNumber":191,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":192,"oldContent":"                ),"},{"type":"DELETE","lineNumber":193,"oldContent":"                const SizedBox(width: 16),"},{"type":"DELETE","lineNumber":194,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":195,"oldContent":"                  child: _buildActionCard("},{"type":"DELETE","lineNumber":196,"oldContent":"                    context,"},{"type":"DELETE","lineNumber":197,"oldContent":"                    'Test Notifications',"},{"type":"DELETE","lineNumber":198,"oldContent":"                    Icons.notifications,"},{"type":"DELETE","lineNumber":199,"oldContent":"                    Colors.purple,"},{"type":"DELETE","lineNumber":200,"oldContent":"                    () {"},{"type":"DELETE","lineNumber":201,"oldContent":"                      _showNotificationTest(context);"},{"type":"DELETE","lineNumber":202,"oldContent":"                    },"},{"type":"DELETE","lineNumber":203,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":204,"oldContent":"                ),"},{"type":"DELETE","lineNumber":205,"oldContent":"              ],"},{"type":"DELETE","lineNumber":206,"oldContent":"            ),"},{"type":"DELETE","lineNumber":207,"oldContent":""},{"type":"DELETE","lineNumber":208,"oldContent":"            const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"            // Recent activity"},{"type":"DELETE","lineNumber":211,"oldContent":"            Text("},{"type":"DELETE","lineNumber":212,"oldContent":"              'Recent Activity',"},{"type":"DELETE","lineNumber":213,"oldContent":"              style: Theme.of(context).textTheme.headlineSmall,"},{"type":"DELETE","lineNumber":214,"oldContent":"            ),"},{"type":"DELETE","lineNumber":215,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":217,"oldContent":"            Card("},{"type":"INSERT","lineNumber":48,"content":"            // Placeholder for your habit features"},{"type":"INSERT","lineNumber":49,"content":"            const Card("},{"type":"DELETE","lineNumber":219,"oldContent":"                padding: const EdgeInsets.all(16.0),"},{"type":"INSERT","lineNumber":51,"content":"                padding: EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":222,"oldContent":"                    ListTile("},{"type":"DELETE","lineNumber":223,"oldContent":"                      leading: CircleAvatar("},{"type":"DELETE","lineNumber":224,"oldContent":"                        backgroundColor: Colors.green.withOpacity(0.2),"},{"type":"DELETE","lineNumber":225,"oldContent":"                        child: const Icon(Icons.fitness_center, color: Colors.green),"},{"type":"DELETE","lineNumber":226,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":227,"oldContent":"                      title: const Text('Morning Workout'),"},{"type":"DELETE","lineNumber":228,"oldContent":"                      subtitle: const Text('Completed 10 minutes ago'),"},{"type":"DELETE","lineNumber":229,"oldContent":"                      trailing: const Icon(Icons.check, color: Colors.green),"},{"type":"INSERT","lineNumber":54,"content":"                    Icon(Icons.construction, size: 48, color: Colors.blue),"},{"type":"INSERT","lineNumber":55,"content":"                    SizedBox(height: 8),"},{"type":"INSERT","lineNumber":56,"content":"                    Text("},{"type":"INSERT","lineNumber":57,"content":"                      'Habit Features Coming Soon',"},{"type":"INSERT","lineNumber":58,"content":"                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),"},{"type":"DELETE","lineNumber":231,"oldContent":"                    const Divider(),"},{"type":"DELETE","lineNumber":232,"oldContent":"                    ListTile("},{"type":"DELETE","lineNumber":233,"oldContent":"                      leading: CircleAvatar("},{"type":"DELETE","lineNumber":234,"oldContent":"                        backgroundColor: Colors.blue.withOpacity(0.2),"},{"type":"DELETE","lineNumber":235,"oldContent":"                        child: const Icon(Icons.book, color: Colors.blue),"},{"type":"DELETE","lineNumber":236,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":237,"oldContent":"                      title: const Text('Read 30 minutes'),"},{"type":"DELETE","lineNumber":238,"oldContent":"                      subtitle: const Text('Due in 2 hours'),"},{"type":"DELETE","lineNumber":239,"oldContent":"                      trailing: const Icon(Icons.schedule, color: Colors.orange),"},{"type":"DELETE","lineNumber":240,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":60,"content":"                    SizedBox(height: 8),"},{"type":"INSERT","lineNumber":61,"content":"                    Text('The notification system is now working perfectly!'),"},{"type":"DELETE","lineNumber":250,"oldContent":""},{"type":"DELETE","lineNumber":251,"oldContent":"  Widget _buildStatCard("},{"type":"DELETE","lineNumber":252,"oldContent":"    BuildContext context,"},{"type":"DELETE","lineNumber":253,"oldContent":"    String title,"},{"type":"DELETE","lineNumber":254,"oldContent":"    String value,"},{"type":"DELETE","lineNumber":255,"oldContent":"    IconData icon,"},{"type":"DELETE","lineNumber":256,"oldContent":"    Color color,"},{"type":"DELETE","lineNumber":257,"oldContent":"  ) {"},{"type":"DELETE","lineNumber":258,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":259,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":260,"oldContent":"        padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":261,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":262,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":263,"oldContent":"            Icon(icon, size: 32, color: color),"},{"type":"DELETE","lineNumber":264,"oldContent":"            const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":265,"oldContent":"            Text("},{"type":"DELETE","lineNumber":266,"oldContent":"              value,"},{"type":"DELETE","lineNumber":267,"oldContent":"              style: Theme.of(context).textTheme.headlineSmall?.copyWith("},{"type":"DELETE","lineNumber":268,"oldContent":"                color: color,"},{"type":"DELETE","lineNumber":269,"oldContent":"                fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":270,"oldContent":"              ),"},{"type":"DELETE","lineNumber":271,"oldContent":"            ),"},{"type":"DELETE","lineNumber":272,"oldContent":"            Text("},{"type":"DELETE","lineNumber":273,"oldContent":"              title,"},{"type":"DELETE","lineNumber":274,"oldContent":"              style: Theme.of(context).textTheme.bodyMedium,"},{"type":"DELETE","lineNumber":275,"oldContent":"            ),"},{"type":"DELETE","lineNumber":276,"oldContent":"          ],"},{"type":"DELETE","lineNumber":277,"oldContent":"        ),"},{"type":"DELETE","lineNumber":278,"oldContent":"      ),"},{"type":"DELETE","lineNumber":279,"oldContent":"    );"},{"type":"DELETE","lineNumber":280,"oldContent":"  }"},{"type":"DELETE","lineNumber":281,"oldContent":""},{"type":"DELETE","lineNumber":282,"oldContent":"  Widget _buildActionCard("},{"type":"DELETE","lineNumber":283,"oldContent":"    BuildContext context,"},{"type":"DELETE","lineNumber":284,"oldContent":"    String title,"},{"type":"DELETE","lineNumber":285,"oldContent":"    IconData icon,"},{"type":"DELETE","lineNumber":286,"oldContent":"    Color color,"},{"type":"DELETE","lineNumber":287,"oldContent":"    VoidCallback onTap,"},{"type":"DELETE","lineNumber":288,"oldContent":"  ) {"},{"type":"DELETE","lineNumber":289,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":290,"oldContent":"      child: InkWell("},{"type":"DELETE","lineNumber":291,"oldContent":"        onTap: onTap,"},{"type":"DELETE","lineNumber":292,"oldContent":"        borderRadius: BorderRadius.circular(12),"},{"type":"DELETE","lineNumber":293,"oldContent":"        child: Padding("},{"type":"DELETE","lineNumber":294,"oldContent":"          padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":295,"oldContent":"          child: Column("},{"type":"DELETE","lineNumber":296,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":297,"oldContent":"              Icon(icon, size: 32, color: color),"},{"type":"DELETE","lineNumber":298,"oldContent":"              const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":299,"oldContent":"              Text("},{"type":"DELETE","lineNumber":300,"oldContent":"                title,"},{"type":"DELETE","lineNumber":301,"oldContent":"                style: Theme.of(context).textTheme.bodyMedium,"},{"type":"DELETE","lineNumber":302,"oldContent":"                textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":303,"oldContent":"              ),"},{"type":"DELETE","lineNumber":304,"oldContent":"            ],"},{"type":"DELETE","lineNumber":305,"oldContent":"          ),"},{"type":"DELETE","lineNumber":306,"oldContent":"        ),"},{"type":"DELETE","lineNumber":307,"oldContent":"      ),"},{"type":"DELETE","lineNumber":308,"oldContent":"    );"},{"type":"DELETE","lineNumber":309,"oldContent":"  }"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":311,"oldContent":"  String _getGreeting() {"},{"type":"DELETE","lineNumber":312,"oldContent":"    final hour = DateTime.now().hour;"},{"type":"DELETE","lineNumber":313,"oldContent":"    if (hour < 12) return 'Morning';"},{"type":"DELETE","lineNumber":314,"oldContent":"    if (hour < 17) return 'Afternoon';"},{"type":"DELETE","lineNumber":315,"oldContent":"    return 'Evening';"},{"type":"DELETE","lineNumber":316,"oldContent":"  }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"  void _showNotificationTest(BuildContext context) {"},{"type":"DELETE","lineNumber":319,"oldContent":"    showDialog("},{"type":"DELETE","lineNumber":320,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":321,"oldContent":"      builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":322,"oldContent":"        title: const Text('Test Notifications'),"},{"type":"DELETE","lineNumber":323,"oldContent":"        content: Column("},{"type":"DELETE","lineNumber":324,"oldContent":"          mainAxisSize: MainAxisSize.min,"},{"type":"DELETE","lineNumber":325,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":326,"oldContent":"            const Text('Test your notification system:'),"},{"type":"DELETE","lineNumber":327,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":328,"oldContent":"            Row("},{"type":"DELETE","lineNumber":329,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":330,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":331,"oldContent":"                  child: ElevatedButton("},{"type":"DELETE","lineNumber":332,"oldContent":"                    onPressed: () async {"},{"type":"DELETE","lineNumber":333,"oldContent":"                      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":334,"oldContent":"                      Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":335,"oldContent":"                      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":336,"oldContent":"                        const SnackBar(content: Text('Test notification sent!')),"},{"type":"DELETE","lineNumber":337,"oldContent":"                      );"},{"type":"DELETE","lineNumber":338,"oldContent":"                    },"},{"type":"DELETE","lineNumber":339,"oldContent":"                    child: const Text('Immediate'),"},{"type":"DELETE","lineNumber":340,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":341,"oldContent":"                ),"},{"type":"DELETE","lineNumber":342,"oldContent":"                const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":343,"oldContent":"                Expanded("},{"type":"DELETE","lineNumber":344,"oldContent":"                  child: ElevatedButton("},{"type":"DELETE","lineNumber":345,"oldContent":"                    onPressed: () async {"},{"type":"DELETE","lineNumber":346,"oldContent":"                      await NotificationService.testScheduledNotification();"},{"type":"DELETE","lineNumber":347,"oldContent":"                      Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":348,"oldContent":"                      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":349,"oldContent":"                        const SnackBar(content: Text('Scheduled notification in 10s!')),"},{"type":"DELETE","lineNumber":350,"oldContent":"                      );"},{"type":"DELETE","lineNumber":351,"oldContent":"                    },"},{"type":"DELETE","lineNumber":352,"oldContent":"                    child: const Text('Scheduled'),"},{"type":"DELETE","lineNumber":353,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":354,"oldContent":"                ),"},{"type":"DELETE","lineNumber":355,"oldContent":"              ],"},{"type":"DELETE","lineNumber":356,"oldContent":"            ),"},{"type":"DELETE","lineNumber":357,"oldContent":"          ],"},{"type":"DELETE","lineNumber":358,"oldContent":"        ),"},{"type":"DELETE","lineNumber":359,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":360,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":361,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":362,"oldContent":"            child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":363,"oldContent":"          ),"},{"type":"DELETE","lineNumber":364,"oldContent":"        ],"},{"type":"DELETE","lineNumber":365,"oldContent":"      ),"},{"type":"DELETE","lineNumber":366,"oldContent":"    );"},{"type":"DELETE","lineNumber":367,"oldContent":"  }"}]},{"timestamp":1754379465331,"changes":[{"type":"MODIFY","lineNumber":4,"content":"class HomeScreen extends ConsumerWidget {","oldContent":"class HomeScreen extends ConsumerWidget {"},{"type":"DELETE","lineNumber":6,"oldContent":"      body: Padding("},{"type":"INSERT","lineNumber":8,"content":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":9,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":10,"content":"      appBar: AppBar("},{"type":"INSERT","lineNumber":11,"content":"        title: const Text('HabitV8'),"},{"type":"INSERT","lineNumber":12,"content":"      ),"},{"type":"INSERT","lineNumber":13,"content":"      body: Padding("},{"type":"INSERT","lineNumber":14,"content":"        padding: const EdgeInsets.all(16.0),"},{"type":"INSERT","lineNumber":15,"content":"        child: Column("},{"type":"INSERT","lineNumber":17,"content":"          children: ["},{"type":"INSERT","lineNumber":22,"content":"            ),"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":34,"content":"            ),"},{"type":"INSERT","lineNumber":35,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":44,"content":"            ),"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":47,"content":""},{"type":"INSERT","lineNumber":50,"content":"              child: Padding("},{"type":"INSERT","lineNumber":52,"content":"                child: Column("},{"type":"INSERT","lineNumber":53,"content":"                  children: ["},{"type":"INSERT","lineNumber":59,"content":"                    ),"},{"type":"DELETE","lineNumber":43,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"DELETE","lineNumber":44,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":45,"oldContent":"      appBar: AppBar("},{"type":"DELETE","lineNumber":46,"oldContent":"        title: const Text('HabitV8'),"},{"type":"DELETE","lineNumber":47,"oldContent":"      ),"},{"type":"DELETE","lineNumber":48,"oldContent":"        padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":49,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":50,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":51,"oldContent":"            ),"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":53,"oldContent":"            ),"},{"type":"DELETE","lineNumber":54,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":55,"oldContent":"            ),"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"              child: Padding("},{"type":"DELETE","lineNumber":59,"oldContent":"                child: Column("},{"type":"DELETE","lineNumber":60,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":61,"oldContent":"                    ),"}]},{"timestamp":1754444302792,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":"class HomeScreen extends ConsumerWidget {"},{"type":"MODIFY","lineNumber":8,"content":"  Widget build(BuildContext context, WidgetRef ref) {","oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"DELETE","lineNumber":10,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.stretch,"},{"type":"DELETE","lineNumber":12,"oldContent":"            const Text("},{"type":"DELETE","lineNumber":14,"oldContent":"              'Habit Tracker',"},{"type":"DELETE","lineNumber":16,"oldContent":"              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),"},{"type":"DELETE","lineNumber":18,"oldContent":"              textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":20,"oldContent":"            const SizedBox(height: 32),"},{"type":"INSERT","lineNumber":16,"content":"          crossAxisAlignment: CrossAxisAlignment.stretch,"},{"type":"INSERT","lineNumber":17,"content":"          children: ["},{"type":"INSERT","lineNumber":18,"content":"            const Text("},{"type":"INSERT","lineNumber":19,"content":"              'Habit Tracker',"},{"type":"INSERT","lineNumber":20,"content":"              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),"},{"type":"INSERT","lineNumber":21,"content":"              textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":22,"content":"            ),"},{"type":"INSERT","lineNumber":23,"content":"            const SizedBox(height: 32),"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"DELETE","lineNumber":24,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":27,"oldContent":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":28,"oldContent":"                  const SnackBar(content: Text('Test notification sent!')),"},{"type":"DELETE","lineNumber":29,"oldContent":"                );"},{"type":"DELETE","lineNumber":30,"oldContent":"            ),"},{"type":"INSERT","lineNumber":29,"content":"                if (mounted) {"},{"type":"INSERT","lineNumber":30,"content":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":31,"content":"                    const SnackBar(content: Text('Test notification sent!')),"},{"type":"INSERT","lineNumber":32,"content":"                  );"},{"type":"INSERT","lineNumber":33,"content":"                }"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"INSERT","lineNumber":36,"content":"            ),"},{"type":"INSERT","lineNumber":37,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":37,"oldContent":"                ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":38,"oldContent":"                  const SnackBar(content: Text('Scheduled notification in 10s!')),"},{"type":"DELETE","lineNumber":39,"oldContent":"                );"},{"type":"INSERT","lineNumber":41,"content":"                if (mounted) {"},{"type":"INSERT","lineNumber":42,"content":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":43,"content":"                    const SnackBar(content: Text('Scheduled notification in 10s!')),"},{"type":"INSERT","lineNumber":44,"content":"                  );"},{"type":"INSERT","lineNumber":45,"content":"                }"},{"type":"INSERT","lineNumber":48,"content":"            ),"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":51,"content":""},{"type":"DELETE","lineNumber":44,"oldContent":"            ),"},{"type":"DELETE","lineNumber":46,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":54,"content":"              child: Padding("},{"type":"INSERT","lineNumber":56,"content":"                child: Column("},{"type":"INSERT","lineNumber":57,"content":"                  children: ["},{"type":"INSERT","lineNumber":63,"content":"                    ),"},{"type":"DELETE","lineNumber":55,"oldContent":"            ),"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"              child: Padding("},{"type":"DELETE","lineNumber":59,"oldContent":"                child: Column("},{"type":"DELETE","lineNumber":60,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":61,"oldContent":"                    ),"}]},{"timestamp":1754444539264,"changes":[{"type":"MODIFY","lineNumber":4,"content":"class HomeScreen extends ConsumerStatefulWidget {","oldContent":"class HomeScreen extends ConsumerWidget {"},{"type":"DELETE","lineNumber":7,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"DELETE","lineNumber":8,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":7,"content":"  @override"},{"type":"INSERT","lineNumber":8,"content":"  ConsumerState<HomeScreen> createState() => _HomeScreenState();"},{"type":"INSERT","lineNumber":9,"content":"}"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":11,"content":"class _HomeScreenState extends ConsumerState<HomeScreen> {"},{"type":"INSERT","lineNumber":12,"content":"  @override"},{"type":"INSERT","lineNumber":13,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":18,"content":"      body: Padding("},{"type":"INSERT","lineNumber":19,"content":"        padding: const EdgeInsets.all(16.0),"},{"type":"INSERT","lineNumber":20,"content":"        child: Column("},{"type":"DELETE","lineNumber":15,"oldContent":"      body: Padding("},{"type":"DELETE","lineNumber":18,"oldContent":"        padding: const EdgeInsets.all(16.0),"},{"type":"DELETE","lineNumber":21,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":23,"oldContent":"            // Quick notification test (keeping the working functionality)"},{"type":"DELETE","lineNumber":25,"oldContent":"            ElevatedButton("},{"type":"INSERT","lineNumber":30,"content":"            // Quick notification test (keeping the working functionality)"},{"type":"INSERT","lineNumber":31,"content":"            ElevatedButton("},{"type":"DELETE","lineNumber":32,"oldContent":"              },"},{"type":"DELETE","lineNumber":34,"oldContent":"              child: const Text('Test Notification'),"},{"type":"INSERT","lineNumber":39,"content":"              },"},{"type":"INSERT","lineNumber":40,"content":"              child: const Text('Test Notification'),"},{"type":"INSERT","lineNumber":41,"content":"            ),"},{"type":"INSERT","lineNumber":42,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":38,"oldContent":"            ),"},{"type":"DELETE","lineNumber":40,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":41,"oldContent":"              },"},{"type":"DELETE","lineNumber":43,"oldContent":"              child: const Text('Test Scheduled Notification'),"},{"type":"DELETE","lineNumber":45,"oldContent":"            const SizedBox(height: 32),"},{"type":"DELETE","lineNumber":47,"oldContent":"            // Placeholder for your habit features"},{"type":"INSERT","lineNumber":51,"content":"              },"},{"type":"INSERT","lineNumber":52,"content":"              child: const Text('Test Scheduled Notification'),"},{"type":"INSERT","lineNumber":53,"content":"            ),"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"            const SizedBox(height: 32),"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"            // Placeholder for your habit features"},{"type":"INSERT","lineNumber":59,"content":"              child: Padding("},{"type":"DELETE","lineNumber":52,"oldContent":"            ),"},{"type":"INSERT","lineNumber":61,"content":"                child: Column("},{"type":"INSERT","lineNumber":62,"content":"                  children: ["},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":68,"content":"                    ),"},{"type":"DELETE","lineNumber":61,"oldContent":"              child: Padding("},{"type":"DELETE","lineNumber":63,"oldContent":"                child: Column("},{"type":"DELETE","lineNumber":64,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":66,"oldContent":"                    ),"}]}]},"H:/New/HabitV8/lib/ui/screens/settings_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/settings_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:permission_handler/permission_handler.dart';\nimport '../../services/permission_service.dart';\nimport '../../services/notification_service.dart';\n\nclass SettingsScreen extends ConsumerStatefulWidget {\n  const SettingsScreen({super.key});\n\n  @override\n  ConsumerState<SettingsScreen> createState() => _SettingsScreenState();\n}\n\nclass _SettingsScreenState extends ConsumerState<SettingsScreen> {\n  ThemeMode _themeMode = ThemeMode.system;\n  bool _notificationsEnabled = false;\n  bool _calendarSync = false;\n  bool _healthDataSync = false;\n  Color _primaryColor = Colors.blue;\n  bool _isLoading = true;\n\n  final List<Color> _colorOptions = [\n    Colors.blue,\n    Colors.green,\n    Colors.orange,\n    Colors.purple,\n    Colors.red,\n    Colors.teal,\n    Colors.indigo,\n    Colors.pink,\n    Colors.amber,\n    Colors.cyan,\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    _loadPermissionStatus();\n  }\n\n  /// Load current permission status when screen initializes\n  Future<void> _loadPermissionStatus() async {\n    try {\n      final permissionService = PermissionService();\n\n      final notificationStatus = await permissionService.isNotificationPermissionGranted();\n      final calendarStatus = await permissionService.isCalendarPermissionGranted();\n      final healthStatus = await permissionService.isHealthPermissionGranted();\n\n      setState(() {\n        _notificationsEnabled = notificationStatus;\n        _calendarSync = calendarStatus;\n        _healthDataSync = healthStatus;\n        _isLoading = false;\n      });\n    } catch (e) {\n      print('Error loading permission status: $e');\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return Scaffold(\n        appBar: AppBar(\n          title: const Text('Settings'),\n        ),\n        body: const Center(\n          child: CircularProgressIndicator(),\n        ),\n      );\n    }\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Settings'),\n      ),\n      body: ListView(\n        padding: const EdgeInsets.all(16),\n        children: [\n          _SettingsSection(\n            title: 'Appearance',\n            children: [\n              _SettingsTile(\n                title: 'Theme',\n                subtitle: _getThemeModeText(_themeMode),\n                leading: const Icon(Icons.palette),\n                onTap: () => _showThemeDialog(),\n              ),\n              _SettingsTile(\n                title: 'Primary Color',\n                subtitle: 'Customize your app\\'s accent color',\n                leading: CircleAvatar(\n                  radius: 12,\n                  backgroundColor: _primaryColor,\n                ),\n                onTap: () => _showColorPicker(),\n              ),\n            ],\n          ),\n          const SizedBox(height: 24),\n          _SettingsSection(\n            title: 'Notifications',\n            children: [\n              SwitchListTile(\n                title: const Text('Enable Notifications'),\n                subtitle: const Text('Get reminders for your habits'),\n                value: _notificationsEnabled,\n                onChanged: (value) => _toggleNotifications(value),\n                secondary: const Icon(Icons.notifications),\n              ),\n              if (_notificationsEnabled)\n                _SettingsTile(\n                  title: 'Test Notifications',\n                  subtitle: 'Send a test notification to verify it\\'s working',\n                  leading: const Icon(Icons.notification_add),\n                  onTap: () => _testNotifications(),\n                ),\n            ],\n          ),\n          const SizedBox(height: 24),\n          _SettingsSection(\n            title: 'Integrations',\n            children: [\n              SwitchListTile(\n                title: const Text('Calendar Sync'),\n                subtitle: const Text('Sync habits with your calendar'),\n                value: _calendarSync,\n                onChanged: (value) => _toggleCalendarSync(value),\n                secondary: const Icon(Icons.calendar_today),\n              ),\n              SwitchListTile(\n                title: const Text('Health Data'),\n                subtitle: const Text('Connect with health apps for insights'),\n                value: _healthDataSync,\n                onChanged: (value) => _toggleHealthDataSync(value),\n                secondary: const Icon(Icons.favorite),\n              ),\n            ],\n          ),\n          const SizedBox(height: 24),\n          _SettingsSection(\n            title: 'Data & Privacy',\n            children: [\n              _SettingsTile(\n                title: 'Export Data',\n                subtitle: 'Download your habit data',\n                leading: const Icon(Icons.download),\n                onTap: () => _exportData(),\n              ),\n              _SettingsTile(\n                title: 'Clear All Data',\n                subtitle: 'Reset the app and delete all habits',\n                leading: const Icon(Icons.delete_forever, color: Colors.red),\n                onTap: () => _showClearDataDialog(),\n                textColor: Colors.red,\n              ),\n            ],\n          ),\n          const SizedBox(height: 24),\n          _SettingsSection(\n            title: 'About',\n            children: [\n              _SettingsTile(\n                title: 'Version',\n                subtitle: '1.0.0',\n                leading: const Icon(Icons.info),\n                onTap: () => _showAboutDialog(),\n              ),\n              _SettingsTile(\n                title: 'Privacy Policy',\n                subtitle: 'View our privacy policy',\n                leading: const Icon(Icons.privacy_tip),\n                onTap: () => _showPrivacyPolicy(),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  String _getThemeModeText(ThemeMode mode) {\n    switch (mode) {\n      case ThemeMode.light:\n        return 'Light';\n      case ThemeMode.dark:\n        return 'Dark';\n      case ThemeMode.system:\n        return 'System';\n    }\n  }\n\n  void _showThemeDialog() {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Choose Theme'),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            RadioListTile<ThemeMode>(\n              title: const Text('Light'),\n              value: ThemeMode.light,\n              groupValue: _themeMode,\n              onChanged: (value) {\n                setState(() => _themeMode = value!);\n                Navigator.of(context).pop();\n              },\n            ),\n            RadioListTile<ThemeMode>(\n              title: const Text('Dark'),\n              value: ThemeMode.dark,\n              groupValue: _themeMode,\n              onChanged: (value) {\n                setState(() => _themeMode = value!);\n                Navigator.of(context).pop();\n              },\n            ),\n            RadioListTile<ThemeMode>(\n              title: const Text('System'),\n              value: ThemeMode.system,\n              groupValue: _themeMode,\n              onChanged: (value) {\n                setState(() => _themeMode = value!);\n                Navigator.of(context).pop();\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  void _showColorPicker() {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Choose Primary Color'),\n        content: Wrap(\n          spacing: 16,\n          runSpacing: 16,\n          children: _colorOptions.map((color) {\n            return GestureDetector(\n              onTap: () {\n                setState(() => _primaryColor = color);\n                Navigator.of(context).pop();\n              },\n              child: Container(\n                width: 40,\n                height: 40,\n                decoration: BoxDecoration(\n                  color: color,\n                  shape: BoxShape.circle,\n                  border: _primaryColor == color\n                      ? Border.all(color: Colors.black, width: 3)\n                      : null,\n                ),\n                child: _primaryColor == color\n                    ? const Icon(Icons.check, color: Colors.white)\n                    : null,\n              ),\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _toggleNotifications(bool value) async {\n    final permissionService = PermissionService();\n\n    if (value) {\n      final granted = await permissionService.requestPermission(Permission.notification);\n      if (granted) {\n        setState(() => _notificationsEnabled = true);\n        _showSnackBar('Notifications enabled successfully! 🔔');\n      } else {\n        setState(() => _notificationsEnabled = false);\n        _showSnackBar('Permission denied. Please enable in device settings.');\n      }\n    } else {\n      setState(() => _notificationsEnabled = false);\n      _showSnackBar('Notifications disabled');\n    }\n  }\n\n  Future<void> _toggleCalendarSync(bool value) async {\n    final permissionService = PermissionService();\n\n    if (value) {\n      final granted = await permissionService.requestPermission(Permission.calendar);\n      if (granted) {\n        setState(() => _calendarSync = true);\n        _showSnackBar('Calendar sync enabled successfully! 📅');\n      } else {\n        setState(() => _calendarSync = false);\n        _showSnackBar('Calendar permission denied. Please enable in device settings.');\n      }\n    } else {\n      setState(() => _calendarSync = false);\n      _showSnackBar('Calendar sync disabled');\n    }\n  }\n\n  Future<void> _toggleHealthDataSync(bool value) async {\n    final permissionService = PermissionService();\n\n    if (value) {\n      try {\n        final granted = await permissionService.isHealthPermissionGranted();\n        if (!granted) {\n          // Request health permissions through the permission service\n          await permissionService.requestAllPermissions();\n        }\n\n        // Check again after request\n        final finalStatus = await permissionService.isHealthPermissionGranted();\n        setState(() => _healthDataSync = finalStatus);\n\n        if (finalStatus) {\n          _showSnackBar('Health data sync enabled successfully! ❤️');\n        } else {\n          _showSnackBar('Health permission denied. Please enable in device settings.');\n        }\n      } catch (e) {\n        setState(() => _healthDataSync = false);\n        _showSnackBar('Error requesting health permission: $e');\n      }\n    } else {\n      setState(() => _healthDataSync = false);\n      _showSnackBar('Health data sync disabled');\n    }\n  }\n\n  Future<void> _testNotifications() async {\n    try {\n      final notificationService = NotificationService();\n\n      // Send a regular test notification\n      await notificationService.showTestNotification();\n\n      // Also show a demo achievement notification\n      await Future.delayed(const Duration(seconds: 2));\n      await notificationService.showAchievementNotification(\n        id: 1000,\n        achievementTitle: 'Settings Master!',\n        description: 'You successfully tested the notification system! Your Android 16 live notifications are working perfectly.',\n        badgeIcon: '@mipmap/ic_launcher',\n        payload: 'settings_test',\n      );\n\n      _showSnackBar('Test notifications sent! Check your notification panel 🚀');\n    } catch (e) {\n      _showSnackBar('Error sending test notification: $e');\n    }\n  }\n\n  void _exportData() {\n    // TODO: Implement data export functionality\n    _showSnackBar('Data export feature coming soon!');\n  }\n\n  void _showClearDataDialog() {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Clear All Data'),\n        content: const Text(\n          'This will permanently delete all your habits and progress. This action cannot be undone.',\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(),\n            child: const Text('Cancel'),\n          ),\n          TextButton(\n            onPressed: () {\n              Navigator.of(context).pop();\n              _clearAllData();\n            },\n            style: TextButton.styleFrom(foregroundColor: Colors.red),\n            child: const Text('Delete All'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  void _clearAllData() {\n    // TODO: Implement data clearing functionality\n    _showSnackBar('All data cleared');\n  }\n\n  void _showAboutDialog() {\n    showAboutDialog(\n      context: context,\n      applicationName: 'Habit Tracker',\n      applicationVersion: '1.0.0',\n      applicationIcon: const Icon(Icons.track_changes, size: 48),\n      children: [\n        const Text('A beautiful and intuitive habit tracking application built with Flutter.'),\n        const SizedBox(height: 16),\n        const Text('Features:'),\n        const Text('• Visual habit tracking'),\n        const Text('• Detailed analytics'),\n        const Text('• Custom scheduling'),\n        const Text('• Progress insights'),\n      ],\n    );\n  }\n\n  void _showPrivacyPolicy() {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Privacy Policy'),\n        content: const SingleChildScrollView(\n          child: Text(\n            'Your privacy is important to us. This app stores all data locally on your device. '\n            'No personal information is collected or shared with third parties. '\n            'Optional integrations (calendar, health data) require explicit permission and can be disabled at any time.',\n          ),\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(),\n            child: const Text('Close'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  void _showSnackBar(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(content: Text(message)),\n    );\n  }\n}\n\nclass _SettingsSection extends StatelessWidget {\n  final String title;\n  final List<Widget> children;\n\n  const _SettingsSection({\n    required this.title,\n    required this.children,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Padding(\n          padding: const EdgeInsets.only(left: 16, bottom: 8),\n          child: Text(\n            title,\n            style: Theme.of(context).textTheme.titleSmall?.copyWith(\n              color: Theme.of(context).colorScheme.primary,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n        ),\n        Card(\n          child: Column(children: children),\n        ),\n      ],\n    );\n  }\n}\n\nclass _SettingsTile extends StatelessWidget {\n  final String title;\n  final String? subtitle;\n  final Widget? leading;\n  final VoidCallback? onTap;\n  final Color? textColor;\n\n  const _SettingsTile({\n    required this.title,\n    this.subtitle,\n    this.leading,\n    this.onTap,\n    this.textColor,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      leading: leading,\n      title: Text(\n        title,\n        style: TextStyle(color: textColor),\n      ),\n      subtitle: subtitle != null ? Text(subtitle!) : null,\n      trailing: const Icon(Icons.chevron_right),\n      onTap: onTap,\n    );\n  }\n}\n","baseTimestamp":1754379049726,"deltas":[{"timestamp":1754379097641,"changes":[{"type":"DELETE","lineNumber":309,"oldContent":"    final permissionService = PermissionService();"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":313,"oldContent":"        final granted = await permissionService.isHealthPermissionGranted();"},{"type":"DELETE","lineNumber":314,"oldContent":"        if (!granted) {"},{"type":"DELETE","lineNumber":315,"oldContent":"          // Request health permissions through the permission service"},{"type":"DELETE","lineNumber":316,"oldContent":"          await permissionService.requestAllPermissions();"},{"type":"DELETE","lineNumber":317,"oldContent":"        }"},{"type":"DELETE","lineNumber":318,"oldContent":""},{"type":"INSERT","lineNumber":311,"content":"        // Request health permissions through the permission service"},{"type":"INSERT","lineNumber":312,"content":"        await PermissionService.requestAllPermissions();"},{"type":"INSERT","lineNumber":313,"content":"        "},{"type":"DELETE","lineNumber":320,"oldContent":"        final finalStatus = await permissionService.isHealthPermissionGranted();"},{"type":"INSERT","lineNumber":315,"content":"        final finalStatus = await PermissionService.isHealthPermissionGranted();"},{"type":"DELETE","lineNumber":340,"oldContent":"      final notificationService = NotificationService();"},{"type":"INSERT","lineNumber":335,"content":"      // Send a regular test notification using static method"},{"type":"INSERT","lineNumber":336,"content":"      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":342,"oldContent":"      // Send a regular test notification"},{"type":"DELETE","lineNumber":343,"oldContent":"      await notificationService.showTestNotification();"},{"type":"DELETE","lineNumber":344,"oldContent":""},{"type":"DELETE","lineNumber":345,"oldContent":"      // Also show a demo achievement notification"},{"type":"DELETE","lineNumber":346,"oldContent":"      await Future.delayed(const Duration(seconds: 2));"},{"type":"DELETE","lineNumber":347,"oldContent":"      await notificationService.showAchievementNotification("},{"type":"INSERT","lineNumber":338,"content":"      // Also show a simple scheduled notification test"},{"type":"INSERT","lineNumber":339,"content":"      await Future.delayed(const Duration(seconds: 1));"},{"type":"INSERT","lineNumber":340,"content":"      await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":349,"oldContent":"        achievementTitle: 'Settings Master!',"},{"type":"DELETE","lineNumber":350,"oldContent":"        description: 'You successfully tested the notification system! Your Android 16 live notifications are working perfectly.',"},{"type":"DELETE","lineNumber":351,"oldContent":"        badgeIcon: '@mipmap/ic_launcher',"},{"type":"INSERT","lineNumber":342,"content":"        title: '🎉 Settings Test Success!',"},{"type":"INSERT","lineNumber":343,"content":"        body: 'Your notification system is working perfectly with Android 16 live notifications!',"},{"type":"INSERT","lineNumber":344,"content":"        scheduledTime: DateTime.now().add(const Duration(seconds: 3)),"}]},{"timestamp":1754379116409,"changes":[{"type":"DELETE","lineNumber":309,"oldContent":"        // Request health permissions through the permission service"},{"type":"DELETE","lineNumber":311,"oldContent":"        await PermissionService.requestAllPermissions();"},{"type":"DELETE","lineNumber":313,"oldContent":"        "},{"type":"DELETE","lineNumber":314,"oldContent":"        final finalStatus = await PermissionService.isHealthPermissionGranted();"},{"type":"INSERT","lineNumber":311,"content":"        // Request health permissions through the permission service"},{"type":"INSERT","lineNumber":312,"content":"        await PermissionService.requestAllPermissions();"},{"type":"INSERT","lineNumber":313,"content":""},{"type":"INSERT","lineNumber":315,"content":"        final finalStatus = await PermissionService.isHealthPermissionGranted();"},{"type":"DELETE","lineNumber":330,"oldContent":"      // Send a regular test notification using static method"},{"type":"DELETE","lineNumber":332,"oldContent":"      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":335,"oldContent":"      // Also show a simple scheduled notification test"},{"type":"DELETE","lineNumber":337,"oldContent":"      await Future.delayed(const Duration(seconds: 1));"},{"type":"DELETE","lineNumber":339,"oldContent":"      await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":335,"content":"      // Send a regular test notification using static method"},{"type":"INSERT","lineNumber":336,"content":"      await NotificationService.showTestNotification();"},{"type":"INSERT","lineNumber":338,"content":"      // Also show a simple scheduled notification test"},{"type":"INSERT","lineNumber":339,"content":"      await Future.delayed(const Duration(seconds: 1));"},{"type":"INSERT","lineNumber":340,"content":"      await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":341,"content":"        id: 1000,"},{"type":"DELETE","lineNumber":344,"oldContent":"        id: 1000,"}]},{"timestamp":1754379150554,"changes":[{"type":"DELETE","lineNumber":310,"oldContent":"        // Request health permissions through the permission service"},{"type":"MODIFY","lineNumber":311,"content":"        // Request health permissions through the permission service","oldContent":"        await PermissionService.requestAllPermissions();"},{"type":"INSERT","lineNumber":312,"content":"        final success = await PermissionService.requestAllPermissions();"},{"type":"INSERT","lineNumber":313,"content":"        "},{"type":"INSERT","lineNumber":314,"content":"        setState(() => _healthDataSync = success);"},{"type":"DELETE","lineNumber":314,"oldContent":"        final finalStatus = await PermissionService.isHealthPermissionGranted();"},{"type":"DELETE","lineNumber":315,"oldContent":"        // Check again after request"},{"type":"DELETE","lineNumber":316,"oldContent":"        setState(() => _healthDataSync = finalStatus);"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"        if (finalStatus) {"},{"type":"INSERT","lineNumber":316,"content":"        if (success) {"},{"type":"INSERT","lineNumber":331,"content":"  Future<void> _testNotifications() async {"},{"type":"INSERT","lineNumber":332,"content":"    try {"},{"type":"MODIFY","lineNumber":335,"content":"","oldContent":"  Future<void> _testNotifications() async {"},{"type":"DELETE","lineNumber":337,"oldContent":"    try {"},{"type":"DELETE","lineNumber":340,"oldContent":""}]},{"timestamp":1754379158659,"changes":[{"type":"INSERT","lineNumber":310,"content":"      try {"},{"type":"DELETE","lineNumber":312,"oldContent":"      try {"},{"type":"DELETE","lineNumber":313,"oldContent":"        "},{"type":"INSERT","lineNumber":315,"content":""},{"type":"DELETE","lineNumber":329,"oldContent":"  Future<void> _testNotifications() async {"},{"type":"MODIFY","lineNumber":331,"content":"  Future<void> _testNotifications() async {","oldContent":"    try {"},{"type":"INSERT","lineNumber":332,"content":"    try {"}]},{"timestamp":1754379465393,"changes":[{"type":"DELETE","lineNumber":313,"oldContent":""},{"type":"MODIFY","lineNumber":313,"content":"        ","oldContent":""},{"type":"INSERT","lineNumber":315,"content":""},{"type":"INSERT","lineNumber":330,"content":""},{"type":"DELETE","lineNumber":332,"oldContent":""}]},{"timestamp":1754379527001,"changes":[{"type":"DELETE","lineNumber":313,"oldContent":"        "},{"type":"INSERT","lineNumber":315,"content":""}]},{"timestamp":1754381638314,"changes":[{"type":"INSERT","lineNumber":5,"content":"import '../../services/theme_service.dart';"},{"type":"DELETE","lineNumber":14,"oldContent":"  ThemeMode _themeMode = ThemeMode.system;"},{"type":"DELETE","lineNumber":18,"oldContent":"  Color _primaryColor = Colors.blue;"},{"type":"INSERT","lineNumber":64,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":65,"content":"    "},{"type":"MODIFY","lineNumber":89,"content":"                subtitle: _getThemeModeText(themeState.themeMode),","oldContent":"                subtitle: _getThemeModeText(_themeMode),"},{"type":"MODIFY","lineNumber":98,"content":"                  backgroundColor: themeState.primaryColor,","oldContent":"                  backgroundColor: _primaryColor,"},{"type":"INSERT","lineNumber":198,"content":"    final themeState = ref.read(themeProvider);"},{"type":"INSERT","lineNumber":199,"content":"    "},{"type":"DELETE","lineNumber":207,"oldContent":"              groupValue: _themeMode,"},{"type":"INSERT","lineNumber":210,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":209,"oldContent":"                setState(() => _themeMode = value!);"},{"type":"INSERT","lineNumber":212,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"DELETE","lineNumber":216,"oldContent":"              groupValue: _themeMode,"},{"type":"INSERT","lineNumber":219,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":218,"oldContent":"                setState(() => _themeMode = value!);"},{"type":"INSERT","lineNumber":221,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"DELETE","lineNumber":225,"oldContent":"              groupValue: _themeMode,"},{"type":"INSERT","lineNumber":228,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":227,"oldContent":"                setState(() => _themeMode = value!);"},{"type":"INSERT","lineNumber":230,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"INSERT","lineNumber":241,"content":"    final themeState = ref.read(themeProvider);"},{"type":"INSERT","lineNumber":242,"content":"    "},{"type":"DELETE","lineNumber":248,"oldContent":"                setState(() => _primaryColor = color);"},{"type":"INSERT","lineNumber":253,"content":"                ref.read(themeProvider.notifier).setPrimaryColor(color);"},{"type":"DELETE","lineNumber":257,"oldContent":"                  border: _primaryColor == color"},{"type":"DELETE","lineNumber":258,"oldContent":"                      ? Border.all(color: Colors.black, width: 3)"},{"type":"INSERT","lineNumber":262,"content":"                  border: themeState.primaryColor == color"},{"type":"INSERT","lineNumber":263,"content":"                      ? Border.all("},{"type":"INSERT","lineNumber":264,"content":"                          color: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":265,"content":"                          width: 3,"},{"type":"INSERT","lineNumber":266,"content":"                        )"},{"type":"DELETE","lineNumber":261,"oldContent":"                child: _primaryColor == color"},{"type":"DELETE","lineNumber":262,"oldContent":"                    ? const Icon(Icons.check, color: Colors.white)"},{"type":"INSERT","lineNumber":269,"content":"                child: themeState.primaryColor == color"},{"type":"INSERT","lineNumber":270,"content":"                    ? Icon("},{"type":"INSERT","lineNumber":271,"content":"                        Icons.check,"},{"type":"INSERT","lineNumber":272,"content":"                        color: Colors.white,"},{"type":"INSERT","lineNumber":273,"content":"                        size: 20,"},{"type":"INSERT","lineNumber":274,"content":"                      )"},{"type":"DELETE","lineNumber":314,"oldContent":""},{"type":"INSERT","lineNumber":327,"content":""}]},{"timestamp":1754381653260,"changes":[{"type":"DELETE","lineNumber":63,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":65,"oldContent":"    "},{"type":"INSERT","lineNumber":64,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"DELETE","lineNumber":89,"oldContent":"                subtitle: _getThemeModeText(_themeMode),"},{"type":"INSERT","lineNumber":90,"content":"                leading: const Icon(Icons.palette),"},{"type":"DELETE","lineNumber":98,"oldContent":"                  backgroundColor: _primaryColor,"},{"type":"INSERT","lineNumber":99,"content":"                ),"},{"type":"DELETE","lineNumber":198,"oldContent":"    showDialog("},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"    showDialog("},{"type":"DELETE","lineNumber":201,"oldContent":"    "},{"type":"MODIFY","lineNumber":211,"content":"              onChanged: (value) {","oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":212,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"DELETE","lineNumber":214,"oldContent":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"MODIFY","lineNumber":220,"content":"              onChanged: (value) {","oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":221,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"DELETE","lineNumber":223,"oldContent":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"MODIFY","lineNumber":229,"content":"              onChanged: (value) {","oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":230,"content":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"DELETE","lineNumber":232,"oldContent":"                ref.read(themeProvider.notifier).setThemeMode(value!);"},{"type":"INSERT","lineNumber":241,"content":"    final themeState = ref.read(themeProvider);"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"DELETE","lineNumber":244,"oldContent":"    final themeState = ref.read(themeProvider);"},{"type":"DELETE","lineNumber":246,"oldContent":"    "},{"type":"INSERT","lineNumber":253,"content":"                ref.read(themeProvider.notifier).setPrimaryColor(color);"},{"type":"DELETE","lineNumber":257,"oldContent":"                ref.read(themeProvider.notifier).setPrimaryColor(color);"},{"type":"DELETE","lineNumber":262,"oldContent":"                      : null,"},{"type":"DELETE","lineNumber":263,"oldContent":"                ),"},{"type":"DELETE","lineNumber":266,"oldContent":"                    : null,"},{"type":"DELETE","lineNumber":268,"oldContent":"              ),"},{"type":"DELETE","lineNumber":270,"oldContent":"            );"},{"type":"INSERT","lineNumber":267,"content":"                      : null,"},{"type":"INSERT","lineNumber":268,"content":"                ),"},{"type":"INSERT","lineNumber":269,"content":"                child: themeState.primaryColor == color"},{"type":"INSERT","lineNumber":270,"content":"                    ? Icon("},{"type":"INSERT","lineNumber":271,"content":"                        Icons.check,"},{"type":"INSERT","lineNumber":272,"content":"                        color: Colors.white,"},{"type":"INSERT","lineNumber":273,"content":"                        size: 20,"},{"type":"INSERT","lineNumber":274,"content":"                      )"},{"type":"INSERT","lineNumber":275,"content":"                    : null,"},{"type":"INSERT","lineNumber":276,"content":"              ),"},{"type":"INSERT","lineNumber":277,"content":"            );"},{"type":"DELETE","lineNumber":275,"oldContent":"                child: themeState.primaryColor == color"},{"type":"DELETE","lineNumber":277,"oldContent":"                    ? Icon("},{"type":"DELETE","lineNumber":279,"oldContent":"                        Icons.check,"},{"type":"DELETE","lineNumber":281,"oldContent":"                        color: Colors.white,"},{"type":"DELETE","lineNumber":283,"oldContent":"                        size: 20,"},{"type":"DELETE","lineNumber":285,"oldContent":"                      )"},{"type":"INSERT","lineNumber":327,"content":""},{"type":"DELETE","lineNumber":338,"oldContent":""}]},{"timestamp":1754438717510,"changes":[{"type":"INSERT","lineNumber":3,"content":"import 'package:shared_preferences/shared_preferences.dart';"},{"type":"INSERT","lineNumber":7,"content":"import '../../services/health_service.dart';"},{"type":"INSERT","lineNumber":8,"content":"import '../../services/calendar_service.dart';"},{"type":"INSERT","lineNumber":9,"content":"import '../../services/logging_service.dart';"},{"type":"INSERT","lineNumber":23,"content":"  String _defaultScreen = 'Timeline'; // Default startup screen"},{"type":"INSERT","lineNumber":25,"content":"  final List<String> _availableScreens = ["},{"type":"INSERT","lineNumber":26,"content":"    'Timeline',"},{"type":"INSERT","lineNumber":27,"content":"    'All Habits',"},{"type":"INSERT","lineNumber":28,"content":"    'Stats',"},{"type":"INSERT","lineNumber":29,"content":"    'Insights',"},{"type":"INSERT","lineNumber":30,"content":"  ];"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":49,"content":"    _loadDefaultScreen();"},{"type":"INSERT","lineNumber":75,"content":"  /// Load default screen preference"},{"type":"INSERT","lineNumber":76,"content":"  Future<void> _loadDefaultScreen() async {"},{"type":"INSERT","lineNumber":77,"content":"    try {"},{"type":"INSERT","lineNumber":78,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":79,"content":"      setState(() {"},{"type":"INSERT","lineNumber":80,"content":"        _defaultScreen = prefs.getString('default_screen') ?? 'Timeline';"},{"type":"INSERT","lineNumber":81,"content":"      });"},{"type":"INSERT","lineNumber":82,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":83,"content":"      AppLogger.error('Error loading default screen preference', e);"},{"type":"INSERT","lineNumber":84,"content":"    }"},{"type":"INSERT","lineNumber":85,"content":"  }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"  /// Save default screen preference"},{"type":"INSERT","lineNumber":88,"content":"  Future<void> _saveDefaultScreen(String screen) async {"},{"type":"INSERT","lineNumber":89,"content":"    try {"},{"type":"INSERT","lineNumber":90,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":91,"content":"      await prefs.setString('default_screen', screen);"},{"type":"INSERT","lineNumber":92,"content":"      setState(() {"},{"type":"INSERT","lineNumber":93,"content":"        _defaultScreen = screen;"},{"type":"INSERT","lineNumber":94,"content":"      });"},{"type":"INSERT","lineNumber":95,"content":"      AppLogger.info('Default screen set to: $screen');"},{"type":"INSERT","lineNumber":96,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":97,"content":"      AppLogger.error('Error saving default screen preference', e);"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":99,"content":"  }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"DELETE","lineNumber":63,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":103,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":124,"content":"            title: 'App Preferences',"},{"type":"INSERT","lineNumber":125,"content":"            children: ["},{"type":"INSERT","lineNumber":126,"content":"              _SettingsTile("},{"type":"INSERT","lineNumber":127,"content":"                title: 'Default Screen',"},{"type":"INSERT","lineNumber":128,"content":"                subtitle: 'Choose which screen opens when you start the app',"},{"type":"INSERT","lineNumber":129,"content":"                leading: const Icon(Icons.home),"},{"type":"INSERT","lineNumber":130,"content":"                trailing: DropdownButton<String>("},{"type":"INSERT","lineNumber":131,"content":"                  value: _defaultScreen,"},{"type":"INSERT","lineNumber":132,"content":"                  onChanged: (String? newValue) {"},{"type":"INSERT","lineNumber":133,"content":"                    if (newValue != null) {"},{"type":"INSERT","lineNumber":134,"content":"                      _saveDefaultScreen(newValue);"},{"type":"INSERT","lineNumber":135,"content":"                    }"},{"type":"INSERT","lineNumber":136,"content":"                  },"},{"type":"INSERT","lineNumber":137,"content":"                  items: _availableScreens.map<DropdownMenuItem<String>>((String value) {"},{"type":"INSERT","lineNumber":138,"content":"                    return DropdownMenuItem<String>("},{"type":"INSERT","lineNumber":139,"content":"                      value: value,"},{"type":"INSERT","lineNumber":140,"content":"                      child: Text(value),"},{"type":"INSERT","lineNumber":141,"content":"                    );"},{"type":"INSERT","lineNumber":142,"content":"                  }).toList(),"},{"type":"INSERT","lineNumber":143,"content":"                ),"},{"type":"INSERT","lineNumber":144,"content":"              ),"},{"type":"INSERT","lineNumber":145,"content":"            ],"},{"type":"INSERT","lineNumber":146,"content":"          ),"},{"type":"INSERT","lineNumber":147,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":148,"content":"          _SettingsSection("},{"type":"DELETE","lineNumber":89,"oldContent":"                leading: const Icon(Icons.palette),"},{"type":"INSERT","lineNumber":154,"content":"                leading: const Icon(Icons.palette),"},{"type":"DELETE","lineNumber":98,"oldContent":"                ),"},{"type":"INSERT","lineNumber":163,"content":"                ),"},{"type":"INSERT","lineNumber":206,"content":"              if (_healthDataSync)"},{"type":"INSERT","lineNumber":207,"content":"                _SettingsTile("},{"type":"INSERT","lineNumber":208,"content":"                  title: 'Health Permissions',"},{"type":"INSERT","lineNumber":209,"content":"                  subtitle: 'Manage health data access',"},{"type":"INSERT","lineNumber":210,"content":"                  leading: const Icon(Icons.health_and_safety),"},{"type":"INSERT","lineNumber":211,"content":"                  onTap: () => _manageHealthPermissions(),"},{"type":"INSERT","lineNumber":212,"content":"                ),"},{"type":"DELETE","lineNumber":198,"oldContent":""},{"type":"INSERT","lineNumber":270,"content":""},{"type":"INSERT","lineNumber":281,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":211,"oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":290,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":220,"oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":299,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":229,"oldContent":"              onChanged: (value) {"},{"type":"DELETE","lineNumber":242,"oldContent":"    showDialog("},{"type":"INSERT","lineNumber":314,"content":"    showDialog("},{"type":"DELETE","lineNumber":264,"oldContent":"                      : null,"},{"type":"INSERT","lineNumber":336,"content":"                          width: 3,"},{"type":"INSERT","lineNumber":337,"content":"                        )"},{"type":"INSERT","lineNumber":338,"content":"                      : null,"},{"type":"DELETE","lineNumber":268,"oldContent":"                          width: 3,"},{"type":"DELETE","lineNumber":271,"oldContent":"                        )"},{"type":"DELETE","lineNumber":273,"oldContent":"          }).toList(),"},{"type":"DELETE","lineNumber":275,"oldContent":"        ),"},{"type":"DELETE","lineNumber":277,"oldContent":"      ),"},{"type":"DELETE","lineNumber":280,"oldContent":"    );"},{"type":"INSERT","lineNumber":349,"content":"          }).toList(),"},{"type":"INSERT","lineNumber":350,"content":"        ),"},{"type":"INSERT","lineNumber":351,"content":"      ),"},{"type":"INSERT","lineNumber":352,"content":"    );"},{"type":"INSERT","lineNumber":373,"content":"  /// Toggle calendar sync"},{"type":"DELETE","lineNumber":303,"oldContent":"    final permissionService = PermissionService();"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":306,"oldContent":"      final granted = await permissionService.requestPermission(Permission.calendar);"},{"type":"DELETE","lineNumber":307,"oldContent":"      if (granted) {"},{"type":"DELETE","lineNumber":308,"oldContent":"        setState(() => _calendarSync = true);"},{"type":"DELETE","lineNumber":309,"oldContent":"        _showSnackBar('Calendar sync enabled successfully! 📅');"},{"type":"DELETE","lineNumber":310,"oldContent":"      } else {"},{"type":"DELETE","lineNumber":311,"oldContent":"        setState(() => _calendarSync = false);"},{"type":"DELETE","lineNumber":312,"oldContent":"        _showSnackBar('Calendar permission denied. Please enable in device settings.');"},{"type":"INSERT","lineNumber":376,"content":"      // Request calendar permissions"},{"type":"INSERT","lineNumber":377,"content":"      final hasPermissions = await CalendarService.requestPermissions();"},{"type":"INSERT","lineNumber":378,"content":"      setState(() {"},{"type":"INSERT","lineNumber":379,"content":"        _calendarSync = hasPermissions;"},{"type":"INSERT","lineNumber":380,"content":"      });"},{"type":"INSERT","lineNumber":381,"content":"      "},{"type":"INSERT","lineNumber":382,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":383,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":384,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":385,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":386,"content":"              content: Text('Calendar permissions are required for this feature'),"},{"type":"INSERT","lineNumber":387,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":388,"content":"            ),"},{"type":"INSERT","lineNumber":389,"content":"          );"},{"type":"INSERT","lineNumber":390,"content":"        }"},{"type":"DELETE","lineNumber":315,"oldContent":"      setState(() => _calendarSync = false);"},{"type":"DELETE","lineNumber":316,"oldContent":"      _showSnackBar('Calendar sync disabled');"},{"type":"INSERT","lineNumber":393,"content":"      setState(() {"},{"type":"INSERT","lineNumber":394,"content":"        _calendarSync = false;"},{"type":"INSERT","lineNumber":395,"content":"      });"},{"type":"INSERT","lineNumber":399,"content":"  /// Toggle health data sync"},{"type":"DELETE","lineNumber":322,"oldContent":"      try {"},{"type":"DELETE","lineNumber":323,"oldContent":"        // Request health permissions through the permission service"},{"type":"DELETE","lineNumber":324,"oldContent":"        final success = await PermissionService.requestAllPermissions();"},{"type":"DELETE","lineNumber":325,"oldContent":""},{"type":"DELETE","lineNumber":326,"oldContent":"        setState(() => _healthDataSync = success);"},{"type":"DELETE","lineNumber":327,"oldContent":""},{"type":"DELETE","lineNumber":328,"oldContent":"        if (success) {"},{"type":"DELETE","lineNumber":329,"oldContent":"          _showSnackBar('Health data sync enabled successfully! ❤️');"},{"type":"DELETE","lineNumber":330,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":331,"oldContent":"          _showSnackBar('Health permission denied. Please enable in device settings.');"},{"type":"INSERT","lineNumber":402,"content":"      // Request health permissions"},{"type":"INSERT","lineNumber":403,"content":"      final hasPermissions = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":404,"content":"      setState(() {"},{"type":"INSERT","lineNumber":405,"content":"        _healthDataSync = hasPermissions;"},{"type":"INSERT","lineNumber":406,"content":"      });"},{"type":"INSERT","lineNumber":407,"content":"      "},{"type":"INSERT","lineNumber":408,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":409,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":410,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":411,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":412,"content":"              content: Text('Health permissions are required for this feature'),"},{"type":"INSERT","lineNumber":413,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":414,"content":"            ),"},{"type":"INSERT","lineNumber":415,"content":"          );"},{"type":"DELETE","lineNumber":333,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":334,"oldContent":"        setState(() => _healthDataSync = false);"},{"type":"DELETE","lineNumber":335,"oldContent":"        _showSnackBar('Error requesting health permission: $e');"},{"type":"DELETE","lineNumber":338,"oldContent":"      setState(() => _healthDataSync = false);"},{"type":"DELETE","lineNumber":339,"oldContent":"      _showSnackBar('Health data sync disabled');"},{"type":"INSERT","lineNumber":419,"content":"      setState(() {"},{"type":"INSERT","lineNumber":420,"content":"        _healthDataSync = false;"},{"type":"INSERT","lineNumber":421,"content":"      });"},{"type":"INSERT","lineNumber":522,"content":"  /// Manage health permissions"},{"type":"INSERT","lineNumber":523,"content":"  Future<void> _manageHealthPermissions() async {"},{"type":"INSERT","lineNumber":524,"content":"    showDialog("},{"type":"INSERT","lineNumber":525,"content":"      context: context,"},{"type":"INSERT","lineNumber":526,"content":"      builder: (BuildContext context) {"},{"type":"INSERT","lineNumber":527,"content":"        return AlertDialog("},{"type":"INSERT","lineNumber":528,"content":"          title: const Text('Health Data Integration'),"},{"type":"INSERT","lineNumber":529,"content":"          content: const Column("},{"type":"INSERT","lineNumber":530,"content":"            mainAxisSize: MainAxisSize.min,"},{"type":"INSERT","lineNumber":531,"content":"            crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":532,"content":"            children: ["},{"type":"INSERT","lineNumber":533,"content":"              Text('This app can integrate with your health data to provide better insights:'),"},{"type":"INSERT","lineNumber":534,"content":"              SizedBox(height: 16),"},{"type":"INSERT","lineNumber":535,"content":"              Text('• Step count tracking'),"},{"type":"INSERT","lineNumber":536,"content":"              Text('• Sleep pattern analysis'),"},{"type":"INSERT","lineNumber":537,"content":"              Text('• Exercise duration monitoring'),"},{"type":"INSERT","lineNumber":538,"content":"              Text('• Heart rate insights'),"},{"type":"INSERT","lineNumber":539,"content":"              SizedBox(height: 16),"},{"type":"INSERT","lineNumber":540,"content":"              Text('Your privacy is important - data stays on your device.'),"},{"type":"INSERT","lineNumber":541,"content":"            ],"},{"type":"INSERT","lineNumber":542,"content":"          ),"},{"type":"INSERT","lineNumber":543,"content":"          actions: ["},{"type":"INSERT","lineNumber":544,"content":"            TextButton("},{"type":"INSERT","lineNumber":545,"content":"              onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":546,"content":"              child: const Text('Cancel'),"},{"type":"INSERT","lineNumber":547,"content":"            ),"},{"type":"INSERT","lineNumber":548,"content":"            ElevatedButton("},{"type":"INSERT","lineNumber":549,"content":"              onPressed: () async {"},{"type":"INSERT","lineNumber":550,"content":"                Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":551,"content":"                final granted = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":552,"content":"                if (mounted) {"},{"type":"INSERT","lineNumber":553,"content":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":554,"content":"                    SnackBar("},{"type":"INSERT","lineNumber":555,"content":"                      content: Text(granted "},{"type":"INSERT","lineNumber":556,"content":"                        ? 'Health permissions granted!' "},{"type":"INSERT","lineNumber":557,"content":"                        : 'Health permissions denied'),"},{"type":"INSERT","lineNumber":558,"content":"                      backgroundColor: granted ? Colors.green : Colors.red,"},{"type":"INSERT","lineNumber":559,"content":"                    ),"},{"type":"INSERT","lineNumber":560,"content":"                  );"},{"type":"INSERT","lineNumber":561,"content":"                }"},{"type":"INSERT","lineNumber":562,"content":"              },"},{"type":"INSERT","lineNumber":563,"content":"              child: const Text('Grant Permissions'),"},{"type":"INSERT","lineNumber":564,"content":"            ),"},{"type":"INSERT","lineNumber":565,"content":"          ],"},{"type":"INSERT","lineNumber":566,"content":"        );"},{"type":"INSERT","lineNumber":567,"content":"      },"},{"type":"INSERT","lineNumber":568,"content":"    );"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"INSERT","lineNumber":570,"content":""}]},{"timestamp":1754438724733,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":""},{"type":"DELETE","lineNumber":9,"oldContent":"class SettingsScreen extends ConsumerStatefulWidget {"},{"type":"MODIFY","lineNumber":11,"content":"class SettingsScreen extends ConsumerStatefulWidget {","oldContent":"  const SettingsScreen({super.key});"},{"type":"INSERT","lineNumber":12,"content":"  const SettingsScreen({super.key});"},{"type":"INSERT","lineNumber":13,"content":""},{"type":"INSERT","lineNumber":23,"content":"  String _defaultScreen = 'Timeline'; // Default startup screen"},{"type":"INSERT","lineNumber":25,"content":"  final List<String> _availableScreens = ["},{"type":"INSERT","lineNumber":26,"content":"    'Timeline',"},{"type":"INSERT","lineNumber":27,"content":"    'All Habits',"},{"type":"INSERT","lineNumber":28,"content":"    'Stats',"},{"type":"INSERT","lineNumber":29,"content":"    'Insights',"},{"type":"INSERT","lineNumber":30,"content":"  ];"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"DELETE","lineNumber":27,"oldContent":"  String _defaultScreen = 'Timeline'; // Default startup screen"},{"type":"DELETE","lineNumber":30,"oldContent":"  final List<String> _availableScreens = ["},{"type":"DELETE","lineNumber":32,"oldContent":"    'Timeline',"},{"type":"DELETE","lineNumber":34,"oldContent":"    'All Habits',"},{"type":"DELETE","lineNumber":36,"oldContent":"    'Stats',"},{"type":"DELETE","lineNumber":38,"oldContent":"    'Insights',"},{"type":"DELETE","lineNumber":40,"oldContent":"  ];"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"INSERT","lineNumber":49,"content":"    _loadDefaultScreen();"},{"type":"DELETE","lineNumber":61,"oldContent":"    _loadDefaultScreen();"},{"type":"INSERT","lineNumber":75,"content":"  /// Load default screen preference"},{"type":"INSERT","lineNumber":76,"content":"  Future<void> _loadDefaultScreen() async {"},{"type":"INSERT","lineNumber":77,"content":"    try {"},{"type":"INSERT","lineNumber":78,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":79,"content":"      setState(() {"},{"type":"INSERT","lineNumber":80,"content":"        _defaultScreen = prefs.getString('default_screen') ?? 'Timeline';"},{"type":"INSERT","lineNumber":81,"content":"      });"},{"type":"INSERT","lineNumber":82,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":83,"content":"      AppLogger.error('Error loading default screen preference', e);"},{"type":"INSERT","lineNumber":84,"content":"    }"},{"type":"INSERT","lineNumber":85,"content":"  }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"  /// Save default screen preference"},{"type":"INSERT","lineNumber":88,"content":"  Future<void> _saveDefaultScreen(String screen) async {"},{"type":"INSERT","lineNumber":89,"content":"    try {"},{"type":"INSERT","lineNumber":90,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":91,"content":"      await prefs.setString('default_screen', screen);"},{"type":"INSERT","lineNumber":92,"content":"      setState(() {"},{"type":"INSERT","lineNumber":93,"content":"        _defaultScreen = screen;"},{"type":"INSERT","lineNumber":94,"content":"      });"},{"type":"INSERT","lineNumber":95,"content":"      AppLogger.info('Default screen set to: $screen');"},{"type":"INSERT","lineNumber":96,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":97,"content":"      AppLogger.error('Error saving default screen preference', e);"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":99,"content":"  }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":103,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":87,"oldContent":"  /// Load default screen preference"},{"type":"DELETE","lineNumber":89,"oldContent":"  Future<void> _loadDefaultScreen() async {"},{"type":"DELETE","lineNumber":91,"oldContent":"    try {"},{"type":"DELETE","lineNumber":93,"oldContent":"      final prefs = await SharedPreferences.getInstance();"},{"type":"DELETE","lineNumber":95,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":97,"oldContent":"        _defaultScreen = prefs.getString('default_screen') ?? 'Timeline';"},{"type":"DELETE","lineNumber":99,"oldContent":"      });"},{"type":"DELETE","lineNumber":101,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":103,"oldContent":"      AppLogger.error('Error loading default screen preference', e);"},{"type":"DELETE","lineNumber":105,"oldContent":"    }"},{"type":"DELETE","lineNumber":107,"oldContent":"  }"},{"type":"INSERT","lineNumber":124,"content":"            title: 'App Preferences',"},{"type":"INSERT","lineNumber":125,"content":"            children: ["},{"type":"INSERT","lineNumber":126,"content":"              _SettingsTile("},{"type":"INSERT","lineNumber":127,"content":"                title: 'Default Screen',"},{"type":"INSERT","lineNumber":128,"content":"                subtitle: 'Choose which screen opens when you start the app',"},{"type":"INSERT","lineNumber":129,"content":"                leading: const Icon(Icons.home),"},{"type":"INSERT","lineNumber":130,"content":"                trailing: DropdownButton<String>("},{"type":"INSERT","lineNumber":131,"content":"                  value: _defaultScreen,"},{"type":"INSERT","lineNumber":132,"content":"                  onChanged: (String? newValue) {"},{"type":"INSERT","lineNumber":133,"content":"                    if (newValue != null) {"},{"type":"INSERT","lineNumber":134,"content":"                      _saveDefaultScreen(newValue);"},{"type":"INSERT","lineNumber":135,"content":"                    }"},{"type":"INSERT","lineNumber":136,"content":"                  },"},{"type":"INSERT","lineNumber":137,"content":"                  items: _availableScreens.map<DropdownMenuItem<String>>((String value) {"},{"type":"INSERT","lineNumber":138,"content":"                    return DropdownMenuItem<String>("},{"type":"INSERT","lineNumber":139,"content":"                      value: value,"},{"type":"INSERT","lineNumber":140,"content":"                      child: Text(value),"},{"type":"INSERT","lineNumber":141,"content":"                    );"},{"type":"INSERT","lineNumber":142,"content":"                  }).toList(),"},{"type":"INSERT","lineNumber":143,"content":"                ),"},{"type":"INSERT","lineNumber":144,"content":"              ),"},{"type":"INSERT","lineNumber":145,"content":"            ],"},{"type":"INSERT","lineNumber":146,"content":"          ),"},{"type":"INSERT","lineNumber":147,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":148,"content":"          _SettingsSection("},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":111,"oldContent":"  /// Save default screen preference"},{"type":"DELETE","lineNumber":113,"oldContent":"  Future<void> _saveDefaultScreen(String screen) async {"},{"type":"DELETE","lineNumber":115,"oldContent":"    try {"},{"type":"DELETE","lineNumber":116,"oldContent":"      final prefs = await SharedPreferences.getInstance();"},{"type":"DELETE","lineNumber":118,"oldContent":"      await prefs.setString('default_screen', screen);"},{"type":"INSERT","lineNumber":154,"content":"                leading: const Icon(Icons.palette),"},{"type":"DELETE","lineNumber":120,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":122,"oldContent":"        _defaultScreen = screen;"},{"type":"DELETE","lineNumber":124,"oldContent":"      });"},{"type":"DELETE","lineNumber":126,"oldContent":"      AppLogger.info('Default screen set to: $screen');"},{"type":"DELETE","lineNumber":128,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":130,"oldContent":"      AppLogger.error('Error saving default screen preference', e);"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"DELETE","lineNumber":133,"oldContent":"  }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"INSERT","lineNumber":163,"content":"                ),"},{"type":"DELETE","lineNumber":139,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":161,"oldContent":"            title: 'App Preferences',"},{"type":"DELETE","lineNumber":163,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":165,"oldContent":"              _SettingsTile("},{"type":"DELETE","lineNumber":167,"oldContent":"                title: 'Default Screen',"},{"type":"DELETE","lineNumber":169,"oldContent":"                subtitle: 'Choose which screen opens when you start the app',"},{"type":"DELETE","lineNumber":171,"oldContent":"                leading: const Icon(Icons.home),"},{"type":"DELETE","lineNumber":173,"oldContent":"                trailing: DropdownButton<String>("},{"type":"DELETE","lineNumber":175,"oldContent":"                  value: _defaultScreen,"},{"type":"DELETE","lineNumber":177,"oldContent":"                  onChanged: (String? newValue) {"},{"type":"DELETE","lineNumber":179,"oldContent":"                    if (newValue != null) {"},{"type":"DELETE","lineNumber":181,"oldContent":"                      _saveDefaultScreen(newValue);"},{"type":"DELETE","lineNumber":183,"oldContent":"                    }"},{"type":"DELETE","lineNumber":185,"oldContent":"                  },"},{"type":"DELETE","lineNumber":187,"oldContent":"                  items: _availableScreens.map<DropdownMenuItem<String>>((String value) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                    return DropdownMenuItem<String>("},{"type":"DELETE","lineNumber":191,"oldContent":"                      value: value,"},{"type":"DELETE","lineNumber":193,"oldContent":"                      child: Text(value),"},{"type":"DELETE","lineNumber":195,"oldContent":"                    );"},{"type":"DELETE","lineNumber":197,"oldContent":"                  }).toList(),"},{"type":"DELETE","lineNumber":198,"oldContent":"            ],"},{"type":"INSERT","lineNumber":206,"content":"              if (_healthDataSync)"},{"type":"INSERT","lineNumber":207,"content":"                _SettingsTile("},{"type":"INSERT","lineNumber":208,"content":"                  title: 'Health Permissions',"},{"type":"INSERT","lineNumber":209,"content":"                  subtitle: 'Manage health data access',"},{"type":"INSERT","lineNumber":210,"content":"                  leading: const Icon(Icons.health_and_safety),"},{"type":"INSERT","lineNumber":211,"content":"                  onTap: () => _manageHealthPermissions(),"},{"type":"INSERT","lineNumber":213,"content":"            ],"},{"type":"DELETE","lineNumber":201,"oldContent":"              ),"},{"type":"DELETE","lineNumber":203,"oldContent":"            ],"},{"type":"DELETE","lineNumber":205,"oldContent":"          ),"},{"type":"DELETE","lineNumber":207,"oldContent":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":209,"oldContent":"          _SettingsSection("},{"type":"DELETE","lineNumber":216,"oldContent":"                leading: const Icon(Icons.palette),"},{"type":"DELETE","lineNumber":226,"oldContent":"                ),"},{"type":"INSERT","lineNumber":270,"content":""},{"type":"DELETE","lineNumber":269,"oldContent":"              if (_healthDataSync)"},{"type":"DELETE","lineNumber":271,"oldContent":"                _SettingsTile("},{"type":"DELETE","lineNumber":273,"oldContent":"                  title: 'Health Permissions',"},{"type":"DELETE","lineNumber":275,"oldContent":"                  subtitle: 'Manage health data access',"},{"type":"DELETE","lineNumber":277,"oldContent":"                  leading: const Icon(Icons.health_and_safety),"},{"type":"INSERT","lineNumber":281,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":279,"oldContent":"                  onTap: () => _manageHealthPermissions(),"},{"type":"DELETE","lineNumber":280,"oldContent":"                ),"},{"type":"INSERT","lineNumber":290,"content":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":299,"content":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":314,"content":"    showDialog("},{"type":"INSERT","lineNumber":336,"content":"                          width: 3,"},{"type":"INSERT","lineNumber":337,"content":"                        )"},{"type":"INSERT","lineNumber":338,"content":"                      : null,"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":341,"oldContent":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":349,"content":"          }).toList(),"},{"type":"INSERT","lineNumber":350,"content":"        ),"},{"type":"INSERT","lineNumber":351,"content":"      ),"},{"type":"INSERT","lineNumber":352,"content":"    );"},{"type":"DELETE","lineNumber":351,"oldContent":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":361,"oldContent":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":373,"content":"  /// Toggle calendar sync"},{"type":"INSERT","lineNumber":376,"content":"      // Request calendar permissions"},{"type":"INSERT","lineNumber":377,"content":"      final hasPermissions = await CalendarService.requestPermissions();"},{"type":"INSERT","lineNumber":378,"content":"      setState(() {"},{"type":"INSERT","lineNumber":379,"content":"        _calendarSync = hasPermissions;"},{"type":"INSERT","lineNumber":380,"content":"      });"},{"type":"INSERT","lineNumber":381,"content":""},{"type":"INSERT","lineNumber":382,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":383,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":384,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":385,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":386,"content":"              content: Text('Calendar permissions are required for this feature'),"},{"type":"INSERT","lineNumber":387,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":388,"content":"            ),"},{"type":"INSERT","lineNumber":389,"content":"          );"},{"type":"INSERT","lineNumber":390,"content":"        }"},{"type":"DELETE","lineNumber":368,"oldContent":"    showDialog("},{"type":"INSERT","lineNumber":393,"content":"      setState(() {"},{"type":"INSERT","lineNumber":394,"content":"        _calendarSync = false;"},{"type":"INSERT","lineNumber":395,"content":"      });"},{"type":"INSERT","lineNumber":399,"content":"  /// Toggle health data sync"},{"type":"INSERT","lineNumber":402,"content":"      // Request health permissions"},{"type":"INSERT","lineNumber":403,"content":"      final hasPermissions = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":404,"content":"      setState(() {"},{"type":"INSERT","lineNumber":405,"content":"        _healthDataSync = hasPermissions;"},{"type":"INSERT","lineNumber":406,"content":"      });"},{"type":"INSERT","lineNumber":407,"content":""},{"type":"INSERT","lineNumber":408,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":409,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":410,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":411,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":412,"content":"              content: Text('Health permissions are required for this feature'),"},{"type":"INSERT","lineNumber":413,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":414,"content":"            ),"},{"type":"INSERT","lineNumber":415,"content":"          );"},{"type":"DELETE","lineNumber":376,"oldContent":"                          width: 3,"},{"type":"DELETE","lineNumber":378,"oldContent":"                        )"},{"type":"DELETE","lineNumber":380,"oldContent":"                      : null,"},{"type":"INSERT","lineNumber":419,"content":"      setState(() {"},{"type":"INSERT","lineNumber":420,"content":"        _healthDataSync = false;"},{"type":"INSERT","lineNumber":421,"content":"      });"},{"type":"DELETE","lineNumber":390,"oldContent":"          }).toList(),"},{"type":"DELETE","lineNumber":392,"oldContent":"        ),"},{"type":"DELETE","lineNumber":394,"oldContent":"      ),"},{"type":"DELETE","lineNumber":396,"oldContent":"    );"},{"type":"DELETE","lineNumber":418,"oldContent":"  /// Toggle calendar sync"},{"type":"DELETE","lineNumber":422,"oldContent":"      // Request calendar permissions"},{"type":"DELETE","lineNumber":424,"oldContent":"      final hasPermissions = await CalendarService.requestPermissions();"},{"type":"DELETE","lineNumber":426,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":428,"oldContent":"        _calendarSync = hasPermissions;"},{"type":"DELETE","lineNumber":430,"oldContent":"      });"},{"type":"DELETE","lineNumber":432,"oldContent":"      "},{"type":"DELETE","lineNumber":434,"oldContent":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":436,"oldContent":"        if (mounted) {"},{"type":"DELETE","lineNumber":438,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":440,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":442,"oldContent":"              content: Text('Calendar permissions are required for this feature'),"},{"type":"DELETE","lineNumber":444,"oldContent":"              backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":446,"oldContent":"            ),"},{"type":"DELETE","lineNumber":448,"oldContent":"          );"},{"type":"DELETE","lineNumber":450,"oldContent":"        }"},{"type":"DELETE","lineNumber":454,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":456,"oldContent":"        _calendarSync = false;"},{"type":"DELETE","lineNumber":458,"oldContent":"      });"},{"type":"DELETE","lineNumber":463,"oldContent":"  /// Toggle health data sync"},{"type":"DELETE","lineNumber":467,"oldContent":"      // Request health permissions"},{"type":"DELETE","lineNumber":469,"oldContent":"      final hasPermissions = await HealthService.requestPermissions();"},{"type":"DELETE","lineNumber":471,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":473,"oldContent":"        _healthDataSync = hasPermissions;"},{"type":"DELETE","lineNumber":475,"oldContent":"      });"},{"type":"DELETE","lineNumber":477,"oldContent":"      "},{"type":"DELETE","lineNumber":479,"oldContent":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":481,"oldContent":"        if (mounted) {"},{"type":"DELETE","lineNumber":483,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":485,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":487,"oldContent":"              content: Text('Health permissions are required for this feature'),"},{"type":"DELETE","lineNumber":489,"oldContent":"              backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":491,"oldContent":"            ),"},{"type":"DELETE","lineNumber":493,"oldContent":"          );"},{"type":"DELETE","lineNumber":498,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":500,"oldContent":"        _healthDataSync = false;"},{"type":"DELETE","lineNumber":502,"oldContent":"      });"},{"type":"INSERT","lineNumber":522,"content":"  /// Manage health permissions"},{"type":"INSERT","lineNumber":523,"content":"  Future<void> _manageHealthPermissions() async {"},{"type":"INSERT","lineNumber":524,"content":"    showDialog("},{"type":"INSERT","lineNumber":525,"content":"      context: context,"},{"type":"INSERT","lineNumber":526,"content":"      builder: (BuildContext context) {"},{"type":"INSERT","lineNumber":527,"content":"        return AlertDialog("},{"type":"INSERT","lineNumber":528,"content":"          title: const Text('Health Data Integration'),"},{"type":"INSERT","lineNumber":529,"content":"          content: const Column("},{"type":"INSERT","lineNumber":530,"content":"            mainAxisSize: MainAxisSize.min,"},{"type":"INSERT","lineNumber":531,"content":"            crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":532,"content":"            children: ["},{"type":"INSERT","lineNumber":533,"content":"              Text('This app can integrate with your health data to provide better insights:'),"},{"type":"INSERT","lineNumber":534,"content":"              SizedBox(height: 16),"},{"type":"INSERT","lineNumber":535,"content":"              Text('• Step count tracking'),"},{"type":"INSERT","lineNumber":536,"content":"              Text('• Sleep pattern analysis'),"},{"type":"INSERT","lineNumber":537,"content":"              Text('• Exercise duration monitoring'),"},{"type":"INSERT","lineNumber":538,"content":"              Text('• Heart rate insights'),"},{"type":"INSERT","lineNumber":539,"content":"              SizedBox(height: 16),"},{"type":"INSERT","lineNumber":540,"content":"              Text('Your privacy is important - data stays on your device.'),"},{"type":"INSERT","lineNumber":541,"content":"            ],"},{"type":"INSERT","lineNumber":542,"content":"          ),"},{"type":"INSERT","lineNumber":543,"content":"          actions: ["},{"type":"INSERT","lineNumber":544,"content":"            TextButton("},{"type":"INSERT","lineNumber":545,"content":"              onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":546,"content":"              child: const Text('Cancel'),"},{"type":"INSERT","lineNumber":547,"content":"            ),"},{"type":"INSERT","lineNumber":548,"content":"            ElevatedButton("},{"type":"INSERT","lineNumber":549,"content":"              onPressed: () async {"},{"type":"INSERT","lineNumber":550,"content":"                Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":551,"content":"                final granted = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":552,"content":"                if (mounted) {"},{"type":"INSERT","lineNumber":553,"content":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":554,"content":"                    SnackBar("},{"type":"INSERT","lineNumber":555,"content":"                      content: Text(granted"},{"type":"INSERT","lineNumber":556,"content":"                        ? 'Health permissions granted!'"},{"type":"INSERT","lineNumber":557,"content":"                        : 'Health permissions denied'),"},{"type":"INSERT","lineNumber":558,"content":"                      backgroundColor: granted ? Colors.green : Colors.red,"},{"type":"INSERT","lineNumber":559,"content":"                    ),"},{"type":"INSERT","lineNumber":560,"content":"                  );"},{"type":"INSERT","lineNumber":561,"content":"                }"},{"type":"INSERT","lineNumber":562,"content":"              },"},{"type":"INSERT","lineNumber":563,"content":"              child: const Text('Grant Permissions'),"},{"type":"INSERT","lineNumber":564,"content":"            ),"},{"type":"INSERT","lineNumber":565,"content":"          ],"},{"type":"INSERT","lineNumber":566,"content":"        );"},{"type":"INSERT","lineNumber":567,"content":"      },"},{"type":"INSERT","lineNumber":568,"content":"    );"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"INSERT","lineNumber":570,"content":""},{"type":"DELETE","lineNumber":591,"oldContent":""},{"type":"DELETE","lineNumber":592,"oldContent":"  }"},{"type":"DELETE","lineNumber":593,"oldContent":"    );"},{"type":"DELETE","lineNumber":594,"oldContent":"      },"},{"type":"DELETE","lineNumber":595,"oldContent":"        );"},{"type":"DELETE","lineNumber":596,"oldContent":"          ],"},{"type":"DELETE","lineNumber":597,"oldContent":"            ),"},{"type":"DELETE","lineNumber":598,"oldContent":"              child: const Text('Grant Permissions'),"},{"type":"DELETE","lineNumber":599,"oldContent":"              },"},{"type":"DELETE","lineNumber":600,"oldContent":"                }"},{"type":"DELETE","lineNumber":601,"oldContent":"                  );"},{"type":"DELETE","lineNumber":602,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":603,"oldContent":"                      backgroundColor: granted ? Colors.green : Colors.red,"},{"type":"DELETE","lineNumber":604,"oldContent":"  /// Manage health permissions"},{"type":"DELETE","lineNumber":605,"oldContent":"                        : 'Health permissions denied'),"},{"type":"DELETE","lineNumber":606,"oldContent":"  Future<void> _manageHealthPermissions() async {"},{"type":"DELETE","lineNumber":607,"oldContent":"                        ? 'Health permissions granted!' "},{"type":"DELETE","lineNumber":608,"oldContent":"    showDialog("},{"type":"DELETE","lineNumber":609,"oldContent":"                      content: Text(granted "},{"type":"DELETE","lineNumber":610,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":611,"oldContent":"                    SnackBar("},{"type":"DELETE","lineNumber":612,"oldContent":"      builder: (BuildContext context) {"},{"type":"DELETE","lineNumber":613,"oldContent":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":614,"oldContent":"        return AlertDialog("},{"type":"DELETE","lineNumber":615,"oldContent":"                if (mounted) {"},{"type":"DELETE","lineNumber":616,"oldContent":"          title: const Text('Health Data Integration'),"},{"type":"DELETE","lineNumber":617,"oldContent":"                final granted = await HealthService.requestPermissions();"},{"type":"DELETE","lineNumber":618,"oldContent":"          content: const Column("},{"type":"DELETE","lineNumber":619,"oldContent":"                Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":620,"oldContent":"            mainAxisSize: MainAxisSize.min,"},{"type":"DELETE","lineNumber":621,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":622,"oldContent":"            crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":623,"oldContent":"            ElevatedButton("},{"type":"DELETE","lineNumber":624,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":625,"oldContent":"            ),"},{"type":"DELETE","lineNumber":626,"oldContent":"              Text('This app can integrate with your health data to provide better insights:'),"},{"type":"DELETE","lineNumber":627,"oldContent":"              child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":628,"oldContent":"              SizedBox(height: 16),"},{"type":"DELETE","lineNumber":629,"oldContent":"              onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":630,"oldContent":"              Text('• Step count tracking'),"},{"type":"DELETE","lineNumber":631,"oldContent":"            TextButton("},{"type":"DELETE","lineNumber":632,"oldContent":"              Text('• Sleep pattern analysis'),"},{"type":"DELETE","lineNumber":633,"oldContent":"          actions: ["},{"type":"DELETE","lineNumber":634,"oldContent":"              Text('• Exercise duration monitoring'),"},{"type":"DELETE","lineNumber":635,"oldContent":"          ),"},{"type":"DELETE","lineNumber":636,"oldContent":"              Text('• Heart rate insights'),"},{"type":"DELETE","lineNumber":637,"oldContent":"            ],"},{"type":"DELETE","lineNumber":638,"oldContent":"              SizedBox(height: 16),"},{"type":"DELETE","lineNumber":639,"oldContent":"              Text('Your privacy is important - data stays on your device.'),"}]},{"timestamp":1754439651326,"changes":[{"type":"INSERT","lineNumber":9,"content":"import '../../services/logging_service.dart';"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"import '../../services/logging_service.dart';"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"  final List<Color> _colorOptions = ["},{"type":"DELETE","lineNumber":27,"oldContent":"    Colors.blue,"},{"type":"DELETE","lineNumber":29,"oldContent":"    Colors.green,"},{"type":"DELETE","lineNumber":32,"oldContent":"    Colors.orange,"},{"type":"DELETE","lineNumber":34,"oldContent":"    Colors.purple,"},{"type":"INSERT","lineNumber":32,"content":"  final List<Color> _colorOptions = ["},{"type":"INSERT","lineNumber":33,"content":"    Colors.blue,"},{"type":"INSERT","lineNumber":34,"content":"    Colors.green,"},{"type":"INSERT","lineNumber":35,"content":"    Colors.orange,"},{"type":"INSERT","lineNumber":36,"content":"    Colors.purple,"},{"type":"DELETE","lineNumber":76,"oldContent":"  @override"},{"type":"DELETE","lineNumber":78,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":"    if (_isLoading) {"},{"type":"DELETE","lineNumber":84,"oldContent":"      return Scaffold("},{"type":"DELETE","lineNumber":86,"oldContent":"        appBar: AppBar("},{"type":"DELETE","lineNumber":88,"oldContent":"          title: const Text('Settings'),"},{"type":"DELETE","lineNumber":90,"oldContent":"        ),"},{"type":"DELETE","lineNumber":92,"oldContent":"        body: const Center("},{"type":"DELETE","lineNumber":94,"oldContent":"          child: CircularProgressIndicator(),"},{"type":"DELETE","lineNumber":96,"oldContent":"        ),"},{"type":"DELETE","lineNumber":98,"oldContent":"      );"},{"type":"DELETE","lineNumber":101,"oldContent":"    }"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":110,"oldContent":"      appBar: AppBar("},{"type":"DELETE","lineNumber":113,"oldContent":"        title: const Text('Settings'),"},{"type":"DELETE","lineNumber":116,"oldContent":"      ),"},{"type":"INSERT","lineNumber":101,"content":"  @override"},{"type":"INSERT","lineNumber":102,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":103,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"    if (_isLoading) {"},{"type":"INSERT","lineNumber":106,"content":"      return Scaffold("},{"type":"INSERT","lineNumber":107,"content":"        appBar: AppBar("},{"type":"INSERT","lineNumber":108,"content":"          title: const Text('Settings'),"},{"type":"INSERT","lineNumber":109,"content":"        ),"},{"type":"INSERT","lineNumber":110,"content":"        body: const Center("},{"type":"INSERT","lineNumber":111,"content":"          child: CircularProgressIndicator(),"},{"type":"INSERT","lineNumber":112,"content":"        ),"},{"type":"INSERT","lineNumber":113,"content":"      );"},{"type":"INSERT","lineNumber":114,"content":"    }"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":117,"content":"      appBar: AppBar("},{"type":"INSERT","lineNumber":118,"content":"        title: const Text('Settings'),"},{"type":"INSERT","lineNumber":119,"content":"      ),"},{"type":"DELETE","lineNumber":121,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":124,"oldContent":"            title: 'Appearance',"},{"type":"DELETE","lineNumber":125,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":126,"oldContent":"              _SettingsTile("},{"type":"DELETE","lineNumber":127,"oldContent":"                title: 'Theme',"},{"type":"DELETE","lineNumber":128,"oldContent":"                subtitle: _getThemeModeText(themeState.themeMode),"},{"type":"DELETE","lineNumber":129,"oldContent":"                onTap: () => _showThemeDialog(),"},{"type":"DELETE","lineNumber":130,"oldContent":"              ),"},{"type":"DELETE","lineNumber":131,"oldContent":"              _SettingsTile("},{"type":"DELETE","lineNumber":134,"oldContent":"                title: 'Primary Color',"},{"type":"DELETE","lineNumber":137,"oldContent":"                subtitle: 'Customize your app\\'s accent color',"},{"type":"DELETE","lineNumber":140,"oldContent":"                leading: CircleAvatar("},{"type":"DELETE","lineNumber":143,"oldContent":"                  radius: 12,"},{"type":"DELETE","lineNumber":147,"oldContent":"                  backgroundColor: themeState.primaryColor,"},{"type":"DELETE","lineNumber":150,"oldContent":"                onTap: () => _showColorPicker(),"},{"type":"DELETE","lineNumber":152,"oldContent":"              ),"},{"type":"DELETE","lineNumber":154,"oldContent":"            ],"},{"type":"DELETE","lineNumber":157,"oldContent":"          ),"},{"type":"DELETE","lineNumber":159,"oldContent":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":161,"oldContent":"          _SettingsSection("},{"type":"DELETE","lineNumber":163,"oldContent":"            title: 'Notifications',"},{"type":"INSERT","lineNumber":145,"content":"            ],"},{"type":"INSERT","lineNumber":146,"content":"          ),"},{"type":"INSERT","lineNumber":147,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":148,"content":"          _SettingsSection("},{"type":"INSERT","lineNumber":149,"content":"            title: 'Appearance',"},{"type":"INSERT","lineNumber":151,"content":"              _SettingsTile("},{"type":"INSERT","lineNumber":152,"content":"                title: 'Theme',"},{"type":"INSERT","lineNumber":153,"content":"                subtitle: _getThemeModeText(themeState.themeMode),"},{"type":"INSERT","lineNumber":154,"content":"                leading: const Icon(Icons.palette),"},{"type":"INSERT","lineNumber":155,"content":"                onTap: () => _showThemeDialog(),"},{"type":"INSERT","lineNumber":156,"content":"              ),"},{"type":"INSERT","lineNumber":157,"content":"              _SettingsTile("},{"type":"INSERT","lineNumber":158,"content":"                title: 'Primary Color',"},{"type":"INSERT","lineNumber":159,"content":"                subtitle: 'Customize your app\\'s accent color',"},{"type":"INSERT","lineNumber":160,"content":"                leading: CircleAvatar("},{"type":"INSERT","lineNumber":161,"content":"                  radius: 12,"},{"type":"INSERT","lineNumber":162,"content":"                  backgroundColor: themeState.primaryColor,"},{"type":"INSERT","lineNumber":163,"content":"                ),"},{"type":"INSERT","lineNumber":164,"content":"                onTap: () => _showColorPicker(),"},{"type":"INSERT","lineNumber":165,"content":"              ),"},{"type":"DELETE","lineNumber":167,"oldContent":"              SwitchListTile("},{"type":"DELETE","lineNumber":169,"oldContent":"                title: const Text('Enable Notifications'),"},{"type":"DELETE","lineNumber":171,"oldContent":"                subtitle: const Text('Get reminders for your habits'),"},{"type":"INSERT","lineNumber":170,"content":"            title: 'Notifications',"},{"type":"INSERT","lineNumber":171,"content":"            children: ["},{"type":"INSERT","lineNumber":172,"content":"              SwitchListTile("},{"type":"INSERT","lineNumber":173,"content":"                title: const Text('Enable Notifications'),"},{"type":"INSERT","lineNumber":174,"content":"                subtitle: const Text('Get reminders for your habits'),"},{"type":"DELETE","lineNumber":179,"oldContent":"                leading: const Icon(Icons.palette),"},{"type":"DELETE","lineNumber":188,"oldContent":"                ),"},{"type":"INSERT","lineNumber":206,"content":"              if (_healthDataSync)"},{"type":"INSERT","lineNumber":207,"content":"                _SettingsTile("},{"type":"INSERT","lineNumber":208,"content":"                  title: 'Health Permissions',"},{"type":"INSERT","lineNumber":209,"content":"                  subtitle: 'Manage health data access',"},{"type":"INSERT","lineNumber":210,"content":"                  leading: const Icon(Icons.health_and_safety),"},{"type":"INSERT","lineNumber":211,"content":"                  onTap: () => _manageHealthPermissions(),"},{"type":"INSERT","lineNumber":213,"content":"            ],"},{"type":"DELETE","lineNumber":210,"oldContent":"              if (_healthDataSync)"},{"type":"DELETE","lineNumber":212,"oldContent":"                _SettingsTile("},{"type":"DELETE","lineNumber":213,"oldContent":"                  title: 'Health Permissions',"},{"type":"DELETE","lineNumber":215,"oldContent":"                  subtitle: 'Manage health data access',"},{"type":"DELETE","lineNumber":216,"oldContent":"                  leading: const Icon(Icons.health_and_safety),"},{"type":"DELETE","lineNumber":218,"oldContent":"                  onTap: () => _manageHealthPermissions(),"},{"type":"DELETE","lineNumber":221,"oldContent":"            ],"},{"type":"INSERT","lineNumber":270,"content":""},{"type":"DELETE","lineNumber":276,"oldContent":""},{"type":"MODIFY","lineNumber":282,"content":"              onChanged: (value) {","oldContent":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":290,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":292,"oldContent":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":299,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":302,"oldContent":"              groupValue: themeState.themeMode,"},{"type":"INSERT","lineNumber":314,"content":"    showDialog("},{"type":"DELETE","lineNumber":318,"oldContent":"    showDialog("},{"type":"INSERT","lineNumber":336,"content":"                          width: 3,"},{"type":"INSERT","lineNumber":337,"content":"                        )"},{"type":"INSERT","lineNumber":338,"content":"                      : null,"},{"type":"DELETE","lineNumber":340,"oldContent":"                          width: 3,"},{"type":"DELETE","lineNumber":342,"oldContent":"                        )"},{"type":"DELETE","lineNumber":344,"oldContent":"                      : null,"},{"type":"INSERT","lineNumber":349,"content":"          }).toList(),"},{"type":"INSERT","lineNumber":350,"content":"        ),"},{"type":"INSERT","lineNumber":351,"content":"      ),"},{"type":"INSERT","lineNumber":352,"content":"    );"},{"type":"DELETE","lineNumber":355,"oldContent":"          }).toList(),"},{"type":"DELETE","lineNumber":357,"oldContent":"        ),"},{"type":"DELETE","lineNumber":359,"oldContent":"      ),"},{"type":"DELETE","lineNumber":360,"oldContent":"    );"},{"type":"INSERT","lineNumber":373,"content":"  /// Toggle calendar sync"},{"type":"INSERT","lineNumber":376,"content":"      // Request calendar permissions"},{"type":"INSERT","lineNumber":377,"content":"      final hasPermissions = await CalendarService.requestPermissions();"},{"type":"INSERT","lineNumber":378,"content":"      setState(() {"},{"type":"INSERT","lineNumber":379,"content":"        _calendarSync = hasPermissions;"},{"type":"INSERT","lineNumber":380,"content":"      });"},{"type":"INSERT","lineNumber":381,"content":"      "},{"type":"INSERT","lineNumber":382,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":383,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":384,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":385,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":386,"content":"              content: Text('Calendar permissions are required for this feature'),"},{"type":"INSERT","lineNumber":387,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":388,"content":"            ),"},{"type":"INSERT","lineNumber":389,"content":"          );"},{"type":"INSERT","lineNumber":390,"content":"        }"},{"type":"INSERT","lineNumber":393,"content":"      setState(() {"},{"type":"INSERT","lineNumber":394,"content":"        _calendarSync = false;"},{"type":"INSERT","lineNumber":395,"content":"      });"},{"type":"DELETE","lineNumber":380,"oldContent":"  /// Toggle calendar sync"},{"type":"INSERT","lineNumber":399,"content":"  /// Toggle health data sync"},{"type":"INSERT","lineNumber":402,"content":"      // Request health permissions"},{"type":"INSERT","lineNumber":403,"content":"      final hasPermissions = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":404,"content":"      setState(() {"},{"type":"INSERT","lineNumber":405,"content":"        _healthDataSync = hasPermissions;"},{"type":"INSERT","lineNumber":406,"content":"      });"},{"type":"INSERT","lineNumber":407,"content":"      "},{"type":"INSERT","lineNumber":408,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":409,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":410,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":411,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":412,"content":"              content: Text('Health permissions are required for this feature'),"},{"type":"INSERT","lineNumber":413,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":414,"content":"            ),"},{"type":"INSERT","lineNumber":415,"content":"          );"},{"type":"DELETE","lineNumber":384,"oldContent":"      // Request calendar permissions"},{"type":"DELETE","lineNumber":385,"oldContent":"      final hasPermissions = await CalendarService.requestPermissions();"},{"type":"DELETE","lineNumber":387,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":388,"oldContent":"        _calendarSync = hasPermissions;"},{"type":"INSERT","lineNumber":419,"content":"      setState(() {"},{"type":"INSERT","lineNumber":420,"content":"        _healthDataSync = false;"},{"type":"DELETE","lineNumber":391,"oldContent":""},{"type":"DELETE","lineNumber":393,"oldContent":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":395,"oldContent":"        if (mounted) {"},{"type":"DELETE","lineNumber":397,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":399,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":401,"oldContent":"              content: Text('Calendar permissions are required for this feature'),"},{"type":"DELETE","lineNumber":403,"oldContent":"              backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":405,"oldContent":"            ),"},{"type":"DELETE","lineNumber":407,"oldContent":"          );"},{"type":"DELETE","lineNumber":409,"oldContent":"        }"},{"type":"DELETE","lineNumber":411,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":413,"oldContent":"        _calendarSync = false;"},{"type":"DELETE","lineNumber":414,"oldContent":"      });"},{"type":"DELETE","lineNumber":418,"oldContent":"  /// Toggle health data sync"},{"type":"DELETE","lineNumber":422,"oldContent":"      // Request health permissions"},{"type":"DELETE","lineNumber":424,"oldContent":"      final hasPermissions = await HealthService.requestPermissions();"},{"type":"DELETE","lineNumber":426,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":428,"oldContent":"        _healthDataSync = hasPermissions;"},{"type":"DELETE","lineNumber":430,"oldContent":"      });"},{"type":"DELETE","lineNumber":432,"oldContent":""},{"type":"DELETE","lineNumber":434,"oldContent":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":436,"oldContent":"        if (mounted) {"},{"type":"DELETE","lineNumber":438,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":440,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":442,"oldContent":"              content: Text('Health permissions are required for this feature'),"},{"type":"DELETE","lineNumber":444,"oldContent":"              backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":446,"oldContent":"            ),"},{"type":"DELETE","lineNumber":448,"oldContent":"          );"},{"type":"DELETE","lineNumber":452,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":454,"oldContent":"        _healthDataSync = false;"},{"type":"DELETE","lineNumber":456,"oldContent":"      });"},{"type":"DELETE","lineNumber":523,"oldContent":"  void _showSnackBar(String message) {"},{"type":"DELETE","lineNumber":525,"oldContent":"    ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":527,"oldContent":"      SnackBar(content: Text(message)),"},{"type":"DELETE","lineNumber":529,"oldContent":"    );"},{"type":"DELETE","lineNumber":531,"oldContent":"  }"},{"type":"DELETE","lineNumber":533,"oldContent":"}"},{"type":"DELETE","lineNumber":535,"oldContent":""},{"type":"DELETE","lineNumber":537,"oldContent":"class _SettingsSection extends StatelessWidget {"},{"type":"DELETE","lineNumber":539,"oldContent":"  final String title;"},{"type":"DELETE","lineNumber":541,"oldContent":"  final List<Widget> children;"},{"type":"DELETE","lineNumber":543,"oldContent":""},{"type":"DELETE","lineNumber":545,"oldContent":"  const _SettingsSection({"},{"type":"DELETE","lineNumber":547,"oldContent":"    required this.title,"},{"type":"DELETE","lineNumber":549,"oldContent":"    required this.children,"},{"type":"DELETE","lineNumber":551,"oldContent":"  });"},{"type":"DELETE","lineNumber":553,"oldContent":""},{"type":"DELETE","lineNumber":555,"oldContent":"  @override"},{"type":"DELETE","lineNumber":557,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":559,"oldContent":"    return Column("},{"type":"DELETE","lineNumber":561,"oldContent":"      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":563,"oldContent":"      children: ["},{"type":"DELETE","lineNumber":565,"oldContent":"        Padding("},{"type":"DELETE","lineNumber":567,"oldContent":"          padding: const EdgeInsets.only(left: 16, bottom: 8),"},{"type":"DELETE","lineNumber":569,"oldContent":"          child: Text("},{"type":"DELETE","lineNumber":571,"oldContent":"            title,"},{"type":"DELETE","lineNumber":573,"oldContent":"            style: Theme.of(context).textTheme.titleSmall?.copyWith("},{"type":"DELETE","lineNumber":575,"oldContent":"              color: Theme.of(context).colorScheme.primary,"},{"type":"DELETE","lineNumber":577,"oldContent":"              fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":579,"oldContent":"            ),"},{"type":"DELETE","lineNumber":581,"oldContent":"          ),"},{"type":"DELETE","lineNumber":583,"oldContent":"        ),"},{"type":"DELETE","lineNumber":585,"oldContent":"        Card("},{"type":"DELETE","lineNumber":587,"oldContent":"          child: Column(children: children),"},{"type":"DELETE","lineNumber":588,"oldContent":"                      content: Text(granted"},{"type":"DELETE","lineNumber":589,"oldContent":"        ),"},{"type":"DELETE","lineNumber":590,"oldContent":"                        ? 'Health permissions granted!'"},{"type":"DELETE","lineNumber":591,"oldContent":"      ],"},{"type":"INSERT","lineNumber":555,"content":"                      content: Text(granted "},{"type":"INSERT","lineNumber":556,"content":"                        ? 'Health permissions granted!' "},{"type":"DELETE","lineNumber":593,"oldContent":"    );"},{"type":"DELETE","lineNumber":595,"oldContent":"  }"},{"type":"DELETE","lineNumber":597,"oldContent":"}"},{"type":"DELETE","lineNumber":599,"oldContent":""},{"type":"DELETE","lineNumber":601,"oldContent":"class _SettingsTile extends StatelessWidget {"},{"type":"DELETE","lineNumber":603,"oldContent":"  final String title;"},{"type":"DELETE","lineNumber":605,"oldContent":"  final String? subtitle;"},{"type":"DELETE","lineNumber":607,"oldContent":"  final Widget? leading;"},{"type":"DELETE","lineNumber":609,"oldContent":"  final VoidCallback? onTap;"},{"type":"DELETE","lineNumber":611,"oldContent":"  final Color? textColor;"},{"type":"INSERT","lineNumber":568,"content":"    );"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"INSERT","lineNumber":571,"content":"  void _showSnackBar(String message) {"},{"type":"INSERT","lineNumber":572,"content":"    ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":573,"content":"      SnackBar(content: Text(message)),"},{"type":"DELETE","lineNumber":615,"oldContent":"  const _SettingsTile({"},{"type":"INSERT","lineNumber":576,"content":"}"},{"type":"INSERT","lineNumber":577,"content":""},{"type":"INSERT","lineNumber":578,"content":"class _SettingsSection extends StatelessWidget {"},{"type":"INSERT","lineNumber":579,"content":"  final String title;"},{"type":"INSERT","lineNumber":580,"content":"  final List<Widget> children;"},{"type":"INSERT","lineNumber":581,"content":""},{"type":"INSERT","lineNumber":582,"content":"  const _SettingsSection({"},{"type":"INSERT","lineNumber":584,"content":"    required this.children,"},{"type":"INSERT","lineNumber":585,"content":"  });"},{"type":"INSERT","lineNumber":587,"content":"  @override"},{"type":"INSERT","lineNumber":588,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":589,"content":"    return Column("},{"type":"INSERT","lineNumber":590,"content":"      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":591,"content":"      children: ["},{"type":"INSERT","lineNumber":592,"content":"        Padding("},{"type":"INSERT","lineNumber":593,"content":"          padding: const EdgeInsets.only(left: 16, bottom: 8),"},{"type":"INSERT","lineNumber":594,"content":"          child: Text("},{"type":"INSERT","lineNumber":595,"content":"            title,"},{"type":"INSERT","lineNumber":596,"content":"            style: Theme.of(context).textTheme.titleSmall?.copyWith("},{"type":"INSERT","lineNumber":597,"content":"              color: Theme.of(context).colorScheme.primary,"},{"type":"INSERT","lineNumber":598,"content":"              fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":599,"content":"            ),"},{"type":"INSERT","lineNumber":600,"content":"          ),"},{"type":"INSERT","lineNumber":601,"content":"        ),"},{"type":"INSERT","lineNumber":602,"content":"        Card("},{"type":"INSERT","lineNumber":603,"content":"          child: Column(children: children),"},{"type":"INSERT","lineNumber":604,"content":"        ),"},{"type":"INSERT","lineNumber":605,"content":"      ],"},{"type":"INSERT","lineNumber":606,"content":"    );"},{"type":"INSERT","lineNumber":607,"content":"  }"},{"type":"INSERT","lineNumber":608,"content":"}"},{"type":"INSERT","lineNumber":609,"content":""},{"type":"INSERT","lineNumber":610,"content":"class _SettingsTile extends StatelessWidget {"},{"type":"INSERT","lineNumber":611,"content":"  final String title;"},{"type":"INSERT","lineNumber":612,"content":"  final String? subtitle;"},{"type":"INSERT","lineNumber":613,"content":"  final Widget? leading;"},{"type":"INSERT","lineNumber":614,"content":"  final VoidCallback? onTap;"},{"type":"INSERT","lineNumber":615,"content":"  final Color? textColor;"},{"type":"INSERT","lineNumber":616,"content":""},{"type":"INSERT","lineNumber":617,"content":"  const _SettingsTile({"},{"type":"INSERT","lineNumber":618,"content":"    required this.title,"}]},{"timestamp":1754439673816,"changes":[{"type":"MODIFY","lineNumber":11,"content":"class SettingsScreen extends ConsumerStatefulWidget {","oldContent":"class SettingsScreen extends ConsumerStatefulWidget {"},{"type":"INSERT","lineNumber":29,"content":"    'Insights',"},{"type":"INSERT","lineNumber":30,"content":"  ];"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"DELETE","lineNumber":31,"oldContent":"    'Insights',"},{"type":"DELETE","lineNumber":34,"oldContent":"  ];"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"INSERT","lineNumber":89,"content":"    try {"},{"type":"INSERT","lineNumber":90,"content":"      final prefs = await SharedPreferences.getInstance();"},{"type":"INSERT","lineNumber":91,"content":"      await prefs.setString('default_screen', screen);"},{"type":"INSERT","lineNumber":92,"content":"      setState(() {"},{"type":"INSERT","lineNumber":93,"content":"        _defaultScreen = screen;"},{"type":"INSERT","lineNumber":94,"content":"      });"},{"type":"INSERT","lineNumber":95,"content":"      AppLogger.info('Default screen set to: $screen');"},{"type":"INSERT","lineNumber":96,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":97,"content":"      AppLogger.error('Error saving default screen preference', e);"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":99,"content":"  }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"DELETE","lineNumber":91,"oldContent":"    try {"},{"type":"DELETE","lineNumber":93,"oldContent":"      final prefs = await SharedPreferences.getInstance();"},{"type":"DELETE","lineNumber":96,"oldContent":"      await prefs.setString('default_screen', screen);"},{"type":"DELETE","lineNumber":98,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":101,"oldContent":"        _defaultScreen = screen;"},{"type":"DELETE","lineNumber":103,"oldContent":"      });"},{"type":"DELETE","lineNumber":106,"oldContent":"      AppLogger.info('Default screen set to: $screen');"},{"type":"DELETE","lineNumber":108,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":111,"oldContent":"      AppLogger.error('Error saving default screen preference', e);"},{"type":"DELETE","lineNumber":113,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":"  }"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"            ],"},{"type":"MODIFY","lineNumber":135,"content":"                    }","oldContent":"          ),"},{"type":"INSERT","lineNumber":136,"content":"                  },"},{"type":"INSERT","lineNumber":137,"content":"                  items: _availableScreens.map<DropdownMenuItem<String>>((String value) {"},{"type":"INSERT","lineNumber":138,"content":"                    return DropdownMenuItem<String>("},{"type":"INSERT","lineNumber":139,"content":"                      value: value,"},{"type":"INSERT","lineNumber":140,"content":"                      child: Text(value),"},{"type":"INSERT","lineNumber":141,"content":"                    );"},{"type":"INSERT","lineNumber":142,"content":"                  }).toList(),"},{"type":"INSERT","lineNumber":143,"content":"                ),"},{"type":"INSERT","lineNumber":144,"content":"              ),"},{"type":"INSERT","lineNumber":145,"content":"            ],"},{"type":"INSERT","lineNumber":146,"content":"          ),"},{"type":"DELETE","lineNumber":139,"oldContent":"                    }"},{"type":"DELETE","lineNumber":141,"oldContent":"                  },"},{"type":"INSERT","lineNumber":150,"content":"            children: ["},{"type":"DELETE","lineNumber":143,"oldContent":"                  items: _availableScreens.map<DropdownMenuItem<String>>((String value) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                    return DropdownMenuItem<String>("},{"type":"DELETE","lineNumber":149,"oldContent":"                      value: value,"},{"type":"DELETE","lineNumber":151,"oldContent":"                      child: Text(value),"},{"type":"DELETE","lineNumber":154,"oldContent":"                    );"},{"type":"DELETE","lineNumber":157,"oldContent":"                  }).toList(),"},{"type":"DELETE","lineNumber":161,"oldContent":"                ),"},{"type":"DELETE","lineNumber":164,"oldContent":"              ),"},{"type":"DELETE","lineNumber":165,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":168,"oldContent":"            title: 'Notifications',"},{"type":"INSERT","lineNumber":169,"content":"          _SettingsSection("},{"type":"INSERT","lineNumber":170,"content":"            title: 'Notifications',"},{"type":"DELETE","lineNumber":172,"oldContent":"          _SettingsSection("},{"type":"MODIFY","lineNumber":175,"content":"                value: _notificationsEnabled,","oldContent":"                value: _notificationsEnabled,"},{"type":"DELETE","lineNumber":207,"oldContent":"                ),"},{"type":"DELETE","lineNumber":209,"oldContent":"          ),"},{"type":"DELETE","lineNumber":211,"oldContent":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":213,"oldContent":"          _SettingsSection("},{"type":"DELETE","lineNumber":216,"oldContent":"            title: 'Data & Privacy',"},{"type":"INSERT","lineNumber":212,"content":"                ),"},{"type":"INSERT","lineNumber":214,"content":"          ),"},{"type":"INSERT","lineNumber":215,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":216,"content":"          _SettingsSection("},{"type":"INSERT","lineNumber":217,"content":"            title: 'Data & Privacy',"},{"type":"INSERT","lineNumber":281,"content":"              groupValue: themeState.themeMode,"},{"type":"DELETE","lineNumber":282,"oldContent":"              onChanged: (value) {"},{"type":"DELETE","lineNumber":337,"oldContent":"                ),"},{"type":"MODIFY","lineNumber":339,"content":"                ),","oldContent":"                child: themeState.primaryColor == color"},{"type":"INSERT","lineNumber":340,"content":"                child: themeState.primaryColor == color"},{"type":"DELETE","lineNumber":350,"oldContent":"  }"},{"type":"DELETE","lineNumber":352,"oldContent":""},{"type":"DELETE","lineNumber":354,"oldContent":"  Future<void> _toggleNotifications(bool value) async {"},{"type":"INSERT","lineNumber":353,"content":"  }"},{"type":"INSERT","lineNumber":354,"content":""},{"type":"INSERT","lineNumber":355,"content":"  Future<void> _toggleNotifications(bool value) async {"},{"type":"DELETE","lineNumber":376,"oldContent":"      }"},{"type":"DELETE","lineNumber":378,"oldContent":"    } else {"},{"type":"DELETE","lineNumber":380,"oldContent":"    }"},{"type":"DELETE","lineNumber":382,"oldContent":"  }"},{"type":"DELETE","lineNumber":384,"oldContent":""},{"type":"DELETE","lineNumber":386,"oldContent":"      "},{"type":"DELETE","lineNumber":387,"oldContent":"  Future<void> _toggleHealthDataSync(bool value) async {"},{"type":"INSERT","lineNumber":381,"content":""},{"type":"DELETE","lineNumber":389,"oldContent":"    if (value) {"},{"type":"DELETE","lineNumber":391,"oldContent":"        }"},{"type":"DELETE","lineNumber":395,"oldContent":"      }"},{"type":"DELETE","lineNumber":399,"oldContent":"    } else {"},{"type":"DELETE","lineNumber":401,"oldContent":"      });"},{"type":"DELETE","lineNumber":402,"oldContent":"    }"},{"type":"INSERT","lineNumber":391,"content":"      }"},{"type":"INSERT","lineNumber":392,"content":"    } else {"},{"type":"DELETE","lineNumber":405,"oldContent":"  }"},{"type":"INSERT","lineNumber":396,"content":"    }"},{"type":"INSERT","lineNumber":397,"content":"  }"},{"type":"DELETE","lineNumber":408,"oldContent":"  Future<void> _testNotifications() async {"},{"type":"DELETE","lineNumber":410,"oldContent":"    try {"},{"type":"INSERT","lineNumber":400,"content":"  Future<void> _toggleHealthDataSync(bool value) async {"},{"type":"INSERT","lineNumber":401,"content":"    if (value) {"},{"type":"DELETE","lineNumber":412,"oldContent":"      // Send a regular test notification using static method"},{"type":"DELETE","lineNumber":415,"oldContent":"      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":419,"oldContent":"      "},{"type":"DELETE","lineNumber":421,"oldContent":"      // Also show a simple scheduled notification test"},{"type":"DELETE","lineNumber":424,"oldContent":"      await Future.delayed(const Duration(seconds: 1));"},{"type":"DELETE","lineNumber":427,"oldContent":"      await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":416,"content":"        }"},{"type":"INSERT","lineNumber":417,"content":"      }"},{"type":"INSERT","lineNumber":418,"content":"    } else {"},{"type":"INSERT","lineNumber":419,"content":"      setState(() {"},{"type":"INSERT","lineNumber":420,"content":"        _healthDataSync = false;"},{"type":"INSERT","lineNumber":421,"content":"      });"},{"type":"INSERT","lineNumber":422,"content":"    }"},{"type":"INSERT","lineNumber":423,"content":"  }"},{"type":"INSERT","lineNumber":424,"content":""},{"type":"INSERT","lineNumber":425,"content":"  Future<void> _testNotifications() async {"},{"type":"INSERT","lineNumber":426,"content":"    try {"},{"type":"INSERT","lineNumber":427,"content":"      // Send a regular test notification using static method"},{"type":"INSERT","lineNumber":428,"content":"      await NotificationService.showTestNotification();"},{"type":"INSERT","lineNumber":429,"content":""},{"type":"INSERT","lineNumber":430,"content":"      // Also show a simple scheduled notification test"},{"type":"INSERT","lineNumber":431,"content":"      await Future.delayed(const Duration(seconds: 1));"},{"type":"INSERT","lineNumber":432,"content":"      await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":434,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":436,"oldContent":"        _healthDataSync = false;"},{"type":"DELETE","lineNumber":539,"oldContent":"                      content: Text(granted "},{"type":"DELETE","lineNumber":540,"oldContent":"                        ? 'Health permissions granted!' "},{"type":"DELETE","lineNumber":547,"oldContent":"    );"},{"type":"DELETE","lineNumber":549,"oldContent":"  }"},{"type":"INSERT","lineNumber":547,"content":"            ),"},{"type":"INSERT","lineNumber":548,"content":"            ElevatedButton("},{"type":"INSERT","lineNumber":549,"content":"              onPressed: () async {"},{"type":"INSERT","lineNumber":550,"content":"                Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":551,"content":"                final granted = await HealthService.requestPermissions();"},{"type":"INSERT","lineNumber":552,"content":"                if (mounted) {"},{"type":"INSERT","lineNumber":553,"content":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":554,"content":"                    SnackBar("},{"type":"INSERT","lineNumber":555,"content":"                      content: Text(granted"},{"type":"INSERT","lineNumber":556,"content":"                        ? 'Health permissions granted!'"},{"type":"INSERT","lineNumber":557,"content":"                        : 'Health permissions denied'),"},{"type":"INSERT","lineNumber":558,"content":"                      backgroundColor: granted ? Colors.green : Colors.red,"},{"type":"INSERT","lineNumber":559,"content":"                    ),"},{"type":"INSERT","lineNumber":560,"content":"                  );"},{"type":"INSERT","lineNumber":561,"content":"                }"},{"type":"INSERT","lineNumber":562,"content":"              },"},{"type":"INSERT","lineNumber":563,"content":"              child: const Text('Grant Permissions'),"},{"type":"INSERT","lineNumber":564,"content":"            ),"},{"type":"INSERT","lineNumber":565,"content":"          ],"},{"type":"INSERT","lineNumber":566,"content":"        );"},{"type":"INSERT","lineNumber":567,"content":"      },"},{"type":"INSERT","lineNumber":568,"content":"    );"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"INSERT","lineNumber":570,"content":""},{"type":"DELETE","lineNumber":553,"oldContent":"            ),"},{"type":"DELETE","lineNumber":555,"oldContent":"            ElevatedButton("},{"type":"INSERT","lineNumber":574,"content":"    );"},{"type":"INSERT","lineNumber":575,"content":"  }"},{"type":"DELETE","lineNumber":557,"oldContent":"              onPressed: () async {"},{"type":"DELETE","lineNumber":560,"oldContent":"                Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":563,"oldContent":"                final granted = await HealthService.requestPermissions();"},{"type":"DELETE","lineNumber":566,"oldContent":"                if (mounted) {"},{"type":"INSERT","lineNumber":583,"content":"    required this.title,"},{"type":"DELETE","lineNumber":568,"oldContent":"                  ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":570,"oldContent":"                    SnackBar("},{"type":"INSERT","lineNumber":586,"content":""},{"type":"DELETE","lineNumber":577,"oldContent":"                        : 'Health permissions denied'),"},{"type":"DELETE","lineNumber":580,"oldContent":"                      backgroundColor: granted ? Colors.green : Colors.red,"},{"type":"DELETE","lineNumber":583,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":586,"oldContent":"                  );"},{"type":"DELETE","lineNumber":589,"oldContent":"                }"},{"type":"DELETE","lineNumber":592,"oldContent":"              },"},{"type":"DELETE","lineNumber":595,"oldContent":"              child: const Text('Grant Permissions'),"},{"type":"DELETE","lineNumber":598,"oldContent":"            ),"},{"type":"DELETE","lineNumber":601,"oldContent":"          ],"},{"type":"DELETE","lineNumber":604,"oldContent":"        );"},{"type":"DELETE","lineNumber":607,"oldContent":"      },"},{"type":"DELETE","lineNumber":609,"oldContent":""},{"type":"DELETE","lineNumber":611,"oldContent":"    );"},{"type":"DELETE","lineNumber":614,"oldContent":"  }"},{"type":"DELETE","lineNumber":617,"oldContent":"    required this.title,"},{"type":"DELETE","lineNumber":618,"oldContent":""}]},{"timestamp":1754440118480,"changes":[{"type":"INSERT","lineNumber":10,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"class SettingsScreen extends ConsumerStatefulWidget {"},{"type":"DELETE","lineNumber":30,"oldContent":"  final List<Color> _colorOptions = ["},{"type":"MODIFY","lineNumber":32,"content":"  final List<Color> _colorOptions = [","oldContent":"    Colors.blue,"},{"type":"INSERT","lineNumber":33,"content":"    Colors.blue,"},{"type":"DELETE","lineNumber":90,"oldContent":"  @override"},{"type":"DELETE","lineNumber":92,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":95,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"    if (_isLoading) {"},{"type":"DELETE","lineNumber":103,"oldContent":"      return Scaffold("},{"type":"DELETE","lineNumber":106,"oldContent":"        appBar: AppBar("},{"type":"INSERT","lineNumber":101,"content":"  @override"},{"type":"INSERT","lineNumber":102,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":103,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"    if (_isLoading) {"},{"type":"INSERT","lineNumber":106,"content":"      return Scaffold("},{"type":"INSERT","lineNumber":107,"content":"        appBar: AppBar("},{"type":"INSERT","lineNumber":134,"content":"                      _saveDefaultScreen(newValue);"},{"type":"DELETE","lineNumber":136,"oldContent":"                      _saveDefaultScreen(newValue);"},{"type":"DELETE","lineNumber":138,"oldContent":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":140,"oldContent":"          _SettingsSection("},{"type":"DELETE","lineNumber":143,"oldContent":"            title: 'Appearance',"},{"type":"DELETE","lineNumber":146,"oldContent":"              _SettingsTile("},{"type":"DELETE","lineNumber":149,"oldContent":"                title: 'Theme',"},{"type":"DELETE","lineNumber":151,"oldContent":"                subtitle: _getThemeModeText(themeState.themeMode),"},{"type":"INSERT","lineNumber":147,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":148,"content":"          _SettingsSection("},{"type":"INSERT","lineNumber":149,"content":"            title: 'Appearance',"},{"type":"INSERT","lineNumber":150,"content":"            children: ["},{"type":"INSERT","lineNumber":151,"content":"              _SettingsTile("},{"type":"INSERT","lineNumber":152,"content":"                title: 'Theme',"},{"type":"INSERT","lineNumber":153,"content":"                subtitle: _getThemeModeText(themeState.themeMode),"},{"type":"DELETE","lineNumber":155,"oldContent":"            children: ["},{"type":"MODIFY","lineNumber":169,"content":"          _SettingsSection(","oldContent":"          _SettingsSection("},{"type":"INSERT","lineNumber":174,"content":"                subtitle: const Text('Get reminders for your habits'),"},{"type":"DELETE","lineNumber":175,"oldContent":"                value: _notificationsEnabled,"},{"type":"DELETE","lineNumber":209,"oldContent":"                ),"},{"type":"DELETE","lineNumber":211,"oldContent":"          ),"},{"type":"DELETE","lineNumber":213,"oldContent":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":212,"content":"                ),"},{"type":"INSERT","lineNumber":213,"content":"            ],"},{"type":"INSERT","lineNumber":214,"content":"          ),"},{"type":"INSERT","lineNumber":215,"content":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":217,"oldContent":"            ],"},{"type":"INSERT","lineNumber":338,"content":"                      : null,"},{"type":"DELETE","lineNumber":340,"oldContent":"                      : null,"},{"type":"DELETE","lineNumber":351,"oldContent":"  }"},{"type":"INSERT","lineNumber":352,"content":"    );"},{"type":"INSERT","lineNumber":353,"content":"  }"},{"type":"DELETE","lineNumber":355,"oldContent":"    );"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"INSERT","lineNumber":381,"content":""},{"type":"DELETE","lineNumber":384,"oldContent":"      }"},{"type":"DELETE","lineNumber":385,"oldContent":"    } else {"},{"type":"DELETE","lineNumber":389,"oldContent":"    }"},{"type":"DELETE","lineNumber":391,"oldContent":"  }"},{"type":"DELETE","lineNumber":394,"oldContent":"  Future<void> _toggleHealthDataSync(bool value) async {"},{"type":"DELETE","lineNumber":396,"oldContent":"    if (value) {"},{"type":"INSERT","lineNumber":391,"content":"      }"},{"type":"INSERT","lineNumber":392,"content":"    } else {"},{"type":"INSERT","lineNumber":396,"content":"    }"},{"type":"INSERT","lineNumber":397,"content":"  }"},{"type":"INSERT","lineNumber":400,"content":"  Future<void> _toggleHealthDataSync(bool value) async {"},{"type":"INSERT","lineNumber":401,"content":"    if (value) {"},{"type":"DELETE","lineNumber":405,"oldContent":"        }"},{"type":"DELETE","lineNumber":407,"oldContent":"      }"},{"type":"DELETE","lineNumber":409,"oldContent":"    } else {"},{"type":"INSERT","lineNumber":408,"content":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":409,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":410,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":411,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":412,"content":"              content: Text('Health permissions are required for this feature'),"},{"type":"INSERT","lineNumber":413,"content":"              backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":414,"content":"            ),"},{"type":"INSERT","lineNumber":415,"content":"          );"},{"type":"INSERT","lineNumber":416,"content":"        }"},{"type":"INSERT","lineNumber":417,"content":"      }"},{"type":"INSERT","lineNumber":418,"content":"    } else {"},{"type":"DELETE","lineNumber":413,"oldContent":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":416,"oldContent":"        if (mounted) {"},{"type":"DELETE","lineNumber":418,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":421,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":423,"oldContent":"              content: Text('Health permissions are required for this feature'),"},{"type":"DELETE","lineNumber":426,"oldContent":"              backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":428,"oldContent":"            ),"},{"type":"DELETE","lineNumber":430,"oldContent":"          );"},{"type":"MODIFY","lineNumber":433,"content":"        id: 1000,","oldContent":"        id: 1000,"},{"type":"INSERT","lineNumber":545,"content":"              onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":546,"content":"              child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":547,"oldContent":"              onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":550,"oldContent":"              child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":552,"oldContent":"  void _showSnackBar(String message) {"},{"type":"DELETE","lineNumber":554,"oldContent":"    ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":557,"oldContent":"      SnackBar(content: Text(message)),"},{"type":"DELETE","lineNumber":560,"oldContent":"}"},{"type":"DELETE","lineNumber":563,"oldContent":""},{"type":"DELETE","lineNumber":565,"oldContent":"class _SettingsSection extends StatelessWidget {"},{"type":"DELETE","lineNumber":568,"oldContent":"  final String title;"},{"type":"DELETE","lineNumber":570,"oldContent":"  final List<Widget> children;"},{"type":"DELETE","lineNumber":573,"oldContent":""},{"type":"DELETE","lineNumber":575,"oldContent":"  const _SettingsSection({"},{"type":"DELETE","lineNumber":578,"oldContent":"    required this.children,"},{"type":"INSERT","lineNumber":570,"content":""},{"type":"INSERT","lineNumber":571,"content":"  void _showSnackBar(String message) {"},{"type":"INSERT","lineNumber":572,"content":"    ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":573,"content":"      SnackBar(content: Text(message)),"},{"type":"INSERT","lineNumber":574,"content":"    );"},{"type":"INSERT","lineNumber":575,"content":"  }"},{"type":"INSERT","lineNumber":576,"content":"}"},{"type":"INSERT","lineNumber":577,"content":""},{"type":"INSERT","lineNumber":578,"content":"class _SettingsSection extends StatelessWidget {"},{"type":"INSERT","lineNumber":579,"content":"  final String title;"},{"type":"INSERT","lineNumber":580,"content":"  final List<Widget> children;"},{"type":"INSERT","lineNumber":581,"content":""},{"type":"INSERT","lineNumber":582,"content":"  const _SettingsSection({"},{"type":"INSERT","lineNumber":583,"content":"    required this.title,"},{"type":"INSERT","lineNumber":584,"content":"    required this.children,"},{"type":"DELETE","lineNumber":586,"oldContent":"    );"},{"type":"DELETE","lineNumber":588,"oldContent":"  }"},{"type":"DELETE","lineNumber":595,"oldContent":"    required this.title,"},{"type":"DELETE","lineNumber":598,"oldContent":""},{"type":"INSERT","lineNumber":614,"content":"  final Widget? trailing;"},{"type":"INSERT","lineNumber":622,"content":"    this.trailing,"},{"type":"DELETE","lineNumber":634,"oldContent":"      trailing: const Icon(Icons.chevron_right),"},{"type":"INSERT","lineNumber":636,"content":"      trailing: trailing ?? const Icon(Icons.chevron_right),"}]},{"timestamp":1754440758796,"changes":[{"type":"INSERT","lineNumber":31,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":96,"oldContent":"  @override"},{"type":"MODIFY","lineNumber":98,"content":"    }","oldContent":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":99,"content":"  }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"  @override"},{"type":"INSERT","lineNumber":102,"content":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":102,"oldContent":"    }"},{"type":"DELETE","lineNumber":104,"oldContent":"  }"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"          const SizedBox(height: 24),"},{"type":"MODIFY","lineNumber":145,"content":"            ],","oldContent":"          _SettingsSection("},{"type":"INSERT","lineNumber":146,"content":"          ),"},{"type":"INSERT","lineNumber":147,"content":"          const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":148,"content":"          _SettingsSection("},{"type":"DELETE","lineNumber":149,"oldContent":"            ],"},{"type":"DELETE","lineNumber":152,"oldContent":"          ),"},{"type":"INSERT","lineNumber":168,"content":"          const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":169,"oldContent":"          _SettingsSection("},{"type":"DELETE","lineNumber":210,"oldContent":"                ),"},{"type":"INSERT","lineNumber":211,"content":"                  onTap: () => _manageHealthPermissions(),"},{"type":"INSERT","lineNumber":212,"content":"                ),"},{"type":"DELETE","lineNumber":214,"oldContent":"                  onTap: () => _manageHealthPermissions(),"},{"type":"MODIFY","lineNumber":352,"content":"    );","oldContent":"    );"},{"type":"MODIFY","lineNumber":381,"content":"","oldContent":""},{"type":"DELETE","lineNumber":388,"oldContent":"      }"},{"type":"DELETE","lineNumber":389,"oldContent":"    } else {"},{"type":"DELETE","lineNumber":393,"oldContent":"    }"},{"type":"DELETE","lineNumber":394,"oldContent":"  }"},{"type":"INSERT","lineNumber":391,"content":"      }"},{"type":"INSERT","lineNumber":392,"content":"    } else {"},{"type":"DELETE","lineNumber":398,"oldContent":"  Future<void> _toggleHealthDataSync(bool value) async {"},{"type":"INSERT","lineNumber":396,"content":"    }"},{"type":"INSERT","lineNumber":397,"content":"  }"},{"type":"MODIFY","lineNumber":400,"content":"  Future<void> _toggleHealthDataSync(bool value) async {","oldContent":"    if (value) {"},{"type":"INSERT","lineNumber":401,"content":"    if (value) {"},{"type":"DELETE","lineNumber":406,"oldContent":"      if (!hasPermissions) {"},{"type":"INSERT","lineNumber":407,"content":""},{"type":"INSERT","lineNumber":408,"content":"      if (!hasPermissions) {"},{"type":"DELETE","lineNumber":410,"oldContent":""},{"type":"DELETE","lineNumber":412,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":414,"oldContent":"        _healthDataSync = false;"},{"type":"DELETE","lineNumber":417,"oldContent":"      });"},{"type":"DELETE","lineNumber":419,"oldContent":"    }"},{"type":"DELETE","lineNumber":422,"oldContent":"  }"},{"type":"INSERT","lineNumber":419,"content":"      setState(() {"},{"type":"INSERT","lineNumber":420,"content":"        _healthDataSync = false;"},{"type":"INSERT","lineNumber":421,"content":"      });"},{"type":"INSERT","lineNumber":422,"content":"    }"},{"type":"INSERT","lineNumber":423,"content":"  }"},{"type":"INSERT","lineNumber":432,"content":"      await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":433,"oldContent":"        id: 1000,"},{"type":"MODIFY","lineNumber":547,"content":"            ),","oldContent":"            ),"},{"type":"INSERT","lineNumber":563,"content":"              child: const Text('Grant Permissions'),"},{"type":"INSERT","lineNumber":564,"content":"            ),"},{"type":"INSERT","lineNumber":565,"content":"          ],"},{"type":"INSERT","lineNumber":566,"content":"        );"},{"type":"INSERT","lineNumber":567,"content":"      },"},{"type":"INSERT","lineNumber":568,"content":"    );"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"DELETE","lineNumber":565,"oldContent":"              child: const Text('Grant Permissions'),"},{"type":"DELETE","lineNumber":567,"oldContent":"            ),"},{"type":"DELETE","lineNumber":570,"oldContent":"          ],"},{"type":"DELETE","lineNumber":573,"oldContent":"        );"},{"type":"DELETE","lineNumber":575,"oldContent":"      },"},{"type":"DELETE","lineNumber":578,"oldContent":"    );"},{"type":"DELETE","lineNumber":580,"oldContent":"  }"},{"type":"DELETE","lineNumber":582,"oldContent":"  });"},{"type":"DELETE","lineNumber":584,"oldContent":""},{"type":"DELETE","lineNumber":586,"oldContent":"  @override"},{"type":"INSERT","lineNumber":585,"content":"  });"},{"type":"INSERT","lineNumber":586,"content":""},{"type":"INSERT","lineNumber":587,"content":"  @override"},{"type":"MODIFY","lineNumber":623,"content":"    this.onTap,","oldContent":"    this.onTap,"},{"type":"MODIFY","lineNumber":637,"content":"      onTap: onTap,","oldContent":"      onTap: onTap,"}]}]},"H:/New/HabitV8/lib/data/database.dart":{"filePath":"H:/New/HabitV8/lib/data/database.dart","baseContent":"// A placeholder for the Hive database implementation.\n// This will be responsible for all the database operations.\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:hive_flutter/hive_flutter.dart';\nimport '../domain/model/habit.dart';\n\n// Provider for the Habit database box\nfinal databaseProvider = FutureProvider<Box<Habit>>((ref) async {\n  return await DatabaseService.getInstance();\n});\n\n// Provider for the HabitService\nfinal habitServiceProvider = Provider<HabitService>((ref) {\n  final habitBoxAsync = ref.watch(databaseProvider);\n  \n  return habitBoxAsync.when(\n    data: (habitBox) => HabitService(habitBox),\n    loading: () => throw const AsyncLoading<HabitService>(),\n    error: (error, stack) => throw error,\n  );\n});\n\nclass DatabaseService {\n  static Box<Habit>? _habitBox;\n\n  static Future<Box<Habit>> getInstance() async {\n    if (_habitBox != null) return _habitBox!;\n\n    await Hive.initFlutter();\n    Hive.registerAdapter(HabitAdapter());\n    Hive.registerAdapter(HabitFrequencyAdapter());\n\n    _habitBox = await Hive.openBox<Habit>('habits');\n    return _habitBox!;\n  }\n}\n\nclass HabitService {\n  final Box<Habit> _habitBox;\n\n  HabitService(this._habitBox);\n\n  Future<List<Habit>> getAllHabits() async {\n    return _habitBox.values.toList();\n  }\n\n  Future<void> addHabit(Habit habit) async {\n    await _habitBox.add(habit);\n  }\n\n  Future<void> updateHabit(Habit habit) async {\n    await habit.save();\n  }\n\n  Future<void> deleteHabit(Habit habit) async {\n    await habit.delete();\n  }\n\n  Stream<List<Habit>> watchAllHabits() {\n    return _habitBox.watch().map((_) => _habitBox.values.toList());\n  }\n}\n","baseTimestamp":1754379365703,"deltas":[{"timestamp":1754379377830,"changes":[{"type":"MODIFY","lineNumber":15,"content":"","oldContent":"  "}]},{"timestamp":1754379465081,"changes":[{"type":"MODIFY","lineNumber":15,"content":"  ","oldContent":""}]},{"timestamp":1754379497856,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"final habitServiceProvider = Provider<HabitService>((ref) {"},{"type":"DELETE","lineNumber":14,"oldContent":"  final habitBoxAsync = ref.watch(databaseProvider);"},{"type":"DELETE","lineNumber":15,"oldContent":"  "},{"type":"DELETE","lineNumber":16,"oldContent":"  return habitBoxAsync.when("},{"type":"DELETE","lineNumber":17,"oldContent":"    data: (habitBox) => HabitService(habitBox),"},{"type":"DELETE","lineNumber":18,"oldContent":"    loading: () => throw const AsyncLoading<HabitService>(),"},{"type":"DELETE","lineNumber":19,"oldContent":"    error: (error, stack) => throw error,"},{"type":"DELETE","lineNumber":20,"oldContent":"  );"},{"type":"INSERT","lineNumber":13,"content":"final habitServiceProvider = FutureProvider<HabitService>((ref) async {"},{"type":"INSERT","lineNumber":14,"content":"  final habitBox = await ref.watch(databaseProvider.future);"},{"type":"INSERT","lineNumber":15,"content":"  return HabitService(habitBox);"}]},{"timestamp":1754380879112,"changes":[{"type":"INSERT","lineNumber":54,"content":"  Future<Habit?> getHabitById(String id) async {"},{"type":"INSERT","lineNumber":55,"content":"    return _habitBox.values.firstWhere("},{"type":"INSERT","lineNumber":56,"content":"      (habit) => habit.key.toString() == id,"},{"type":"INSERT","lineNumber":57,"content":"      orElse: () => throw Exception('Habit not found'),"},{"type":"INSERT","lineNumber":58,"content":"    );"},{"type":"INSERT","lineNumber":59,"content":"  }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"  Future<void> clearAllHabits() async {"},{"type":"INSERT","lineNumber":62,"content":"    await _habitBox.clear();"},{"type":"INSERT","lineNumber":63,"content":"  }"},{"type":"INSERT","lineNumber":64,"content":""}]},{"timestamp":1754381429130,"changes":[{"type":"DELETE","lineNumber":55,"oldContent":"  Stream<List<Habit>> watchAllHabits() {"},{"type":"DELETE","lineNumber":57,"oldContent":"    return _habitBox.watch().map((_) => _habitBox.values.toList());"},{"type":"DELETE","lineNumber":59,"oldContent":"  }"},{"type":"DELETE","lineNumber":61,"oldContent":"}"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"  }"},{"type":"INSERT","lineNumber":63,"content":"  }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"  Stream<List<Habit>> watchAllHabits() {"},{"type":"INSERT","lineNumber":66,"content":"    return _habitBox.watch().map((_) => _habitBox.values.toList());"},{"type":"INSERT","lineNumber":67,"content":"  }"},{"type":"INSERT","lineNumber":68,"content":"}"},{"type":"INSERT","lineNumber":69,"content":""}]}]},"H:/New/HabitV8/lib/ui/screens/all_habits_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/all_habits_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:intl/intl.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\n\nclass AllHabitsScreen extends ConsumerStatefulWidget {\n  const AllHabitsScreen({super.key});\n\n  @override\n  ConsumerState<AllHabitsScreen> createState() => _AllHabitsScreenState();\n}\n\nclass _AllHabitsScreenState extends ConsumerState<AllHabitsScreen> {\n  String _selectedFilter = 'All';\n  String _selectedCategory = 'All';\n\n  final List<String> _categories = [\n    'All',\n    'Health',\n    'Fitness',\n    'Productivity',\n    'Learning',\n    'Personal',\n    'Social',\n    'Finance',\n    'Mindfulness',\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('All Habits'),\n        actions: [\n          PopupMenuButton<String>(\n            onSelected: (value) {\n              setState(() {\n                _selectedCategory = value;\n              });\n            },\n            itemBuilder: (BuildContext context) {\n              return _categories.map((String choice) {\n                return PopupMenuItem<String>(\n                  value: choice,\n                  child: Row(\n                    children: [\n                      if (choice == _selectedCategory) const Icon(Icons.check, size: 20),\n                      if (choice == _selectedCategory) const SizedBox(width: 8),\n                      Text(choice),\n                    ],\n                  ),\n                );\n              }).toList();\n            },\n            child: const Icon(Icons.filter_list),\n          ),\n        ],\n        bottom: PreferredSize(\n          preferredSize: const Size.fromHeight(60),\n          child: Padding(\n            padding: const EdgeInsets.all(16),\n            child: Row(\n              children: [\n                _FilterChip(\n                  label: 'All',\n                  isSelected: _selectedFilter == 'All',\n                  onSelected: () => setState(() => _selectedFilter = 'All'),\n                ),\n                const SizedBox(width: 8),\n                _FilterChip(\n                  label: 'Today',\n                  isSelected: _selectedFilter == 'Today',\n                  onSelected: () => setState(() => _selectedFilter = 'Today'),\n                ),\n                const SizedBox(width: 8),\n                _FilterChip(\n                  label: 'This Week',\n                  isSelected: _selectedFilter == 'This Week',\n                  onSelected: () => setState(() => _selectedFilter = 'This Week'),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n      body: Consumer(\n        builder: (context, ref, child) {\n          final habitServiceAsync = ref.watch(habitServiceProvider);\n          \n          return habitServiceAsync.when(\n            data: (habitService) => FutureBuilder<List<Habit>>(\n              future: habitService.getAllHabits(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (!snapshot.hasData || snapshot.data!.isEmpty) {\n                  return const Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.list_alt, size: 64, color: Colors.grey),\n                        SizedBox(height: 16),\n                        Text(\n                          'No habits yet',\n                          style: TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Create your first habit to get started!',\n                          style: TextStyle(color: Colors.grey),\n                        ),\n                      ],\n                    ),\n                  );\n                }\n\n                final allHabits = snapshot.data!;\n                final filteredHabits = _filterHabits(allHabits);\n\n                if (filteredHabits.isEmpty) {\n                  return Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.search_off, size: 64, color: Colors.grey),\n                        const SizedBox(height: 16),\n                        Text(\n                          'No habits found for \"$_selectedFilter\"',\n                          style: const TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        if (_selectedCategory != 'All') ...[\n                          const SizedBox(height: 8),\n                          Text(\n                            'in $_selectedCategory category',\n                            style: const TextStyle(color: Colors.grey),\n                          ),\n                        ],\n                      ],\n                    ),\n                  );\n                }\n\n                return ListView.builder(\n                  padding: const EdgeInsets.all(16),\n                  itemCount: filteredHabits.length,\n                  itemBuilder: (context, index) {\n                    final habit = filteredHabits[index];\n                    return _buildHabitCard(habit);\n                  },\n                );\n              },\n            ),\n            loading: () => const Center(child: CircularProgressIndicator()),\n            error: (error, stack) => Center(\n              child: Text('Error: $error'),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  List<Habit> _filterHabits(List<Habit> habits) {\n    List<Habit> filtered = habits;\n\n    // Filter by category\n    if (_selectedCategory != 'All') {\n      filtered = filtered.where((habit) => habit.category == _selectedCategory).toList();\n    }\n\n    // Filter by time period\n    switch (_selectedFilter) {\n      case 'Today':\n        filtered = filtered.where((habit) => _isHabitDueToday(habit)).toList();\n        break;\n      case 'This Week':\n        filtered = filtered.where((habit) => _isHabitDueThisWeek(habit)).toList();\n        break;\n      case 'All':\n      default:\n        // No additional filtering needed\n        break;\n    }\n\n    return filtered;\n  }\n\n  bool _isHabitDueToday(Habit habit) {\n    final today = DateTime.now();\n    return _isHabitDueOnDate(habit, today);\n  }\n\n  bool _isHabitDueThisWeek(Habit habit) {\n    final now = DateTime.now();\n    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));\n    final endOfWeek = startOfWeek.add(const Duration(days: 6));\n\n    for (int i = 0; i <= 6; i++) {\n      final day = startOfWeek.add(Duration(days: i));\n      if (_isHabitDueOnDate(habit, day)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  bool _isHabitDueOnDate(Habit habit, DateTime date) {\n    switch (habit.frequency) {\n      case HabitFrequency.hourly:\n      case HabitFrequency.daily:\n        return true;\n      case HabitFrequency.weekly:\n        final weekday = date.weekday;\n        return habit.weeklySchedule.contains(weekday);\n      case HabitFrequency.monthly:\n        final day = date.day;\n        return habit.monthlySchedule.contains(day);\n      case HabitFrequency.yearly:\n        final today = DateTime.now();\n        return date.month == today.month && date.day == today.day;\n    }\n  }\n\n  Widget _buildHabitCard(Habit habit) {\n    final isCompletedToday = _isHabitCompletedToday(habit);\n    final completionRate = _calculateCompletionRate(habit);\n    final streakInfo = _getStreakInfo(habit);\n\n    return Card(\n      margin: const EdgeInsets.only(bottom: 12),\n      child: InkWell(\n        onTap: () => _showHabitDetails(habit),\n        borderRadius: BorderRadius.circular(12),\n        child: Padding(\n          padding: const EdgeInsets.all(16),\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  Container(\n                    width: 4,\n                    height: 50,\n                    decoration: BoxDecoration(\n                      color: Color(habit.colorValue),\n                      borderRadius: BorderRadius.circular(2),\n                    ),\n                  ),\n                  const SizedBox(width: 16),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          habit.name,\n                          style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                        if (habit.description != null) ...[\n                          const SizedBox(height: 4),\n                          Text(\n                            habit.description!,\n                            style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                            maxLines: 1,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                        ],\n                        const SizedBox(height: 8),\n                        Row(\n                          children: [\n                            Container(\n                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                              decoration: BoxDecoration(\n                                color: Color(habit.colorValue).withOpacity(0.1),\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                              child: Text(\n                                habit.category,\n                                style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                                  color: Color(habit.colorValue),\n                                  fontWeight: FontWeight.w500,\n                                ),\n                              ),\n                            ),\n                            const SizedBox(width: 8),\n                            Container(\n                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                              decoration: BoxDecoration(\n                                color: Colors.grey.shade100,\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                              child: Text(\n                                _getFrequencyDisplayName(habit.frequency),\n                                style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                                  color: Colors.grey[700],\n                                  fontWeight: FontWeight.w500,\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(width: 16),\n                  Column(\n                    children: [\n                      Container(\n                        width: 40,\n                        height: 40,\n                        decoration: BoxDecoration(\n                          color: isCompletedToday ? Colors.green : Colors.grey.shade200,\n                          borderRadius: BorderRadius.circular(20),\n                          border: Border.all(\n                            color: isCompletedToday ? Colors.green : Colors.grey.shade400,\n                            width: 2,\n                          ),\n                        ),\n                        child: Icon(\n                          isCompletedToday ? Icons.check : Icons.circle_outlined,\n                          color: isCompletedToday ? Colors.white : Colors.grey.shade600,\n                          size: 20,\n                        ),\n                      ),\n                      const SizedBox(height: 4),\n                      Text(\n                        'Today',\n                        style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                          fontSize: 10,\n                          color: Colors.grey[600],\n                        ),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n              const SizedBox(height: 16),\n              Row(\n                children: [\n                  Expanded(\n                    child: _StatCard(\n                      label: 'Completion Rate',\n                      value: '${(completionRate * 100).toInt()}%',\n                      color: _getCompletionRateColor(completionRate),\n                    ),\n                  ),\n                  const SizedBox(width: 12),\n                  Expanded(\n                    child: _StatCard(\n                      label: 'Current Streak',\n                      value: '${streakInfo['current']} days',\n                      color: Colors.orange,\n                    ),\n                  ),\n                  const SizedBox(width: 12),\n                  Expanded(\n                    child: _StatCard(\n                      label: 'Best Streak',\n                      value: '${streakInfo['best']} days',\n                      color: Colors.purple,\n                    ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  String _getFrequencyDisplayName(HabitFrequency frequency) {\n    switch (frequency) {\n      case HabitFrequency.hourly:\n        return 'Hourly';\n      case HabitFrequency.daily:\n        return 'Daily';\n      case HabitFrequency.weekly:\n        return 'Weekly';\n      case HabitFrequency.monthly:\n        return 'Monthly';\n      case HabitFrequency.yearly:\n        return 'Yearly';\n    }\n  }\n\n  bool _isHabitCompletedToday(Habit habit) {\n    final today = DateTime.now();\n    final todayOnly = DateTime(today.year, today.month, today.day);\n\n    return habit.completions.any((completion) {\n      final completionDate = DateTime(completion.year, completion.month, completion.day);\n      return completionDate == todayOnly;\n    });\n  }\n\n  double _calculateCompletionRate(Habit habit) {\n    if (habit.completions.isEmpty) return 0.0;\n\n    final daysSinceCreation = DateTime.now().difference(habit.createdAt).inDays + 1;\n    final expectedCompletions = _getExpectedCompletions(habit, daysSinceCreation);\n\n    if (expectedCompletions == 0) return 0.0;\n\n    return (habit.completions.length / expectedCompletions).clamp(0.0, 1.0);\n  }\n\n  int _getExpectedCompletions(Habit habit, int daysSinceCreation) {\n    switch (habit.frequency) {\n      case HabitFrequency.hourly:\n        return daysSinceCreation * 24; // Simplified\n      case HabitFrequency.daily:\n        return daysSinceCreation;\n      case HabitFrequency.weekly:\n        return (daysSinceCreation / 7).ceil() * habit.weeklySchedule.length;\n      case HabitFrequency.monthly:\n        return (daysSinceCreation / 30).ceil() * habit.monthlySchedule.length;\n      case HabitFrequency.yearly:\n        return (daysSinceCreation / 365).ceil();\n    }\n  }\n\n  Map<String, int> _getStreakInfo(Habit habit) {\n    // Calculate current and best streak\n    int currentStreak = 0;\n    int bestStreak = 0;\n    int tempStreak = 0;\n\n    final sortedCompletions = habit.completions.toList()\n      ..sort((a, b) => b.compareTo(a)); // Sort descending\n\n    final today = DateTime.now();\n    final yesterday = today.subtract(const Duration(days: 1));\n\n    // Check if completed today or yesterday for current streak\n    bool hasRecentCompletion = sortedCompletions.any((completion) {\n      final completionDate = DateTime(completion.year, completion.month, completion.day);\n      final todayDate = DateTime(today.year, today.month, today.day);\n      final yesterdayDate = DateTime(yesterday.year, yesterday.month, yesterday.day);\n      return completionDate == todayDate || completionDate == yesterdayDate;\n    });\n\n    if (hasRecentCompletion) {\n      // Calculate current streak\n      DateTime checkDate = DateTime(today.year, today.month, today.day);\n      while (true) {\n        if (sortedCompletions.any((completion) {\n          final completionDate = DateTime(completion.year, completion.month, completion.day);\n          return completionDate == checkDate;\n        })) {\n          currentStreak++;\n          checkDate = checkDate.subtract(const Duration(days: 1));\n        } else {\n          break;\n        }\n      }\n    }\n\n    // Calculate best streak\n    for (final completion in sortedCompletions) {\n      tempStreak++;\n      bestStreak = tempStreak > bestStreak ? tempStreak : bestStreak;\n\n      // Reset if there's a gap (simplified logic)\n      final nextDay = completion.add(const Duration(days: 1));\n      if (!sortedCompletions.any((c) =>\n          DateTime(c.year, c.month, c.day) == DateTime(nextDay.year, nextDay.month, nextDay.day))) {\n        tempStreak = 0;\n      }\n    }\n\n    return {\n      'current': currentStreak,\n      'best': bestStreak,\n    };\n  }\n\n  Color _getCompletionRateColor(double rate) {\n    if (rate >= 0.8) return Colors.green;\n    if (rate >= 0.6) return Colors.orange;\n    return Colors.red;\n  }\n\n  void _showHabitDetails(Habit habit) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: Text(habit.name),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            if (habit.description != null) ...[\n              Text(habit.description!),\n              const SizedBox(height: 16),\n            ],\n            Text('Category: ${habit.category}'),\n            Text('Frequency: ${_getFrequencyDisplayName(habit.frequency)}'),\n            Text('Created: ${DateFormat('MMM dd, yyyy').format(habit.createdAt)}'),\n            Text('Total completions: ${habit.completions.length}'),\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(),\n            child: const Text('Close'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _FilterChip extends StatelessWidget {\n  final String label;\n  final bool isSelected;\n  final VoidCallback onSelected;\n\n  const _FilterChip({\n    required this.label,\n    required this.isSelected,\n    required this.onSelected,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return FilterChip(\n      label: Text(label),\n      selected: isSelected,\n      onSelected: (_) => onSelected(),\n      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),\n      checkmarkColor: Theme.of(context).primaryColor,\n    );\n  }\n}\n\nclass _StatCard extends StatelessWidget {\n  final String label;\n  final String value;\n  final Color color;\n\n  const _StatCard({\n    required this.label,\n    required this.value,\n    required this.color,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),\n      decoration: BoxDecoration(\n        color: color.withOpacity(0.1),\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Column(\n        children: [\n          Text(\n            value,\n            style: Theme.of(context).textTheme.titleSmall?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: color,\n            ),\n          ),\n          const SizedBox(height: 2),\n          Text(\n            label,\n            style: Theme.of(context).textTheme.bodySmall?.copyWith(\n              color: Colors.grey[600],\n              fontSize: 10,\n            ),\n            textAlign: TextAlign.center,\n          ),\n        ],\n      ),\n    );\n  }\n}\n","baseTimestamp":1754379518395,"deltas":[{"timestamp":1754379527015,"changes":[{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"          "}]},{"timestamp":1754379783432,"changes":[{"type":"MODIFY","lineNumber":89,"content":"          ","oldContent":""}]},{"timestamp":1754379844410,"changes":[{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"          "}]},{"timestamp":1754380827098,"changes":[{"type":"INSERT","lineNumber":5,"content":"import 'edit_habit_screen.dart';"},{"type":"INSERT","lineNumber":513,"content":"          TextButton("},{"type":"INSERT","lineNumber":514,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":515,"content":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":516,"content":"              _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":517,"content":"            },"},{"type":"INSERT","lineNumber":518,"content":"            child: const Text('Edit'),"},{"type":"INSERT","lineNumber":519,"content":"          ),"},{"type":"INSERT","lineNumber":524,"content":""},{"type":"INSERT","lineNumber":525,"content":"  void _navigateToEditHabit(Habit habit) {"},{"type":"INSERT","lineNumber":526,"content":"    Navigator.of(context).push("},{"type":"INSERT","lineNumber":527,"content":"      MaterialPageRoute("},{"type":"INSERT","lineNumber":528,"content":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"INSERT","lineNumber":529,"content":"      ),"},{"type":"INSERT","lineNumber":530,"content":"    );"},{"type":"INSERT","lineNumber":531,"content":"  }"}]},{"timestamp":1754380861999,"changes":[{"type":"INSERT","lineNumber":236,"content":"        onLongPress: () => _navigateToEditHabit(habit),"},{"type":"INSERT","lineNumber":341,"content":"                  const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":342,"content":"                  PopupMenuButton<String>("},{"type":"INSERT","lineNumber":343,"content":"                    onSelected: (value) {"},{"type":"INSERT","lineNumber":344,"content":"                      switch (value) {"},{"type":"INSERT","lineNumber":345,"content":"                        case 'edit':"},{"type":"INSERT","lineNumber":346,"content":"                          _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":347,"content":"                          break;"},{"type":"INSERT","lineNumber":348,"content":"                        case 'details':"},{"type":"INSERT","lineNumber":349,"content":"                          _showHabitDetails(habit);"},{"type":"INSERT","lineNumber":350,"content":"                          break;"},{"type":"INSERT","lineNumber":351,"content":"                        case 'delete':"},{"type":"INSERT","lineNumber":352,"content":"                          _showDeleteConfirmation(habit);"},{"type":"INSERT","lineNumber":353,"content":"                          break;"},{"type":"INSERT","lineNumber":354,"content":"                      }"},{"type":"INSERT","lineNumber":355,"content":"                    },"},{"type":"INSERT","lineNumber":356,"content":"                    itemBuilder: (BuildContext context) => ["},{"type":"INSERT","lineNumber":357,"content":"                      const PopupMenuItem<String>("},{"type":"INSERT","lineNumber":358,"content":"                        value: 'edit',"},{"type":"INSERT","lineNumber":359,"content":"                        child: Row("},{"type":"INSERT","lineNumber":360,"content":"                          children: ["},{"type":"INSERT","lineNumber":361,"content":"                            Icon(Icons.edit, size: 20),"},{"type":"INSERT","lineNumber":362,"content":"                            SizedBox(width: 8),"},{"type":"INSERT","lineNumber":363,"content":"                            Text('Edit'),"},{"type":"INSERT","lineNumber":364,"content":"                          ],"},{"type":"INSERT","lineNumber":365,"content":"                        ),"},{"type":"INSERT","lineNumber":366,"content":"                      ),"},{"type":"INSERT","lineNumber":367,"content":"                      const PopupMenuItem<String>("},{"type":"INSERT","lineNumber":368,"content":"                        value: 'details',"},{"type":"INSERT","lineNumber":369,"content":"                        child: Row("},{"type":"INSERT","lineNumber":370,"content":"                          children: ["},{"type":"INSERT","lineNumber":371,"content":"                            Icon(Icons.info, size: 20),"},{"type":"INSERT","lineNumber":372,"content":"                            SizedBox(width: 8),"},{"type":"INSERT","lineNumber":373,"content":"                            Text('Details'),"},{"type":"INSERT","lineNumber":374,"content":"                          ],"},{"type":"INSERT","lineNumber":375,"content":"                        ),"},{"type":"INSERT","lineNumber":376,"content":"                      ),"},{"type":"INSERT","lineNumber":377,"content":"                      const PopupMenuItem<String>("},{"type":"INSERT","lineNumber":378,"content":"                        value: 'delete',"},{"type":"INSERT","lineNumber":379,"content":"                        child: Row("},{"type":"INSERT","lineNumber":380,"content":"                          children: ["},{"type":"INSERT","lineNumber":381,"content":"                            Icon(Icons.delete, size: 20, color: Colors.red),"},{"type":"INSERT","lineNumber":382,"content":"                            SizedBox(width: 8),"},{"type":"INSERT","lineNumber":383,"content":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":384,"content":"                          ],"},{"type":"INSERT","lineNumber":385,"content":"                        ),"},{"type":"INSERT","lineNumber":386,"content":"                      ),"},{"type":"INSERT","lineNumber":387,"content":"                    ],"},{"type":"INSERT","lineNumber":388,"content":"                    child: Icon("},{"type":"INSERT","lineNumber":389,"content":"                      Icons.more_vert,"},{"type":"INSERT","lineNumber":390,"content":"                      color: Colors.grey[600],"},{"type":"INSERT","lineNumber":391,"content":"                    ),"},{"type":"INSERT","lineNumber":392,"content":"                  ),"},{"type":"DELETE","lineNumber":513,"oldContent":"        ],"},{"type":"DELETE","lineNumber":515,"oldContent":"      ),"},{"type":"INSERT","lineNumber":568,"content":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":569,"content":"              _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":570,"content":"            },"},{"type":"INSERT","lineNumber":571,"content":"            child: const Text('Edit'),"},{"type":"INSERT","lineNumber":572,"content":"          ),"},{"type":"INSERT","lineNumber":573,"content":"        ],"},{"type":"INSERT","lineNumber":574,"content":"      ),"},{"type":"INSERT","lineNumber":576,"content":"  }"},{"type":"INSERT","lineNumber":577,"content":""},{"type":"INSERT","lineNumber":578,"content":"  void _navigateToEditHabit(Habit habit) {"},{"type":"INSERT","lineNumber":579,"content":"    Navigator.of(context).push("},{"type":"INSERT","lineNumber":580,"content":"      MaterialPageRoute("},{"type":"INSERT","lineNumber":581,"content":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"INSERT","lineNumber":582,"content":"      ),"},{"type":"INSERT","lineNumber":583,"content":"    );"},{"type":"INSERT","lineNumber":584,"content":"  }"},{"type":"INSERT","lineNumber":585,"content":""},{"type":"INSERT","lineNumber":586,"content":"  void _showDeleteConfirmation(Habit habit) {"},{"type":"INSERT","lineNumber":587,"content":"    showDialog("},{"type":"INSERT","lineNumber":588,"content":"      context: context,"},{"type":"INSERT","lineNumber":589,"content":"      builder: (context) => AlertDialog("},{"type":"INSERT","lineNumber":590,"content":"        title: const Text('Confirm Deletion'),"},{"type":"INSERT","lineNumber":591,"content":"        content: const Text('Are you sure you want to delete this habit?'),"},{"type":"INSERT","lineNumber":592,"content":"        actions: ["},{"type":"INSERT","lineNumber":593,"content":"          TextButton("},{"type":"INSERT","lineNumber":594,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":595,"content":"            child: const Text('Cancel'),"},{"type":"INSERT","lineNumber":596,"content":"          ),"},{"type":"INSERT","lineNumber":597,"content":"          TextButton("},{"type":"INSERT","lineNumber":598,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":600,"content":"              _deleteHabit(habit);"},{"type":"INSERT","lineNumber":601,"content":"            },"},{"type":"INSERT","lineNumber":602,"content":"            child: const Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":603,"content":"          ),"},{"type":"INSERT","lineNumber":604,"content":"        ],"},{"type":"INSERT","lineNumber":605,"content":"      ),"},{"type":"INSERT","lineNumber":606,"content":"    );"},{"type":"DELETE","lineNumber":520,"oldContent":"              _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":608,"content":""},{"type":"INSERT","lineNumber":609,"content":"  void _deleteHabit(Habit habit) {"},{"type":"INSERT","lineNumber":610,"content":"    // Implement habit deletion logic"},{"type":"INSERT","lineNumber":611,"content":"    // For example, call the delete method from the habit service"},{"type":"INSERT","lineNumber":612,"content":"    final habitService = ref.read(habitServiceProvider.notifier);"},{"type":"INSERT","lineNumber":613,"content":"    habitService.deleteHabit(habit.id);"},{"type":"INSERT","lineNumber":614,"content":"  }"},{"type":"DELETE","lineNumber":522,"oldContent":"            },"},{"type":"DELETE","lineNumber":524,"oldContent":"            child: const Text('Edit'),"},{"type":"DELETE","lineNumber":526,"oldContent":"          ),"},{"type":"DELETE","lineNumber":532,"oldContent":""},{"type":"DELETE","lineNumber":534,"oldContent":"  void _navigateToEditHabit(Habit habit) {"},{"type":"DELETE","lineNumber":536,"oldContent":"    Navigator.of(context).push("},{"type":"DELETE","lineNumber":538,"oldContent":"      MaterialPageRoute("},{"type":"DELETE","lineNumber":540,"oldContent":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"DELETE","lineNumber":542,"oldContent":"      ),"},{"type":"DELETE","lineNumber":544,"oldContent":"    );"},{"type":"DELETE","lineNumber":546,"oldContent":"  }"}]},{"timestamp":1754380902617,"changes":[{"type":"DELETE","lineNumber":341,"oldContent":"                ],"},{"type":"DELETE","lineNumber":343,"oldContent":"              ),"},{"type":"DELETE","lineNumber":345,"oldContent":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":347,"oldContent":"              Row("},{"type":"DELETE","lineNumber":349,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":351,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":353,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":355,"oldContent":"                      label: 'Completion Rate',"},{"type":"DELETE","lineNumber":357,"oldContent":"                      value: '${(completionRate * 100).toInt()}%',"},{"type":"DELETE","lineNumber":359,"oldContent":"                      color: _getCompletionRateColor(completionRate),"},{"type":"DELETE","lineNumber":361,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":363,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":365,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":367,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":369,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":371,"oldContent":"                      label: 'Current Streak',"},{"type":"DELETE","lineNumber":373,"oldContent":"                      value: '${streakInfo['current']} days',"},{"type":"DELETE","lineNumber":375,"oldContent":"                      color: Colors.orange,"},{"type":"DELETE","lineNumber":377,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":379,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":381,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":383,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":385,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":387,"oldContent":"                      label: 'Best Streak',"},{"type":"DELETE","lineNumber":389,"oldContent":"                      value: '${streakInfo['best']} days',"},{"type":"DELETE","lineNumber":391,"oldContent":"                      color: Colors.purple,"},{"type":"DELETE","lineNumber":393,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":395,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":397,"oldContent":"                ],"},{"type":"DELETE","lineNumber":399,"oldContent":"              ),"},{"type":"DELETE","lineNumber":401,"oldContent":"            ],"},{"type":"DELETE","lineNumber":403,"oldContent":"          ),"},{"type":"DELETE","lineNumber":405,"oldContent":"        ),"},{"type":"DELETE","lineNumber":407,"oldContent":"      ),"},{"type":"DELETE","lineNumber":409,"oldContent":"    );"},{"type":"DELETE","lineNumber":411,"oldContent":"  }"},{"type":"DELETE","lineNumber":413,"oldContent":""},{"type":"DELETE","lineNumber":415,"oldContent":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"DELETE","lineNumber":417,"oldContent":"    switch (frequency) {"},{"type":"DELETE","lineNumber":419,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":421,"oldContent":"        return 'Hourly';"},{"type":"DELETE","lineNumber":423,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":425,"oldContent":"        return 'Daily';"},{"type":"DELETE","lineNumber":427,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":429,"oldContent":"        return 'Weekly';"},{"type":"DELETE","lineNumber":431,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":433,"oldContent":"        return 'Monthly';"},{"type":"DELETE","lineNumber":435,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":437,"oldContent":"        return 'Yearly';"},{"type":"DELETE","lineNumber":439,"oldContent":"    }"},{"type":"DELETE","lineNumber":441,"oldContent":"  }"},{"type":"DELETE","lineNumber":443,"oldContent":""},{"type":"INSERT","lineNumber":393,"content":"                ],"},{"type":"INSERT","lineNumber":394,"content":"              ),"},{"type":"INSERT","lineNumber":395,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":396,"content":"              Row("},{"type":"INSERT","lineNumber":397,"content":"                children: ["},{"type":"INSERT","lineNumber":398,"content":"                  Expanded("},{"type":"INSERT","lineNumber":399,"content":"                    child: _StatCard("},{"type":"INSERT","lineNumber":400,"content":"                      label: 'Completion Rate',"},{"type":"INSERT","lineNumber":401,"content":"                      value: '${(completionRate * 100).toInt()}%',"},{"type":"INSERT","lineNumber":402,"content":"                      color: _getCompletionRateColor(completionRate),"},{"type":"INSERT","lineNumber":403,"content":"                    ),"},{"type":"INSERT","lineNumber":404,"content":"                  ),"},{"type":"INSERT","lineNumber":405,"content":"                  const SizedBox(width: 12),"},{"type":"INSERT","lineNumber":406,"content":"                  Expanded("},{"type":"INSERT","lineNumber":407,"content":"                    child: _StatCard("},{"type":"INSERT","lineNumber":408,"content":"                      label: 'Current Streak',"},{"type":"INSERT","lineNumber":409,"content":"                      value: '${streakInfo['current']} days',"},{"type":"INSERT","lineNumber":410,"content":"                      color: Colors.orange,"},{"type":"INSERT","lineNumber":411,"content":"                    ),"},{"type":"INSERT","lineNumber":412,"content":"                  ),"},{"type":"INSERT","lineNumber":413,"content":"                  const SizedBox(width: 12),"},{"type":"INSERT","lineNumber":414,"content":"                  Expanded("},{"type":"INSERT","lineNumber":415,"content":"                    child: _StatCard("},{"type":"INSERT","lineNumber":416,"content":"                      label: 'Best Streak',"},{"type":"INSERT","lineNumber":417,"content":"                      value: '${streakInfo['best']} days',"},{"type":"INSERT","lineNumber":418,"content":"                      color: Colors.purple,"},{"type":"INSERT","lineNumber":419,"content":"                    ),"},{"type":"INSERT","lineNumber":420,"content":"                  ),"},{"type":"INSERT","lineNumber":421,"content":"                ],"},{"type":"INSERT","lineNumber":422,"content":"              ),"},{"type":"INSERT","lineNumber":423,"content":"            ],"},{"type":"INSERT","lineNumber":424,"content":"          ),"},{"type":"INSERT","lineNumber":425,"content":"        ),"},{"type":"INSERT","lineNumber":426,"content":"      ),"},{"type":"INSERT","lineNumber":427,"content":"    );"},{"type":"INSERT","lineNumber":428,"content":"  }"},{"type":"INSERT","lineNumber":429,"content":""},{"type":"INSERT","lineNumber":430,"content":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"INSERT","lineNumber":431,"content":"    switch (frequency) {"},{"type":"INSERT","lineNumber":432,"content":"      case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":433,"content":"        return 'Hourly';"},{"type":"INSERT","lineNumber":434,"content":"      case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":435,"content":"        return 'Daily';"},{"type":"INSERT","lineNumber":436,"content":"      case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":437,"content":"        return 'Weekly';"},{"type":"INSERT","lineNumber":438,"content":"      case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":439,"content":"        return 'Monthly';"},{"type":"INSERT","lineNumber":440,"content":"      case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":441,"content":"        return 'Yearly';"},{"type":"INSERT","lineNumber":442,"content":"    }"},{"type":"INSERT","lineNumber":443,"content":"  }"},{"type":"INSERT","lineNumber":444,"content":""},{"type":"INSERT","lineNumber":568,"content":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":569,"content":"              _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":570,"content":"            },"},{"type":"INSERT","lineNumber":571,"content":"            child: const Text('Edit'),"},{"type":"INSERT","lineNumber":572,"content":"          ),"},{"type":"INSERT","lineNumber":573,"content":"        ],"},{"type":"INSERT","lineNumber":574,"content":"      ),"},{"type":"INSERT","lineNumber":576,"content":"  }"},{"type":"INSERT","lineNumber":577,"content":""},{"type":"INSERT","lineNumber":578,"content":"  void _navigateToEditHabit(Habit habit) {"},{"type":"INSERT","lineNumber":579,"content":"    Navigator.of(context).push("},{"type":"INSERT","lineNumber":580,"content":"      MaterialPageRoute("},{"type":"INSERT","lineNumber":581,"content":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"INSERT","lineNumber":582,"content":"      ),"},{"type":"INSERT","lineNumber":583,"content":"    );"},{"type":"INSERT","lineNumber":584,"content":"  }"},{"type":"INSERT","lineNumber":585,"content":""},{"type":"INSERT","lineNumber":586,"content":"  void _showDeleteConfirmation(Habit habit) {"},{"type":"INSERT","lineNumber":587,"content":"    showDialog("},{"type":"INSERT","lineNumber":588,"content":"      context: context,"},{"type":"INSERT","lineNumber":589,"content":"      builder: (context) => AlertDialog("},{"type":"INSERT","lineNumber":590,"content":"        title: const Text('Confirm Deletion'),"},{"type":"INSERT","lineNumber":591,"content":"        content: const Text('Are you sure you want to delete this habit?'),"},{"type":"INSERT","lineNumber":592,"content":"        actions: ["},{"type":"INSERT","lineNumber":593,"content":"          TextButton("},{"type":"INSERT","lineNumber":594,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":595,"content":"            child: const Text('Cancel'),"},{"type":"INSERT","lineNumber":596,"content":"          ),"},{"type":"INSERT","lineNumber":597,"content":"          TextButton("},{"type":"INSERT","lineNumber":598,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":600,"content":"              _deleteHabit(habit);"},{"type":"INSERT","lineNumber":601,"content":"            },"},{"type":"INSERT","lineNumber":602,"content":"            child: const Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":603,"content":"          ),"},{"type":"INSERT","lineNumber":604,"content":"        ],"},{"type":"INSERT","lineNumber":605,"content":"      ),"},{"type":"INSERT","lineNumber":606,"content":"    );"},{"type":"INSERT","lineNumber":608,"content":""},{"type":"INSERT","lineNumber":609,"content":"  void _deleteHabit(Habit habit) async {"},{"type":"INSERT","lineNumber":610,"content":"    try {"},{"type":"INSERT","lineNumber":611,"content":"      // Cancel existing notifications before deleting"},{"type":"INSERT","lineNumber":612,"content":"      await _cancelHabitNotifications(habit);"},{"type":"INSERT","lineNumber":613,"content":"      "},{"type":"INSERT","lineNumber":614,"content":"      // Delete the habit from the database"},{"type":"INSERT","lineNumber":615,"content":"      await habit.delete();"},{"type":"INSERT","lineNumber":616,"content":"      "},{"type":"INSERT","lineNumber":617,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":618,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":619,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":620,"content":"            content: Text('Habit deleted successfully'),"},{"type":"INSERT","lineNumber":621,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":622,"content":"          ),"},{"type":"INSERT","lineNumber":623,"content":"        );"},{"type":"INSERT","lineNumber":624,"content":"        // Refresh the screen by calling setState"},{"type":"INSERT","lineNumber":625,"content":"        setState(() {});"},{"type":"INSERT","lineNumber":626,"content":"      }"},{"type":"INSERT","lineNumber":627,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":628,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":629,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":630,"content":"          SnackBar("},{"type":"INSERT","lineNumber":631,"content":"            content: Text('Error deleting habit: $e'),"},{"type":"INSERT","lineNumber":632,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":633,"content":"          ),"},{"type":"INSERT","lineNumber":634,"content":"        );"},{"type":"INSERT","lineNumber":635,"content":"      }"},{"type":"INSERT","lineNumber":636,"content":"    }"},{"type":"INSERT","lineNumber":637,"content":"  }"},{"type":"INSERT","lineNumber":638,"content":""},{"type":"INSERT","lineNumber":639,"content":"  /// Cancel all notifications for a habit before deletion"},{"type":"INSERT","lineNumber":640,"content":"  Future<void> _cancelHabitNotifications(Habit habit) async {"},{"type":"INSERT","lineNumber":641,"content":"    if (!habit.notificationsEnabled) {"},{"type":"INSERT","lineNumber":642,"content":"      return;"},{"type":"INSERT","lineNumber":643,"content":"    }"},{"type":"INSERT","lineNumber":644,"content":""},{"type":"INSERT","lineNumber":645,"content":"    try {"},{"type":"INSERT","lineNumber":646,"content":"      switch (habit.frequency) {"},{"type":"INSERT","lineNumber":647,"content":"        case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":648,"content":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"INSERT","lineNumber":649,"content":"          break;"},{"type":"INSERT","lineNumber":650,"content":""},{"type":"INSERT","lineNumber":651,"content":"        case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":652,"content":"          for (int weekday in habit.weeklySchedule) {"},{"type":"INSERT","lineNumber":653,"content":"            await NotificationService.cancelNotification(habit.hashCode + weekday);"},{"type":"INSERT","lineNumber":654,"content":"          }"},{"type":"INSERT","lineNumber":655,"content":"          break;"},{"type":"INSERT","lineNumber":656,"content":""},{"type":"INSERT","lineNumber":657,"content":"        case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":658,"content":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"INSERT","lineNumber":659,"content":"            await NotificationService.cancelNotification(habit.hashCode + monthDay + 1000);"},{"type":"INSERT","lineNumber":660,"content":"          }"},{"type":"INSERT","lineNumber":661,"content":"          break;"},{"type":"INSERT","lineNumber":662,"content":""},{"type":"INSERT","lineNumber":663,"content":"        case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":664,"content":"          for (int i = 1; i <= 24; i++) {"},{"type":"INSERT","lineNumber":665,"content":"            await NotificationService.cancelNotification(habit.hashCode + i + 2000);"},{"type":"INSERT","lineNumber":666,"content":"          }"},{"type":"INSERT","lineNumber":667,"content":"          break;"},{"type":"INSERT","lineNumber":668,"content":""},{"type":"INSERT","lineNumber":669,"content":"        case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":670,"content":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"INSERT","lineNumber":671,"content":"          break;"},{"type":"INSERT","lineNumber":672,"content":"      }"},{"type":"INSERT","lineNumber":673,"content":"      print('Cancelled notifications for deleted habit: ${habit.name}');"},{"type":"INSERT","lineNumber":674,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":675,"content":"      print('Error cancelling notifications for deleted habit: $e');"},{"type":"INSERT","lineNumber":676,"content":"    }"},{"type":"INSERT","lineNumber":677,"content":"  }"},{"type":"DELETE","lineNumber":607,"oldContent":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":609,"oldContent":"              _navigateToEditHabit(habit);"},{"type":"DELETE","lineNumber":611,"oldContent":"            },"},{"type":"DELETE","lineNumber":613,"oldContent":"            child: const Text('Edit'),"},{"type":"DELETE","lineNumber":615,"oldContent":"          ),"},{"type":"DELETE","lineNumber":617,"oldContent":"        ],"},{"type":"DELETE","lineNumber":619,"oldContent":"      ),"},{"type":"DELETE","lineNumber":622,"oldContent":"  }"},{"type":"DELETE","lineNumber":624,"oldContent":""},{"type":"DELETE","lineNumber":626,"oldContent":"  void _navigateToEditHabit(Habit habit) {"},{"type":"DELETE","lineNumber":628,"oldContent":"    Navigator.of(context).push("},{"type":"DELETE","lineNumber":630,"oldContent":"      MaterialPageRoute("},{"type":"DELETE","lineNumber":632,"oldContent":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"DELETE","lineNumber":634,"oldContent":"      ),"},{"type":"DELETE","lineNumber":636,"oldContent":"    );"},{"type":"DELETE","lineNumber":638,"oldContent":"  }"},{"type":"DELETE","lineNumber":640,"oldContent":""},{"type":"DELETE","lineNumber":642,"oldContent":"  void _showDeleteConfirmation(Habit habit) {"},{"type":"DELETE","lineNumber":644,"oldContent":"    showDialog("},{"type":"DELETE","lineNumber":646,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":648,"oldContent":"      builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":650,"oldContent":"        title: const Text('Confirm Deletion'),"},{"type":"DELETE","lineNumber":652,"oldContent":"        content: const Text('Are you sure you want to delete this habit?'),"},{"type":"DELETE","lineNumber":654,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":656,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":658,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":660,"oldContent":"            child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":662,"oldContent":"          ),"},{"type":"DELETE","lineNumber":664,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":666,"oldContent":"            onPressed: () {"},{"type":"DELETE","lineNumber":669,"oldContent":"              _deleteHabit(habit);"},{"type":"DELETE","lineNumber":670,"oldContent":"  }"},{"type":"DELETE","lineNumber":671,"oldContent":"            },"},{"type":"DELETE","lineNumber":672,"oldContent":"    habitService.deleteHabit(habit.id);"},{"type":"DELETE","lineNumber":673,"oldContent":"            child: const Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"DELETE","lineNumber":674,"oldContent":"    final habitService = ref.read(habitServiceProvider.notifier);"},{"type":"DELETE","lineNumber":675,"oldContent":"          ),"},{"type":"DELETE","lineNumber":676,"oldContent":"    // For example, call the delete method from the habit service"},{"type":"DELETE","lineNumber":677,"oldContent":"        ],"},{"type":"DELETE","lineNumber":678,"oldContent":"    // Implement habit deletion logic"},{"type":"DELETE","lineNumber":679,"oldContent":"      ),"},{"type":"DELETE","lineNumber":680,"oldContent":"  void _deleteHabit(Habit habit) {"},{"type":"DELETE","lineNumber":681,"oldContent":"    );"},{"type":"DELETE","lineNumber":682,"oldContent":""}]},{"timestamp":1754380922697,"changes":[{"type":"INSERT","lineNumber":5,"content":"import '../../services/notification_service.dart';"},{"type":"INSERT","lineNumber":368,"content":"                      const PopupMenuItem<String>("},{"type":"INSERT","lineNumber":369,"content":"                        value: 'details',"},{"type":"INSERT","lineNumber":370,"content":"                        child: Row("},{"type":"INSERT","lineNumber":371,"content":"                          children: ["},{"type":"INSERT","lineNumber":372,"content":"                            Icon(Icons.info, size: 20),"},{"type":"INSERT","lineNumber":373,"content":"                            SizedBox(width: 8),"},{"type":"INSERT","lineNumber":374,"content":"                            Text('Details'),"},{"type":"INSERT","lineNumber":375,"content":"                          ],"},{"type":"INSERT","lineNumber":376,"content":"                        ),"},{"type":"INSERT","lineNumber":377,"content":"                      ),"},{"type":"INSERT","lineNumber":378,"content":"                      const PopupMenuItem<String>("},{"type":"INSERT","lineNumber":379,"content":"                        value: 'delete',"},{"type":"INSERT","lineNumber":380,"content":"                        child: Row("},{"type":"INSERT","lineNumber":381,"content":"                          children: ["},{"type":"INSERT","lineNumber":382,"content":"                            Icon(Icons.delete, size: 20, color: Colors.red),"},{"type":"INSERT","lineNumber":383,"content":"                            SizedBox(width: 8),"},{"type":"INSERT","lineNumber":384,"content":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":385,"content":"                          ],"},{"type":"INSERT","lineNumber":386,"content":"                        ),"},{"type":"INSERT","lineNumber":387,"content":"                      ),"},{"type":"INSERT","lineNumber":388,"content":"                    ],"},{"type":"INSERT","lineNumber":389,"content":"                    child: Icon("},{"type":"INSERT","lineNumber":390,"content":"                      Icons.more_vert,"},{"type":"INSERT","lineNumber":391,"content":"                      color: Colors.grey[600],"},{"type":"INSERT","lineNumber":392,"content":"                    ),"},{"type":"INSERT","lineNumber":393,"content":"                  ),"},{"type":"DELETE","lineNumber":369,"oldContent":"                      const PopupMenuItem<String>("},{"type":"DELETE","lineNumber":372,"oldContent":"                        value: 'details',"},{"type":"DELETE","lineNumber":375,"oldContent":"                        child: Row("},{"type":"DELETE","lineNumber":378,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":381,"oldContent":"                            Icon(Icons.info, size: 20),"},{"type":"DELETE","lineNumber":384,"oldContent":"                            SizedBox(width: 8),"},{"type":"DELETE","lineNumber":387,"oldContent":"                            Text('Details'),"},{"type":"DELETE","lineNumber":390,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":393,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":396,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":399,"oldContent":"                      const PopupMenuItem<String>("},{"type":"DELETE","lineNumber":402,"oldContent":"                        value: 'delete',"},{"type":"DELETE","lineNumber":405,"oldContent":"                        child: Row("},{"type":"DELETE","lineNumber":408,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":411,"oldContent":"                            Icon(Icons.delete, size: 20, color: Colors.red),"},{"type":"DELETE","lineNumber":414,"oldContent":"                            SizedBox(width: 8),"},{"type":"DELETE","lineNumber":417,"oldContent":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"DELETE","lineNumber":420,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":423,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":426,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":429,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":432,"oldContent":"                    child: Icon("},{"type":"DELETE","lineNumber":435,"oldContent":"                      Icons.more_vert,"},{"type":"DELETE","lineNumber":438,"oldContent":"                      color: Colors.grey[600],"},{"type":"DELETE","lineNumber":441,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":444,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":569,"oldContent":"    );"},{"type":"DELETE","lineNumber":571,"oldContent":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":573,"oldContent":"  }"},{"type":"DELETE","lineNumber":575,"oldContent":"}"},{"type":"DELETE","lineNumber":577,"oldContent":""},{"type":"DELETE","lineNumber":579,"oldContent":"class _FilterChip extends StatelessWidget {"},{"type":"DELETE","lineNumber":581,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":582,"oldContent":"  final bool isSelected;"},{"type":"INSERT","lineNumber":576,"content":"    );"},{"type":"DELETE","lineNumber":584,"oldContent":"  final VoidCallback onSelected;"},{"type":"DELETE","lineNumber":586,"oldContent":""},{"type":"DELETE","lineNumber":588,"oldContent":"  const _FilterChip({"},{"type":"DELETE","lineNumber":590,"oldContent":"    required this.label,"},{"type":"DELETE","lineNumber":592,"oldContent":"    required this.isSelected,"},{"type":"DELETE","lineNumber":594,"oldContent":"    required this.onSelected,"},{"type":"DELETE","lineNumber":596,"oldContent":"  });"},{"type":"DELETE","lineNumber":598,"oldContent":""},{"type":"DELETE","lineNumber":600,"oldContent":"  @override"},{"type":"DELETE","lineNumber":602,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":604,"oldContent":"    return FilterChip("},{"type":"DELETE","lineNumber":606,"oldContent":"      label: Text(label),"},{"type":"DELETE","lineNumber":608,"oldContent":"      selected: isSelected,"},{"type":"DELETE","lineNumber":610,"oldContent":"      onSelected: (_) => onSelected(),"},{"type":"DELETE","lineNumber":612,"oldContent":"      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),"},{"type":"DELETE","lineNumber":614,"oldContent":"      checkmarkColor: Theme.of(context).primaryColor,"},{"type":"DELETE","lineNumber":616,"oldContent":"    );"},{"type":"DELETE","lineNumber":618,"oldContent":"  }"},{"type":"DELETE","lineNumber":620,"oldContent":"}"},{"type":"DELETE","lineNumber":622,"oldContent":""},{"type":"DELETE","lineNumber":624,"oldContent":"class _StatCard extends StatelessWidget {"},{"type":"DELETE","lineNumber":626,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":628,"oldContent":"  final String value;"},{"type":"DELETE","lineNumber":629,"oldContent":"  final Color color;"},{"type":"INSERT","lineNumber":600,"content":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":631,"oldContent":""},{"type":"DELETE","lineNumber":633,"oldContent":"  const _StatCard({"},{"type":"DELETE","lineNumber":635,"oldContent":"    required this.label,"},{"type":"DELETE","lineNumber":637,"oldContent":"    required this.value,"},{"type":"DELETE","lineNumber":639,"oldContent":"    required this.color,"},{"type":"DELETE","lineNumber":641,"oldContent":"  });"},{"type":"INSERT","lineNumber":608,"content":"  }"},{"type":"DELETE","lineNumber":644,"oldContent":""},{"type":"DELETE","lineNumber":645,"oldContent":"  @override"},{"type":"DELETE","lineNumber":648,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":651,"oldContent":"    return Container("},{"type":"DELETE","lineNumber":654,"oldContent":"      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),"},{"type":"DELETE","lineNumber":657,"oldContent":"      decoration: BoxDecoration("},{"type":"DELETE","lineNumber":660,"oldContent":"        color: color.withOpacity(0.1),"},{"type":"DELETE","lineNumber":663,"oldContent":"        borderRadius: BorderRadius.circular(8),"},{"type":"DELETE","lineNumber":665,"oldContent":"      ),"},{"type":"DELETE","lineNumber":668,"oldContent":"      child: Column("},{"type":"DELETE","lineNumber":671,"oldContent":"        children: ["},{"type":"DELETE","lineNumber":674,"oldContent":"          Text("},{"type":"DELETE","lineNumber":677,"oldContent":"            value,"},{"type":"DELETE","lineNumber":680,"oldContent":"            style: Theme.of(context).textTheme.titleSmall?.copyWith("},{"type":"DELETE","lineNumber":683,"oldContent":"              fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":686,"oldContent":"              color: color,"},{"type":"DELETE","lineNumber":689,"oldContent":"            ),"},{"type":"DELETE","lineNumber":692,"oldContent":"          ),"},{"type":"DELETE","lineNumber":695,"oldContent":"          const SizedBox(height: 2),"},{"type":"DELETE","lineNumber":698,"oldContent":"          Text("},{"type":"DELETE","lineNumber":701,"oldContent":"            label,"},{"type":"DELETE","lineNumber":704,"oldContent":"            style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"DELETE","lineNumber":707,"oldContent":"              color: Colors.grey[600],"},{"type":"DELETE","lineNumber":710,"oldContent":"              fontSize: 10,"},{"type":"DELETE","lineNumber":713,"oldContent":"            ),"},{"type":"DELETE","lineNumber":716,"oldContent":"            textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":719,"oldContent":"          ),"},{"type":"DELETE","lineNumber":722,"oldContent":"        ],"},{"type":"DELETE","lineNumber":725,"oldContent":"      ),"},{"type":"DELETE","lineNumber":728,"oldContent":"    );"},{"type":"DELETE","lineNumber":731,"oldContent":"  }"},{"type":"DELETE","lineNumber":734,"oldContent":"}"},{"type":"DELETE","lineNumber":736,"oldContent":""},{"type":"INSERT","lineNumber":679,"content":"}"},{"type":"INSERT","lineNumber":680,"content":""},{"type":"INSERT","lineNumber":681,"content":"class _FilterChip extends StatelessWidget {"},{"type":"INSERT","lineNumber":682,"content":"  final String label;"},{"type":"INSERT","lineNumber":683,"content":"  final bool isSelected;"},{"type":"INSERT","lineNumber":684,"content":"  final VoidCallback onSelected;"},{"type":"INSERT","lineNumber":685,"content":""},{"type":"INSERT","lineNumber":686,"content":"  const _FilterChip({"},{"type":"INSERT","lineNumber":687,"content":"    required this.label,"},{"type":"INSERT","lineNumber":688,"content":"    required this.isSelected,"},{"type":"INSERT","lineNumber":689,"content":"    required this.onSelected,"},{"type":"INSERT","lineNumber":690,"content":"  });"},{"type":"INSERT","lineNumber":691,"content":""},{"type":"INSERT","lineNumber":692,"content":"  @override"},{"type":"INSERT","lineNumber":693,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":694,"content":"    return FilterChip("},{"type":"INSERT","lineNumber":695,"content":"      label: Text(label),"},{"type":"INSERT","lineNumber":696,"content":"      selected: isSelected,"},{"type":"INSERT","lineNumber":697,"content":"      onSelected: (_) => onSelected(),"},{"type":"INSERT","lineNumber":698,"content":"      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),"},{"type":"INSERT","lineNumber":699,"content":"      checkmarkColor: Theme.of(context).primaryColor,"},{"type":"INSERT","lineNumber":700,"content":"    );"},{"type":"INSERT","lineNumber":701,"content":"  }"},{"type":"INSERT","lineNumber":702,"content":"}"},{"type":"INSERT","lineNumber":703,"content":""},{"type":"INSERT","lineNumber":704,"content":"class _StatCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":705,"content":"  final String label;"},{"type":"INSERT","lineNumber":706,"content":"  final String value;"},{"type":"INSERT","lineNumber":707,"content":"  final Color color;"},{"type":"INSERT","lineNumber":708,"content":""},{"type":"INSERT","lineNumber":709,"content":"  const _StatCard({"},{"type":"INSERT","lineNumber":710,"content":"    required this.label,"},{"type":"INSERT","lineNumber":711,"content":"    required this.value,"},{"type":"INSERT","lineNumber":712,"content":"    required this.color,"},{"type":"INSERT","lineNumber":713,"content":"  });"},{"type":"INSERT","lineNumber":714,"content":""},{"type":"INSERT","lineNumber":715,"content":"  @override"},{"type":"INSERT","lineNumber":716,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":717,"content":"    return Container("},{"type":"INSERT","lineNumber":718,"content":"      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),"},{"type":"INSERT","lineNumber":719,"content":"      decoration: BoxDecoration("},{"type":"INSERT","lineNumber":720,"content":"        color: color.withOpacity(0.1),"},{"type":"INSERT","lineNumber":721,"content":"        borderRadius: BorderRadius.circular(8),"},{"type":"INSERT","lineNumber":722,"content":"      ),"},{"type":"INSERT","lineNumber":723,"content":"      child: Column("},{"type":"INSERT","lineNumber":724,"content":"        children: ["},{"type":"INSERT","lineNumber":725,"content":"          Text("},{"type":"INSERT","lineNumber":726,"content":"            value,"},{"type":"INSERT","lineNumber":727,"content":"            style: Theme.of(context).textTheme.titleSmall?.copyWith("},{"type":"INSERT","lineNumber":728,"content":"              fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":729,"content":"              color: color,"},{"type":"INSERT","lineNumber":730,"content":"            ),"},{"type":"INSERT","lineNumber":731,"content":"          ),"},{"type":"INSERT","lineNumber":732,"content":"          const SizedBox(height: 2),"},{"type":"INSERT","lineNumber":733,"content":"          Text("},{"type":"INSERT","lineNumber":734,"content":"            label,"},{"type":"INSERT","lineNumber":735,"content":"            style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"INSERT","lineNumber":736,"content":"              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":737,"content":"              fontSize: 10,"},{"type":"INSERT","lineNumber":738,"content":"            ),"},{"type":"INSERT","lineNumber":739,"content":"            textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":740,"content":"          ),"},{"type":"INSERT","lineNumber":741,"content":"        ],"},{"type":"INSERT","lineNumber":742,"content":"      ),"},{"type":"INSERT","lineNumber":743,"content":"    );"},{"type":"INSERT","lineNumber":744,"content":"  }"},{"type":"INSERT","lineNumber":745,"content":"}"},{"type":"INSERT","lineNumber":746,"content":""}]},{"timestamp":1754380950999,"changes":[{"type":"DELETE","lineNumber":368,"oldContent":"                ],"},{"type":"DELETE","lineNumber":370,"oldContent":"              ),"},{"type":"DELETE","lineNumber":373,"oldContent":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":375,"oldContent":"              Row("},{"type":"DELETE","lineNumber":378,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":380,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":383,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":385,"oldContent":"                      label: 'Completion Rate',"},{"type":"DELETE","lineNumber":388,"oldContent":"                      value: '${(completionRate * 100).toInt()}%',"},{"type":"DELETE","lineNumber":390,"oldContent":"                      color: _getCompletionRateColor(completionRate),"},{"type":"DELETE","lineNumber":393,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":395,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":398,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":400,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":403,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":405,"oldContent":"                      label: 'Current Streak',"},{"type":"DELETE","lineNumber":408,"oldContent":"                      value: '${streakInfo['current']} days',"},{"type":"DELETE","lineNumber":410,"oldContent":"                      color: Colors.orange,"},{"type":"INSERT","lineNumber":394,"content":"                ],"},{"type":"INSERT","lineNumber":395,"content":"              ),"},{"type":"INSERT","lineNumber":396,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":397,"content":"              Row("},{"type":"INSERT","lineNumber":398,"content":"                children: ["},{"type":"INSERT","lineNumber":399,"content":"                  Expanded("},{"type":"INSERT","lineNumber":400,"content":"                    child: _StatCard("},{"type":"INSERT","lineNumber":401,"content":"                      label: 'Completion Rate',"},{"type":"INSERT","lineNumber":402,"content":"                      value: '${(completionRate * 100).toInt()}%',"},{"type":"INSERT","lineNumber":403,"content":"                      color: _getCompletionRateColor(completionRate),"},{"type":"INSERT","lineNumber":409,"content":"                      label: 'Current Streak',"},{"type":"INSERT","lineNumber":410,"content":"                      value: '${streakInfo['current']} days',"},{"type":"INSERT","lineNumber":411,"content":"                      color: Colors.orange,"},{"type":"INSERT","lineNumber":412,"content":"                    ),"},{"type":"INSERT","lineNumber":413,"content":"                  ),"},{"type":"INSERT","lineNumber":414,"content":"                  const SizedBox(width: 12),"},{"type":"INSERT","lineNumber":415,"content":"                  Expanded("},{"type":"INSERT","lineNumber":416,"content":"                    child: _StatCard("},{"type":"DELETE","lineNumber":573,"oldContent":"    );"},{"type":"INSERT","lineNumber":576,"content":"    );"},{"type":"DELETE","lineNumber":586,"oldContent":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":591,"oldContent":"  }"},{"type":"INSERT","lineNumber":600,"content":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":608,"content":"  }"},{"type":"MODIFY","lineNumber":614,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":617,"content":"","oldContent":"      "},{"type":"DELETE","lineNumber":632,"oldContent":"}"},{"type":"INSERT","lineNumber":633,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":634,"content":"          ),"},{"type":"INSERT","lineNumber":635,"content":"        );"},{"type":"INSERT","lineNumber":636,"content":"      }"},{"type":"INSERT","lineNumber":637,"content":"    }"},{"type":"INSERT","lineNumber":638,"content":"  }"},{"type":"INSERT","lineNumber":640,"content":"  /// Cancel all notifications for a habit before deletion"},{"type":"INSERT","lineNumber":641,"content":"  Future<void> _cancelHabitNotifications(Habit habit) async {"},{"type":"INSERT","lineNumber":642,"content":"    if (!habit.notificationsEnabled) {"},{"type":"INSERT","lineNumber":643,"content":"      return;"},{"type":"INSERT","lineNumber":644,"content":"    }"},{"type":"INSERT","lineNumber":645,"content":""},{"type":"INSERT","lineNumber":646,"content":"    try {"},{"type":"INSERT","lineNumber":647,"content":"      switch (habit.frequency) {"},{"type":"INSERT","lineNumber":648,"content":"        case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":649,"content":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"INSERT","lineNumber":650,"content":"          break;"},{"type":"INSERT","lineNumber":651,"content":""},{"type":"INSERT","lineNumber":652,"content":"        case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":653,"content":"          for (int weekday in habit.weeklySchedule) {"},{"type":"INSERT","lineNumber":654,"content":"            await NotificationService.cancelNotification(habit.hashCode + weekday);"},{"type":"INSERT","lineNumber":655,"content":"          }"},{"type":"INSERT","lineNumber":656,"content":"          break;"},{"type":"INSERT","lineNumber":657,"content":""},{"type":"INSERT","lineNumber":658,"content":"        case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":659,"content":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"INSERT","lineNumber":660,"content":"            await NotificationService.cancelNotification(habit.hashCode + monthDay + 1000);"},{"type":"INSERT","lineNumber":661,"content":"          }"},{"type":"INSERT","lineNumber":662,"content":"          break;"},{"type":"INSERT","lineNumber":663,"content":""},{"type":"INSERT","lineNumber":664,"content":"        case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":665,"content":"          for (int i = 1; i <= 24; i++) {"},{"type":"INSERT","lineNumber":666,"content":"            await NotificationService.cancelNotification(habit.hashCode + i + 2000);"},{"type":"INSERT","lineNumber":667,"content":"          }"},{"type":"INSERT","lineNumber":668,"content":"          break;"},{"type":"INSERT","lineNumber":669,"content":""},{"type":"INSERT","lineNumber":670,"content":"        case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":671,"content":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"INSERT","lineNumber":672,"content":"          break;"},{"type":"INSERT","lineNumber":673,"content":"      }"},{"type":"INSERT","lineNumber":674,"content":"      print('Cancelled notifications for deleted habit: ${habit.name}');"},{"type":"INSERT","lineNumber":675,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":676,"content":"      print('Error cancelling notifications for deleted habit: $e');"},{"type":"INSERT","lineNumber":677,"content":"    }"},{"type":"INSERT","lineNumber":678,"content":"  }"},{"type":"INSERT","lineNumber":679,"content":"}"},{"type":"INSERT","lineNumber":680,"content":""},{"type":"DELETE","lineNumber":636,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":638,"oldContent":"          ),"},{"type":"DELETE","lineNumber":641,"oldContent":"        );"},{"type":"DELETE","lineNumber":643,"oldContent":"      }"},{"type":"DELETE","lineNumber":646,"oldContent":"    }"},{"type":"DELETE","lineNumber":648,"oldContent":"  }"},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"DELETE","lineNumber":653,"oldContent":"  /// Cancel all notifications for a habit before deletion"},{"type":"DELETE","lineNumber":656,"oldContent":"  Future<void> _cancelHabitNotifications(Habit habit) async {"},{"type":"DELETE","lineNumber":658,"oldContent":"    if (!habit.notificationsEnabled) {"},{"type":"DELETE","lineNumber":661,"oldContent":"      return;"},{"type":"DELETE","lineNumber":663,"oldContent":"    }"},{"type":"DELETE","lineNumber":666,"oldContent":""},{"type":"DELETE","lineNumber":668,"oldContent":"    try {"},{"type":"DELETE","lineNumber":671,"oldContent":"      switch (habit.frequency) {"},{"type":"DELETE","lineNumber":673,"oldContent":"        case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":676,"oldContent":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"DELETE","lineNumber":678,"oldContent":"          break;"},{"type":"DELETE","lineNumber":681,"oldContent":""},{"type":"DELETE","lineNumber":683,"oldContent":"        case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":686,"oldContent":"          for (int weekday in habit.weeklySchedule) {"},{"type":"DELETE","lineNumber":688,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + weekday);"},{"type":"DELETE","lineNumber":691,"oldContent":"          }"},{"type":"DELETE","lineNumber":693,"oldContent":"          break;"},{"type":"DELETE","lineNumber":696,"oldContent":""},{"type":"DELETE","lineNumber":698,"oldContent":"        case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":701,"oldContent":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"DELETE","lineNumber":703,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + monthDay + 1000);"},{"type":"DELETE","lineNumber":706,"oldContent":"          }"},{"type":"DELETE","lineNumber":708,"oldContent":"          break;"},{"type":"DELETE","lineNumber":711,"oldContent":""},{"type":"DELETE","lineNumber":713,"oldContent":"        case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":716,"oldContent":"          for (int i = 1; i <= 24; i++) {"},{"type":"DELETE","lineNumber":718,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + i + 2000);"},{"type":"DELETE","lineNumber":721,"oldContent":"          }"},{"type":"DELETE","lineNumber":723,"oldContent":"          break;"},{"type":"DELETE","lineNumber":726,"oldContent":""},{"type":"DELETE","lineNumber":729,"oldContent":"        case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":731,"oldContent":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"DELETE","lineNumber":733,"oldContent":"          break;"},{"type":"DELETE","lineNumber":735,"oldContent":"      }"},{"type":"DELETE","lineNumber":737,"oldContent":"      print('Cancelled notifications for deleted habit: ${habit.name}');"},{"type":"DELETE","lineNumber":739,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":741,"oldContent":"      print('Error cancelling notifications for deleted habit: $e');"},{"type":"DELETE","lineNumber":743,"oldContent":"    }"},{"type":"DELETE","lineNumber":745,"oldContent":"  }"}]},{"timestamp":1754381429135,"changes":[{"type":"DELETE","lineNumber":383,"oldContent":"                ],"},{"type":"INSERT","lineNumber":384,"content":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":385,"content":"                          ],"},{"type":"INSERT","lineNumber":386,"content":"                        ),"},{"type":"INSERT","lineNumber":387,"content":"                      ),"},{"type":"INSERT","lineNumber":388,"content":"                    ],"},{"type":"INSERT","lineNumber":389,"content":"                    child: Icon("},{"type":"INSERT","lineNumber":390,"content":"                      Icons.more_vert,"},{"type":"INSERT","lineNumber":391,"content":"                      color: Colors.grey[600],"},{"type":"INSERT","lineNumber":392,"content":"                    ),"},{"type":"INSERT","lineNumber":393,"content":"                  ),"},{"type":"INSERT","lineNumber":394,"content":"                ],"},{"type":"DELETE","lineNumber":387,"oldContent":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"DELETE","lineNumber":389,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":392,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":395,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":397,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":399,"oldContent":"                    child: Icon("},{"type":"DELETE","lineNumber":400,"oldContent":"                      Icons.more_vert,"},{"type":"DELETE","lineNumber":401,"oldContent":"                      color: Colors.grey[600],"},{"type":"DELETE","lineNumber":402,"oldContent":"                      label: 'Current Streak',"},{"type":"INSERT","lineNumber":405,"content":"                  ),"},{"type":"INSERT","lineNumber":406,"content":"                  const SizedBox(width: 12),"},{"type":"INSERT","lineNumber":407,"content":"                  Expanded("},{"type":"INSERT","lineNumber":408,"content":"                    child: _StatCard("},{"type":"INSERT","lineNumber":409,"content":"                      label: 'Current Streak',"},{"type":"DELETE","lineNumber":406,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":408,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":410,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":412,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":414,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":416,"oldContent":"                    child: _StatCard("},{"type":"MODIFY","lineNumber":576,"content":"    );","oldContent":"    );"},{"type":"DELETE","lineNumber":598,"oldContent":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":600,"content":"              Navigator.of(context).pop();"},{"type":"MODIFY","lineNumber":608,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":614,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":617,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":633,"content":"            backgroundColor: Colors.red,","oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":635,"oldContent":""},{"type":"DELETE","lineNumber":637,"oldContent":"class _FilterChip extends StatelessWidget {"},{"type":"DELETE","lineNumber":640,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":642,"oldContent":"  final bool isSelected;"},{"type":"INSERT","lineNumber":639,"content":""},{"type":"DELETE","lineNumber":644,"oldContent":"  final VoidCallback onSelected;"},{"type":"DELETE","lineNumber":647,"oldContent":""},{"type":"DELETE","lineNumber":650,"oldContent":"  const _FilterChip({"},{"type":"DELETE","lineNumber":652,"oldContent":"    required this.label,"},{"type":"DELETE","lineNumber":655,"oldContent":"    required this.isSelected,"},{"type":"DELETE","lineNumber":658,"oldContent":"    required this.onSelected,"},{"type":"DELETE","lineNumber":660,"oldContent":"  });"},{"type":"DELETE","lineNumber":662,"oldContent":""},{"type":"DELETE","lineNumber":666,"oldContent":"  @override"},{"type":"DELETE","lineNumber":668,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":671,"oldContent":"    return FilterChip("},{"type":"DELETE","lineNumber":674,"oldContent":"      label: Text(label),"},{"type":"DELETE","lineNumber":676,"oldContent":"      selected: isSelected,"},{"type":"DELETE","lineNumber":679,"oldContent":"      onSelected: (_) => onSelected(),"},{"type":"DELETE","lineNumber":682,"oldContent":"      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),"},{"type":"DELETE","lineNumber":684,"oldContent":"      checkmarkColor: Theme.of(context).primaryColor,"},{"type":"DELETE","lineNumber":687,"oldContent":"    );"},{"type":"DELETE","lineNumber":690,"oldContent":"  }"},{"type":"DELETE","lineNumber":692,"oldContent":"}"},{"type":"DELETE","lineNumber":695,"oldContent":""},{"type":"DELETE","lineNumber":698,"oldContent":"class _StatCard extends StatelessWidget {"},{"type":"DELETE","lineNumber":700,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":703,"oldContent":"  final String value;"},{"type":"DELETE","lineNumber":706,"oldContent":"  final Color color;"},{"type":"INSERT","lineNumber":681,"content":"class _FilterChip extends StatelessWidget {"},{"type":"INSERT","lineNumber":682,"content":"  final String label;"},{"type":"INSERT","lineNumber":683,"content":"  final bool isSelected;"},{"type":"INSERT","lineNumber":684,"content":"  final VoidCallback onSelected;"},{"type":"INSERT","lineNumber":686,"content":"  const _FilterChip({"},{"type":"INSERT","lineNumber":687,"content":"    required this.label,"},{"type":"INSERT","lineNumber":688,"content":"    required this.isSelected,"},{"type":"INSERT","lineNumber":689,"content":"    required this.onSelected,"},{"type":"INSERT","lineNumber":690,"content":"  });"},{"type":"INSERT","lineNumber":691,"content":""},{"type":"INSERT","lineNumber":692,"content":"  @override"},{"type":"INSERT","lineNumber":693,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":694,"content":"    return FilterChip("},{"type":"INSERT","lineNumber":695,"content":"      label: Text(label),"},{"type":"INSERT","lineNumber":696,"content":"      selected: isSelected,"},{"type":"INSERT","lineNumber":697,"content":"      onSelected: (_) => onSelected(),"},{"type":"INSERT","lineNumber":698,"content":"      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),"},{"type":"INSERT","lineNumber":699,"content":"      checkmarkColor: Theme.of(context).primaryColor,"},{"type":"INSERT","lineNumber":700,"content":"    );"},{"type":"INSERT","lineNumber":701,"content":"  }"},{"type":"INSERT","lineNumber":702,"content":"}"},{"type":"INSERT","lineNumber":703,"content":""},{"type":"INSERT","lineNumber":704,"content":"class _StatCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":705,"content":"  final String label;"},{"type":"INSERT","lineNumber":706,"content":"  final String value;"},{"type":"INSERT","lineNumber":707,"content":"  final Color color;"},{"type":"INSERT","lineNumber":708,"content":""}]},{"timestamp":1754439561899,"changes":[{"type":"INSERT","lineNumber":6,"content":"import '../../services/logging_service.dart';"},{"type":"INSERT","lineNumber":19,"content":"  String _selectedSort = 'Recent'; // New sorting option"},{"type":"INSERT","lineNumber":33,"content":"  final List<String> _sortOptions = ["},{"type":"INSERT","lineNumber":34,"content":"    'Recent',"},{"type":"INSERT","lineNumber":35,"content":"    'Top Performers', "},{"type":"INSERT","lineNumber":36,"content":"    'Bottom Performers',"},{"type":"INSERT","lineNumber":37,"content":"    'Longest Streak',"},{"type":"INSERT","lineNumber":38,"content":"    'Alphabetical',"},{"type":"INSERT","lineNumber":39,"content":"    'Completion Rate',"},{"type":"INSERT","lineNumber":40,"content":"  ];"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":48,"content":"          // Sort Menu"},{"type":"INSERT","lineNumber":52,"content":"                _selectedSort = value;"},{"type":"INSERT","lineNumber":53,"content":"              });"},{"type":"INSERT","lineNumber":54,"content":"              AppLogger.info('Sorting habits by: $value');"},{"type":"INSERT","lineNumber":55,"content":"            },"},{"type":"INSERT","lineNumber":56,"content":"            itemBuilder: (BuildContext context) {"},{"type":"INSERT","lineNumber":57,"content":"              return _sortOptions.map((String choice) {"},{"type":"INSERT","lineNumber":58,"content":"                return PopupMenuItem<String>("},{"type":"INSERT","lineNumber":59,"content":"                  value: choice,"},{"type":"INSERT","lineNumber":60,"content":"                  child: Row("},{"type":"INSERT","lineNumber":61,"content":"                    children: ["},{"type":"INSERT","lineNumber":62,"content":"                      Icon(_getSortIcon(choice), size: 20),"},{"type":"INSERT","lineNumber":63,"content":"                      const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":64,"content":"                      Text(choice),"},{"type":"INSERT","lineNumber":65,"content":"                      if (choice == _selectedSort) ...["},{"type":"INSERT","lineNumber":66,"content":"                        const Spacer(),"},{"type":"INSERT","lineNumber":67,"content":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"INSERT","lineNumber":68,"content":"                      ],"},{"type":"INSERT","lineNumber":69,"content":"                    ],"},{"type":"INSERT","lineNumber":70,"content":"                  ),"},{"type":"INSERT","lineNumber":71,"content":"                );"},{"type":"INSERT","lineNumber":72,"content":"              }).toList();"},{"type":"INSERT","lineNumber":73,"content":"            },"},{"type":"INSERT","lineNumber":74,"content":"            icon: const Icon(Icons.sort),"},{"type":"INSERT","lineNumber":75,"content":"          ),"},{"type":"INSERT","lineNumber":76,"content":"          // Category Filter Menu"},{"type":"INSERT","lineNumber":77,"content":"          PopupMenuButton<String>("},{"type":"INSERT","lineNumber":78,"content":"            onSelected: (value) {"},{"type":"INSERT","lineNumber":79,"content":"              setState(() {"},{"type":"DELETE","lineNumber":49,"oldContent":"                      if (choice == _selectedCategory) const Icon(Icons.check, size: 20),"},{"type":"DELETE","lineNumber":50,"oldContent":"                      if (choice == _selectedCategory) const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":89,"content":"                      Icon(_getCategoryIcon(choice), size: 20),"},{"type":"INSERT","lineNumber":90,"content":"                      const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":92,"content":"                      if (choice == _selectedCategory) ...["},{"type":"INSERT","lineNumber":93,"content":"                        const Spacer(),"},{"type":"INSERT","lineNumber":94,"content":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"INSERT","lineNumber":95,"content":"                      ],"},{"type":"DELETE","lineNumber":57,"oldContent":"            child: const Icon(Icons.filter_list),"},{"type":"INSERT","lineNumber":101,"content":"            icon: const Icon(Icons.filter_list),"},{"type":"DELETE","lineNumber":61,"oldContent":"          preferredSize: const Size.fromHeight(60),"},{"type":"DELETE","lineNumber":62,"oldContent":"          child: Padding("},{"type":"DELETE","lineNumber":63,"oldContent":"            padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":64,"oldContent":"            child: Row("},{"type":"DELETE","lineNumber":65,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":66,"oldContent":"                _FilterChip("},{"type":"DELETE","lineNumber":67,"oldContent":"                  label: 'All',"},{"type":"DELETE","lineNumber":68,"oldContent":"                  isSelected: _selectedFilter == 'All',"},{"type":"DELETE","lineNumber":69,"oldContent":"                  onSelected: () => setState(() => _selectedFilter = 'All'),"},{"type":"INSERT","lineNumber":105,"content":"          preferredSize: const Size.fromHeight(100),"},{"type":"INSERT","lineNumber":106,"content":"          child: Column("},{"type":"INSERT","lineNumber":107,"content":"            children: ["},{"type":"INSERT","lineNumber":108,"content":"              // Filter Chips"},{"type":"INSERT","lineNumber":109,"content":"              Padding("},{"type":"INSERT","lineNumber":110,"content":"                padding: const EdgeInsets.symmetric(horizontal: 16),"},{"type":"INSERT","lineNumber":111,"content":"                child: Row("},{"type":"INSERT","lineNumber":112,"content":"                  children: ["},{"type":"INSERT","lineNumber":113,"content":"                    _FilterChip("},{"type":"INSERT","lineNumber":114,"content":"                      label: 'All',"},{"type":"INSERT","lineNumber":115,"content":"                      isSelected: _selectedFilter == 'All',"},{"type":"INSERT","lineNumber":116,"content":"                      onSelected: () => setState(() => _selectedFilter = 'All'),"},{"type":"INSERT","lineNumber":117,"content":"                    ),"},{"type":"INSERT","lineNumber":118,"content":"                    const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":119,"content":"                    _FilterChip("},{"type":"INSERT","lineNumber":120,"content":"                      label: 'Active',"},{"type":"INSERT","lineNumber":121,"content":"                      isSelected: _selectedFilter == 'Active',"},{"type":"INSERT","lineNumber":122,"content":"                      onSelected: () => setState(() => _selectedFilter = 'Active'),"},{"type":"INSERT","lineNumber":123,"content":"                    ),"},{"type":"INSERT","lineNumber":124,"content":"                    const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":125,"content":"                    _FilterChip("},{"type":"INSERT","lineNumber":126,"content":"                      label: 'Struggling',"},{"type":"INSERT","lineNumber":127,"content":"                      isSelected: _selectedFilter == 'Struggling',"},{"type":"INSERT","lineNumber":128,"content":"                      onSelected: () => setState(() => _selectedFilter = 'Struggling'),"},{"type":"INSERT","lineNumber":129,"content":"                    ),"},{"type":"INSERT","lineNumber":130,"content":"                  ],"},{"type":"DELETE","lineNumber":71,"oldContent":"                const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":72,"oldContent":"                _FilterChip("},{"type":"DELETE","lineNumber":73,"oldContent":"                  label: 'Today',"},{"type":"DELETE","lineNumber":74,"oldContent":"                  isSelected: _selectedFilter == 'Today',"},{"type":"DELETE","lineNumber":75,"oldContent":"                  onSelected: () => setState(() => _selectedFilter = 'Today'),"},{"type":"INSERT","lineNumber":132,"content":"              ),"},{"type":"INSERT","lineNumber":133,"content":"              // Current filters display"},{"type":"INSERT","lineNumber":134,"content":"              if (_selectedCategory != 'All' || _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":135,"content":"                Padding("},{"type":"INSERT","lineNumber":136,"content":"                  padding: const EdgeInsets.all(8),"},{"type":"INSERT","lineNumber":137,"content":"                  child: Row("},{"type":"INSERT","lineNumber":138,"content":"                    children: ["},{"type":"INSERT","lineNumber":139,"content":"                      if (_selectedCategory != 'All')"},{"type":"INSERT","lineNumber":140,"content":"                        Chip("},{"type":"INSERT","lineNumber":141,"content":"                          label: Text(_selectedCategory),"},{"type":"INSERT","lineNumber":142,"content":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":143,"content":"                          onDeleted: () => setState(() => _selectedCategory = 'All'),"},{"type":"INSERT","lineNumber":144,"content":"                        ),"},{"type":"INSERT","lineNumber":145,"content":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":146,"content":"                        const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":147,"content":"                      if (_selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":148,"content":"                        Chip("},{"type":"INSERT","lineNumber":149,"content":"                          label: Text('Sort: $_selectedSort'),"},{"type":"INSERT","lineNumber":150,"content":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":151,"content":"                          onDeleted: () => setState(() => _selectedSort = 'Recent'),"},{"type":"INSERT","lineNumber":152,"content":"                        ),"},{"type":"INSERT","lineNumber":153,"content":"                    ],"},{"type":"INSERT","lineNumber":154,"content":"                  ),"},{"type":"DELETE","lineNumber":77,"oldContent":"                const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":78,"oldContent":"                _FilterChip("},{"type":"DELETE","lineNumber":79,"oldContent":"                  label: 'This Week',"},{"type":"DELETE","lineNumber":80,"oldContent":"                  isSelected: _selectedFilter == 'This Week',"},{"type":"DELETE","lineNumber":81,"oldContent":"                  onSelected: () => setState(() => _selectedFilter = 'This Week'),"},{"type":"DELETE","lineNumber":82,"oldContent":"                ),"},{"type":"DELETE","lineNumber":83,"oldContent":"              ],"},{"type":"DELETE","lineNumber":84,"oldContent":"            ),"},{"type":"INSERT","lineNumber":156,"content":"            ],"},{"type":"DELETE","lineNumber":105,"oldContent":"                        Icon(Icons.list_alt, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":177,"content":"                        Icon(Icons.track_changes, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":122,"oldContent":"                final filteredHabits = _filterHabits(allHabits);"},{"type":"INSERT","lineNumber":194,"content":"                final filteredHabits = _filterAndSortHabits(allHabits);"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":201,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":132,"oldContent":"                          'No habits found for \"$_selectedFilter\"',"},{"type":"INSERT","lineNumber":204,"content":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":135,"oldContent":"                        if (_selectedCategory != 'All') ...["},{"type":"DELETE","lineNumber":136,"oldContent":"                          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":137,"oldContent":"                          Text("},{"type":"DELETE","lineNumber":138,"oldContent":"                            'in $_selectedCategory category',"},{"type":"DELETE","lineNumber":139,"oldContent":"                            style: const TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":140,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":141,"oldContent":"                        ],"},{"type":"INSERT","lineNumber":207,"content":"                        const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":208,"content":"                        ElevatedButton("},{"type":"INSERT","lineNumber":209,"content":"                          onPressed: () {"},{"type":"INSERT","lineNumber":210,"content":"                            setState(() {"},{"type":"INSERT","lineNumber":211,"content":"                              _selectedFilter = 'All';"},{"type":"INSERT","lineNumber":212,"content":"                              _selectedCategory = 'All';"},{"type":"INSERT","lineNumber":213,"content":"                              _selectedSort = 'Recent';"},{"type":"INSERT","lineNumber":214,"content":"                            });"},{"type":"INSERT","lineNumber":215,"content":"                          },"},{"type":"INSERT","lineNumber":216,"content":"                          child: const Text('Clear Filters'),"},{"type":"INSERT","lineNumber":217,"content":"                        ),"},{"type":"DELETE","lineNumber":152,"oldContent":"                    return _buildHabitCard(habit);"},{"type":"INSERT","lineNumber":228,"content":"                    return _HabitCard("},{"type":"INSERT","lineNumber":229,"content":"                      habit: habit,"},{"type":"INSERT","lineNumber":230,"content":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate' "},{"type":"INSERT","lineNumber":231,"content":"                          ? index + 1 "},{"type":"INSERT","lineNumber":232,"content":"                          : null,"},{"type":"INSERT","lineNumber":233,"content":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"INSERT","lineNumber":234,"content":"                    );"},{"type":"DELETE","lineNumber":159,"oldContent":"              child: Text('Error: $error'),"},{"type":"INSERT","lineNumber":241,"content":"              child: Column("},{"type":"INSERT","lineNumber":242,"content":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":243,"content":"                children: ["},{"type":"INSERT","lineNumber":244,"content":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":245,"content":"                  const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":246,"content":"                  Text('Error loading habits: $error'),"},{"type":"INSERT","lineNumber":247,"content":"                ],"},{"type":"INSERT","lineNumber":248,"content":"              ),"},{"type":"DELETE","lineNumber":167,"oldContent":"  List<Habit> _filterHabits(List<Habit> habits) {"},{"type":"INSERT","lineNumber":256,"content":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":170,"oldContent":"    // Filter by category"},{"type":"INSERT","lineNumber":259,"content":"    // Apply category filter"},{"type":"DELETE","lineNumber":172,"oldContent":"      filtered = filtered.where((habit) => habit.category == _selectedCategory).toList();"},{"type":"INSERT","lineNumber":261,"content":"      filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":262,"content":"        habit.category.name == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":175,"oldContent":"    // Filter by time period"},{"type":"INSERT","lineNumber":265,"content":"    // Apply status filter"},{"type":"DELETE","lineNumber":177,"oldContent":"      case 'Today':"},{"type":"DELETE","lineNumber":178,"oldContent":"        filtered = filtered.where((habit) => _isHabitDueToday(habit)).toList();"},{"type":"INSERT","lineNumber":267,"content":"      case 'Active':"},{"type":"INSERT","lineNumber":268,"content":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":180,"oldContent":"      case 'This Week':"},{"type":"DELETE","lineNumber":181,"oldContent":"        filtered = filtered.where((habit) => _isHabitDueThisWeek(habit)).toList();"},{"type":"INSERT","lineNumber":270,"content":"      case 'Struggling':"},{"type":"INSERT","lineNumber":271,"content":"        filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":272,"content":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":185,"oldContent":"        // No additional filtering needed"},{"type":"INSERT","lineNumber":276,"content":"        // No additional filtering"},{"type":"INSERT","lineNumber":280,"content":"    // Apply sorting"},{"type":"INSERT","lineNumber":281,"content":"    switch (_selectedSort) {"},{"type":"INSERT","lineNumber":282,"content":"      case 'Top Performers':"},{"type":"INSERT","lineNumber":283,"content":"        filtered.sort((a, b) => b.completionRate.compareTo(a.completionRate));"},{"type":"INSERT","lineNumber":284,"content":"        break;"},{"type":"INSERT","lineNumber":285,"content":"      case 'Bottom Performers':"},{"type":"INSERT","lineNumber":286,"content":"        filtered.sort((a, b) => a.completionRate.compareTo(b.completionRate));"},{"type":"INSERT","lineNumber":287,"content":"        break;"},{"type":"INSERT","lineNumber":288,"content":"      case 'Longest Streak':"},{"type":"INSERT","lineNumber":289,"content":"        filtered.sort((a, b) => b.currentStreak.compareTo(a.currentStreak));"},{"type":"INSERT","lineNumber":290,"content":"        break;"},{"type":"INSERT","lineNumber":291,"content":"      case 'Alphabetical':"},{"type":"INSERT","lineNumber":292,"content":"        filtered.sort((a, b) => a.name.compareTo(b.name));"},{"type":"INSERT","lineNumber":293,"content":"        break;"},{"type":"INSERT","lineNumber":294,"content":"      case 'Completion Rate':"},{"type":"INSERT","lineNumber":295,"content":"        filtered.sort((a, b) => b.completionRate.compareTo(a.completionRate));"},{"type":"INSERT","lineNumber":296,"content":"        break;"},{"type":"INSERT","lineNumber":297,"content":"      case 'Recent':"},{"type":"INSERT","lineNumber":298,"content":"      default:"},{"type":"INSERT","lineNumber":299,"content":"        filtered.sort((a, b) => b.createdAt.compareTo(a.createdAt));"},{"type":"INSERT","lineNumber":300,"content":"        break;"},{"type":"INSERT","lineNumber":301,"content":"    }"},{"type":"INSERT","lineNumber":302,"content":""},{"type":"DELETE","lineNumber":192,"oldContent":"  bool _isHabitDueToday(Habit habit) {"},{"type":"DELETE","lineNumber":193,"oldContent":"    final today = DateTime.now();"},{"type":"DELETE","lineNumber":194,"oldContent":"    return _isHabitDueOnDate(habit, today);"},{"type":"DELETE","lineNumber":195,"oldContent":"  }"},{"type":"DELETE","lineNumber":196,"oldContent":""},{"type":"DELETE","lineNumber":197,"oldContent":"  bool _isHabitDueThisWeek(Habit habit) {"},{"type":"DELETE","lineNumber":198,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":199,"oldContent":"    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));"},{"type":"DELETE","lineNumber":200,"oldContent":"    final endOfWeek = startOfWeek.add(const Duration(days: 6));"},{"type":"DELETE","lineNumber":201,"oldContent":""},{"type":"DELETE","lineNumber":202,"oldContent":"    for (int i = 0; i <= 6; i++) {"},{"type":"DELETE","lineNumber":203,"oldContent":"      final day = startOfWeek.add(Duration(days: i));"},{"type":"DELETE","lineNumber":204,"oldContent":"      if (_isHabitDueOnDate(habit, day)) {"},{"type":"DELETE","lineNumber":205,"oldContent":"        return true;"},{"type":"DELETE","lineNumber":206,"oldContent":"      }"},{"type":"INSERT","lineNumber":306,"content":"  IconData _getSortIcon(String sortOption) {"},{"type":"INSERT","lineNumber":307,"content":"    switch (sortOption) {"},{"type":"INSERT","lineNumber":308,"content":"      case 'Top Performers':"},{"type":"INSERT","lineNumber":309,"content":"        return Icons.trending_up;"},{"type":"INSERT","lineNumber":310,"content":"      case 'Bottom Performers':"},{"type":"INSERT","lineNumber":311,"content":"        return Icons.trending_down;"},{"type":"INSERT","lineNumber":312,"content":"      case 'Longest Streak':"},{"type":"INSERT","lineNumber":313,"content":"        return Icons.local_fire_department;"},{"type":"INSERT","lineNumber":314,"content":"      case 'Alphabetical':"},{"type":"INSERT","lineNumber":315,"content":"        return Icons.sort_by_alpha;"},{"type":"INSERT","lineNumber":316,"content":"      case 'Completion Rate':"},{"type":"INSERT","lineNumber":317,"content":"        return Icons.percent;"},{"type":"INSERT","lineNumber":318,"content":"      case 'Recent':"},{"type":"INSERT","lineNumber":319,"content":"      default:"},{"type":"INSERT","lineNumber":320,"content":"        return Icons.access_time;"},{"type":"DELETE","lineNumber":208,"oldContent":"    return false;"},{"type":"DELETE","lineNumber":211,"oldContent":"  bool _isHabitDueOnDate(Habit habit, DateTime date) {"},{"type":"DELETE","lineNumber":212,"oldContent":"    switch (habit.frequency) {"},{"type":"DELETE","lineNumber":213,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":214,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":215,"oldContent":"        return true;"},{"type":"DELETE","lineNumber":216,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":217,"oldContent":"        final weekday = date.weekday;"},{"type":"DELETE","lineNumber":218,"oldContent":"        return habit.weeklySchedule.contains(weekday);"},{"type":"DELETE","lineNumber":219,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":220,"oldContent":"        final day = date.day;"},{"type":"DELETE","lineNumber":221,"oldContent":"        return habit.monthlySchedule.contains(day);"},{"type":"DELETE","lineNumber":222,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":223,"oldContent":"        final today = DateTime.now();"},{"type":"DELETE","lineNumber":224,"oldContent":"        return date.month == today.month && date.day == today.day;"},{"type":"INSERT","lineNumber":324,"content":"  IconData _getCategoryIcon(String category) {"},{"type":"INSERT","lineNumber":325,"content":"    switch (category.toLowerCase()) {"},{"type":"INSERT","lineNumber":326,"content":"      case 'health':"},{"type":"INSERT","lineNumber":327,"content":"        return Icons.favorite;"},{"type":"INSERT","lineNumber":328,"content":"      case 'fitness':"},{"type":"INSERT","lineNumber":329,"content":"        return Icons.fitness_center;"},{"type":"INSERT","lineNumber":330,"content":"      case 'productivity':"},{"type":"INSERT","lineNumber":331,"content":"        return Icons.work;"},{"type":"INSERT","lineNumber":332,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":333,"content":"        return Icons.school;"},{"type":"INSERT","lineNumber":334,"content":"      case 'personal':"},{"type":"INSERT","lineNumber":335,"content":"        return Icons.person;"},{"type":"INSERT","lineNumber":336,"content":"      case 'social':"},{"type":"INSERT","lineNumber":337,"content":"        return Icons.people;"},{"type":"INSERT","lineNumber":338,"content":"      case 'finance':"},{"type":"INSERT","lineNumber":339,"content":"        return Icons.attach_money;"},{"type":"INSERT","lineNumber":340,"content":"      case 'mindfulness':"},{"type":"INSERT","lineNumber":341,"content":"        return Icons.self_improvement;"},{"type":"INSERT","lineNumber":342,"content":"      case 'all':"},{"type":"INSERT","lineNumber":343,"content":"      default:"},{"type":"INSERT","lineNumber":344,"content":"        return Icons.apps;"},{"type":"INSERT","lineNumber":347,"content":"}"},{"type":"DELETE","lineNumber":228,"oldContent":"  Widget _buildHabitCard(Habit habit) {"},{"type":"DELETE","lineNumber":229,"oldContent":"    final isCompletedToday = _isHabitCompletedToday(habit);"},{"type":"DELETE","lineNumber":230,"oldContent":"    final completionRate = _calculateCompletionRate(habit);"},{"type":"DELETE","lineNumber":231,"oldContent":"    final streakInfo = _getStreakInfo(habit);"},{"type":"INSERT","lineNumber":349,"content":"class _HabitCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":350,"content":"  final Habit habit;"},{"type":"INSERT","lineNumber":351,"content":"  final int? rank;"},{"type":"INSERT","lineNumber":352,"content":"  final bool showPerformanceIndicator;"},{"type":"INSERT","lineNumber":354,"content":"  const _HabitCard({"},{"type":"INSERT","lineNumber":355,"content":"    required this.habit,"},{"type":"INSERT","lineNumber":356,"content":"    this.rank,"},{"type":"INSERT","lineNumber":357,"content":"    this.showPerformanceIndicator = false,"},{"type":"INSERT","lineNumber":358,"content":"  });"},{"type":"INSERT","lineNumber":359,"content":""},{"type":"INSERT","lineNumber":360,"content":"  @override"},{"type":"INSERT","lineNumber":361,"content":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":235,"oldContent":"      child: InkWell("},{"type":"DELETE","lineNumber":236,"oldContent":"        onTap: () => _showHabitDetails(habit),"},{"type":"DELETE","lineNumber":237,"oldContent":"        onLongPress: () => _navigateToEditHabit(habit),"},{"type":"DELETE","lineNumber":238,"oldContent":"        borderRadius: BorderRadius.circular(12),"},{"type":"DELETE","lineNumber":239,"oldContent":"        child: Padding("},{"type":"DELETE","lineNumber":240,"oldContent":"          padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":241,"oldContent":"          child: Column("},{"type":"DELETE","lineNumber":242,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":243,"oldContent":"              Row("},{"type":"DELETE","lineNumber":244,"oldContent":"                children: ["},{"type":"INSERT","lineNumber":364,"content":"      child: Padding("},{"type":"INSERT","lineNumber":365,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":366,"content":"        child: Column("},{"type":"INSERT","lineNumber":367,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":368,"content":"          children: ["},{"type":"INSERT","lineNumber":369,"content":"            Row("},{"type":"INSERT","lineNumber":370,"content":"              children: ["},{"type":"INSERT","lineNumber":371,"content":"                // Rank indicator"},{"type":"INSERT","lineNumber":372,"content":"                if (rank != null)"},{"type":"DELETE","lineNumber":246,"oldContent":"                    width: 4,"},{"type":"DELETE","lineNumber":247,"oldContent":"                    height: 50,"},{"type":"INSERT","lineNumber":374,"content":"                    width: 32,"},{"type":"INSERT","lineNumber":375,"content":"                    height: 32,"},{"type":"DELETE","lineNumber":249,"oldContent":"                      color: Color(habit.colorValue),"},{"type":"DELETE","lineNumber":250,"oldContent":"                      borderRadius: BorderRadius.circular(2),"},{"type":"INSERT","lineNumber":377,"content":"                      color: _getRankColor(rank!),"},{"type":"INSERT","lineNumber":378,"content":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":380,"content":"                    child: Center("},{"type":"INSERT","lineNumber":381,"content":"                      child: Text("},{"type":"INSERT","lineNumber":382,"content":"                        '#$rank',"},{"type":"INSERT","lineNumber":383,"content":"                        style: const TextStyle("},{"type":"INSERT","lineNumber":384,"content":"                          color: Colors.white,"},{"type":"INSERT","lineNumber":385,"content":"                          fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":386,"content":"                          fontSize: 12,"},{"type":"INSERT","lineNumber":387,"content":"                        ),"},{"type":"INSERT","lineNumber":388,"content":"                      ),"},{"type":"INSERT","lineNumber":389,"content":"                    ),"},{"type":"DELETE","lineNumber":253,"oldContent":"                  const SizedBox(width: 16),"},{"type":"DELETE","lineNumber":254,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":255,"oldContent":"                    child: Column("},{"type":"DELETE","lineNumber":256,"oldContent":"                      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":257,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":258,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":259,"oldContent":"                          habit.name,"},{"type":"DELETE","lineNumber":260,"oldContent":"                          style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"DELETE","lineNumber":261,"oldContent":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":391,"content":"                if (rank != null) const SizedBox(width: 12),"},{"type":"INSERT","lineNumber":392,"content":"                "},{"type":"INSERT","lineNumber":393,"content":"                // Habit info"},{"type":"INSERT","lineNumber":394,"content":"                Expanded("},{"type":"INSERT","lineNumber":395,"content":"                  child: Column("},{"type":"INSERT","lineNumber":396,"content":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":397,"content":"                    children: ["},{"type":"INSERT","lineNumber":398,"content":"                      Row("},{"type":"INSERT","lineNumber":399,"content":"                        children: ["},{"type":"INSERT","lineNumber":400,"content":"                          Expanded("},{"type":"INSERT","lineNumber":401,"content":"                            child: Text("},{"type":"INSERT","lineNumber":402,"content":"                              habit.name,"},{"type":"INSERT","lineNumber":403,"content":"                              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"INSERT","lineNumber":404,"content":"                                fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":405,"content":"                              ),"},{"type":"INSERT","lineNumber":406,"content":"                            ),"},{"type":"DELETE","lineNumber":263,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":264,"oldContent":"                        if (habit.description != null) ...["},{"type":"DELETE","lineNumber":265,"oldContent":"                          const SizedBox(height: 4),"},{"type":"INSERT","lineNumber":408,"content":"                          // Performance indicator"},{"type":"INSERT","lineNumber":409,"content":"                          if (showPerformanceIndicator)"},{"type":"INSERT","lineNumber":410,"content":"                            Icon("},{"type":"INSERT","lineNumber":411,"content":"                              _getPerformanceIcon(),"},{"type":"INSERT","lineNumber":412,"content":"                              color: _getPerformanceColor(),"},{"type":"INSERT","lineNumber":413,"content":"                              size: 20,"},{"type":"INSERT","lineNumber":414,"content":"                            ),"},{"type":"INSERT","lineNumber":415,"content":"                        ],"},{"type":"INSERT","lineNumber":416,"content":"                      ),"},{"type":"INSERT","lineNumber":417,"content":"                      const SizedBox(height: 4),"},{"type":"INSERT","lineNumber":418,"content":"                      Row("},{"type":"INSERT","lineNumber":419,"content":"                        children: ["},{"type":"INSERT","lineNumber":420,"content":"                          Icon("},{"type":"INSERT","lineNumber":421,"content":"                            _getCategoryIcon(habit.category.name),"},{"type":"INSERT","lineNumber":422,"content":"                            size: 16,"},{"type":"INSERT","lineNumber":423,"content":"                            color: Colors.grey[600],"},{"type":"INSERT","lineNumber":424,"content":"                          ),"},{"type":"INSERT","lineNumber":425,"content":"                          const SizedBox(width: 4),"},{"type":"DELETE","lineNumber":267,"oldContent":"                            habit.description!,"},{"type":"DELETE","lineNumber":268,"oldContent":"                            style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"INSERT","lineNumber":427,"content":"                            habit.category.name,"},{"type":"INSERT","lineNumber":428,"content":"                            style: TextStyle("},{"type":"INSERT","lineNumber":430,"content":"                              fontSize: 12,"},{"type":"DELETE","lineNumber":271,"oldContent":"                            maxLines: 1,"},{"type":"DELETE","lineNumber":272,"oldContent":"                            overflow: TextOverflow.ellipsis,"},{"type":"DELETE","lineNumber":275,"oldContent":"                        const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":276,"oldContent":"                        Row("},{"type":"DELETE","lineNumber":277,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":278,"oldContent":"                            Container("},{"type":"DELETE","lineNumber":279,"oldContent":"                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),"},{"type":"DELETE","lineNumber":280,"oldContent":"                              decoration: BoxDecoration("},{"type":"DELETE","lineNumber":281,"oldContent":"                                color: Color(habit.colorValue).withOpacity(0.1),"},{"type":"DELETE","lineNumber":282,"oldContent":"                                borderRadius: BorderRadius.circular(12),"},{"type":"DELETE","lineNumber":283,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":284,"oldContent":"                              child: Text("},{"type":"DELETE","lineNumber":285,"oldContent":"                                habit.category,"},{"type":"DELETE","lineNumber":286,"oldContent":"                                style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"DELETE","lineNumber":287,"oldContent":"                                  color: Color(habit.colorValue),"},{"type":"DELETE","lineNumber":288,"oldContent":"                                  fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":289,"oldContent":"                                ),"},{"type":"DELETE","lineNumber":290,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":291,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":292,"oldContent":"                            const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":293,"oldContent":"                            Container("},{"type":"DELETE","lineNumber":294,"oldContent":"                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),"},{"type":"DELETE","lineNumber":295,"oldContent":"                              decoration: BoxDecoration("},{"type":"DELETE","lineNumber":296,"oldContent":"                                color: Colors.grey.shade100,"},{"type":"DELETE","lineNumber":297,"oldContent":"                                borderRadius: BorderRadius.circular(12),"},{"type":"DELETE","lineNumber":298,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":299,"oldContent":"                              child: Text("},{"type":"DELETE","lineNumber":300,"oldContent":"                                _getFrequencyDisplayName(habit.frequency),"},{"type":"DELETE","lineNumber":301,"oldContent":"                                style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"DELETE","lineNumber":302,"oldContent":"                                  color: Colors.grey[700],"},{"type":"DELETE","lineNumber":303,"oldContent":"                                  fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":304,"oldContent":"                                ),"},{"type":"DELETE","lineNumber":305,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":306,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":307,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":308,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":309,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":310,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":311,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":312,"oldContent":"                  const SizedBox(width: 16),"},{"type":"DELETE","lineNumber":313,"oldContent":"                  Column("},{"type":"DELETE","lineNumber":314,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":315,"oldContent":"                      Container("},{"type":"DELETE","lineNumber":316,"oldContent":"                        width: 40,"},{"type":"DELETE","lineNumber":317,"oldContent":"                        height: 40,"},{"type":"DELETE","lineNumber":318,"oldContent":"                        decoration: BoxDecoration("},{"type":"DELETE","lineNumber":319,"oldContent":"                          color: isCompletedToday ? Colors.green : Colors.grey.shade200,"},{"type":"DELETE","lineNumber":320,"oldContent":"                          borderRadius: BorderRadius.circular(20),"},{"type":"DELETE","lineNumber":321,"oldContent":"                          border: Border.all("},{"type":"DELETE","lineNumber":322,"oldContent":"                            color: isCompletedToday ? Colors.green : Colors.grey.shade400,"},{"type":"DELETE","lineNumber":323,"oldContent":"                            width: 2,"},{"type":"DELETE","lineNumber":324,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":325,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":326,"oldContent":"                        child: Icon("},{"type":"DELETE","lineNumber":327,"oldContent":"                          isCompletedToday ? Icons.check : Icons.circle_outlined,"},{"type":"DELETE","lineNumber":328,"oldContent":"                          color: isCompletedToday ? Colors.white : Colors.grey.shade600,"},{"type":"DELETE","lineNumber":329,"oldContent":"                          size: 20,"},{"type":"DELETE","lineNumber":330,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":332,"oldContent":"                      const SizedBox(height: 4),"},{"type":"DELETE","lineNumber":333,"oldContent":"                      Text("},{"type":"DELETE","lineNumber":334,"oldContent":"                        'Today',"},{"type":"DELETE","lineNumber":335,"oldContent":"                        style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"DELETE","lineNumber":336,"oldContent":"                          fontSize: 10,"},{"type":"DELETE","lineNumber":337,"oldContent":"                          color: Colors.grey[600],"},{"type":"DELETE","lineNumber":338,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":339,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":342,"oldContent":"                  const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":343,"oldContent":"                  PopupMenuButton<String>("},{"type":"DELETE","lineNumber":344,"oldContent":"                    onSelected: (value) {"},{"type":"DELETE","lineNumber":345,"oldContent":"                      switch (value) {"},{"type":"DELETE","lineNumber":346,"oldContent":"                        case 'edit':"},{"type":"DELETE","lineNumber":347,"oldContent":"                          _navigateToEditHabit(habit);"},{"type":"DELETE","lineNumber":348,"oldContent":"                          break;"},{"type":"DELETE","lineNumber":349,"oldContent":"                        case 'details':"},{"type":"DELETE","lineNumber":350,"oldContent":"                          _showHabitDetails(habit);"},{"type":"DELETE","lineNumber":351,"oldContent":"                          break;"},{"type":"DELETE","lineNumber":352,"oldContent":"                        case 'delete':"},{"type":"DELETE","lineNumber":353,"oldContent":"                          _showDeleteConfirmation(habit);"},{"type":"DELETE","lineNumber":354,"oldContent":"                          break;"},{"type":"DELETE","lineNumber":355,"oldContent":"                      }"},{"type":"DELETE","lineNumber":356,"oldContent":"                    },"},{"type":"DELETE","lineNumber":357,"oldContent":"                    itemBuilder: (BuildContext context) => ["},{"type":"DELETE","lineNumber":358,"oldContent":"                      const PopupMenuItem<String>("},{"type":"DELETE","lineNumber":359,"oldContent":"                        value: 'edit',"},{"type":"DELETE","lineNumber":360,"oldContent":"                        child: Row("},{"type":"DELETE","lineNumber":361,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":362,"oldContent":"                            Icon(Icons.edit, size: 20),"},{"type":"DELETE","lineNumber":363,"oldContent":"                            SizedBox(width: 8),"},{"type":"DELETE","lineNumber":364,"oldContent":"                            Text('Edit'),"},{"type":"DELETE","lineNumber":365,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":366,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":437,"content":"                ),"},{"type":"INSERT","lineNumber":438,"content":"                "},{"type":"INSERT","lineNumber":439,"content":"                // Actions"},{"type":"INSERT","lineNumber":440,"content":"                PopupMenuButton<String>("},{"type":"INSERT","lineNumber":441,"content":"                  onSelected: (value) => _handleAction(context, value),"},{"type":"INSERT","lineNumber":442,"content":"                  itemBuilder: (context) => ["},{"type":"INSERT","lineNumber":443,"content":"                    const PopupMenuItem("},{"type":"INSERT","lineNumber":444,"content":"                      value: 'edit',"},{"type":"INSERT","lineNumber":445,"content":"                      child: Row("},{"type":"INSERT","lineNumber":446,"content":"                        children: ["},{"type":"INSERT","lineNumber":447,"content":"                          Icon(Icons.edit, size: 20),"},{"type":"INSERT","lineNumber":448,"content":"                          SizedBox(width: 8),"},{"type":"INSERT","lineNumber":449,"content":"                          Text('Edit'),"},{"type":"INSERT","lineNumber":450,"content":"                        ],"},{"type":"DELETE","lineNumber":368,"oldContent":"                      const PopupMenuItem<String>("},{"type":"DELETE","lineNumber":369,"oldContent":"                        value: 'details',"},{"type":"DELETE","lineNumber":370,"oldContent":"                        child: Row("},{"type":"DELETE","lineNumber":371,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":372,"oldContent":"                            Icon(Icons.info, size: 20),"},{"type":"DELETE","lineNumber":373,"oldContent":"                            SizedBox(width: 8),"},{"type":"DELETE","lineNumber":374,"oldContent":"                            Text('Details'),"},{"type":"DELETE","lineNumber":375,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":376,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":452,"content":"                    ),"},{"type":"INSERT","lineNumber":453,"content":"                    const PopupMenuItem("},{"type":"INSERT","lineNumber":454,"content":"                      value: 'complete',"},{"type":"INSERT","lineNumber":455,"content":"                      child: Row("},{"type":"INSERT","lineNumber":456,"content":"                        children: ["},{"type":"INSERT","lineNumber":457,"content":"                          Icon(Icons.check, size: 20),"},{"type":"INSERT","lineNumber":458,"content":"                          SizedBox(width: 8),"},{"type":"INSERT","lineNumber":459,"content":"                          Text('Mark Complete'),"},{"type":"INSERT","lineNumber":460,"content":"                        ],"},{"type":"DELETE","lineNumber":378,"oldContent":"                      const PopupMenuItem<String>("},{"type":"DELETE","lineNumber":379,"oldContent":"                        value: 'delete',"},{"type":"DELETE","lineNumber":380,"oldContent":"                        child: Row("},{"type":"DELETE","lineNumber":381,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":382,"oldContent":"                            Icon(Icons.delete, size: 20, color: Colors.red),"},{"type":"DELETE","lineNumber":383,"oldContent":"                            Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"DELETE","lineNumber":384,"oldContent":"                            SizedBox(width: 8),"},{"type":"DELETE","lineNumber":385,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":386,"oldContent":"              ),"},{"type":"DELETE","lineNumber":387,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":388,"oldContent":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":462,"content":"                    ),"},{"type":"INSERT","lineNumber":463,"content":"                    const PopupMenuItem("},{"type":"INSERT","lineNumber":464,"content":"                      value: 'delete',"},{"type":"INSERT","lineNumber":465,"content":"                      child: Row("},{"type":"INSERT","lineNumber":466,"content":"                        children: ["},{"type":"INSERT","lineNumber":467,"content":"                          Icon(Icons.delete, size: 20, color: Colors.red),"},{"type":"INSERT","lineNumber":468,"content":"                          SizedBox(width: 8),"},{"type":"INSERT","lineNumber":469,"content":"                          Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"INSERT","lineNumber":470,"content":"                        ],"},{"type":"DELETE","lineNumber":390,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":391,"oldContent":"              Row("},{"type":"DELETE","lineNumber":392,"oldContent":"                    child: Icon("},{"type":"DELETE","lineNumber":393,"oldContent":"                      Icons.more_vert,"},{"type":"DELETE","lineNumber":394,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":395,"oldContent":"                      color: Colors.grey[600],"},{"type":"DELETE","lineNumber":396,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":398,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":399,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":400,"oldContent":"                ],"},{"type":"DELETE","lineNumber":401,"oldContent":"                      label: 'Completion Rate',"},{"type":"DELETE","lineNumber":402,"oldContent":"                      value: '${(completionRate * 100).toInt()}%',"},{"type":"DELETE","lineNumber":403,"oldContent":"                      color: _getCompletionRateColor(completionRate),"},{"type":"DELETE","lineNumber":404,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":405,"oldContent":"                      value: '${streakInfo['current']} days',"},{"type":"DELETE","lineNumber":406,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":407,"oldContent":"                      color: Colors.orange,"},{"type":"DELETE","lineNumber":408,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":409,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":410,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":411,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":412,"oldContent":"                      label: 'Current Streak',"},{"type":"DELETE","lineNumber":413,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":414,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":415,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":416,"oldContent":"                    child: _StatCard("},{"type":"DELETE","lineNumber":417,"oldContent":"                      label: 'Best Streak',"},{"type":"DELETE","lineNumber":418,"oldContent":"                      value: '${streakInfo['best']} days',"},{"type":"DELETE","lineNumber":419,"oldContent":"                      color: Colors.purple,"},{"type":"DELETE","lineNumber":420,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":421,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":422,"oldContent":"                ],"},{"type":"INSERT","lineNumber":473,"content":"                  ],"},{"type":"INSERT","lineNumber":474,"content":"                ),"},{"type":"INSERT","lineNumber":475,"content":"              ],"},{"type":"INSERT","lineNumber":476,"content":"            ),"},{"type":"INSERT","lineNumber":477,"content":"            "},{"type":"INSERT","lineNumber":478,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":479,"content":"            "},{"type":"INSERT","lineNumber":480,"content":"            // Stats row"},{"type":"INSERT","lineNumber":481,"content":"            Row("},{"type":"INSERT","lineNumber":482,"content":"              mainAxisAlignment: MainAxisAlignment.spaceAround,"},{"type":"INSERT","lineNumber":483,"content":"              children: ["},{"type":"INSERT","lineNumber":484,"content":"                _StatItem("},{"type":"INSERT","lineNumber":485,"content":"                  icon: Icons.local_fire_department,"},{"type":"INSERT","lineNumber":486,"content":"                  label: 'Streak',"},{"type":"INSERT","lineNumber":487,"content":"                  value: '${habit.currentStreak}',"},{"type":"INSERT","lineNumber":488,"content":"                  color: habit.currentStreak > 0 ? Colors.orange : Colors.grey,"},{"type":"INSERT","lineNumber":489,"content":"                ),"},{"type":"INSERT","lineNumber":490,"content":"                _StatItem("},{"type":"INSERT","lineNumber":491,"content":"                  icon: Icons.percent,"},{"type":"INSERT","lineNumber":492,"content":"                  label: 'Success',"},{"type":"INSERT","lineNumber":493,"content":"                  value: '${(habit.completionRate * 100).toStringAsFixed(0)}%',"},{"type":"INSERT","lineNumber":494,"content":"                  color: _getCompletionRateColor(habit.completionRate),"},{"type":"INSERT","lineNumber":495,"content":"                ),"},{"type":"INSERT","lineNumber":496,"content":"                _StatItem("},{"type":"INSERT","lineNumber":497,"content":"                  icon: Icons.check_circle,"},{"type":"INSERT","lineNumber":498,"content":"                  label: 'Total',"},{"type":"INSERT","lineNumber":499,"content":"                  value: '${habit.completions.length}',"},{"type":"INSERT","lineNumber":500,"content":"                  color: Colors.blue,"},{"type":"INSERT","lineNumber":501,"content":"                ),"},{"type":"INSERT","lineNumber":502,"content":"              ],"},{"type":"INSERT","lineNumber":503,"content":"            ),"},{"type":"INSERT","lineNumber":504,"content":"            "},{"type":"INSERT","lineNumber":505,"content":"            // Progress bar"},{"type":"INSERT","lineNumber":506,"content":"            const SizedBox(height: 12),"},{"type":"INSERT","lineNumber":507,"content":"            LinearProgressIndicator("},{"type":"INSERT","lineNumber":508,"content":"              value: habit.completionRate,"},{"type":"INSERT","lineNumber":509,"content":"              backgroundColor: Colors.grey[300],"},{"type":"INSERT","lineNumber":510,"content":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"INSERT","lineNumber":511,"content":"                _getCompletionRateColor(habit.completionRate),"},{"type":"DELETE","lineNumber":424,"oldContent":"            ],"},{"type":"DELETE","lineNumber":425,"oldContent":"          ),"},{"type":"INSERT","lineNumber":513,"content":"            ),"},{"type":"INSERT","lineNumber":514,"content":"          ],"},{"type":"DELETE","lineNumber":431,"oldContent":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"DELETE","lineNumber":432,"oldContent":"    switch (frequency) {"},{"type":"DELETE","lineNumber":433,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":434,"oldContent":"        return 'Hourly';"},{"type":"DELETE","lineNumber":435,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":436,"oldContent":"        return 'Daily';"},{"type":"DELETE","lineNumber":437,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":438,"oldContent":"        return 'Weekly';"},{"type":"DELETE","lineNumber":439,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":440,"oldContent":"        return 'Monthly';"},{"type":"DELETE","lineNumber":441,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":442,"oldContent":"        return 'Yearly';"},{"type":"INSERT","lineNumber":520,"content":"  void _handleAction(BuildContext context, String action) {"},{"type":"INSERT","lineNumber":521,"content":"    switch (action) {"},{"type":"INSERT","lineNumber":522,"content":"      case 'edit':"},{"type":"INSERT","lineNumber":523,"content":"        Navigator.of(context).push("},{"type":"INSERT","lineNumber":524,"content":"          MaterialPageRoute("},{"type":"INSERT","lineNumber":525,"content":"            builder: (context) => EditHabitScreen(habit: habit),"},{"type":"INSERT","lineNumber":526,"content":"          ),"},{"type":"INSERT","lineNumber":527,"content":"        );"},{"type":"INSERT","lineNumber":528,"content":"        break;"},{"type":"INSERT","lineNumber":529,"content":"      case 'complete':"},{"type":"INSERT","lineNumber":530,"content":"        // Handle marking habit as complete"},{"type":"INSERT","lineNumber":531,"content":"        AppLogger.info('Marking habit as complete: ${habit.name}');"},{"type":"INSERT","lineNumber":532,"content":"        break;"},{"type":"INSERT","lineNumber":533,"content":"      case 'delete':"},{"type":"INSERT","lineNumber":534,"content":"        _showDeleteDialog(context);"},{"type":"INSERT","lineNumber":535,"content":"        break;"},{"type":"DELETE","lineNumber":446,"oldContent":"  bool _isHabitCompletedToday(Habit habit) {"},{"type":"DELETE","lineNumber":447,"oldContent":"    final today = DateTime.now();"},{"type":"DELETE","lineNumber":448,"oldContent":"    final todayOnly = DateTime(today.year, today.month, today.day);"},{"type":"DELETE","lineNumber":449,"oldContent":""},{"type":"DELETE","lineNumber":450,"oldContent":"    return habit.completions.any((completion) {"},{"type":"DELETE","lineNumber":451,"oldContent":"      final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":452,"oldContent":"      return completionDate == todayOnly;"},{"type":"DELETE","lineNumber":453,"oldContent":"    });"},{"type":"DELETE","lineNumber":454,"oldContent":"  }"},{"type":"DELETE","lineNumber":455,"oldContent":""},{"type":"DELETE","lineNumber":456,"oldContent":"  double _calculateCompletionRate(Habit habit) {"},{"type":"DELETE","lineNumber":457,"oldContent":"    if (habit.completions.isEmpty) return 0.0;"},{"type":"DELETE","lineNumber":458,"oldContent":""},{"type":"DELETE","lineNumber":459,"oldContent":"    final daysSinceCreation = DateTime.now().difference(habit.createdAt).inDays + 1;"},{"type":"DELETE","lineNumber":460,"oldContent":"    final expectedCompletions = _getExpectedCompletions(habit, daysSinceCreation);"},{"type":"DELETE","lineNumber":461,"oldContent":""},{"type":"DELETE","lineNumber":462,"oldContent":"    if (expectedCompletions == 0) return 0.0;"},{"type":"DELETE","lineNumber":463,"oldContent":""},{"type":"DELETE","lineNumber":464,"oldContent":"    return (habit.completions.length / expectedCompletions).clamp(0.0, 1.0);"},{"type":"DELETE","lineNumber":465,"oldContent":"  }"},{"type":"DELETE","lineNumber":466,"oldContent":""},{"type":"DELETE","lineNumber":467,"oldContent":"  int _getExpectedCompletions(Habit habit, int daysSinceCreation) {"},{"type":"DELETE","lineNumber":468,"oldContent":"    switch (habit.frequency) {"},{"type":"DELETE","lineNumber":469,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":470,"oldContent":"        return daysSinceCreation * 24; // Simplified"},{"type":"DELETE","lineNumber":471,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":472,"oldContent":"        return daysSinceCreation;"},{"type":"DELETE","lineNumber":473,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":474,"oldContent":"        return (daysSinceCreation / 7).ceil() * habit.weeklySchedule.length;"},{"type":"DELETE","lineNumber":475,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":476,"oldContent":"        return (daysSinceCreation / 30).ceil() * habit.monthlySchedule.length;"},{"type":"DELETE","lineNumber":477,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":478,"oldContent":"        return (daysSinceCreation / 365).ceil();"},{"type":"DELETE","lineNumber":479,"oldContent":"    }"},{"type":"DELETE","lineNumber":480,"oldContent":"  }"},{"type":"DELETE","lineNumber":481,"oldContent":""},{"type":"DELETE","lineNumber":482,"oldContent":"  Map<String, int> _getStreakInfo(Habit habit) {"},{"type":"DELETE","lineNumber":483,"oldContent":"    // Calculate current and best streak"},{"type":"DELETE","lineNumber":484,"oldContent":"    int currentStreak = 0;"},{"type":"DELETE","lineNumber":485,"oldContent":"    int bestStreak = 0;"},{"type":"DELETE","lineNumber":486,"oldContent":"    int tempStreak = 0;"},{"type":"DELETE","lineNumber":487,"oldContent":""},{"type":"DELETE","lineNumber":488,"oldContent":"    final sortedCompletions = habit.completions.toList()"},{"type":"DELETE","lineNumber":489,"oldContent":"      ..sort((a, b) => b.compareTo(a)); // Sort descending"},{"type":"DELETE","lineNumber":490,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":"    final today = DateTime.now();"},{"type":"DELETE","lineNumber":492,"oldContent":"    final yesterday = today.subtract(const Duration(days: 1));"},{"type":"DELETE","lineNumber":493,"oldContent":""},{"type":"DELETE","lineNumber":494,"oldContent":"    // Check if completed today or yesterday for current streak"},{"type":"DELETE","lineNumber":495,"oldContent":"    bool hasRecentCompletion = sortedCompletions.any((completion) {"},{"type":"DELETE","lineNumber":496,"oldContent":"      final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":497,"oldContent":"      final todayDate = DateTime(today.year, today.month, today.day);"},{"type":"DELETE","lineNumber":498,"oldContent":"      final yesterdayDate = DateTime(yesterday.year, yesterday.month, yesterday.day);"},{"type":"DELETE","lineNumber":499,"oldContent":"      return completionDate == todayDate || completionDate == yesterdayDate;"},{"type":"DELETE","lineNumber":500,"oldContent":"    });"},{"type":"DELETE","lineNumber":501,"oldContent":""},{"type":"DELETE","lineNumber":502,"oldContent":"    if (hasRecentCompletion) {"},{"type":"DELETE","lineNumber":503,"oldContent":"      // Calculate current streak"},{"type":"DELETE","lineNumber":504,"oldContent":"      DateTime checkDate = DateTime(today.year, today.month, today.day);"},{"type":"DELETE","lineNumber":505,"oldContent":"      while (true) {"},{"type":"DELETE","lineNumber":506,"oldContent":"        if (sortedCompletions.any((completion) {"},{"type":"DELETE","lineNumber":507,"oldContent":"          final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":508,"oldContent":"          return completionDate == checkDate;"},{"type":"DELETE","lineNumber":509,"oldContent":"        })) {"},{"type":"DELETE","lineNumber":510,"oldContent":"          currentStreak++;"},{"type":"DELETE","lineNumber":511,"oldContent":"          checkDate = checkDate.subtract(const Duration(days: 1));"},{"type":"DELETE","lineNumber":512,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":513,"oldContent":"          break;"},{"type":"DELETE","lineNumber":514,"oldContent":"        }"},{"type":"DELETE","lineNumber":515,"oldContent":"      }"},{"type":"DELETE","lineNumber":516,"oldContent":"    }"},{"type":"DELETE","lineNumber":517,"oldContent":""},{"type":"DELETE","lineNumber":518,"oldContent":"    // Calculate best streak"},{"type":"DELETE","lineNumber":519,"oldContent":"    for (final completion in sortedCompletions) {"},{"type":"DELETE","lineNumber":520,"oldContent":"      tempStreak++;"},{"type":"DELETE","lineNumber":521,"oldContent":"      bestStreak = tempStreak > bestStreak ? tempStreak : bestStreak;"},{"type":"DELETE","lineNumber":522,"oldContent":""},{"type":"DELETE","lineNumber":523,"oldContent":"      // Reset if there's a gap (simplified logic)"},{"type":"DELETE","lineNumber":524,"oldContent":"      final nextDay = completion.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":525,"oldContent":"      if (!sortedCompletions.any((c) =>"},{"type":"DELETE","lineNumber":526,"oldContent":"          DateTime(c.year, c.month, c.day) == DateTime(nextDay.year, nextDay.month, nextDay.day))) {"},{"type":"DELETE","lineNumber":527,"oldContent":"        tempStreak = 0;"},{"type":"DELETE","lineNumber":528,"oldContent":"      }"},{"type":"DELETE","lineNumber":529,"oldContent":"    }"},{"type":"DELETE","lineNumber":530,"oldContent":""},{"type":"DELETE","lineNumber":531,"oldContent":"    return {"},{"type":"DELETE","lineNumber":532,"oldContent":"      'current': currentStreak,"},{"type":"DELETE","lineNumber":533,"oldContent":"      'best': bestStreak,"},{"type":"DELETE","lineNumber":534,"oldContent":"    };"},{"type":"DELETE","lineNumber":535,"oldContent":"  }"},{"type":"DELETE","lineNumber":536,"oldContent":""},{"type":"DELETE","lineNumber":537,"oldContent":"  Color _getCompletionRateColor(double rate) {"},{"type":"DELETE","lineNumber":538,"oldContent":"    if (rate >= 0.8) return Colors.green;"},{"type":"DELETE","lineNumber":539,"oldContent":"    if (rate >= 0.6) return Colors.orange;"},{"type":"DELETE","lineNumber":540,"oldContent":"    return Colors.red;"},{"type":"DELETE","lineNumber":541,"oldContent":"  }"},{"type":"DELETE","lineNumber":542,"oldContent":""},{"type":"DELETE","lineNumber":543,"oldContent":"  void _showHabitDetails(Habit habit) {"},{"type":"INSERT","lineNumber":539,"content":"  void _showDeleteDialog(BuildContext context) {"},{"type":"DELETE","lineNumber":547,"oldContent":"        title: Text(habit.name),"},{"type":"DELETE","lineNumber":548,"oldContent":"        content: Column("},{"type":"DELETE","lineNumber":549,"oldContent":"          mainAxisSize: MainAxisSize.min,"},{"type":"DELETE","lineNumber":550,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":551,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":552,"oldContent":"            if (habit.description != null) ...["},{"type":"DELETE","lineNumber":553,"oldContent":"              Text(habit.description!),"},{"type":"DELETE","lineNumber":554,"oldContent":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":555,"oldContent":"            ],"},{"type":"DELETE","lineNumber":556,"oldContent":"            Text('Category: ${habit.category}'),"},{"type":"DELETE","lineNumber":557,"oldContent":"            Text('Frequency: ${_getFrequencyDisplayName(habit.frequency)}'),"},{"type":"DELETE","lineNumber":558,"oldContent":"            Text('Created: ${DateFormat('MMM dd, yyyy').format(habit.createdAt)}'),"},{"type":"DELETE","lineNumber":559,"oldContent":"            Text('Total completions: ${habit.completions.length}'),"},{"type":"DELETE","lineNumber":560,"oldContent":"          ],"},{"type":"DELETE","lineNumber":561,"oldContent":"        ),"},{"type":"INSERT","lineNumber":543,"content":"        title: const Text('Delete Habit'),"},{"type":"INSERT","lineNumber":544,"content":"        content: Text('Are you sure you want to delete \"${habit.name}\"? This action cannot be undone.'),"},{"type":"DELETE","lineNumber":565,"oldContent":"            child: const Text('Close'),"},{"type":"INSERT","lineNumber":548,"content":"            child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":570,"oldContent":"              _navigateToEditHabit(habit);"},{"type":"INSERT","lineNumber":553,"content":"              // Handle delete"},{"type":"INSERT","lineNumber":554,"content":"              AppLogger.info('Deleting habit: ${habit.name}');"},{"type":"DELETE","lineNumber":572,"oldContent":"            child: const Text('Edit'),"},{"type":"INSERT","lineNumber":556,"content":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"INSERT","lineNumber":557,"content":"            child: const Text('Delete'),"},{"type":"INSERT","lineNumber":560,"content":"      ),"},{"type":"DELETE","lineNumber":576,"oldContent":"    );"},{"type":"DELETE","lineNumber":579,"oldContent":"  void _navigateToEditHabit(Habit habit) {"},{"type":"DELETE","lineNumber":580,"oldContent":"    Navigator.of(context).push("},{"type":"DELETE","lineNumber":581,"oldContent":"      MaterialPageRoute("},{"type":"DELETE","lineNumber":582,"oldContent":"        builder: (context) => EditHabitScreen(habit: habit),"},{"type":"DELETE","lineNumber":583,"oldContent":"      ),"},{"type":"DELETE","lineNumber":584,"oldContent":"    );"},{"type":"INSERT","lineNumber":564,"content":"  Color _getRankColor(int rank) {"},{"type":"INSERT","lineNumber":565,"content":"    if (rank == 1) return Colors.amber; // Gold"},{"type":"INSERT","lineNumber":566,"content":"    if (rank == 2) return Colors.grey[400]!; // Silver  "},{"type":"INSERT","lineNumber":567,"content":"    if (rank == 3) return Colors.orange[400]!; // Bronze"},{"type":"INSERT","lineNumber":568,"content":"    return Colors.blue;"},{"type":"DELETE","lineNumber":587,"oldContent":"  void _showDeleteConfirmation(Habit habit) {"},{"type":"DELETE","lineNumber":588,"oldContent":"    showDialog("},{"type":"DELETE","lineNumber":589,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":590,"oldContent":"      builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":591,"oldContent":"        title: const Text('Confirm Deletion'),"},{"type":"DELETE","lineNumber":592,"oldContent":"        content: const Text('Are you sure you want to delete this habit?'),"},{"type":"DELETE","lineNumber":593,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":594,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":595,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":596,"oldContent":"            child: const Text('Cancel'),"},{"type":"DELETE","lineNumber":597,"oldContent":"          ),"},{"type":"DELETE","lineNumber":598,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":599,"oldContent":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":600,"oldContent":"            onPressed: () {"},{"type":"DELETE","lineNumber":601,"oldContent":"              _deleteHabit(habit);"},{"type":"DELETE","lineNumber":602,"oldContent":"            },"},{"type":"DELETE","lineNumber":603,"oldContent":"            child: const Text('Delete', style: TextStyle(color: Colors.red)),"},{"type":"DELETE","lineNumber":604,"oldContent":"          ),"},{"type":"DELETE","lineNumber":605,"oldContent":"        ],"},{"type":"DELETE","lineNumber":606,"oldContent":"      ),"},{"type":"INSERT","lineNumber":571,"content":"  IconData _getPerformanceIcon() {"},{"type":"INSERT","lineNumber":572,"content":"    if (habit.completionRate >= 0.8) return Icons.trending_up;"},{"type":"INSERT","lineNumber":573,"content":"    if (habit.completionRate >= 0.5) return Icons.trending_flat;"},{"type":"INSERT","lineNumber":574,"content":"    return Icons.trending_down;"},{"type":"INSERT","lineNumber":576,"content":""},{"type":"INSERT","lineNumber":577,"content":"  Color _getPerformanceColor() {"},{"type":"INSERT","lineNumber":578,"content":"    if (habit.completionRate >= 0.8) return Colors.green;"},{"type":"INSERT","lineNumber":579,"content":"    if (habit.completionRate >= 0.5) return Colors.orange;"},{"type":"INSERT","lineNumber":580,"content":"    return Colors.red;"},{"type":"DELETE","lineNumber":610,"oldContent":"  void _deleteHabit(Habit habit) async {"},{"type":"DELETE","lineNumber":611,"oldContent":"    try {"},{"type":"DELETE","lineNumber":612,"oldContent":"      // Cancel existing notifications before deleting"},{"type":"DELETE","lineNumber":613,"oldContent":"      await _cancelHabitNotifications(habit);"},{"type":"DELETE","lineNumber":614,"oldContent":"      "},{"type":"DELETE","lineNumber":615,"oldContent":"      // Delete the habit from the database"},{"type":"DELETE","lineNumber":616,"oldContent":"      await habit.delete();"},{"type":"DELETE","lineNumber":617,"oldContent":"      "},{"type":"DELETE","lineNumber":618,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":619,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":620,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":621,"oldContent":"            content: Text('Habit deleted successfully'),"},{"type":"DELETE","lineNumber":622,"oldContent":"            backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":623,"oldContent":"          ),"},{"type":"DELETE","lineNumber":624,"oldContent":"        );"},{"type":"DELETE","lineNumber":625,"oldContent":"        // Refresh the screen by calling setState"},{"type":"DELETE","lineNumber":626,"oldContent":"        setState(() {});"},{"type":"DELETE","lineNumber":627,"oldContent":"      }"},{"type":"DELETE","lineNumber":628,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":629,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":630,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":631,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":632,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":633,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":634,"oldContent":"          ),"},{"type":"DELETE","lineNumber":635,"oldContent":"        );"},{"type":"DELETE","lineNumber":636,"oldContent":"      }"},{"type":"INSERT","lineNumber":583,"content":"  Color _getCompletionRateColor(double rate) {"},{"type":"INSERT","lineNumber":584,"content":"    if (rate >= 0.8) return Colors.green;"},{"type":"INSERT","lineNumber":585,"content":"    if (rate >= 0.6) return Colors.blue;"},{"type":"INSERT","lineNumber":586,"content":"    if (rate >= 0.4) return Colors.orange;"},{"type":"INSERT","lineNumber":587,"content":"    return Colors.red;"},{"type":"INSERT","lineNumber":588,"content":"  }"},{"type":"INSERT","lineNumber":590,"content":"  IconData _getCategoryIcon(String category) {"},{"type":"INSERT","lineNumber":591,"content":"    switch (category.toLowerCase()) {"},{"type":"INSERT","lineNumber":592,"content":"      case 'health':"},{"type":"INSERT","lineNumber":593,"content":"        return Icons.favorite;"},{"type":"INSERT","lineNumber":594,"content":"      case 'fitness':"},{"type":"INSERT","lineNumber":595,"content":"        return Icons.fitness_center;"},{"type":"INSERT","lineNumber":596,"content":"      case 'productivity':"},{"type":"INSERT","lineNumber":597,"content":"        return Icons.work;"},{"type":"INSERT","lineNumber":598,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":599,"content":"        return Icons.school;"},{"type":"INSERT","lineNumber":600,"content":"      case 'personal':"},{"type":"INSERT","lineNumber":601,"content":"        return Icons.person;"},{"type":"INSERT","lineNumber":602,"content":"      case 'social':"},{"type":"INSERT","lineNumber":603,"content":"        return Icons.people;"},{"type":"INSERT","lineNumber":604,"content":"      case 'finance':"},{"type":"INSERT","lineNumber":605,"content":"        return Icons.attach_money;"},{"type":"INSERT","lineNumber":606,"content":"      case 'mindfulness':"},{"type":"INSERT","lineNumber":607,"content":"        return Icons.self_improvement;"},{"type":"INSERT","lineNumber":608,"content":"      default:"},{"type":"INSERT","lineNumber":609,"content":"        return Icons.track_changes;"},{"type":"DELETE","lineNumber":640,"oldContent":"  /// Cancel all notifications for a habit before deletion"},{"type":"DELETE","lineNumber":641,"oldContent":"  Future<void> _cancelHabitNotifications(Habit habit) async {"},{"type":"DELETE","lineNumber":642,"oldContent":"    if (!habit.notificationsEnabled) {"},{"type":"DELETE","lineNumber":643,"oldContent":"      return;"},{"type":"DELETE","lineNumber":644,"oldContent":"    }"},{"type":"INSERT","lineNumber":612,"content":"}"},{"type":"DELETE","lineNumber":646,"oldContent":"    try {"},{"type":"DELETE","lineNumber":647,"oldContent":"      switch (habit.frequency) {"},{"type":"DELETE","lineNumber":648,"oldContent":"        case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":649,"oldContent":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"DELETE","lineNumber":650,"oldContent":"          break;"},{"type":"INSERT","lineNumber":614,"content":"class _StatItem extends StatelessWidget {"},{"type":"INSERT","lineNumber":615,"content":"  final IconData icon;"},{"type":"INSERT","lineNumber":616,"content":"  final String label;"},{"type":"INSERT","lineNumber":617,"content":"  final String value;"},{"type":"INSERT","lineNumber":618,"content":"  final Color color;"},{"type":"DELETE","lineNumber":652,"oldContent":"        case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":653,"oldContent":"          for (int weekday in habit.weeklySchedule) {"},{"type":"DELETE","lineNumber":654,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + weekday);"},{"type":"DELETE","lineNumber":655,"oldContent":"          }"},{"type":"DELETE","lineNumber":656,"oldContent":"          break;"},{"type":"INSERT","lineNumber":620,"content":"  const _StatItem({"},{"type":"INSERT","lineNumber":621,"content":"    required this.icon,"},{"type":"INSERT","lineNumber":622,"content":"    required this.label,"},{"type":"INSERT","lineNumber":623,"content":"    required this.value,"},{"type":"INSERT","lineNumber":624,"content":"    required this.color,"},{"type":"INSERT","lineNumber":625,"content":"  });"},{"type":"DELETE","lineNumber":658,"oldContent":"        case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":659,"oldContent":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"DELETE","lineNumber":660,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + monthDay + 1000);"},{"type":"DELETE","lineNumber":661,"oldContent":"          }"},{"type":"DELETE","lineNumber":662,"oldContent":"          break;"},{"type":"INSERT","lineNumber":627,"content":"  @override"},{"type":"INSERT","lineNumber":628,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":629,"content":"    return Column("},{"type":"INSERT","lineNumber":630,"content":"      children: ["},{"type":"INSERT","lineNumber":631,"content":"        Icon(icon, color: color, size: 20),"},{"type":"INSERT","lineNumber":632,"content":"        const SizedBox(height: 4),"},{"type":"INSERT","lineNumber":633,"content":"        Text("},{"type":"INSERT","lineNumber":634,"content":"          value,"},{"type":"INSERT","lineNumber":635,"content":"          style: TextStyle("},{"type":"INSERT","lineNumber":636,"content":"            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":637,"content":"            color: color,"},{"type":"INSERT","lineNumber":638,"content":"          ),"},{"type":"INSERT","lineNumber":639,"content":"        ),"},{"type":"INSERT","lineNumber":640,"content":"        Text("},{"type":"INSERT","lineNumber":641,"content":"          label,"},{"type":"INSERT","lineNumber":642,"content":"          style: TextStyle("},{"type":"INSERT","lineNumber":643,"content":"            fontSize: 12,"},{"type":"INSERT","lineNumber":644,"content":"            color: Colors.grey[600],"},{"type":"INSERT","lineNumber":645,"content":"          ),"},{"type":"INSERT","lineNumber":646,"content":"        ),"},{"type":"INSERT","lineNumber":647,"content":"      ],"},{"type":"INSERT","lineNumber":648,"content":"    );"},{"type":"INSERT","lineNumber":649,"content":"  }"},{"type":"INSERT","lineNumber":650,"content":"}"},{"type":"DELETE","lineNumber":665,"oldContent":"        case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":668,"oldContent":"          for (int i = 1; i <= 24; i++) {"},{"type":"DELETE","lineNumber":670,"oldContent":"            await NotificationService.cancelNotification(habit.hashCode + i + 2000);"},{"type":"INSERT","lineNumber":656,"content":""},{"type":"DELETE","lineNumber":672,"oldContent":"          }"},{"type":"DELETE","lineNumber":675,"oldContent":"          break;"},{"type":"DELETE","lineNumber":677,"oldContent":""},{"type":"DELETE","lineNumber":680,"oldContent":"        case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":683,"oldContent":"          await NotificationService.cancelNotification(habit.hashCode);"},{"type":"DELETE","lineNumber":685,"oldContent":"          break;"},{"type":"DELETE","lineNumber":688,"oldContent":"      }"},{"type":"DELETE","lineNumber":690,"oldContent":"      print('Cancelled notifications for deleted habit: ${habit.name}');"},{"type":"DELETE","lineNumber":693,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":696,"oldContent":"      print('Error cancelling notifications for deleted habit: $e');"},{"type":"DELETE","lineNumber":698,"oldContent":"    }"},{"type":"DELETE","lineNumber":700,"oldContent":"class _StatCard extends StatelessWidget {"},{"type":"DELETE","lineNumber":701,"oldContent":"  }"},{"type":"DELETE","lineNumber":702,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":703,"oldContent":"}"},{"type":"DELETE","lineNumber":704,"oldContent":"  final String value;"},{"type":"DELETE","lineNumber":705,"oldContent":"  final Color color;"},{"type":"DELETE","lineNumber":706,"oldContent":""},{"type":"DELETE","lineNumber":707,"oldContent":""},{"type":"DELETE","lineNumber":708,"oldContent":""},{"type":"DELETE","lineNumber":709,"oldContent":"  const _StatCard({"},{"type":"DELETE","lineNumber":710,"oldContent":"    required this.label,"},{"type":"DELETE","lineNumber":711,"oldContent":"    required this.value,"},{"type":"DELETE","lineNumber":712,"oldContent":"    required this.color,"},{"type":"DELETE","lineNumber":713,"oldContent":"  });"},{"type":"DELETE","lineNumber":714,"oldContent":""},{"type":"DELETE","lineNumber":715,"oldContent":"  @override"},{"type":"DELETE","lineNumber":716,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":717,"oldContent":"    return Container("},{"type":"DELETE","lineNumber":718,"oldContent":"      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),"},{"type":"DELETE","lineNumber":719,"oldContent":"      decoration: BoxDecoration("},{"type":"DELETE","lineNumber":720,"oldContent":"        color: color.withOpacity(0.1),"},{"type":"DELETE","lineNumber":721,"oldContent":"        borderRadius: BorderRadius.circular(8),"},{"type":"DELETE","lineNumber":722,"oldContent":"      ),"},{"type":"DELETE","lineNumber":723,"oldContent":"      child: Column("},{"type":"DELETE","lineNumber":724,"oldContent":"        children: ["},{"type":"DELETE","lineNumber":725,"oldContent":"          Text("},{"type":"DELETE","lineNumber":726,"oldContent":"            value,"},{"type":"DELETE","lineNumber":727,"oldContent":"            style: Theme.of(context).textTheme.titleSmall?.copyWith("},{"type":"DELETE","lineNumber":728,"oldContent":"              fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":729,"oldContent":"              color: color,"},{"type":"DELETE","lineNumber":730,"oldContent":"            ),"},{"type":"DELETE","lineNumber":731,"oldContent":"          ),"},{"type":"DELETE","lineNumber":732,"oldContent":"          const SizedBox(height: 2),"},{"type":"DELETE","lineNumber":733,"oldContent":"          Text("},{"type":"DELETE","lineNumber":734,"oldContent":"            label,"},{"type":"DELETE","lineNumber":735,"oldContent":"            style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"DELETE","lineNumber":736,"oldContent":"              color: Colors.grey[600],"},{"type":"DELETE","lineNumber":737,"oldContent":"              fontSize: 10,"},{"type":"DELETE","lineNumber":738,"oldContent":"            ),"},{"type":"DELETE","lineNumber":739,"oldContent":"            textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":740,"oldContent":"          ),"},{"type":"DELETE","lineNumber":741,"oldContent":"        ],"},{"type":"DELETE","lineNumber":742,"oldContent":"      ),"},{"type":"DELETE","lineNumber":743,"oldContent":"    );"},{"type":"DELETE","lineNumber":744,"oldContent":"  }"},{"type":"DELETE","lineNumber":745,"oldContent":"}"},{"type":"DELETE","lineNumber":746,"oldContent":""}]},{"timestamp":1754439615362,"changes":[{"type":"MODIFY","lineNumber":20,"content":"","oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"  @override"},{"type":"DELETE","lineNumber":34,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":36,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":38,"oldContent":"      appBar: AppBar("},{"type":"DELETE","lineNumber":39,"oldContent":"    'Top Performers', "},{"type":"DELETE","lineNumber":40,"oldContent":"        title: const Text('All Habits'),"},{"type":"INSERT","lineNumber":35,"content":"    'Top Performers',"},{"type":"DELETE","lineNumber":42,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":44,"oldContent":"          PopupMenuButton<String>("},{"type":"DELETE","lineNumber":46,"oldContent":"            onSelected: (value) {"},{"type":"DELETE","lineNumber":48,"oldContent":"              setState(() {"},{"type":"DELETE","lineNumber":50,"oldContent":"                _selectedCategory = value;"},{"type":"DELETE","lineNumber":52,"oldContent":"              });"},{"type":"DELETE","lineNumber":53,"oldContent":"            },"},{"type":"DELETE","lineNumber":54,"oldContent":"            itemBuilder: (BuildContext context) {"},{"type":"DELETE","lineNumber":55,"oldContent":"              return _categories.map((String choice) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                return PopupMenuItem<String>("},{"type":"DELETE","lineNumber":57,"oldContent":"                  value: choice,"},{"type":"DELETE","lineNumber":58,"oldContent":"                  child: Row("},{"type":"INSERT","lineNumber":42,"content":"  @override"},{"type":"INSERT","lineNumber":43,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":44,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":45,"content":"      appBar: AppBar("},{"type":"INSERT","lineNumber":46,"content":"        title: const Text('All Habits'),"},{"type":"INSERT","lineNumber":47,"content":"        actions: ["},{"type":"DELETE","lineNumber":60,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":61,"oldContent":"                      Text(choice),"},{"type":"INSERT","lineNumber":49,"content":"          PopupMenuButton<String>("},{"type":"INSERT","lineNumber":50,"content":"            onSelected: (value) {"},{"type":"INSERT","lineNumber":51,"content":"              setState(() {"},{"type":"DELETE","lineNumber":63,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":65,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":67,"oldContent":"                );"},{"type":"DELETE","lineNumber":69,"oldContent":"              }).toList();"},{"type":"DELETE","lineNumber":71,"oldContent":"            },"},{"type":"DELETE","lineNumber":74,"oldContent":"          ),"},{"type":"DELETE","lineNumber":76,"oldContent":"        ],"},{"type":"DELETE","lineNumber":78,"oldContent":"        bottom: PreferredSize("},{"type":"DELETE","lineNumber":89,"oldContent":"                ),"},{"type":"DELETE","lineNumber":96,"oldContent":"                ),"},{"type":"DELETE","lineNumber":100,"oldContent":"          ),"},{"type":"DELETE","lineNumber":101,"oldContent":"        ),"},{"type":"DELETE","lineNumber":102,"oldContent":"      ),"},{"type":"DELETE","lineNumber":103,"oldContent":"      body: Consumer("},{"type":"INSERT","lineNumber":80,"content":"                _selectedCategory = value;"},{"type":"INSERT","lineNumber":81,"content":"              });"},{"type":"INSERT","lineNumber":82,"content":"            },"},{"type":"INSERT","lineNumber":83,"content":"            itemBuilder: (BuildContext context) {"},{"type":"INSERT","lineNumber":84,"content":"              return _categories.map((String choice) {"},{"type":"INSERT","lineNumber":85,"content":"                return PopupMenuItem<String>("},{"type":"INSERT","lineNumber":86,"content":"                  value: choice,"},{"type":"INSERT","lineNumber":87,"content":"                  child: Row("},{"type":"INSERT","lineNumber":88,"content":"                    children: ["},{"type":"DELETE","lineNumber":105,"oldContent":"        builder: (context, ref, child) {"},{"type":"DELETE","lineNumber":107,"oldContent":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"INSERT","lineNumber":91,"content":"                      Text(choice),"},{"type":"DELETE","lineNumber":110,"oldContent":"          return habitServiceAsync.when("},{"type":"DELETE","lineNumber":112,"oldContent":"            data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"DELETE","lineNumber":114,"oldContent":"              future: habitService.getAllHabits(),"},{"type":"DELETE","lineNumber":116,"oldContent":"              builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":117,"oldContent":"                if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"DELETE","lineNumber":118,"oldContent":"                  return const Center(child: CircularProgressIndicator());"},{"type":"DELETE","lineNumber":119,"oldContent":"                }"},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":121,"oldContent":"                if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"INSERT","lineNumber":96,"content":"                    ],"},{"type":"INSERT","lineNumber":97,"content":"                  ),"},{"type":"INSERT","lineNumber":98,"content":"                );"},{"type":"INSERT","lineNumber":99,"content":"              }).toList();"},{"type":"INSERT","lineNumber":100,"content":"            },"},{"type":"DELETE","lineNumber":123,"oldContent":"                  return const Center("},{"type":"DELETE","lineNumber":124,"oldContent":"                    child: Column("},{"type":"DELETE","lineNumber":125,"oldContent":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":126,"oldContent":"                      children: ["},{"type":"INSERT","lineNumber":102,"content":"          ),"},{"type":"INSERT","lineNumber":103,"content":"        ],"},{"type":"INSERT","lineNumber":104,"content":"        bottom: PreferredSize("},{"type":"DELETE","lineNumber":129,"oldContent":"                        SizedBox(height: 16),"},{"type":"DELETE","lineNumber":131,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":133,"oldContent":"                          'No habits yet',"},{"type":"DELETE","lineNumber":135,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":137,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":139,"oldContent":"                        SizedBox(height: 8),"},{"type":"DELETE","lineNumber":141,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":143,"oldContent":"                          'Create your first habit to get started!',"},{"type":"DELETE","lineNumber":145,"oldContent":"                          style: TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":147,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":149,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":151,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":153,"oldContent":"                  );"},{"type":"DELETE","lineNumber":155,"oldContent":"                }"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"DELETE","lineNumber":164,"oldContent":"                if (filteredHabits.isEmpty) {"},{"type":"DELETE","lineNumber":166,"oldContent":"                  return Center("},{"type":"DELETE","lineNumber":168,"oldContent":"                    child: Column("},{"type":"DELETE","lineNumber":170,"oldContent":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":172,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":175,"oldContent":"                        const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":176,"oldContent":"                        Text("},{"type":"INSERT","lineNumber":131,"content":"                ),"},{"type":"DELETE","lineNumber":179,"oldContent":"                          style: const TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":181,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":190,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":192,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":194,"oldContent":"                  );"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":198,"oldContent":""},{"type":"DELETE","lineNumber":200,"oldContent":"                return ListView.builder("},{"type":"DELETE","lineNumber":202,"oldContent":"                  padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":204,"oldContent":"                  itemCount: filteredHabits.length,"},{"type":"DELETE","lineNumber":206,"oldContent":"                  itemBuilder: (context, index) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    final habit = filteredHabits[index];"},{"type":"DELETE","lineNumber":211,"oldContent":"                  },"},{"type":"DELETE","lineNumber":213,"oldContent":"                );"},{"type":"DELETE","lineNumber":214,"oldContent":"              },"},{"type":"INSERT","lineNumber":155,"content":"                ),"},{"type":"DELETE","lineNumber":216,"oldContent":"            ),"},{"type":"DELETE","lineNumber":217,"oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"DELETE","lineNumber":218,"oldContent":"            error: (error, stack) => Center("},{"type":"DELETE","lineNumber":219,"oldContent":"            ),"},{"type":"DELETE","lineNumber":220,"oldContent":"          );"},{"type":"DELETE","lineNumber":221,"oldContent":"        },"},{"type":"INSERT","lineNumber":157,"content":"          ),"},{"type":"INSERT","lineNumber":158,"content":"        ),"},{"type":"DELETE","lineNumber":223,"oldContent":"    );"},{"type":"DELETE","lineNumber":224,"oldContent":"  }"},{"type":"INSERT","lineNumber":160,"content":"      body: Consumer("},{"type":"INSERT","lineNumber":161,"content":"        builder: (context, ref, child) {"},{"type":"INSERT","lineNumber":162,"content":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"DELETE","lineNumber":226,"oldContent":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":164,"content":"          return habitServiceAsync.when("},{"type":"INSERT","lineNumber":165,"content":"            data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"INSERT","lineNumber":166,"content":"              future: habitService.getAllHabits(),"},{"type":"INSERT","lineNumber":167,"content":"              builder: (context, snapshot) {"},{"type":"INSERT","lineNumber":168,"content":"                if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"INSERT","lineNumber":169,"content":"                  return const Center(child: CircularProgressIndicator());"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"DELETE","lineNumber":228,"oldContent":"    if (_selectedCategory != 'All') {"},{"type":"DELETE","lineNumber":229,"oldContent":"    }"},{"type":"DELETE","lineNumber":230,"oldContent":""},{"type":"DELETE","lineNumber":231,"oldContent":"    switch (_selectedFilter) {"},{"type":"INSERT","lineNumber":172,"content":"                if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"INSERT","lineNumber":173,"content":"                  return const Center("},{"type":"INSERT","lineNumber":174,"content":"                    child: Column("},{"type":"INSERT","lineNumber":175,"content":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":176,"content":"                      children: ["},{"type":"DELETE","lineNumber":233,"oldContent":"        break;"},{"type":"DELETE","lineNumber":234,"oldContent":"        break;"},{"type":"DELETE","lineNumber":235,"oldContent":"      case 'All':"},{"type":"DELETE","lineNumber":236,"oldContent":"      default:"},{"type":"DELETE","lineNumber":237,"oldContent":"        break;"},{"type":"DELETE","lineNumber":238,"oldContent":"    }"},{"type":"INSERT","lineNumber":178,"content":"                        SizedBox(height: 16),"},{"type":"INSERT","lineNumber":179,"content":"                        Text("},{"type":"INSERT","lineNumber":180,"content":"                          'No habits yet',"},{"type":"INSERT","lineNumber":181,"content":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":182,"content":"                        ),"},{"type":"INSERT","lineNumber":183,"content":"                        SizedBox(height: 8),"},{"type":"INSERT","lineNumber":184,"content":"                        Text("},{"type":"INSERT","lineNumber":185,"content":"                          'Create your first habit to get started!',"},{"type":"INSERT","lineNumber":186,"content":"                          style: TextStyle(color: Colors.grey),"},{"type":"INSERT","lineNumber":187,"content":"                        ),"},{"type":"INSERT","lineNumber":188,"content":"                      ],"},{"type":"INSERT","lineNumber":189,"content":"                    ),"},{"type":"INSERT","lineNumber":190,"content":"                  );"},{"type":"INSERT","lineNumber":191,"content":"                }"},{"type":"DELETE","lineNumber":240,"oldContent":"    return filtered;"},{"type":"DELETE","lineNumber":241,"oldContent":"  }"},{"type":"DELETE","lineNumber":242,"oldContent":""},{"type":"INSERT","lineNumber":193,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":195,"content":""},{"type":"INSERT","lineNumber":196,"content":"                if (filteredHabits.isEmpty) {"},{"type":"INSERT","lineNumber":197,"content":"                  return Center("},{"type":"INSERT","lineNumber":198,"content":"                    child: Column("},{"type":"INSERT","lineNumber":199,"content":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":200,"content":"                      children: ["},{"type":"INSERT","lineNumber":202,"content":"                        const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":203,"content":"                        Text("},{"type":"INSERT","lineNumber":205,"content":"                          style: const TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":206,"content":"                        ),"},{"type":"DELETE","lineNumber":247,"oldContent":"    }"},{"type":"DELETE","lineNumber":250,"oldContent":"  }"},{"type":"DELETE","lineNumber":252,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"    }"},{"type":"DELETE","lineNumber":261,"oldContent":"  }"},{"type":"INSERT","lineNumber":218,"content":"                      ],"},{"type":"INSERT","lineNumber":219,"content":"                    ),"},{"type":"INSERT","lineNumber":220,"content":"                  );"},{"type":"INSERT","lineNumber":221,"content":"                }"},{"type":"INSERT","lineNumber":223,"content":"                return ListView.builder("},{"type":"INSERT","lineNumber":224,"content":"                  padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":225,"content":"                  itemCount: filteredHabits.length,"},{"type":"INSERT","lineNumber":226,"content":"                  itemBuilder: (context, index) {"},{"type":"INSERT","lineNumber":227,"content":"                    final habit = filteredHabits[index];"},{"type":"DELETE","lineNumber":265,"oldContent":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate' "},{"type":"DELETE","lineNumber":266,"oldContent":"                          ? index + 1 "},{"type":"INSERT","lineNumber":230,"content":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate'"},{"type":"INSERT","lineNumber":231,"content":"                          ? index + 1"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":270,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":272,"oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":235,"content":"                  },"},{"type":"INSERT","lineNumber":236,"content":"                );"},{"type":"INSERT","lineNumber":237,"content":"              },"},{"type":"INSERT","lineNumber":238,"content":"            ),"},{"type":"INSERT","lineNumber":239,"content":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"INSERT","lineNumber":240,"content":"            error: (error, stack) => Center("},{"type":"DELETE","lineNumber":278,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":282,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":283,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":284,"oldContent":"                  ),"},{"type":"INSERT","lineNumber":249,"content":"            ),"},{"type":"INSERT","lineNumber":250,"content":"          );"},{"type":"INSERT","lineNumber":251,"content":"        },"},{"type":"INSERT","lineNumber":252,"content":"      ),"},{"type":"INSERT","lineNumber":253,"content":"    );"},{"type":"INSERT","lineNumber":254,"content":"  }"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":257,"content":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":258,"content":""},{"type":"DELETE","lineNumber":287,"oldContent":"      filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":260,"content":"    if (_selectedCategory != 'All') {"},{"type":"INSERT","lineNumber":261,"content":"      filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":289,"oldContent":"                          ),"},{"type":"INSERT","lineNumber":263,"content":"    }"},{"type":"INSERT","lineNumber":264,"content":""},{"type":"DELETE","lineNumber":291,"oldContent":"                          Text("},{"type":"INSERT","lineNumber":266,"content":"    switch (_selectedFilter) {"},{"type":"DELETE","lineNumber":294,"oldContent":"                              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":269,"content":"        break;"},{"type":"DELETE","lineNumber":296,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":297,"oldContent":"        filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":271,"content":"        filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":299,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":300,"oldContent":"                        ],"},{"type":"INSERT","lineNumber":273,"content":"        break;"},{"type":"INSERT","lineNumber":274,"content":"      case 'All':"},{"type":"INSERT","lineNumber":275,"content":"      default:"},{"type":"INSERT","lineNumber":277,"content":"        break;"},{"type":"INSERT","lineNumber":278,"content":"    }"},{"type":"INSERT","lineNumber":279,"content":""},{"type":"INSERT","lineNumber":303,"content":"    return filtered;"},{"type":"INSERT","lineNumber":304,"content":"  }"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":321,"content":"    }"},{"type":"INSERT","lineNumber":322,"content":"  }"},{"type":"INSERT","lineNumber":323,"content":""},{"type":"DELETE","lineNumber":348,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":358,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":360,"oldContent":"                  ),"},{"type":"INSERT","lineNumber":345,"content":"    }"},{"type":"INSERT","lineNumber":346,"content":"  }"},{"type":"INSERT","lineNumber":348,"content":""},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":362,"content":"    return Card("},{"type":"INSERT","lineNumber":363,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"DELETE","lineNumber":381,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":373,"content":"                  Container("},{"type":"INSERT","lineNumber":376,"content":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":390,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":379,"content":"                    ),"},{"type":"DELETE","lineNumber":402,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":390,"content":"                  ),"},{"type":"DELETE","lineNumber":404,"oldContent":"                "},{"type":"INSERT","lineNumber":392,"content":""},{"type":"DELETE","lineNumber":410,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":407,"content":"                          ),"},{"type":"DELETE","lineNumber":436,"oldContent":"              ),"},{"type":"DELETE","lineNumber":439,"oldContent":"        ),"},{"type":"INSERT","lineNumber":426,"content":"                          Text("},{"type":"DELETE","lineNumber":441,"oldContent":"      ),"},{"type":"DELETE","lineNumber":443,"oldContent":"    );"},{"type":"DELETE","lineNumber":444,"oldContent":"  }"},{"type":"INSERT","lineNumber":429,"content":"                              color: Colors.grey[600],"},{"type":"DELETE","lineNumber":446,"oldContent":""},{"type":"INSERT","lineNumber":431,"content":"                            ),"},{"type":"INSERT","lineNumber":432,"content":"                          ),"},{"type":"INSERT","lineNumber":433,"content":"                        ],"},{"type":"INSERT","lineNumber":434,"content":"                      ),"},{"type":"INSERT","lineNumber":435,"content":"                    ],"},{"type":"INSERT","lineNumber":436,"content":"                  ),"},{"type":"DELETE","lineNumber":448,"oldContent":"                "},{"type":"INSERT","lineNumber":438,"content":""},{"type":"DELETE","lineNumber":454,"oldContent":"    }"},{"type":"DELETE","lineNumber":456,"oldContent":"  }"},{"type":"DELETE","lineNumber":458,"oldContent":""},{"type":"INSERT","lineNumber":451,"content":"                      ),"},{"type":"INSERT","lineNumber":461,"content":"                      ),"},{"type":"INSERT","lineNumber":471,"content":"                      ),"},{"type":"INSERT","lineNumber":472,"content":"                    ),"},{"type":"DELETE","lineNumber":486,"oldContent":"            "},{"type":"INSERT","lineNumber":477,"content":""},{"type":"DELETE","lineNumber":488,"oldContent":"            "},{"type":"INSERT","lineNumber":479,"content":""},{"type":"DELETE","lineNumber":513,"oldContent":"            "},{"type":"INSERT","lineNumber":504,"content":""},{"type":"INSERT","lineNumber":512,"content":"              ),"},{"type":"INSERT","lineNumber":515,"content":"        ),"},{"type":"INSERT","lineNumber":516,"content":"      ),"},{"type":"INSERT","lineNumber":517,"content":"    );"},{"type":"INSERT","lineNumber":518,"content":"  }"},{"type":"INSERT","lineNumber":519,"content":""},{"type":"INSERT","lineNumber":536,"content":"    }"},{"type":"INSERT","lineNumber":537,"content":"  }"},{"type":"INSERT","lineNumber":538,"content":""},{"type":"DELETE","lineNumber":540,"oldContent":"        title: const Text('Delete Habit'),"},{"type":"DELETE","lineNumber":541,"oldContent":"        content: Text('Are you sure you want to delete \"${habit.name}\"? This action cannot be undone.'),"},{"type":"INSERT","lineNumber":543,"content":"        title: const Text('Delete Habit'),"},{"type":"INSERT","lineNumber":544,"content":"        content: Text('Are you sure you want to delete \"${habit.name}\"? This action cannot be undone.'),"},{"type":"INSERT","lineNumber":545,"content":"        actions: ["},{"type":"INSERT","lineNumber":546,"content":"          TextButton("},{"type":"INSERT","lineNumber":547,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":549,"content":"          ),"},{"type":"INSERT","lineNumber":550,"content":"          TextButton("},{"type":"INSERT","lineNumber":551,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":552,"content":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":555,"content":"            },"},{"type":"INSERT","lineNumber":558,"content":"          ),"},{"type":"INSERT","lineNumber":559,"content":"        ],"},{"type":"DELETE","lineNumber":551,"oldContent":"        actions: ["},{"type":"DELETE","lineNumber":552,"oldContent":"          TextButton("},{"type":"INSERT","lineNumber":561,"content":"    );"},{"type":"INSERT","lineNumber":562,"content":"  }"},{"type":"INSERT","lineNumber":563,"content":""},{"type":"DELETE","lineNumber":554,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":556,"oldContent":"    if (rank == 2) return Colors.grey[400]!; // Silver  "},{"type":"DELETE","lineNumber":557,"oldContent":"          ),"},{"type":"INSERT","lineNumber":566,"content":"    if (rank == 2) return Colors.grey[400]!; // Silver"},{"type":"DELETE","lineNumber":559,"oldContent":"          TextButton("},{"type":"DELETE","lineNumber":561,"oldContent":"            onPressed: () {"},{"type":"DELETE","lineNumber":562,"oldContent":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":569,"content":"  }"},{"type":"INSERT","lineNumber":570,"content":""},{"type":"DELETE","lineNumber":564,"oldContent":"            },"},{"type":"DELETE","lineNumber":567,"oldContent":"          ),"},{"type":"DELETE","lineNumber":569,"oldContent":"        ],"},{"type":"DELETE","lineNumber":570,"oldContent":"    );"},{"type":"INSERT","lineNumber":575,"content":"  }"},{"type":"DELETE","lineNumber":573,"oldContent":"  }"},{"type":"DELETE","lineNumber":575,"oldContent":""},{"type":"INSERT","lineNumber":581,"content":"  }"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"DELETE","lineNumber":581,"oldContent":"  }"},{"type":"DELETE","lineNumber":583,"oldContent":""},{"type":"INSERT","lineNumber":589,"content":""},{"type":"DELETE","lineNumber":604,"oldContent":"  }"},{"type":"DELETE","lineNumber":606,"oldContent":"  }"},{"type":"DELETE","lineNumber":608,"oldContent":""},{"type":"INSERT","lineNumber":610,"content":"    }"},{"type":"INSERT","lineNumber":611,"content":"  }"},{"type":"INSERT","lineNumber":613,"content":""},{"type":"INSERT","lineNumber":619,"content":""},{"type":"INSERT","lineNumber":626,"content":""},{"type":"DELETE","lineNumber":632,"oldContent":""},{"type":"DELETE","lineNumber":634,"oldContent":"    }"},{"type":"DELETE","lineNumber":636,"oldContent":"  }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":650,"oldContent":""},{"type":"DELETE","lineNumber":651,"oldContent":""},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"INSERT","lineNumber":656,"content":""}]},{"timestamp":1754439652028,"changes":[{"type":"INSERT","lineNumber":19,"content":"  String _selectedSort = 'Recent'; // New sorting option"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    'Top Performers',"},{"type":"INSERT","lineNumber":35,"content":"    'Top Performers', "},{"type":"INSERT","lineNumber":37,"content":"    'Longest Streak',"},{"type":"INSERT","lineNumber":38,"content":"    'Alphabetical',"},{"type":"INSERT","lineNumber":39,"content":"    'Completion Rate',"},{"type":"INSERT","lineNumber":40,"content":"  ];"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":39,"oldContent":"    'Longest Streak',"},{"type":"DELETE","lineNumber":42,"oldContent":"    'Alphabetical',"},{"type":"DELETE","lineNumber":45,"oldContent":"    'Completion Rate',"},{"type":"INSERT","lineNumber":48,"content":"          // Sort Menu"},{"type":"DELETE","lineNumber":47,"oldContent":"  ];"},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":51,"oldContent":"          // Sort Menu"},{"type":"DELETE","lineNumber":62,"oldContent":"                _selectedCategory = value;"},{"type":"DELETE","lineNumber":64,"oldContent":"              });"},{"type":"DELETE","lineNumber":66,"oldContent":"            },"},{"type":"DELETE","lineNumber":68,"oldContent":"            itemBuilder: (BuildContext context) {"},{"type":"DELETE","lineNumber":70,"oldContent":"              return _categories.map((String choice) {"},{"type":"DELETE","lineNumber":72,"oldContent":"                return PopupMenuItem<String>("},{"type":"DELETE","lineNumber":74,"oldContent":"                  value: choice,"},{"type":"DELETE","lineNumber":76,"oldContent":"                  child: Row("},{"type":"DELETE","lineNumber":78,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":81,"oldContent":"                      Text(choice),"},{"type":"DELETE","lineNumber":87,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":88,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":90,"oldContent":"                );"},{"type":"DELETE","lineNumber":92,"oldContent":"              }).toList();"},{"type":"INSERT","lineNumber":80,"content":"                _selectedCategory = value;"},{"type":"INSERT","lineNumber":81,"content":"              });"},{"type":"DELETE","lineNumber":95,"oldContent":"          ),"},{"type":"DELETE","lineNumber":96,"oldContent":"        ],"},{"type":"DELETE","lineNumber":97,"oldContent":"        bottom: PreferredSize("},{"type":"INSERT","lineNumber":83,"content":"            itemBuilder: (BuildContext context) {"},{"type":"INSERT","lineNumber":84,"content":"              return _categories.map((String choice) {"},{"type":"INSERT","lineNumber":85,"content":"                return PopupMenuItem<String>("},{"type":"INSERT","lineNumber":86,"content":"                  value: choice,"},{"type":"INSERT","lineNumber":87,"content":"                  child: Row("},{"type":"INSERT","lineNumber":88,"content":"                    children: ["},{"type":"INSERT","lineNumber":91,"content":"                      Text(choice),"},{"type":"INSERT","lineNumber":96,"content":"                    ],"},{"type":"INSERT","lineNumber":97,"content":"                  ),"},{"type":"INSERT","lineNumber":98,"content":"                );"},{"type":"INSERT","lineNumber":99,"content":"              }).toList();"},{"type":"INSERT","lineNumber":100,"content":"            },"},{"type":"INSERT","lineNumber":102,"content":"          ),"},{"type":"INSERT","lineNumber":103,"content":"        ],"},{"type":"INSERT","lineNumber":104,"content":"        bottom: PreferredSize("},{"type":"DELETE","lineNumber":108,"oldContent":"                ),"},{"type":"MODIFY","lineNumber":121,"content":"                      isSelected: _selectedFilter == 'Active',","oldContent":"                ),"},{"type":"INSERT","lineNumber":122,"content":"                      onSelected: () => setState(() => _selectedFilter = 'Active'),"},{"type":"INSERT","lineNumber":123,"content":"                    ),"},{"type":"INSERT","lineNumber":124,"content":"                    const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":125,"content":"                    _FilterChip("},{"type":"INSERT","lineNumber":126,"content":"                      label: 'Struggling',"},{"type":"INSERT","lineNumber":127,"content":"                      isSelected: _selectedFilter == 'Struggling',"},{"type":"INSERT","lineNumber":128,"content":"                      onSelected: () => setState(() => _selectedFilter = 'Struggling'),"},{"type":"INSERT","lineNumber":129,"content":"                    ),"},{"type":"INSERT","lineNumber":130,"content":"                  ],"},{"type":"INSERT","lineNumber":131,"content":"                ),"},{"type":"INSERT","lineNumber":132,"content":"              ),"},{"type":"INSERT","lineNumber":133,"content":"              // Current filters display"},{"type":"INSERT","lineNumber":134,"content":"              if (_selectedCategory != 'All' || _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":135,"content":"                Padding("},{"type":"INSERT","lineNumber":136,"content":"                  padding: const EdgeInsets.all(8),"},{"type":"INSERT","lineNumber":137,"content":"                  child: Row("},{"type":"INSERT","lineNumber":138,"content":"                    children: ["},{"type":"INSERT","lineNumber":139,"content":"                      if (_selectedCategory != 'All')"},{"type":"INSERT","lineNumber":140,"content":"                        Chip("},{"type":"INSERT","lineNumber":141,"content":"                          label: Text(_selectedCategory),"},{"type":"INSERT","lineNumber":142,"content":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":143,"content":"                          onDeleted: () => setState(() => _selectedCategory = 'All'),"},{"type":"INSERT","lineNumber":144,"content":"                        ),"},{"type":"INSERT","lineNumber":145,"content":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":146,"content":"                        const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":147,"content":"                      if (_selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":148,"content":"                        Chip("},{"type":"INSERT","lineNumber":149,"content":"                          label: Text('Sort: $_selectedSort'),"},{"type":"INSERT","lineNumber":150,"content":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":151,"content":"                          onDeleted: () => setState(() => _selectedSort = 'Recent'),"},{"type":"INSERT","lineNumber":152,"content":"                        ),"},{"type":"INSERT","lineNumber":153,"content":"                    ],"},{"type":"INSERT","lineNumber":154,"content":"                  ),"},{"type":"INSERT","lineNumber":155,"content":"                ),"},{"type":"INSERT","lineNumber":156,"content":"            ],"},{"type":"DELETE","lineNumber":125,"oldContent":"                      isSelected: _selectedFilter == 'Active',"},{"type":"INSERT","lineNumber":159,"content":"      ),"},{"type":"DELETE","lineNumber":127,"oldContent":"                      onSelected: () => setState(() => _selectedFilter = 'Active'),"},{"type":"DELETE","lineNumber":129,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":131,"oldContent":"                    const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"DELETE","lineNumber":134,"oldContent":"                    _FilterChip("},{"type":"DELETE","lineNumber":137,"oldContent":"                      label: 'Struggling',"},{"type":"DELETE","lineNumber":140,"oldContent":"                      isSelected: _selectedFilter == 'Struggling',"},{"type":"DELETE","lineNumber":142,"oldContent":"                      onSelected: () => setState(() => _selectedFilter = 'Struggling'),"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"DELETE","lineNumber":145,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":147,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":150,"oldContent":"              ),"},{"type":"INSERT","lineNumber":177,"content":"                        Icon(Icons.track_changes, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":152,"oldContent":"              // Current filters display"},{"type":"DELETE","lineNumber":155,"oldContent":"              if (_selectedCategory != 'All' || _selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":158,"oldContent":"                Padding("},{"type":"DELETE","lineNumber":160,"oldContent":"                  padding: const EdgeInsets.all(8),"},{"type":"DELETE","lineNumber":162,"oldContent":"                  child: Row("},{"type":"DELETE","lineNumber":164,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":166,"oldContent":"                      if (_selectedCategory != 'All')"},{"type":"DELETE","lineNumber":168,"oldContent":"                        Chip("},{"type":"DELETE","lineNumber":170,"oldContent":"                          label: Text(_selectedCategory),"},{"type":"DELETE","lineNumber":172,"oldContent":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"DELETE","lineNumber":175,"oldContent":"                          onDeleted: () => setState(() => _selectedCategory = 'All'),"},{"type":"INSERT","lineNumber":192,"content":""},{"type":"DELETE","lineNumber":177,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":194,"content":"                final filteredHabits = _filterAndSortHabits(allHabits);"},{"type":"DELETE","lineNumber":179,"oldContent":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":182,"oldContent":"                        const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":185,"oldContent":"                      if (_selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":187,"oldContent":"                        Chip("},{"type":"INSERT","lineNumber":201,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":190,"oldContent":"                          label: Text('Sort: $_selectedSort'),"},{"type":"INSERT","lineNumber":204,"content":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":192,"oldContent":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"DELETE","lineNumber":194,"oldContent":"                          onDeleted: () => setState(() => _selectedSort = 'Recent'),"},{"type":"INSERT","lineNumber":207,"content":"                        const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":208,"content":"                        ElevatedButton("},{"type":"INSERT","lineNumber":209,"content":"                          onPressed: () {"},{"type":"INSERT","lineNumber":210,"content":"                            setState(() {"},{"type":"INSERT","lineNumber":211,"content":"                              _selectedFilter = 'All';"},{"type":"INSERT","lineNumber":212,"content":"                              _selectedCategory = 'All';"},{"type":"INSERT","lineNumber":213,"content":"                              _selectedSort = 'Recent';"},{"type":"INSERT","lineNumber":214,"content":"                            });"},{"type":"INSERT","lineNumber":215,"content":"                          },"},{"type":"INSERT","lineNumber":216,"content":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":196,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":197,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":198,"oldContent":"            ],"},{"type":"DELETE","lineNumber":203,"oldContent":"      ),"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"DELETE","lineNumber":207,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":""},{"type":"DELETE","lineNumber":211,"oldContent":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate'"},{"type":"DELETE","lineNumber":212,"oldContent":"                          ? index + 1"},{"type":"DELETE","lineNumber":213,"oldContent":"                        Icon(Icons.track_changes, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":228,"content":"                    return _HabitCard("},{"type":"INSERT","lineNumber":229,"content":"                      habit: habit,"},{"type":"INSERT","lineNumber":230,"content":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate' "},{"type":"INSERT","lineNumber":231,"content":"                          ? index + 1 "},{"type":"INSERT","lineNumber":232,"content":"                          : null,"},{"type":"INSERT","lineNumber":233,"content":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"INSERT","lineNumber":234,"content":"                    );"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":221,"oldContent":"                final filteredHabits = _filterAndSortHabits(allHabits);"},{"type":"DELETE","lineNumber":222,"oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":223,"oldContent":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":224,"oldContent":"                        const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":225,"oldContent":"                        ElevatedButton("},{"type":"INSERT","lineNumber":241,"content":"              child: Column("},{"type":"INSERT","lineNumber":242,"content":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":243,"content":"                children: ["},{"type":"INSERT","lineNumber":244,"content":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":245,"content":"                  const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":246,"content":"                  Text('Error loading habits: $error'),"},{"type":"INSERT","lineNumber":247,"content":"                ],"},{"type":"INSERT","lineNumber":248,"content":"              ),"},{"type":"DELETE","lineNumber":227,"oldContent":"                          onPressed: () {"},{"type":"DELETE","lineNumber":230,"oldContent":"                            setState(() {"},{"type":"DELETE","lineNumber":233,"oldContent":"                              _selectedFilter = 'All';"},{"type":"DELETE","lineNumber":235,"oldContent":"                              _selectedCategory = 'All';"},{"type":"DELETE","lineNumber":237,"oldContent":"                              _selectedSort = 'Recent';"},{"type":"DELETE","lineNumber":238,"oldContent":"                            });"},{"type":"INSERT","lineNumber":256,"content":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":240,"oldContent":"                          },"},{"type":"DELETE","lineNumber":242,"oldContent":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":243,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":259,"content":"    // Apply category filter"},{"type":"DELETE","lineNumber":245,"oldContent":"      filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":246,"oldContent":""},{"type":"INSERT","lineNumber":261,"content":"      filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":262,"content":"        habit.category.name == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":248,"oldContent":"                    return _HabitCard("},{"type":"DELETE","lineNumber":250,"oldContent":"                      habit: habit,"},{"type":"INSERT","lineNumber":265,"content":"    // Apply status filter"},{"type":"DELETE","lineNumber":252,"oldContent":"                          : null,"},{"type":"INSERT","lineNumber":267,"content":"      case 'Active':"},{"type":"INSERT","lineNumber":268,"content":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":254,"oldContent":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"DELETE","lineNumber":255,"oldContent":"        filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":256,"oldContent":"                    );"},{"type":"INSERT","lineNumber":270,"content":"      case 'Struggling':"},{"type":"INSERT","lineNumber":271,"content":"        filtered = filtered.where((habit) => "},{"type":"INSERT","lineNumber":272,"content":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":258,"oldContent":"              child: Column("},{"type":"DELETE","lineNumber":260,"oldContent":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":262,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":263,"oldContent":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":276,"content":"        // No additional filtering"},{"type":"DELETE","lineNumber":265,"oldContent":"                  const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":268,"oldContent":"                  Text('Error loading habits: $error'),"},{"type":"DELETE","lineNumber":269,"oldContent":"                ],"},{"type":"DELETE","lineNumber":270,"oldContent":"              ),"},{"type":"DELETE","lineNumber":271,"oldContent":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":272,"oldContent":"    // Apply category filter"},{"type":"DELETE","lineNumber":273,"oldContent":"        habit.category.name == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":274,"oldContent":"    // Apply status filter"},{"type":"DELETE","lineNumber":275,"oldContent":"      case 'Active':"},{"type":"DELETE","lineNumber":276,"oldContent":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":277,"oldContent":"      case 'Struggling':"},{"type":"DELETE","lineNumber":278,"oldContent":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":279,"oldContent":"        // No additional filtering"},{"type":"DELETE","lineNumber":281,"oldContent":"    return filtered;"},{"type":"DELETE","lineNumber":283,"oldContent":"  }"},{"type":"DELETE","lineNumber":285,"oldContent":""},{"type":"DELETE","lineNumber":302,"oldContent":"    }"},{"type":"DELETE","lineNumber":304,"oldContent":"  }"},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"INSERT","lineNumber":303,"content":"    return filtered;"},{"type":"INSERT","lineNumber":304,"content":"  }"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":321,"content":"    }"},{"type":"INSERT","lineNumber":322,"content":"  }"},{"type":"INSERT","lineNumber":323,"content":""},{"type":"DELETE","lineNumber":329,"oldContent":"    }"},{"type":"DELETE","lineNumber":331,"oldContent":"  }"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":""},{"type":"DELETE","lineNumber":347,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":349,"oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":345,"content":"    }"},{"type":"INSERT","lineNumber":346,"content":"  }"},{"type":"INSERT","lineNumber":348,"content":""},{"type":"INSERT","lineNumber":353,"content":""},{"type":"DELETE","lineNumber":360,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":364,"oldContent":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":362,"content":"    return Card("},{"type":"INSERT","lineNumber":363,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"DELETE","lineNumber":368,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":373,"content":"                  Container("},{"type":"INSERT","lineNumber":376,"content":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":379,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":381,"oldContent":""},{"type":"INSERT","lineNumber":379,"content":"                    ),"},{"type":"INSERT","lineNumber":390,"content":"                  ),"},{"type":"INSERT","lineNumber":392,"content":"                "},{"type":"DELETE","lineNumber":395,"oldContent":"                          ),"},{"type":"INSERT","lineNumber":407,"content":"                          ),"},{"type":"DELETE","lineNumber":414,"oldContent":"                          Text("},{"type":"DELETE","lineNumber":418,"oldContent":"                              color: Colors.grey[600],"},{"type":"DELETE","lineNumber":421,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":423,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":425,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":427,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":429,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":431,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":433,"oldContent":""},{"type":"INSERT","lineNumber":426,"content":"                          Text("},{"type":"INSERT","lineNumber":429,"content":"                              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":431,"content":"                            ),"},{"type":"INSERT","lineNumber":432,"content":"                          ),"},{"type":"INSERT","lineNumber":433,"content":"                        ],"},{"type":"INSERT","lineNumber":434,"content":"                      ),"},{"type":"INSERT","lineNumber":435,"content":"                    ],"},{"type":"INSERT","lineNumber":436,"content":"                  ),"},{"type":"INSERT","lineNumber":438,"content":"                "},{"type":"DELETE","lineNumber":441,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":449,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":451,"content":"                      ),"},{"type":"DELETE","lineNumber":460,"oldContent":"                      ),"},{"type":"MODIFY","lineNumber":461,"content":"                      ),","oldContent":"                    ),"},{"type":"DELETE","lineNumber":468,"oldContent":""},{"type":"MODIFY","lineNumber":471,"content":"                      ),","oldContent":""},{"type":"INSERT","lineNumber":472,"content":"                    ),"},{"type":"INSERT","lineNumber":477,"content":"            "},{"type":"INSERT","lineNumber":479,"content":"            "},{"type":"DELETE","lineNumber":495,"oldContent":""},{"type":"MODIFY","lineNumber":504,"content":"            ","oldContent":"              ),"},{"type":"DELETE","lineNumber":507,"oldContent":"        ),"},{"type":"DELETE","lineNumber":509,"oldContent":"      ),"},{"type":"DELETE","lineNumber":511,"oldContent":"    );"},{"type":"DELETE","lineNumber":513,"oldContent":"  }"},{"type":"DELETE","lineNumber":515,"oldContent":""},{"type":"INSERT","lineNumber":512,"content":"              ),"},{"type":"INSERT","lineNumber":515,"content":"        ),"},{"type":"INSERT","lineNumber":516,"content":"      ),"},{"type":"INSERT","lineNumber":517,"content":"    );"},{"type":"INSERT","lineNumber":518,"content":"  }"},{"type":"INSERT","lineNumber":519,"content":""},{"type":"DELETE","lineNumber":533,"oldContent":"    }"},{"type":"DELETE","lineNumber":535,"oldContent":"  }"},{"type":"DELETE","lineNumber":537,"oldContent":""},{"type":"INSERT","lineNumber":536,"content":"    }"},{"type":"INSERT","lineNumber":537,"content":"  }"},{"type":"INSERT","lineNumber":538,"content":""},{"type":"DELETE","lineNumber":541,"oldContent":"        title: const Text('Delete Habit'),"},{"type":"MODIFY","lineNumber":543,"content":"        title: const Text('Delete Habit'),","oldContent":"        content: Text('Are you sure you want to delete \"${habit.name}\"? This action cannot be undone.'),"},{"type":"INSERT","lineNumber":544,"content":"        content: Text('Are you sure you want to delete \"${habit.name}\"? This action cannot be undone.'),"},{"type":"INSERT","lineNumber":546,"content":"          TextButton("},{"type":"INSERT","lineNumber":547,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":549,"content":"          ),"},{"type":"INSERT","lineNumber":551,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":552,"content":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":549,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":555,"content":"            },"},{"type":"DELETE","lineNumber":552,"oldContent":"          ),"},{"type":"DELETE","lineNumber":554,"oldContent":"          TextButton("},{"type":"INSERT","lineNumber":558,"content":"          ),"},{"type":"INSERT","lineNumber":559,"content":"        ],"},{"type":"DELETE","lineNumber":556,"oldContent":"            onPressed: () {"},{"type":"DELETE","lineNumber":557,"oldContent":"              Navigator.of(context).pop();"},{"type":"INSERT","lineNumber":561,"content":"    );"},{"type":"INSERT","lineNumber":562,"content":"  }"},{"type":"INSERT","lineNumber":563,"content":""},{"type":"DELETE","lineNumber":559,"oldContent":"            },"},{"type":"DELETE","lineNumber":561,"oldContent":"          ),"},{"type":"INSERT","lineNumber":566,"content":"    if (rank == 2) return Colors.grey[400]!; // Silver  "},{"type":"DELETE","lineNumber":563,"oldContent":"        ],"},{"type":"DELETE","lineNumber":565,"oldContent":"    );"},{"type":"DELETE","lineNumber":570,"oldContent":"    if (rank == 2) return Colors.grey[400]!; // Silver"},{"type":"DELETE","lineNumber":575,"oldContent":""},{"type":"DELETE","lineNumber":578,"oldContent":"  }"},{"type":"INSERT","lineNumber":581,"content":"  }"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"DELETE","lineNumber":584,"oldContent":"  }"},{"type":"DELETE","lineNumber":585,"oldContent":""},{"type":"INSERT","lineNumber":589,"content":""},{"type":"DELETE","lineNumber":592,"oldContent":""},{"type":"DELETE","lineNumber":610,"oldContent":"}"},{"type":"MODIFY","lineNumber":612,"content":"}","oldContent":"class _StatItem extends StatelessWidget {"},{"type":"INSERT","lineNumber":613,"content":""},{"type":"INSERT","lineNumber":614,"content":"class _StatItem extends StatelessWidget {"},{"type":"DELETE","lineNumber":616,"oldContent":""},{"type":"INSERT","lineNumber":619,"content":""},{"type":"DELETE","lineNumber":623,"oldContent":""},{"type":"INSERT","lineNumber":626,"content":""},{"type":"DELETE","lineNumber":631,"oldContent":""},{"type":"MODIFY","lineNumber":656,"content":"","oldContent":""}]},{"timestamp":1754439673844,"changes":[{"type":"MODIFY","lineNumber":35,"content":"    'Top Performers',","oldContent":"    'Top Performers', "},{"type":"DELETE","lineNumber":38,"oldContent":"  @override"},{"type":"DELETE","lineNumber":40,"oldContent":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":43,"oldContent":"    return Scaffold("},{"type":"INSERT","lineNumber":42,"content":"  @override"},{"type":"INSERT","lineNumber":43,"content":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":44,"content":"    return Scaffold("},{"type":"MODIFY","lineNumber":49,"content":"          PopupMenuButton<String>(","oldContent":"          PopupMenuButton<String>("},{"type":"DELETE","lineNumber":71,"oldContent":"                _selectedCategory = value;"},{"type":"DELETE","lineNumber":73,"oldContent":"              });"},{"type":"DELETE","lineNumber":75,"oldContent":"            itemBuilder: (BuildContext context) {"},{"type":"DELETE","lineNumber":77,"oldContent":"              return _categories.map((String choice) {"},{"type":"DELETE","lineNumber":79,"oldContent":"                return PopupMenuItem<String>("},{"type":"DELETE","lineNumber":81,"oldContent":"                  value: choice,"},{"type":"DELETE","lineNumber":83,"oldContent":"                  child: Row("},{"type":"DELETE","lineNumber":84,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":86,"oldContent":"                      Text(choice),"},{"type":"INSERT","lineNumber":80,"content":"                _selectedCategory = value;"},{"type":"INSERT","lineNumber":81,"content":"              });"},{"type":"INSERT","lineNumber":83,"content":"            itemBuilder: (BuildContext context) {"},{"type":"INSERT","lineNumber":84,"content":"              return _categories.map((String choice) {"},{"type":"INSERT","lineNumber":85,"content":"                return PopupMenuItem<String>("},{"type":"INSERT","lineNumber":86,"content":"                  value: choice,"},{"type":"INSERT","lineNumber":87,"content":"                  child: Row("},{"type":"INSERT","lineNumber":88,"content":"                    children: ["},{"type":"INSERT","lineNumber":89,"content":"                      Icon(_getCategoryIcon(choice), size: 20),"},{"type":"INSERT","lineNumber":90,"content":"                      const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":91,"content":"                      Text(choice),"},{"type":"INSERT","lineNumber":92,"content":"                      if (choice == _selectedCategory) ...["},{"type":"INSERT","lineNumber":93,"content":"                        const Spacer(),"},{"type":"INSERT","lineNumber":94,"content":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"INSERT","lineNumber":95,"content":"                      ],"},{"type":"DELETE","lineNumber":93,"oldContent":"                      Icon(_getCategoryIcon(choice), size: 20),"},{"type":"DELETE","lineNumber":95,"oldContent":"                      const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":97,"oldContent":"                      if (choice == _selectedCategory) ...["},{"type":"DELETE","lineNumber":98,"oldContent":"                        const Spacer(),"},{"type":"INSERT","lineNumber":101,"content":"            icon: const Icon(Icons.filter_list),"},{"type":"DELETE","lineNumber":100,"oldContent":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"DELETE","lineNumber":102,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":104,"oldContent":"            icon: const Icon(Icons.filter_list),"},{"type":"INSERT","lineNumber":120,"content":"                      label: 'Active',"},{"type":"DELETE","lineNumber":122,"oldContent":"                      label: 'Active',"},{"type":"DELETE","lineNumber":124,"oldContent":"          ),"},{"type":"DELETE","lineNumber":126,"oldContent":"        ),"},{"type":"DELETE","lineNumber":129,"oldContent":"      body: Consumer("},{"type":"DELETE","lineNumber":132,"oldContent":"        builder: (context, ref, child) {"},{"type":"DELETE","lineNumber":135,"oldContent":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"DELETE","lineNumber":138,"oldContent":"          return habitServiceAsync.when("},{"type":"DELETE","lineNumber":140,"oldContent":"            data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"DELETE","lineNumber":143,"oldContent":"              future: habitService.getAllHabits(),"},{"type":"DELETE","lineNumber":145,"oldContent":"              builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"DELETE","lineNumber":150,"oldContent":"                  return const Center(child: CircularProgressIndicator());"},{"type":"DELETE","lineNumber":153,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":"                if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"DELETE","lineNumber":158,"oldContent":"                  return const Center("},{"type":"DELETE","lineNumber":161,"oldContent":"                    child: Column("},{"type":"DELETE","lineNumber":164,"oldContent":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":166,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":169,"oldContent":"                        SizedBox(height: 16),"},{"type":"DELETE","lineNumber":172,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":174,"oldContent":"                          'No habits yet',"},{"type":"INSERT","lineNumber":157,"content":"          ),"},{"type":"INSERT","lineNumber":158,"content":"        ),"},{"type":"INSERT","lineNumber":159,"content":"      ),"},{"type":"INSERT","lineNumber":160,"content":"      body: Consumer("},{"type":"INSERT","lineNumber":161,"content":"        builder: (context, ref, child) {"},{"type":"INSERT","lineNumber":162,"content":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"INSERT","lineNumber":164,"content":"          return habitServiceAsync.when("},{"type":"INSERT","lineNumber":165,"content":"            data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"INSERT","lineNumber":166,"content":"              future: habitService.getAllHabits(),"},{"type":"INSERT","lineNumber":167,"content":"              builder: (context, snapshot) {"},{"type":"INSERT","lineNumber":168,"content":"                if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"INSERT","lineNumber":169,"content":"                  return const Center(child: CircularProgressIndicator());"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"                if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"INSERT","lineNumber":173,"content":"                  return const Center("},{"type":"INSERT","lineNumber":174,"content":"                    child: Column("},{"type":"INSERT","lineNumber":175,"content":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":176,"content":"                      children: ["},{"type":"INSERT","lineNumber":177,"content":"                        Icon(Icons.track_changes, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":178,"content":"                        SizedBox(height: 16),"},{"type":"INSERT","lineNumber":179,"content":"                        Text("},{"type":"INSERT","lineNumber":180,"content":"                          'No habits yet',"},{"type":"DELETE","lineNumber":179,"oldContent":"      ),"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"INSERT","lineNumber":192,"content":""},{"type":"DELETE","lineNumber":192,"oldContent":"                        Icon(Icons.track_changes, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":194,"content":"                final filteredHabits = _filterAndSortHabits(allHabits);"},{"type":"INSERT","lineNumber":201,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":204,"content":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":202,"oldContent":""},{"type":"DELETE","lineNumber":204,"oldContent":"                final filteredHabits = _filterAndSortHabits(allHabits);"},{"type":"INSERT","lineNumber":207,"content":"                        const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":208,"content":"                        ElevatedButton("},{"type":"INSERT","lineNumber":209,"content":"                          onPressed: () {"},{"type":"INSERT","lineNumber":210,"content":"                            setState(() {"},{"type":"INSERT","lineNumber":211,"content":"                              _selectedFilter = 'All';"},{"type":"INSERT","lineNumber":212,"content":"                              _selectedCategory = 'All';"},{"type":"INSERT","lineNumber":213,"content":"                              _selectedSort = 'Recent';"},{"type":"INSERT","lineNumber":214,"content":"                            });"},{"type":"INSERT","lineNumber":215,"content":"                          },"},{"type":"INSERT","lineNumber":216,"content":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":208,"oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":211,"oldContent":"                          'No habits match your filters',"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"DELETE","lineNumber":215,"oldContent":"                        const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":216,"oldContent":"                        ElevatedButton("},{"type":"DELETE","lineNumber":218,"oldContent":"                          onPressed: () {"},{"type":"DELETE","lineNumber":220,"oldContent":"                            setState(() {"},{"type":"DELETE","lineNumber":221,"oldContent":"                              _selectedFilter = 'All';"},{"type":"DELETE","lineNumber":222,"oldContent":"                              _selectedCategory = 'All';"},{"type":"DELETE","lineNumber":223,"oldContent":"                              _selectedSort = 'Recent';"},{"type":"DELETE","lineNumber":224,"oldContent":"                            });"},{"type":"INSERT","lineNumber":228,"content":"                    return _HabitCard("},{"type":"INSERT","lineNumber":229,"content":"                      habit: habit,"},{"type":"INSERT","lineNumber":230,"content":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate'"},{"type":"INSERT","lineNumber":231,"content":"                          ? index + 1"},{"type":"INSERT","lineNumber":232,"content":"                          : null,"},{"type":"INSERT","lineNumber":233,"content":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"INSERT","lineNumber":234,"content":"                    );"},{"type":"DELETE","lineNumber":226,"oldContent":"                          },"},{"type":"DELETE","lineNumber":228,"oldContent":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":233,"oldContent":""},{"type":"INSERT","lineNumber":241,"content":"              child: Column("},{"type":"INSERT","lineNumber":242,"content":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":243,"content":"                children: ["},{"type":"INSERT","lineNumber":244,"content":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":245,"content":"                  const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":246,"content":"                  Text('Error loading habits: $error'),"},{"type":"INSERT","lineNumber":247,"content":"                ],"},{"type":"INSERT","lineNumber":248,"content":"              ),"},{"type":"DELETE","lineNumber":235,"oldContent":"                    return _HabitCard("},{"type":"DELETE","lineNumber":237,"oldContent":"                      habit: habit,"},{"type":"DELETE","lineNumber":239,"oldContent":"                      rank: _selectedSort.contains('Performers') || _selectedSort == 'Completion Rate' "},{"type":"DELETE","lineNumber":240,"oldContent":"                          ? index + 1 "},{"type":"DELETE","lineNumber":242,"oldContent":"                          : null,"},{"type":"DELETE","lineNumber":244,"oldContent":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"DELETE","lineNumber":245,"oldContent":"                    );"},{"type":"INSERT","lineNumber":256,"content":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":249,"oldContent":"              child: Column("},{"type":"DELETE","lineNumber":251,"oldContent":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":252,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":253,"oldContent":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":259,"content":"    // Apply category filter"},{"type":"DELETE","lineNumber":255,"oldContent":"                  const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":256,"oldContent":"                  Text('Error loading habits: $error'),"},{"type":"DELETE","lineNumber":257,"oldContent":"                ],"},{"type":"INSERT","lineNumber":261,"content":"      filtered = filtered.where((habit) =>"},{"type":"INSERT","lineNumber":262,"content":"        habit.category.name == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":259,"oldContent":"              ),"},{"type":"INSERT","lineNumber":265,"content":"    // Apply status filter"},{"type":"INSERT","lineNumber":267,"content":"      case 'Active':"},{"type":"INSERT","lineNumber":268,"content":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":263,"oldContent":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"INSERT","lineNumber":270,"content":"      case 'Struggling':"},{"type":"INSERT","lineNumber":271,"content":"        filtered = filtered.where((habit) =>"},{"type":"INSERT","lineNumber":272,"content":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":265,"oldContent":"    // Apply category filter"},{"type":"DELETE","lineNumber":267,"oldContent":"      filtered = filtered.where((habit) => "},{"type":"DELETE","lineNumber":269,"oldContent":"        habit.category.name == _selectedCategory).toList();"},{"type":"INSERT","lineNumber":276,"content":"        // No additional filtering"},{"type":"DELETE","lineNumber":271,"oldContent":"    // Apply status filter"},{"type":"DELETE","lineNumber":273,"oldContent":"      case 'Active':"},{"type":"DELETE","lineNumber":275,"oldContent":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":276,"oldContent":"      case 'Struggling':"},{"type":"DELETE","lineNumber":277,"oldContent":"        filtered = filtered.where((habit) => "},{"type":"DELETE","lineNumber":278,"oldContent":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":279,"oldContent":"        // No additional filtering"},{"type":"DELETE","lineNumber":299,"oldContent":"    return filtered;"},{"type":"DELETE","lineNumber":301,"oldContent":"  }"},{"type":"DELETE","lineNumber":302,"oldContent":""},{"type":"INSERT","lineNumber":303,"content":"    return filtered;"},{"type":"INSERT","lineNumber":304,"content":"  }"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"DELETE","lineNumber":318,"oldContent":"    }"},{"type":"DELETE","lineNumber":320,"oldContent":"  }"},{"type":"DELETE","lineNumber":322,"oldContent":""},{"type":"INSERT","lineNumber":321,"content":"    }"},{"type":"INSERT","lineNumber":322,"content":"  }"},{"type":"INSERT","lineNumber":323,"content":""},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"DELETE","lineNumber":343,"oldContent":"  }"},{"type":"MODIFY","lineNumber":345,"content":"    }","oldContent":""},{"type":"INSERT","lineNumber":346,"content":"  }"},{"type":"MODIFY","lineNumber":349,"content":"class _HabitCard extends StatelessWidget {","oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"DELETE","lineNumber":359,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":361,"oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":362,"content":"    return Card("},{"type":"INSERT","lineNumber":363,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"DELETE","lineNumber":370,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":374,"oldContent":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":373,"content":"                  Container("},{"type":"INSERT","lineNumber":376,"content":"                    decoration: BoxDecoration("},{"type":"MODIFY","lineNumber":379,"content":"                    ),","oldContent":"                    ),"},{"type":"DELETE","lineNumber":388,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":391,"oldContent":"                "},{"type":"INSERT","lineNumber":390,"content":"                  ),"},{"type":"INSERT","lineNumber":392,"content":""},{"type":"MODIFY","lineNumber":407,"content":"                          ),","oldContent":"                          ),"},{"type":"DELETE","lineNumber":421,"oldContent":"                          Text("},{"type":"MODIFY","lineNumber":424,"content":"                          ),","oldContent":"                              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":425,"content":"                          const SizedBox(width: 4),"},{"type":"INSERT","lineNumber":426,"content":"                          Text("},{"type":"INSERT","lineNumber":427,"content":"                            habit.category.name,"},{"type":"INSERT","lineNumber":428,"content":"                            style: TextStyle("},{"type":"INSERT","lineNumber":429,"content":"                              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":430,"content":"                              fontSize: 12,"},{"type":"DELETE","lineNumber":428,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":431,"oldContent":"                          const SizedBox(width: 4),"},{"type":"DELETE","lineNumber":433,"oldContent":"                            habit.category.name,"},{"type":"DELETE","lineNumber":435,"oldContent":"                            style: TextStyle("},{"type":"DELETE","lineNumber":436,"oldContent":"                              fontSize: 12,"},{"type":"MODIFY","lineNumber":438,"content":"","oldContent":"                "},{"type":"DELETE","lineNumber":449,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":451,"content":"                      ),"},{"type":"INSERT","lineNumber":459,"content":"                          Text('Mark Complete'),"},{"type":"INSERT","lineNumber":460,"content":"                        ],"},{"type":"DELETE","lineNumber":461,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":462,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":468,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":469,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":471,"content":"                      ),"},{"type":"INSERT","lineNumber":472,"content":"                    ),"},{"type":"DELETE","lineNumber":475,"oldContent":"            "},{"type":"MODIFY","lineNumber":477,"content":"","oldContent":"            "},{"type":"INSERT","lineNumber":479,"content":""},{"type":"MODIFY","lineNumber":504,"content":"","oldContent":"            "},{"type":"DELETE","lineNumber":508,"oldContent":"              ),"},{"type":"INSERT","lineNumber":510,"content":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"INSERT","lineNumber":511,"content":"                _getCompletionRateColor(habit.completionRate),"},{"type":"INSERT","lineNumber":512,"content":"              ),"},{"type":"INSERT","lineNumber":513,"content":"            ),"},{"type":"INSERT","lineNumber":514,"content":"          ],"},{"type":"DELETE","lineNumber":513,"oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"DELETE","lineNumber":515,"oldContent":"                _getCompletionRateColor(habit.completionRate),"},{"type":"DELETE","lineNumber":517,"oldContent":"            ),"},{"type":"DELETE","lineNumber":519,"oldContent":"          ],"},{"type":"DELETE","lineNumber":534,"oldContent":"    }"},{"type":"INSERT","lineNumber":535,"content":"        break;"},{"type":"INSERT","lineNumber":536,"content":"    }"},{"type":"DELETE","lineNumber":538,"oldContent":"        break;"},{"type":"INSERT","lineNumber":542,"content":"      builder: (context) => AlertDialog("},{"type":"DELETE","lineNumber":544,"oldContent":"      builder: (context) => AlertDialog("},{"type":"MODIFY","lineNumber":548,"content":"            child: const Text('Cancel'),","oldContent":"            child: const Text('Cancel'),"},{"type":"INSERT","lineNumber":549,"content":"          ),"},{"type":"INSERT","lineNumber":551,"content":"            onPressed: () {"},{"type":"INSERT","lineNumber":552,"content":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":551,"oldContent":"          ),"},{"type":"DELETE","lineNumber":553,"oldContent":"            onPressed: () {"},{"type":"INSERT","lineNumber":555,"content":"            },"},{"type":"DELETE","lineNumber":555,"oldContent":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":557,"oldContent":"            },"},{"type":"DELETE","lineNumber":558,"oldContent":"      ),"},{"type":"DELETE","lineNumber":560,"oldContent":"  Color _getRankColor(int rank) {"},{"type":"DELETE","lineNumber":562,"oldContent":"    if (rank == 1) return Colors.amber; // Gold"},{"type":"INSERT","lineNumber":560,"content":"      ),"},{"type":"DELETE","lineNumber":565,"oldContent":"    if (rank == 3) return Colors.orange[400]!; // Bronze"},{"type":"INSERT","lineNumber":564,"content":"  Color _getRankColor(int rank) {"},{"type":"INSERT","lineNumber":565,"content":"    if (rank == 1) return Colors.amber; // Gold"},{"type":"INSERT","lineNumber":566,"content":"    if (rank == 2) return Colors.grey[400]!; // Silver"},{"type":"INSERT","lineNumber":567,"content":"    if (rank == 3) return Colors.orange[400]!; // Bronze"},{"type":"DELETE","lineNumber":568,"oldContent":"    if (rank == 2) return Colors.grey[400]!; // Silver  "},{"type":"MODIFY","lineNumber":583,"content":"  Color _getCompletionRateColor(double rate) {","oldContent":"  Color _getCompletionRateColor(double rate) {"},{"type":"INSERT","lineNumber":611,"content":"  }"},{"type":"DELETE","lineNumber":613,"oldContent":"  }"},{"type":"INSERT","lineNumber":655,"content":"  final VoidCallback onSelected;"},{"type":"DELETE","lineNumber":656,"oldContent":""}]},{"timestamp":1754439733592,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import 'package:intl/intl.dart';"},{"type":"DELETE","lineNumber":5,"oldContent":"import '../../services/notification_service.dart';"},{"type":"DELETE","lineNumber":34,"oldContent":"    'Top Performers', "},{"type":"INSERT","lineNumber":32,"content":"    'Recent',"},{"type":"DELETE","lineNumber":40,"oldContent":"  @override"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"  @override"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"INSERT","lineNumber":46,"content":"          // Sort Menu"},{"type":"DELETE","lineNumber":49,"oldContent":"          PopupMenuButton<String>("},{"type":"DELETE","lineNumber":75,"oldContent":"                _selectedCategory = value;"},{"type":"DELETE","lineNumber":77,"oldContent":"              });"},{"type":"INSERT","lineNumber":75,"content":"          PopupMenuButton<String>("},{"type":"INSERT","lineNumber":76,"content":"            onSelected: (value) {"},{"type":"INSERT","lineNumber":77,"content":"              setState(() {"},{"type":"INSERT","lineNumber":78,"content":"                _selectedCategory = value;"},{"type":"INSERT","lineNumber":79,"content":"              });"},{"type":"INSERT","lineNumber":80,"content":"            },"},{"type":"DELETE","lineNumber":82,"oldContent":"          PopupMenuButton<String>("},{"type":"DELETE","lineNumber":85,"oldContent":"            onSelected: (value) {"},{"type":"DELETE","lineNumber":87,"oldContent":"              setState(() {"},{"type":"DELETE","lineNumber":89,"oldContent":"            },"},{"type":"DELETE","lineNumber":91,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":93,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":95,"oldContent":"                );"},{"type":"DELETE","lineNumber":98,"oldContent":"              }).toList();"},{"type":"INSERT","lineNumber":94,"content":"                    ],"},{"type":"INSERT","lineNumber":95,"content":"                  ),"},{"type":"INSERT","lineNumber":96,"content":"                );"},{"type":"INSERT","lineNumber":97,"content":"              }).toList();"},{"type":"MODIFY","lineNumber":100,"content":"          ),","oldContent":"          ),"},{"type":"DELETE","lineNumber":144,"oldContent":"          ),"},{"type":"INSERT","lineNumber":143,"content":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":144,"content":"                        const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":145,"content":"                      if (_selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":146,"content":"                        Chip("},{"type":"INSERT","lineNumber":147,"content":"                          label: Text('Sort: $_selectedSort'),"},{"type":"INSERT","lineNumber":148,"content":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":149,"content":"                          onDeleted: () => setState(() => _selectedSort = 'Recent'),"},{"type":"INSERT","lineNumber":150,"content":"                        ),"},{"type":"INSERT","lineNumber":151,"content":"                    ],"},{"type":"INSERT","lineNumber":152,"content":"                  ),"},{"type":"INSERT","lineNumber":153,"content":"                ),"},{"type":"INSERT","lineNumber":154,"content":"            ],"},{"type":"INSERT","lineNumber":155,"content":"          ),"},{"type":"DELETE","lineNumber":148,"oldContent":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":150,"oldContent":"                        const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":153,"oldContent":"                      if (_selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":155,"oldContent":"                        Chip("},{"type":"DELETE","lineNumber":158,"oldContent":"                          label: Text('Sort: $_selectedSort'),"},{"type":"DELETE","lineNumber":161,"oldContent":"                          deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"DELETE","lineNumber":163,"oldContent":"                          onDeleted: () => setState(() => _selectedSort = 'Recent'),"},{"type":"DELETE","lineNumber":166,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":168,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":171,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":174,"oldContent":"                ),"},{"type":"DELETE","lineNumber":176,"oldContent":"            ],"},{"type":"DELETE","lineNumber":178,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":180,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":179,"content":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":180,"content":"                        ),"},{"type":"DELETE","lineNumber":192,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":199,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":203,"oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":202,"content":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":206,"oldContent":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":207,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":208,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":210,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":213,"oldContent":"                  );"},{"type":"DELETE","lineNumber":215,"oldContent":"                }"},{"type":"DELETE","lineNumber":218,"oldContent":"                return ListView.builder("},{"type":"DELETE","lineNumber":220,"oldContent":"                  padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":222,"oldContent":"                  itemCount: filteredHabits.length,"},{"type":"INSERT","lineNumber":215,"content":"                        ),"},{"type":"INSERT","lineNumber":216,"content":"                      ],"},{"type":"INSERT","lineNumber":217,"content":"                    ),"},{"type":"INSERT","lineNumber":218,"content":"                  );"},{"type":"INSERT","lineNumber":219,"content":"                }"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"                return ListView.builder("},{"type":"INSERT","lineNumber":222,"content":"                  padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":223,"content":"                  itemCount: filteredHabits.length,"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":228,"oldContent":"                  },"},{"type":"DELETE","lineNumber":229,"oldContent":"                );"},{"type":"DELETE","lineNumber":232,"oldContent":"              },"},{"type":"DELETE","lineNumber":234,"oldContent":"            ),"},{"type":"DELETE","lineNumber":236,"oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"DELETE","lineNumber":238,"oldContent":"            error: (error, stack) => Center("},{"type":"INSERT","lineNumber":233,"content":"                  },"},{"type":"INSERT","lineNumber":234,"content":"                );"},{"type":"INSERT","lineNumber":235,"content":"              },"},{"type":"DELETE","lineNumber":242,"oldContent":"          );"},{"type":"DELETE","lineNumber":243,"oldContent":"        },"},{"type":"INSERT","lineNumber":237,"content":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"INSERT","lineNumber":238,"content":"            error: (error, stack) => Center("},{"type":"DELETE","lineNumber":245,"oldContent":"      ),"},{"type":"DELETE","lineNumber":248,"oldContent":"    );"},{"type":"DELETE","lineNumber":252,"oldContent":"  }"},{"type":"DELETE","lineNumber":254,"oldContent":""},{"type":"DELETE","lineNumber":256,"oldContent":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":247,"content":"            ),"},{"type":"INSERT","lineNumber":248,"content":"          );"},{"type":"INSERT","lineNumber":249,"content":"        },"},{"type":"INSERT","lineNumber":250,"content":"      ),"},{"type":"INSERT","lineNumber":251,"content":"    );"},{"type":"INSERT","lineNumber":252,"content":"  }"},{"type":"DELETE","lineNumber":258,"oldContent":"    if (_selectedCategory != 'All') {"},{"type":"DELETE","lineNumber":260,"oldContent":"    }"},{"type":"DELETE","lineNumber":261,"oldContent":"    // Apply category filter"},{"type":"INSERT","lineNumber":255,"content":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":257,"content":"    // Apply category filter"},{"type":"INSERT","lineNumber":258,"content":"    if (_selectedCategory != 'All') {"},{"type":"DELETE","lineNumber":264,"oldContent":"    switch (_selectedFilter) {"},{"type":"DELETE","lineNumber":266,"oldContent":"        break;"},{"type":"DELETE","lineNumber":267,"oldContent":"        break;"},{"type":"INSERT","lineNumber":261,"content":"    }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"DELETE","lineNumber":269,"oldContent":"      case 'All':"},{"type":"INSERT","lineNumber":264,"content":"    switch (_selectedFilter) {"},{"type":"DELETE","lineNumber":272,"oldContent":"      default:"},{"type":"DELETE","lineNumber":273,"oldContent":"      case 'Struggling':"},{"type":"INSERT","lineNumber":268,"content":"      case 'Struggling':"},{"type":"INSERT","lineNumber":271,"content":"        break;"},{"type":"INSERT","lineNumber":272,"content":"      case 'All':"},{"type":"INSERT","lineNumber":273,"content":"      default:"},{"type":"INSERT","lineNumber":274,"content":"        // No additional filtering"},{"type":"INSERT","lineNumber":275,"content":"        break;"},{"type":"DELETE","lineNumber":279,"oldContent":"        // No additional filtering"},{"type":"DELETE","lineNumber":300,"oldContent":"    return filtered;"},{"type":"DELETE","lineNumber":302,"oldContent":"  }"},{"type":"INSERT","lineNumber":301,"content":"    return filtered;"},{"type":"INSERT","lineNumber":302,"content":"  }"},{"type":"DELETE","lineNumber":319,"oldContent":"    }"},{"type":"INSERT","lineNumber":318,"content":"        return Icons.access_time;"},{"type":"INSERT","lineNumber":319,"content":"    }"},{"type":"DELETE","lineNumber":323,"oldContent":"        return Icons.access_time;"},{"type":"DELETE","lineNumber":343,"oldContent":"    }"},{"type":"MODIFY","lineNumber":343,"content":"    }","oldContent":"  }"},{"type":"INSERT","lineNumber":344,"content":"  }"},{"type":"MODIFY","lineNumber":347,"content":"class _HabitCard extends StatelessWidget {","oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"MODIFY","lineNumber":351,"content":"","oldContent":""},{"type":"DELETE","lineNumber":360,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":362,"oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":360,"content":"    return Card("},{"type":"INSERT","lineNumber":361,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"MODIFY","lineNumber":371,"content":"                  Container(","oldContent":"                  Container("},{"type":"MODIFY","lineNumber":374,"content":"                    decoration: BoxDecoration(","oldContent":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":379,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":389,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":391,"oldContent":""},{"type":"INSERT","lineNumber":388,"content":"                  ),"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":404,"content":"                            ),"},{"type":"DELETE","lineNumber":407,"oldContent":"                          ),"},{"type":"INSERT","lineNumber":421,"content":"                            color: Colors.grey[600],"},{"type":"DELETE","lineNumber":425,"oldContent":"                            color: Colors.grey[600],"},{"type":"DELETE","lineNumber":427,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":429,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":432,"oldContent":"                        ],"},{"type":"INSERT","lineNumber":429,"content":"                            ),"},{"type":"INSERT","lineNumber":430,"content":"                          ),"},{"type":"INSERT","lineNumber":431,"content":"                        ],"},{"type":"DELETE","lineNumber":437,"oldContent":"                "},{"type":"INSERT","lineNumber":435,"content":"                ),"},{"type":"MODIFY","lineNumber":449,"content":"                      ),","oldContent":"                      ),"},{"type":"MODIFY","lineNumber":459,"content":"                      ),","oldContent":"                      ),"},{"type":"DELETE","lineNumber":469,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":471,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":469,"content":"                      ),"},{"type":"INSERT","lineNumber":470,"content":"                    ),"},{"type":"INSERT","lineNumber":474,"content":"            ),"},{"type":"DELETE","lineNumber":477,"oldContent":"            "},{"type":"MODIFY","lineNumber":477,"content":"","oldContent":""},{"type":"DELETE","lineNumber":503,"oldContent":"            "},{"type":"INSERT","lineNumber":501,"content":"            ),"},{"type":"MODIFY","lineNumber":508,"content":"              valueColor: AlwaysStoppedAnimation<Color>(","oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"DELETE","lineNumber":512,"oldContent":"        ),"},{"type":"MODIFY","lineNumber":513,"content":"        ),","oldContent":"      ),"},{"type":"INSERT","lineNumber":514,"content":"      ),"},{"type":"MODIFY","lineNumber":533,"content":"        break;","oldContent":"        break;"},{"type":"INSERT","lineNumber":545,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":548,"oldContent":"            child: const Text('Cancel'),"},{"type":"MODIFY","lineNumber":551,"content":"              // Handle delete","oldContent":"              // Handle delete"},{"type":"MODIFY","lineNumber":554,"content":"            style: TextButton.styleFrom(foregroundColor: Colors.red),","oldContent":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"MODIFY","lineNumber":558,"content":"      ),","oldContent":"      ),"},{"type":"DELETE","lineNumber":562,"oldContent":"  Color _getRankColor(int rank) {"},{"type":"INSERT","lineNumber":561,"content":""},{"type":"INSERT","lineNumber":562,"content":"  Color _getRankColor(int rank) {"},{"type":"DELETE","lineNumber":566,"oldContent":""},{"type":"INSERT","lineNumber":580,"content":""},{"type":"DELETE","lineNumber":583,"oldContent":"  Color _getCompletionRateColor(double rate) {"}]},{"timestamp":1754439897307,"changes":[{"type":"DELETE","lineNumber":30,"oldContent":"    'Recent',"},{"type":"INSERT","lineNumber":32,"content":"    'Recent',"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"MODIFY","lineNumber":39,"content":"","oldContent":"  @override"},{"type":"INSERT","lineNumber":40,"content":"  @override"},{"type":"DELETE","lineNumber":44,"oldContent":"          // Sort Menu"},{"type":"INSERT","lineNumber":46,"content":"          // Sort Menu"},{"type":"INSERT","lineNumber":73,"content":"          ),"},{"type":"INSERT","lineNumber":74,"content":"          // Category Filter Menu"},{"type":"DELETE","lineNumber":75,"oldContent":"          ),"},{"type":"DELETE","lineNumber":78,"oldContent":"          // Category Filter Menu"},{"type":"MODIFY","lineNumber":81,"content":"            itemBuilder: (BuildContext context) {","oldContent":"            itemBuilder: (BuildContext context) {"},{"type":"DELETE","lineNumber":90,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":92,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":93,"oldContent":"                );"},{"type":"DELETE","lineNumber":95,"oldContent":"              }).toList();"},{"type":"DELETE","lineNumber":98,"oldContent":"          ),"},{"type":"DELETE","lineNumber":99,"oldContent":"          ),"},{"type":"INSERT","lineNumber":94,"content":"                    ],"},{"type":"INSERT","lineNumber":95,"content":"                  ),"},{"type":"INSERT","lineNumber":96,"content":"                );"},{"type":"INSERT","lineNumber":97,"content":"              }).toList();"},{"type":"INSERT","lineNumber":98,"content":"            },"},{"type":"INSERT","lineNumber":100,"content":"          ),"},{"type":"DELETE","lineNumber":141,"oldContent":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"INSERT","lineNumber":142,"content":"                        ),"},{"type":"INSERT","lineNumber":143,"content":"                      if (_selectedCategory != 'All' && _selectedSort != 'Recent')"},{"type":"DELETE","lineNumber":145,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":147,"oldContent":"        ),"},{"type":"DELETE","lineNumber":149,"oldContent":"      ),"},{"type":"DELETE","lineNumber":152,"oldContent":"      body: Consumer("},{"type":"DELETE","lineNumber":155,"oldContent":"        builder: (context, ref, child) {"},{"type":"DELETE","lineNumber":157,"oldContent":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"INSERT","lineNumber":156,"content":"        ),"},{"type":"INSERT","lineNumber":157,"content":"      ),"},{"type":"INSERT","lineNumber":158,"content":"      body: Consumer("},{"type":"INSERT","lineNumber":159,"content":"        builder: (context, ref, child) {"},{"type":"INSERT","lineNumber":160,"content":"          final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"DELETE","lineNumber":176,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":178,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":179,"content":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":180,"content":"                        ),"},{"type":"DELETE","lineNumber":189,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"DELETE","lineNumber":197,"oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":199,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"MODIFY","lineNumber":202,"content":"                          'No habits match your filters',","oldContent":"                          'No habits match your filters',"},{"type":"INSERT","lineNumber":209,"content":"                              _selectedFilter = 'All';"},{"type":"INSERT","lineNumber":210,"content":"                              _selectedCategory = 'All';"},{"type":"INSERT","lineNumber":211,"content":"                              _selectedSort = 'Recent';"},{"type":"INSERT","lineNumber":212,"content":"                            });"},{"type":"INSERT","lineNumber":213,"content":"                          },"},{"type":"INSERT","lineNumber":214,"content":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":211,"oldContent":"                              _selectedFilter = 'All';"},{"type":"DELETE","lineNumber":213,"oldContent":"                              _selectedCategory = 'All';"},{"type":"DELETE","lineNumber":216,"oldContent":"                              _selectedSort = 'Recent';"},{"type":"DELETE","lineNumber":219,"oldContent":"                            });"},{"type":"DELETE","lineNumber":222,"oldContent":"                          },"},{"type":"DELETE","lineNumber":223,"oldContent":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":228,"oldContent":"                  },"},{"type":"DELETE","lineNumber":230,"oldContent":"                );"},{"type":"DELETE","lineNumber":231,"oldContent":"              },"},{"type":"DELETE","lineNumber":233,"oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"DELETE","lineNumber":235,"oldContent":"            error: (error, stack) => Center("},{"type":"INSERT","lineNumber":233,"content":"                  },"},{"type":"INSERT","lineNumber":234,"content":"                );"},{"type":"INSERT","lineNumber":235,"content":"              },"},{"type":"INSERT","lineNumber":237,"content":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"INSERT","lineNumber":238,"content":"            error: (error, stack) => Center("},{"type":"DELETE","lineNumber":241,"oldContent":"            ),"},{"type":"INSERT","lineNumber":242,"content":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":243,"content":"                  const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":244,"content":"                  Text('Error loading habits: $error'),"},{"type":"INSERT","lineNumber":245,"content":"                ],"},{"type":"INSERT","lineNumber":246,"content":"              ),"},{"type":"INSERT","lineNumber":247,"content":"            ),"},{"type":"DELETE","lineNumber":245,"oldContent":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"DELETE","lineNumber":247,"oldContent":"                  const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":249,"oldContent":"                  Text('Error loading habits: $error'),"},{"type":"DELETE","lineNumber":251,"oldContent":"                ],"},{"type":"INSERT","lineNumber":253,"content":""},{"type":"INSERT","lineNumber":254,"content":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":253,"oldContent":"              ),"},{"type":"DELETE","lineNumber":254,"oldContent":"    // Apply category filter"},{"type":"INSERT","lineNumber":257,"content":"    // Apply category filter"},{"type":"DELETE","lineNumber":257,"oldContent":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"INSERT","lineNumber":259,"content":"      filtered = filtered.where((habit) =>"},{"type":"INSERT","lineNumber":260,"content":"        habit.category == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":260,"oldContent":""},{"type":"DELETE","lineNumber":261,"oldContent":"      filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":262,"oldContent":"    switch (_selectedFilter) {"},{"type":"DELETE","lineNumber":263,"oldContent":"        habit.category.name == _selectedCategory).toList();"},{"type":"MODIFY","lineNumber":264,"content":"    switch (_selectedFilter) {","oldContent":"      case 'Struggling':"},{"type":"MODIFY","lineNumber":267,"content":"        break;","oldContent":"        break;"},{"type":"INSERT","lineNumber":268,"content":"      case 'Struggling':"},{"type":"INSERT","lineNumber":269,"content":"        filtered = filtered.where((habit) =>"},{"type":"INSERT","lineNumber":270,"content":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"INSERT","lineNumber":271,"content":"        break;"},{"type":"DELETE","lineNumber":273,"oldContent":"        break;"},{"type":"DELETE","lineNumber":274,"oldContent":"        filtered = filtered.where((habit) =>"},{"type":"DELETE","lineNumber":275,"oldContent":"          habit.completionRate < 0.5 || habit.currentStreak == 0).toList();"},{"type":"DELETE","lineNumber":298,"oldContent":"    return filtered;"},{"type":"DELETE","lineNumber":300,"oldContent":"  }"},{"type":"INSERT","lineNumber":301,"content":"    return filtered;"},{"type":"INSERT","lineNumber":302,"content":"  }"},{"type":"DELETE","lineNumber":316,"oldContent":"        return Icons.access_time;"},{"type":"MODIFY","lineNumber":318,"content":"        return Icons.access_time;","oldContent":"    }"},{"type":"INSERT","lineNumber":319,"content":"    }"},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"DELETE","lineNumber":342,"oldContent":"  }"},{"type":"DELETE","lineNumber":345,"oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"DELETE","lineNumber":346,"oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":343,"content":"    }"},{"type":"INSERT","lineNumber":344,"content":"  }"},{"type":"INSERT","lineNumber":345,"content":"}"},{"type":"INSERT","lineNumber":347,"content":"class _HabitCard extends StatelessWidget {"},{"type":"DELETE","lineNumber":349,"oldContent":""},{"type":"DELETE","lineNumber":350,"oldContent":""},{"type":"INSERT","lineNumber":349,"content":"  final int? rank;"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"DELETE","lineNumber":358,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":359,"oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":360,"content":"    return Card("},{"type":"INSERT","lineNumber":361,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"DELETE","lineNumber":369,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":370,"oldContent":"                  Container("},{"type":"INSERT","lineNumber":369,"content":"                // Rank indicator"},{"type":"DELETE","lineNumber":372,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":373,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":374,"oldContent":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":371,"content":"                  Container("},{"type":"INSERT","lineNumber":372,"content":"                    width: 32,"},{"type":"INSERT","lineNumber":374,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":386,"oldContent":"                  ),"},{"type":"MODIFY","lineNumber":388,"content":"                  ),","oldContent":""},{"type":"INSERT","lineNumber":390,"content":""},{"type":"DELETE","lineNumber":402,"oldContent":"                            ),"},{"type":"INSERT","lineNumber":404,"content":"                            ),"},{"type":"DELETE","lineNumber":419,"oldContent":"                            color: Colors.grey[600],"},{"type":"INSERT","lineNumber":421,"content":"                            color: Colors.grey[600],"},{"type":"DELETE","lineNumber":426,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":427,"oldContent":"                          ),"},{"type":"MODIFY","lineNumber":429,"content":"                            ),","oldContent":"                        ],"},{"type":"INSERT","lineNumber":430,"content":"                          ),"},{"type":"INSERT","lineNumber":431,"content":"                        ],"},{"type":"DELETE","lineNumber":433,"oldContent":"                ),"},{"type":"INSERT","lineNumber":435,"content":"                ),"},{"type":"DELETE","lineNumber":447,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":448,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":447,"content":"                          Text('Edit'),"},{"type":"INSERT","lineNumber":449,"content":"                      ),"},{"type":"DELETE","lineNumber":457,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":458,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":457,"content":"                          Text('Mark Complete'),"},{"type":"INSERT","lineNumber":459,"content":"                      ),"},{"type":"DELETE","lineNumber":467,"oldContent":"                      ),"},{"type":"MODIFY","lineNumber":469,"content":"                      ),","oldContent":"                    ),"},{"type":"INSERT","lineNumber":470,"content":"                    ),"},{"type":"DELETE","lineNumber":472,"oldContent":"            ),"},{"type":"INSERT","lineNumber":474,"content":"            ),"},{"type":"MODIFY","lineNumber":477,"content":"","oldContent":""},{"type":"DELETE","lineNumber":499,"oldContent":"            ),"},{"type":"INSERT","lineNumber":501,"content":"            ),"},{"type":"DELETE","lineNumber":506,"oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"MODIFY","lineNumber":506,"content":"              value: habit.completionRate,","oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"INSERT","lineNumber":508,"content":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"DELETE","lineNumber":510,"oldContent":"        ),"},{"type":"DELETE","lineNumber":511,"oldContent":"      ),"},{"type":"DELETE","lineNumber":512,"oldContent":"      ),"},{"type":"INSERT","lineNumber":510,"content":"              ),"},{"type":"INSERT","lineNumber":513,"content":"        ),"},{"type":"INSERT","lineNumber":514,"content":"      ),"},{"type":"DELETE","lineNumber":531,"oldContent":"        break;"},{"type":"DELETE","lineNumber":532,"oldContent":"        break;"},{"type":"INSERT","lineNumber":531,"content":"      case 'delete':"},{"type":"INSERT","lineNumber":533,"content":"        break;"},{"type":"DELETE","lineNumber":543,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":545,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"DELETE","lineNumber":549,"oldContent":"              // Handle delete"},{"type":"DELETE","lineNumber":552,"oldContent":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"DELETE","lineNumber":553,"oldContent":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"INSERT","lineNumber":551,"content":"              // Handle delete"},{"type":"INSERT","lineNumber":552,"content":"              AppLogger.info('Deleting habit: ${habit.name}');"},{"type":"INSERT","lineNumber":554,"content":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"DELETE","lineNumber":556,"oldContent":"      ),"},{"type":"MODIFY","lineNumber":556,"content":"          ),","oldContent":"      ),"},{"type":"DELETE","lineNumber":559,"oldContent":""},{"type":"INSERT","lineNumber":558,"content":"      ),"},{"type":"MODIFY","lineNumber":561,"content":"","oldContent":"  Color _getRankColor(int rank) {"},{"type":"INSERT","lineNumber":562,"content":"  Color _getRankColor(int rank) {"},{"type":"DELETE","lineNumber":578,"oldContent":""},{"type":"INSERT","lineNumber":580,"content":""}]},{"timestamp":1754439912713,"changes":[{"type":"MODIFY","lineNumber":32,"content":"    'Recent',","oldContent":"    'Recent',"},{"type":"INSERT","lineNumber":38,"content":"  ];"},{"type":"DELETE","lineNumber":40,"oldContent":"  ];"},{"type":"MODIFY","lineNumber":46,"content":"          // Sort Menu","oldContent":"          // Sort Menu"},{"type":"MODIFY","lineNumber":75,"content":"          PopupMenuButton<String>(","oldContent":"          PopupMenuButton<String>("},{"type":"INSERT","lineNumber":80,"content":"            },"},{"type":"DELETE","lineNumber":81,"oldContent":"            itemBuilder: (BuildContext context) {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    ],"},{"type":"INSERT","lineNumber":92,"content":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"INSERT","lineNumber":93,"content":"                      ],"},{"type":"INSERT","lineNumber":94,"content":"                    ],"},{"type":"DELETE","lineNumber":95,"oldContent":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"DELETE","lineNumber":97,"oldContent":"                      ],"},{"type":"MODIFY","lineNumber":100,"content":"          ),","oldContent":"          ),"},{"type":"MODIFY","lineNumber":142,"content":"                        ),","oldContent":"                        ),"},{"type":"MODIFY","lineNumber":153,"content":"                ),","oldContent":"        ),"},{"type":"INSERT","lineNumber":154,"content":"            ],"},{"type":"INSERT","lineNumber":155,"content":"          ),"},{"type":"INSERT","lineNumber":156,"content":"        ),"},{"type":"DELETE","lineNumber":156,"oldContent":"                ),"},{"type":"DELETE","lineNumber":158,"oldContent":"            ],"},{"type":"DELETE","lineNumber":161,"oldContent":"          ),"},{"type":"DELETE","lineNumber":177,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"MODIFY","lineNumber":179,"content":"                          style: TextStyle(fontSize: 18, color: Colors.grey),","oldContent":"                        ),"},{"type":"INSERT","lineNumber":180,"content":"                        ),"},{"type":"DELETE","lineNumber":190,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"MODIFY","lineNumber":199,"content":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),","oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":201,"content":"                        Text("},{"type":"DELETE","lineNumber":202,"oldContent":"                          'No habits match your filters',"},{"type":"DELETE","lineNumber":210,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":212,"oldContent":"                      ],"},{"type":"MODIFY","lineNumber":215,"content":"                        ),","oldContent":"                    ),"},{"type":"INSERT","lineNumber":216,"content":"                      ],"},{"type":"INSERT","lineNumber":217,"content":"                    ),"},{"type":"INSERT","lineNumber":230,"content":"                          : null,"},{"type":"INSERT","lineNumber":231,"content":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"INSERT","lineNumber":232,"content":"                    );"},{"type":"DELETE","lineNumber":232,"oldContent":"                          : null,"},{"type":"DELETE","lineNumber":234,"oldContent":"                      showPerformanceIndicator: _selectedSort.contains('Performers'),"},{"type":"INSERT","lineNumber":236,"content":"            ),"},{"type":"DELETE","lineNumber":236,"oldContent":"                    );"},{"type":"DELETE","lineNumber":238,"oldContent":"            ),"},{"type":"MODIFY","lineNumber":242,"content":"                  const Icon(Icons.error, size: 64, color: Colors.red),","oldContent":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"DELETE","lineNumber":244,"oldContent":"          );"},{"type":"DELETE","lineNumber":246,"oldContent":"        },"},{"type":"MODIFY","lineNumber":248,"content":"          );","oldContent":"      ),"},{"type":"INSERT","lineNumber":249,"content":"        },"},{"type":"INSERT","lineNumber":250,"content":"      ),"},{"type":"DELETE","lineNumber":253,"oldContent":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":255,"content":"    List<Habit> filtered = habits;"},{"type":"DELETE","lineNumber":257,"oldContent":"    if (_selectedCategory != 'All') {"},{"type":"DELETE","lineNumber":259,"oldContent":"    }"},{"type":"INSERT","lineNumber":258,"content":"    if (_selectedCategory != 'All') {"},{"type":"DELETE","lineNumber":261,"oldContent":""},{"type":"DELETE","lineNumber":263,"oldContent":"    switch (_selectedFilter) {"},{"type":"INSERT","lineNumber":261,"content":"    }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":264,"content":"    switch (_selectedFilter) {"},{"type":"INSERT","lineNumber":266,"content":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":268,"oldContent":"        filtered = filtered.where((habit) => habit.currentStreak > 0).toList();"},{"type":"DELETE","lineNumber":270,"oldContent":"      case 'All':"},{"type":"MODIFY","lineNumber":272,"content":"      case 'All':","oldContent":"      default:"},{"type":"INSERT","lineNumber":273,"content":"      default:"},{"type":"DELETE","lineNumber":299,"oldContent":"    return filtered;"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"    return filtered;"},{"type":"DELETE","lineNumber":303,"oldContent":""},{"type":"INSERT","lineNumber":317,"content":"      default:"},{"type":"DELETE","lineNumber":319,"oldContent":"      default:"},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"MODIFY","lineNumber":343,"content":"    }","oldContent":"  }"},{"type":"INSERT","lineNumber":344,"content":"  }"},{"type":"MODIFY","lineNumber":347,"content":"class _HabitCard extends StatelessWidget {","oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"MODIFY","lineNumber":351,"content":"","oldContent":""},{"type":"DELETE","lineNumber":358,"oldContent":"    return Card("},{"type":"MODIFY","lineNumber":360,"content":"    return Card(","oldContent":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"INSERT","lineNumber":361,"content":"      margin: const EdgeInsets.only(bottom: 12),"},{"type":"MODIFY","lineNumber":371,"content":"                  Container(","oldContent":"                  Container("},{"type":"DELETE","lineNumber":373,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":375,"oldContent":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":374,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":387,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"INSERT","lineNumber":388,"content":"                  ),"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"MODIFY","lineNumber":404,"content":"                            ),","oldContent":"                            ),"},{"type":"DELETE","lineNumber":419,"oldContent":"                            _getCategoryIcon(habit.category.name),"},{"type":"DELETE","lineNumber":420,"oldContent":"                            color: Colors.grey[600],"},{"type":"INSERT","lineNumber":419,"content":"                            _getCategoryIcon(habit.category),"},{"type":"INSERT","lineNumber":421,"content":"                            color: Colors.grey[600],"},{"type":"MODIFY","lineNumber":425,"content":"                            habit.category,","oldContent":"                            habit.category.name,"},{"type":"INSERT","lineNumber":427,"content":"                              color: Colors.grey[600],"},{"type":"INSERT","lineNumber":428,"content":"                              fontSize: 12,"},{"type":"DELETE","lineNumber":429,"oldContent":"                              color: Colors.grey[600],"},{"type":"DELETE","lineNumber":431,"oldContent":"                              fontSize: 12,"},{"type":"MODIFY","lineNumber":435,"content":"                ),","oldContent":"                ),"},{"type":"MODIFY","lineNumber":449,"content":"                      ),","oldContent":"                      ),"},{"type":"MODIFY","lineNumber":459,"content":"                      ),","oldContent":"                      ),"},{"type":"MODIFY","lineNumber":467,"content":"                          Text('Delete', style: TextStyle(color: Colors.red)),","oldContent":"                    ),"},{"type":"INSERT","lineNumber":468,"content":"                        ],"},{"type":"DELETE","lineNumber":470,"oldContent":"                        ],"},{"type":"MODIFY","lineNumber":474,"content":"            ),","oldContent":"            ),"},{"type":"INSERT","lineNumber":476,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":477,"oldContent":""},{"type":"MODIFY","lineNumber":501,"content":"            ),","oldContent":"            ),"},{"type":"MODIFY","lineNumber":508,"content":"              valueColor: AlwaysStoppedAnimation<Color>(","oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"DELETE","lineNumber":511,"oldContent":"        ),"},{"type":"MODIFY","lineNumber":513,"content":"        ),","oldContent":"      ),"},{"type":"INSERT","lineNumber":514,"content":"      ),"},{"type":"MODIFY","lineNumber":533,"content":"        break;","oldContent":"        break;"},{"type":"MODIFY","lineNumber":545,"content":"            onPressed: () => Navigator.of(context).pop(),","oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"MODIFY","lineNumber":551,"content":"              // Handle delete","oldContent":"              // Handle delete"},{"type":"MODIFY","lineNumber":554,"content":"            style: TextButton.styleFrom(foregroundColor: Colors.red),","oldContent":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"MODIFY","lineNumber":558,"content":"      ),","oldContent":"      ),"},{"type":"INSERT","lineNumber":560,"content":"  }"},{"type":"DELETE","lineNumber":562,"oldContent":"  }"},{"type":"MODIFY","lineNumber":580,"content":"","oldContent":""},{"type":"INSERT","lineNumber":606,"content":"      case 'all':"},{"type":"MODIFY","lineNumber":608,"content":"        return Icons.apps;","oldContent":"        return Icons.track_changes;"}]},{"timestamp":1754440759050,"changes":[{"type":"INSERT","lineNumber":31,"content":"  final List<String> _sortOptions = ["},{"type":"DELETE","lineNumber":32,"oldContent":"    'Recent',"},{"type":"INSERT","lineNumber":45,"content":"        actions: ["},{"type":"DELETE","lineNumber":46,"oldContent":"          // Sort Menu"},{"type":"INSERT","lineNumber":74,"content":"          // Category Filter Menu"},{"type":"DELETE","lineNumber":75,"oldContent":"          PopupMenuButton<String>("},{"type":"MODIFY","lineNumber":92,"content":"                        const Icon(Icons.check, size: 16, color: Colors.green),","oldContent":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"MODIFY","lineNumber":95,"content":"                  ),","oldContent":"                  ),"},{"type":"INSERT","lineNumber":99,"content":"            icon: const Icon(Icons.filter_list),"},{"type":"DELETE","lineNumber":100,"oldContent":"          ),"},{"type":"INSERT","lineNumber":141,"content":"                          onDeleted: () => setState(() => _selectedCategory = 'All'),"},{"type":"DELETE","lineNumber":142,"oldContent":"                        ),"},{"type":"MODIFY","lineNumber":152,"content":"                  ),","oldContent":"        ),"},{"type":"DELETE","lineNumber":155,"oldContent":"      ),"},{"type":"MODIFY","lineNumber":157,"content":"      ),","oldContent":"      body: Consumer("},{"type":"INSERT","lineNumber":158,"content":"      body: Consumer("},{"type":"INSERT","lineNumber":178,"content":"                          'No habits yet',"},{"type":"DELETE","lineNumber":180,"oldContent":"                          'No habits yet',"},{"type":"DELETE","lineNumber":190,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":198,"content":"                      children: ["},{"type":"DELETE","lineNumber":199,"oldContent":"                        const Icon(Icons.search_off, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":213,"content":"                          },"},{"type":"INSERT","lineNumber":214,"content":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":215,"oldContent":"                          },"},{"type":"DELETE","lineNumber":217,"oldContent":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":231,"oldContent":"                  },"},{"type":"MODIFY","lineNumber":233,"content":"                  },","oldContent":"                );"},{"type":"INSERT","lineNumber":234,"content":"                );"},{"type":"MODIFY","lineNumber":237,"content":"            loading: () => const Center(child: CircularProgressIndicator()),","oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"INSERT","lineNumber":241,"content":"                children: ["},{"type":"DELETE","lineNumber":242,"oldContent":"                  const Icon(Icons.error, size: 64, color: Colors.red),"},{"type":"INSERT","lineNumber":246,"content":"              ),"},{"type":"INSERT","lineNumber":247,"content":"            ),"},{"type":"DELETE","lineNumber":249,"oldContent":"      ),"},{"type":"DELETE","lineNumber":250,"oldContent":"            ),"},{"type":"MODIFY","lineNumber":255,"content":"    List<Habit> filtered = habits;","oldContent":"    List<Habit> filtered = habits;"},{"type":"MODIFY","lineNumber":258,"content":"    if (_selectedCategory != 'All') {","oldContent":"    if (_selectedCategory != 'All') {"},{"type":"INSERT","lineNumber":260,"content":"        habit.category == _selectedCategory).toList();"},{"type":"DELETE","lineNumber":262,"oldContent":"        habit.category == _selectedCategory).toList();"},{"type":"MODIFY","lineNumber":264,"content":"    switch (_selectedFilter) {","oldContent":"    switch (_selectedFilter) {"},{"type":"INSERT","lineNumber":271,"content":"        break;"},{"type":"DELETE","lineNumber":273,"oldContent":"        break;"},{"type":"MODIFY","lineNumber":300,"content":"","oldContent":""},{"type":"INSERT","lineNumber":342,"content":"        return Icons.apps;"},{"type":"DELETE","lineNumber":344,"oldContent":"        return Icons.apps;"},{"type":"INSERT","lineNumber":346,"content":""},{"type":"DELETE","lineNumber":347,"oldContent":"class _HabitCard extends StatelessWidget {"},{"type":"INSERT","lineNumber":350,"content":"  final bool showPerformanceIndicator;"},{"type":"DELETE","lineNumber":351,"oldContent":""},{"type":"INSERT","lineNumber":359,"content":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":361,"oldContent":"  Widget build(BuildContext context) {"},{"type":"INSERT","lineNumber":370,"content":"                if (rank != null)"},{"type":"DELETE","lineNumber":371,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":373,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":375,"oldContent":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":374,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":387,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"INSERT","lineNumber":388,"content":"                  ),"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":403,"content":"                              ),"},{"type":"DELETE","lineNumber":404,"oldContent":"                            ),"},{"type":"MODIFY","lineNumber":421,"content":"                            color: Colors.grey[600],","oldContent":"                            color: Colors.grey[600],"},{"type":"MODIFY","lineNumber":429,"content":"                            ),","oldContent":"                            ),"},{"type":"INSERT","lineNumber":434,"content":"                  ),"},{"type":"DELETE","lineNumber":435,"oldContent":"                ),"},{"type":"INSERT","lineNumber":448,"content":"                        ],"},{"type":"DELETE","lineNumber":449,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":458,"content":"                        ],"},{"type":"DELETE","lineNumber":459,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":473,"content":"              ],"},{"type":"DELETE","lineNumber":474,"oldContent":"            ),"},{"type":"INSERT","lineNumber":500,"content":"              ],"},{"type":"DELETE","lineNumber":501,"oldContent":"            ),"},{"type":"INSERT","lineNumber":507,"content":"              backgroundColor: Colors.grey[300],"},{"type":"DELETE","lineNumber":508,"oldContent":"              valueColor: AlwaysStoppedAnimation<Color>("},{"type":"INSERT","lineNumber":512,"content":"          ],"},{"type":"DELETE","lineNumber":514,"oldContent":"          ],"},{"type":"INSERT","lineNumber":532,"content":"        _showDeleteDialog(context);"},{"type":"DELETE","lineNumber":533,"oldContent":"        break;"},{"type":"INSERT","lineNumber":544,"content":"          TextButton("},{"type":"DELETE","lineNumber":545,"oldContent":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":550,"content":"              Navigator.of(context).pop();"},{"type":"DELETE","lineNumber":551,"oldContent":"              // Handle delete"},{"type":"INSERT","lineNumber":553,"content":"            },"},{"type":"DELETE","lineNumber":554,"oldContent":"            style: TextButton.styleFrom(foregroundColor: Colors.red),"},{"type":"INSERT","lineNumber":557,"content":"        ],"},{"type":"DELETE","lineNumber":558,"oldContent":"      ),"},{"type":"INSERT","lineNumber":579,"content":"  }"},{"type":"DELETE","lineNumber":580,"oldContent":""},{"type":"DELETE","lineNumber":608,"oldContent":"        return Icons.track_changes;"},{"type":"INSERT","lineNumber":609,"content":"    }"}]},{"timestamp":1754444325159,"changes":[{"type":"INSERT","lineNumber":91,"content":"                        const Spacer(),"},{"type":"DELETE","lineNumber":92,"oldContent":"                        const Icon(Icons.check, size: 16, color: Colors.green),"},{"type":"INSERT","lineNumber":94,"content":"                    ],"},{"type":"DELETE","lineNumber":95,"oldContent":"                  ),"},{"type":"INSERT","lineNumber":156,"content":"        ),"},{"type":"DELETE","lineNumber":158,"oldContent":"        ),"},{"type":"DELETE","lineNumber":190,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"MODIFY","lineNumber":215,"content":"                        ),","oldContent":"                        ),"},{"type":"INSERT","lineNumber":232,"content":"                    );"},{"type":"DELETE","lineNumber":234,"oldContent":"                    );"},{"type":"INSERT","lineNumber":236,"content":"            ),"},{"type":"DELETE","lineNumber":237,"oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"MODIFY","lineNumber":248,"content":"          );","oldContent":"          );"},{"type":"INSERT","lineNumber":254,"content":"  List<Habit> _filterAndSortHabits(List<Habit> habits) {"},{"type":"DELETE","lineNumber":255,"oldContent":"    List<Habit> filtered = habits;"},{"type":"INSERT","lineNumber":257,"content":"    // Apply category filter"},{"type":"DELETE","lineNumber":258,"oldContent":"    if (_selectedCategory != 'All') {"},{"type":"INSERT","lineNumber":263,"content":"    // Apply status filter"},{"type":"DELETE","lineNumber":264,"oldContent":"    switch (_selectedFilter) {"},{"type":"INSERT","lineNumber":299,"content":"    }"},{"type":"DELETE","lineNumber":300,"oldContent":""},{"type":"DELETE","lineNumber":373,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":375,"oldContent":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":374,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":387,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"INSERT","lineNumber":388,"content":"                  ),"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":420,"content":"                            size: 16,"},{"type":"DELETE","lineNumber":421,"oldContent":"                            color: Colors.grey[600],"},{"type":"INSERT","lineNumber":428,"content":"                              fontSize: 12,"},{"type":"DELETE","lineNumber":429,"oldContent":"                            ),"},{"type":"MODIFY","lineNumber":609,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":668,"content":"      selectedColor: Theme.of(context).primaryColor.withValues(alpha: 0.2),","oldContent":"      selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),"}]},{"timestamp":1754444606349,"changes":[{"type":"DELETE","lineNumber":190,"oldContent":"                final allHabits = snapshot.data!;"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":"                final allHabits = snapshot.data!;"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":214,"content":"                          child: const Text('Clear Filters'),"},{"type":"DELETE","lineNumber":215,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":247,"content":"            ),"},{"type":"DELETE","lineNumber":248,"oldContent":"          );"},{"type":"DELETE","lineNumber":373,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":375,"oldContent":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":374,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":376,"content":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":387,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"INSERT","lineNumber":388,"content":"                  ),"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":608,"content":"        return Icons.apps;"},{"type":"DELETE","lineNumber":609,"oldContent":"    }"}]}]},"H:/New/HabitV8/lib/ui/screens/timeline_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/timeline_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:intl/intl.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\n\nclass TimelineScreen extends ConsumerStatefulWidget {\n  const TimelineScreen({super.key});\n\n  @override\n  ConsumerState<TimelineScreen> createState() => _TimelineScreenState();\n}\n\nclass _TimelineScreenState extends ConsumerState<TimelineScreen> {\n  String _selectedCategory = 'All';\n  DateTime _selectedDate = DateTime.now();\n\n  final List<String> _categories = [\n    'All',\n    'Health',\n    'Fitness',\n    'Productivity',\n    'Learning',\n    'Personal',\n    'Social',\n    'Finance',\n    'Mindfulness',\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Timeline'),\n        actions: [\n          PopupMenuButton<String>(\n            onSelected: (value) {\n              setState(() {\n                _selectedCategory = value;\n              });\n            },\n            itemBuilder: (BuildContext context) {\n              return _categories.map((String choice) {\n                return PopupMenuItem<String>(\n                  value: choice,\n                  child: Row(\n                    children: [\n                      if (choice == _selectedCategory) const Icon(Icons.check, size: 20),\n                      if (choice == _selectedCategory) const SizedBox(width: 8),\n                      Text(choice),\n                    ],\n                  ),\n                );\n              }).toList();\n            },\n            child: const Icon(Icons.filter_list),\n          ),\n        ],\n      ),\n      body: Column(\n        children: [\n          _buildDateSelector(),\n          Expanded(child: _buildHabitsList()),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildDateSelector() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n      child: Row(\n        children: [\n          IconButton(\n            onPressed: () {\n              setState(() {\n                _selectedDate = _selectedDate.subtract(const Duration(days: 1));\n              });\n            },\n            icon: const Icon(Icons.chevron_left),\n          ),\n          Expanded(\n            child: GestureDetector(\n              onTap: _selectDate,\n              child: Container(\n                padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),\n                decoration: BoxDecoration(\n                  border: Border.all(color: Colors.grey.shade300),\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Text(\n                  DateFormat('EEEE, MMMM d, y').format(_selectedDate),\n                  textAlign: TextAlign.center,\n                  style: Theme.of(context).textTheme.titleMedium,\n                ),\n              ),\n            ),\n          ),\n          IconButton(\n            onPressed: () {\n              setState(() {\n                _selectedDate = _selectedDate.add(const Duration(days: 1));\n              });\n            },\n            icon: const Icon(Icons.chevron_right),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildHabitsList() {\n    return Consumer(\n      builder: (context, ref, child) {\n        final habitServiceAsync = ref.watch(habitServiceProvider);\n        \n        return habitServiceAsync.when(\n          data: (habitService) => FutureBuilder<List<Habit>>(\n            future: habitService.getAllHabits(),\n            builder: (context, snapshot) {\n              if (snapshot.connectionState == ConnectionState.waiting) {\n                return const Center(child: CircularProgressIndicator());\n              }\n\n              if (!snapshot.hasData || snapshot.data!.isEmpty) {\n                return const Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Icon(Icons.timeline, size: 64, color: Colors.grey),\n                      SizedBox(height: 16),\n                      Text(\n                        'No habits yet',\n                        style: TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                      SizedBox(height: 8),\n                      Text(\n                        'Create your first habit to get started!',\n                        style: TextStyle(color: Colors.grey),\n                      ),\n                    ],\n                  ),\n                );\n              }\n\n              final allHabits = snapshot.data!;\n              final filteredHabits = _selectedCategory == 'All'\n                  ? allHabits\n                  : allHabits.where((habit) => habit.category == _selectedCategory).toList();\n\n              final todayHabits = filteredHabits.where((habit) => _isHabitDueOnDate(habit, _selectedDate)).toList();\n\n              if (todayHabits.isEmpty) {\n                return Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Icon(Icons.check_circle_outline, size: 64, color: Colors.green),\n                      const SizedBox(height: 16),\n                      Text(\n                        _selectedCategory == 'All'\n                            ? 'No habits scheduled for this day'\n                            : 'No $_selectedCategory habits for this day',\n                        style: const TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                    ],\n                  ),\n                );\n              }\n\n              return ListView.builder(\n                padding: const EdgeInsets.all(16),\n                itemCount: todayHabits.length,\n                itemBuilder: (context, index) {\n                  final habit = todayHabits[index];\n                  return _buildHabitCard(habit);\n                },\n              );\n            },\n          ),\n          loading: () => const Center(child: CircularProgressIndicator()),\n          error: (error, stackTrace) => Center(\n            child: Text(\n              'Error: $error',\n              style: const TextStyle(color: Colors.red),\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  Widget _buildHabitCard(Habit habit) {\n    final isCompleted = _isHabitCompletedOnDate(habit, _selectedDate);\n    final status = _getHabitStatus(habit, _selectedDate);\n    final statusColor = _getStatusColor(status);\n\n    return Card(\n      margin: const EdgeInsets.only(bottom: 12),\n      child: InkWell(\n        onTap: () => _toggleHabitCompletion(habit),\n        borderRadius: BorderRadius.circular(12),\n        child: Padding(\n          padding: const EdgeInsets.all(16),\n          child: Row(\n            children: [\n              Container(\n                width: 4,\n                height: 60,\n                decoration: BoxDecoration(\n                  color: Color(habit.colorValue),\n                  borderRadius: BorderRadius.circular(2),\n                ),\n              ),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      habit.name,\n                      style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                        fontWeight: FontWeight.bold,\n                        decoration: isCompleted ? TextDecoration.lineThrough : null,\n                      ),\n                    ),\n                    if (habit.description != null) ...[\n                      const SizedBox(height: 4),\n                      Text(\n                        habit.description!,\n                        style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                          color: Colors.grey[600],\n                        ),\n                        maxLines: 2,\n                        overflow: TextOverflow.ellipsis,\n                      ),\n                    ],\n                    const SizedBox(height: 8),\n                    Row(\n                      children: [\n                        Container(\n                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                          decoration: BoxDecoration(\n                            color: Color(habit.colorValue).withOpacity(0.1),\n                            borderRadius: BorderRadius.circular(12),\n                          ),\n                          child: Text(\n                            habit.category,\n                            style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                              color: Color(habit.colorValue),\n                              fontWeight: FontWeight.w500,\n                            ),\n                          ),\n                        ),\n                        const SizedBox(width: 8),\n                        Container(\n                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                          decoration: BoxDecoration(\n                            color: statusColor.withOpacity(0.1),\n                            borderRadius: BorderRadius.circular(12),\n                          ),\n                          child: Text(\n                            status,\n                            style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                              color: statusColor,\n                              fontWeight: FontWeight.w500,\n                            ),\n                          ),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              const SizedBox(width: 16),\n              Container(\n                width: 40,\n                height: 40,\n                decoration: BoxDecoration(\n                  color: isCompleted ? Colors.green : statusColor.withOpacity(0.1),\n                  borderRadius: BorderRadius.circular(20),\n                  border: Border.all(\n                    color: isCompleted ? Colors.green : statusColor,\n                    width: 2,\n                  ),\n                ),\n                child: Icon(\n                  isCompleted ? Icons.check : Icons.circle_outlined,\n                  color: isCompleted ? Colors.white : statusColor,\n                  size: 20,\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  bool _isHabitDueOnDate(Habit habit, DateTime date) {\n    switch (habit.frequency) {\n      case HabitFrequency.hourly:\n      case HabitFrequency.daily:\n        return true;\n      case HabitFrequency.weekly:\n        final weekday = date.weekday;\n        return habit.weeklySchedule.contains(weekday);\n      case HabitFrequency.monthly:\n        final day = date.day;\n        return habit.monthlySchedule.contains(day);\n      case HabitFrequency.yearly:\n        final today = DateTime.now();\n        return date.month == today.month && date.day == today.day;\n    }\n  }\n\n  bool _isHabitCompletedOnDate(Habit habit, DateTime date) {\n    final dateOnly = DateTime(date.year, date.month, date.day);\n    return habit.completions.any((completion) {\n      final completionDate = DateTime(completion.year, completion.month, completion.day);\n      return completionDate == dateOnly;\n    });\n  }\n\n  String _getHabitStatus(Habit habit, DateTime date) {\n    final now = DateTime.now();\n    final today = DateTime(now.year, now.month, now.day);\n    final selectedDay = DateTime(date.year, date.month, date.day);\n\n    if (_isHabitCompletedOnDate(habit, date)) {\n      return 'Completed';\n    }\n\n    if (selectedDay.isBefore(today)) {\n      return 'Missed';\n    } else if (selectedDay.isAfter(today)) {\n      return 'Upcoming';\n    } else {\n      return 'Due';\n    }\n  }\n\n  Color _getStatusColor(String status) {\n    switch (status) {\n      case 'Completed':\n        return Colors.green;\n      case 'Missed':\n        return Colors.red;\n      case 'Due':\n        return Colors.orange;\n      case 'Upcoming':\n        return Colors.blue;\n      default:\n        return Colors.grey;\n    }\n  }\n\n  Future<void> _toggleHabitCompletion(Habit habit) async {\n    final isCompleted = _isHabitCompletedOnDate(habit, _selectedDate);\n    final habitService = ref.read(habitServiceProvider);\n\n    if (isCompleted) {\n      // Remove completion\n      habit.completions.removeWhere((completion) {\n        final completionDate = DateTime(completion.year, completion.month, completion.day);\n        final selectedDate = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);\n        return completionDate == selectedDate;\n      });\n    } else {\n      // Add completion\n      habit.completions.add(_selectedDate);\n    }\n\n    await habitService.updateHabit(habit);\n    setState(() {}); // Refresh the UI\n  }\n\n  Future<void> _selectDate() async {\n    final DateTime? picked = await showDatePicker(\n      context: context,\n      initialDate: _selectedDate,\n      firstDate: DateTime.now().subtract(const Duration(days: 365)),\n      lastDate: DateTime.now().add(const Duration(days: 365)),\n    );\n    if (picked != null && picked != _selectedDate) {\n      setState(() {\n        _selectedDate = picked;\n      });\n    }\n  }\n}\n","baseTimestamp":1754379625536,"deltas":[{"timestamp":1754379643946,"changes":[{"type":"MODIFY","lineNumber":359,"content":"    final habitServiceAsync = ref.read(habitServiceProvider);","oldContent":"    final habitService = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":361,"content":"    final habitService = await habitServiceAsync.future;"},{"type":"INSERT","lineNumber":362,"content":""}]},{"timestamp":1754379727185,"changes":[{"type":"MODIFY","lineNumber":115,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":363,"content":"    if (isCompleted) {","oldContent":"    if (isCompleted) {"}]},{"timestamp":1754379784196,"changes":[{"type":"MODIFY","lineNumber":115,"content":"        ","oldContent":""},{"type":"INSERT","lineNumber":362,"content":""},{"type":"DELETE","lineNumber":363,"oldContent":"    if (isCompleted) {"}]},{"timestamp":1754379819686,"changes":[{"type":"DELETE","lineNumber":361,"oldContent":"    final habitService = await habitServiceAsync.future;"},{"type":"DELETE","lineNumber":362,"oldContent":""},{"type":"DELETE","lineNumber":363,"oldContent":"    if (isCompleted) {"},{"type":"DELETE","lineNumber":364,"oldContent":"      // Remove completion"},{"type":"DELETE","lineNumber":365,"oldContent":"      habit.completions.removeWhere((completion) {"},{"type":"DELETE","lineNumber":366,"oldContent":"        final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":367,"oldContent":"        final selectedDate = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);"},{"type":"DELETE","lineNumber":368,"oldContent":"        return completionDate == selectedDate;"},{"type":"DELETE","lineNumber":369,"oldContent":"      });"},{"type":"DELETE","lineNumber":370,"oldContent":"    } else {"},{"type":"DELETE","lineNumber":371,"oldContent":"      // Add completion"},{"type":"DELETE","lineNumber":372,"oldContent":"      habit.completions.add(_selectedDate);"},{"type":"DELETE","lineNumber":373,"oldContent":"    }"},{"type":"DELETE","lineNumber":374,"oldContent":""},{"type":"DELETE","lineNumber":375,"oldContent":"    await habitService.updateHabit(habit);"},{"type":"DELETE","lineNumber":376,"oldContent":"    setState(() {}); // Refresh the UI"},{"type":"INSERT","lineNumber":361,"content":"    habitServiceAsync.when("},{"type":"INSERT","lineNumber":362,"content":"      data: (habitService) async {"},{"type":"INSERT","lineNumber":363,"content":"        if (isCompleted) {"},{"type":"INSERT","lineNumber":364,"content":"          // Remove completion"},{"type":"INSERT","lineNumber":365,"content":"          habit.completions.removeWhere((completion) {"},{"type":"INSERT","lineNumber":366,"content":"            final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"INSERT","lineNumber":367,"content":"            final selectedDate = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);"},{"type":"INSERT","lineNumber":368,"content":"            return completionDate == selectedDate;"},{"type":"INSERT","lineNumber":369,"content":"          });"},{"type":"INSERT","lineNumber":370,"content":"        } else {"},{"type":"INSERT","lineNumber":371,"content":"          // Add completion"},{"type":"INSERT","lineNumber":372,"content":"          habit.completions.add(_selectedDate);"},{"type":"INSERT","lineNumber":373,"content":"        }"},{"type":"INSERT","lineNumber":374,"content":"        "},{"type":"INSERT","lineNumber":375,"content":"        await habitService.updateHabit(habit);"},{"type":"INSERT","lineNumber":376,"content":"        ref.invalidate(habitServiceProvider);"},{"type":"INSERT","lineNumber":377,"content":"      },"},{"type":"INSERT","lineNumber":378,"content":"      loading: () {},"},{"type":"INSERT","lineNumber":379,"content":"      error: (error, stack) {"},{"type":"INSERT","lineNumber":380,"content":"        if (mounted) {"},{"type":"INSERT","lineNumber":381,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":382,"content":"            SnackBar(content: Text('Error: $error')),"},{"type":"INSERT","lineNumber":383,"content":"          );"},{"type":"INSERT","lineNumber":384,"content":"        }"},{"type":"INSERT","lineNumber":385,"content":"      },"},{"type":"INSERT","lineNumber":386,"content":"    );"}]},{"timestamp":1754379844426,"changes":[{"type":"MODIFY","lineNumber":115,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":374,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":378,"oldContent":"  }"},{"type":"DELETE","lineNumber":380,"oldContent":""},{"type":"DELETE","lineNumber":382,"oldContent":"  Future<void> _selectDate() async {"},{"type":"DELETE","lineNumber":384,"oldContent":"    final DateTime? picked = await showDatePicker("},{"type":"DELETE","lineNumber":386,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":388,"oldContent":"      initialDate: _selectedDate,"},{"type":"DELETE","lineNumber":390,"oldContent":"      firstDate: DateTime.now().subtract(const Duration(days: 365)),"},{"type":"DELETE","lineNumber":392,"oldContent":"      lastDate: DateTime.now().add(const Duration(days: 365)),"},{"type":"INSERT","lineNumber":387,"content":"  }"},{"type":"INSERT","lineNumber":388,"content":""},{"type":"INSERT","lineNumber":389,"content":"  Future<void> _selectDate() async {"},{"type":"INSERT","lineNumber":390,"content":"    final DateTime? picked = await showDatePicker("},{"type":"INSERT","lineNumber":391,"content":"      context: context,"},{"type":"INSERT","lineNumber":392,"content":"      initialDate: _selectedDate,"},{"type":"INSERT","lineNumber":393,"content":"      firstDate: DateTime.now().subtract(const Duration(days: 365)),"},{"type":"INSERT","lineNumber":394,"content":"      lastDate: DateTime.now().add(const Duration(days: 365)),"}]},{"timestamp":1754380587196,"changes":[{"type":"MODIFY","lineNumber":115,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":374,"content":"        ","oldContent":""},{"type":"DELETE","lineNumber":382,"oldContent":"  }"},{"type":"INSERT","lineNumber":383,"content":"          );"},{"type":"INSERT","lineNumber":384,"content":"        }"},{"type":"INSERT","lineNumber":385,"content":"      },"},{"type":"INSERT","lineNumber":386,"content":"    );"},{"type":"INSERT","lineNumber":387,"content":"  }"},{"type":"DELETE","lineNumber":386,"oldContent":"          );"},{"type":"DELETE","lineNumber":389,"oldContent":"        }"},{"type":"DELETE","lineNumber":392,"oldContent":"      },"},{"type":"DELETE","lineNumber":395,"oldContent":"    );"}]},{"timestamp":1754380817578,"changes":[{"type":"MODIFY","lineNumber":115,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":374,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":383,"content":"          );","oldContent":"          );"},{"type":"DELETE","lineNumber":385,"oldContent":""},{"type":"DELETE","lineNumber":387,"oldContent":"  Future<void> _selectDate() async {"},{"type":"INSERT","lineNumber":388,"content":""},{"type":"INSERT","lineNumber":389,"content":"  Future<void> _selectDate() async {"}]}]},"H:/New/HabitV8/lib/ui/screens/stats_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/stats_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:fl_chart/fl_chart.dart';\nimport 'package:intl/intl.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\n\nclass StatsScreen extends ConsumerStatefulWidget {\n  const StatsScreen({super.key});\n\n  @override\n  ConsumerState<StatsScreen> createState() => _StatsScreenState();\n}\n\nclass _StatsScreenState extends ConsumerState<StatsScreen>\n    with SingleTickerProviderStateMixin {\n  late TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: 3, vsync: this);\n  }\n\n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Statistics'),\n        bottom: TabBar(\n          controller: _tabController,\n          tabs: const [\n            Tab(text: 'Weekly'),\n            Tab(text: 'Monthly'),\n            Tab(text: 'Yearly'),\n          ],\n        ),\n      ),\n      body: Consumer(\n        builder: (context, ref, child) {\n          final habitServiceAsync = ref.watch(habitServiceProvider);\n          \n          return habitServiceAsync.when(\n            data: (habitService) => FutureBuilder<List<Habit>>(\n              future: habitService.getAllHabits(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (!snapshot.hasData || snapshot.data!.isEmpty) {\n                  return const Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.analytics, size: 64, color: Colors.grey),\n                        SizedBox(height: 16),\n                        Text(\n                          'No habit data yet',\n                          style: TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Start completing habits to see your progress!',\n                          style: TextStyle(color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  );\n                }\n\n                final habits = snapshot.data!;\n                final hasData = habits.any((habit) => habit.completions.isNotEmpty);\n\n                if (!hasData) {\n                  return const Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.insights, size: 64, color: Colors.grey),\n                        SizedBox(height: 16),\n                        Text(\n                          'Complete some habits to see statistics',\n                          style: TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Your progress charts will appear here once you start tracking!',\n                          style: TextStyle(color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  );\n                }\n\n                return TabBarView(\n                  controller: _tabController,\n                  children: [\n                    _buildWeeklyStats(habits),\n                    _buildMonthlyStats(habits),\n                    _buildYearlyStats(habits),\n                  ],\n                );\n              },\n            ),\n            loading: () => const Center(child: CircularProgressIndicator()),\n            error: (error, stack) => Center(\n              child: Text('Error: $error'),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildWeeklyStats(List<Habit> habits) {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          _buildMotivationalHeader('This Week\\'s Progress',\n              'You\\'re building amazing habits! Keep up the great work! 🌟'),\n          const SizedBox(height: 24),\n          _buildWeeklyCompletionChart(habits),\n          const SizedBox(height: 24),\n          _buildCategoryBreakdown(habits, 'week'),\n          const SizedBox(height: 24),\n          _buildHabitPerformanceRanking(habits, 'week'),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildMonthlyStats(List<Habit> habits) {\n    final hasEnoughData = _hasEnoughDataForPeriod(habits, 14);\n\n    if (!hasEnoughData) {\n      return const Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(Icons.calendar_month, size: 64, color: Colors.grey),\n            SizedBox(height: 16),\n            Text(\n              'Monthly Report Coming Soon!',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n            ),\n            SizedBox(height: 8),\n            Text(\n              'Build two weeks of habit data to unlock your monthly insights.',\n              style: TextStyle(color: Colors.grey),\n              textAlign: TextAlign.center,\n            ),\n            SizedBox(height: 16),\n            Icon(Icons.lock_outline, size: 32, color: Colors.grey),\n          ],\n        ),\n      );\n    }\n\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          _buildMotivationalHeader('Monthly Overview',\n              'Your consistency is paying off! Look at those beautiful patterns! 📈'),\n          const SizedBox(height: 24),\n          _buildMonthlyHeatmap(habits),\n          const SizedBox(height: 24),\n          _buildCategoryBreakdown(habits, 'month'),\n          const SizedBox(height: 24),\n          _buildHabitPerformanceRanking(habits, 'month'),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildYearlyStats(List<Habit> habits) {\n    final hasEnoughData = _hasEnoughDataForPeriod(habits, 90);\n\n    if (!hasEnoughData) {\n      return const Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(Icons.calendar_today, size: 64, color: Colors.grey),\n            SizedBox(height: 16),\n            Text(\n              'Yearly Report Coming Soon!',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n            ),\n            SizedBox(height: 8),\n            Text(\n              'Build three months of habit data to unlock your yearly insights.',\n              style: TextStyle(color: Colors.grey),\n              textAlign: TextAlign.center,\n            ),\n            SizedBox(height: 16),\n            Icon(Icons.lock_outline, size: 32, color: Colors.grey),\n          ],\n        ),\n      );\n    }\n\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          _buildMotivationalHeader('Yearly Journey',\n              'Incredible transformation! You\\'ve built lasting habits! 🏆'),\n          const SizedBox(height: 24),\n          _buildYearlyTrendChart(habits),\n          const SizedBox(height: 24),\n          _buildCategoryBreakdown(habits, 'year'),\n          const SizedBox(height: 24),\n          _buildHabitPerformanceRanking(habits, 'year'),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildMotivationalHeader(String title, String subtitle) {\n    return Container(\n      width: double.infinity,\n      padding: const EdgeInsets.all(20),\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          colors: [Colors.blue.shade400, Colors.purple.shade400],\n          begin: Alignment.topLeft,\n          end: Alignment.bottomRight,\n        ),\n        borderRadius: BorderRadius.circular(16),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            title,\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 24,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          const SizedBox(height: 8),\n          Text(\n            subtitle,\n            style: const TextStyle(\n              color: Colors.white70,\n              fontSize: 16,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildWeeklyCompletionChart(List<Habit> habits) {\n    final weekData = _getWeeklyCompletionData(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Daily Completions This Week',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            SizedBox(\n              height: 200,\n              child: BarChart(\n                BarChartData(\n                  alignment: BarChartAlignment.spaceAround,\n                  maxY: weekData.values.isNotEmpty\n                      ? weekData.values.reduce((a, b) => a > b ? a : b).toDouble() + 2\n                      : 10,\n                  barTouchData: BarTouchData(enabled: false),\n                  titlesData: FlTitlesData(\n                    show: true,\n                    bottomTitles: AxisTitles(\n                      sideTitles: SideTitles(\n                        showTitles: true,\n                        getTitlesWidget: (value, meta) {\n                          const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n                          if (value.toInt() >= 0 && value.toInt() < days.length) {\n                            return Text(days[value.toInt()]);\n                          }\n                          return const Text('');\n                        },\n                      ),\n                    ),\n                    leftTitles: AxisTitles(\n                      sideTitles: SideTitles(\n                        showTitles: true,\n                        reservedSize: 30,\n                        getTitlesWidget: (value, meta) {\n                          return Text(value.toInt().toString());\n                        },\n                      ),\n                    ),\n                    topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n                    rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n                  ),\n                  borderData: FlBorderData(show: false),\n                  barGroups: List.generate(7, (index) {\n                    final dayName = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][index];\n                    final completions = weekData[dayName] ?? 0;\n                    return BarChartGroupData(\n                      x: index,\n                      barRods: [\n                        BarChartRodData(\n                          toY: completions.toDouble(),\n                          color: Colors.blue.shade400,\n                          width: 20,\n                          borderRadius: BorderRadius.circular(4),\n                        ),\n                      ],\n                    );\n                  }),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildMonthlyHeatmap(List<Habit> habits) {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Monthly Activity Heatmap',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildHeatmapGrid(habits),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildHeatmapGrid(List<Habit> habits) {\n    final now = DateTime.now();\n    final firstDayOfMonth = DateTime(now.year, now.month, 1);\n    final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);\n\n    return GridView.builder(\n      shrinkWrap: true,\n      physics: const NeverScrollableScrollPhysics(),\n      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n        crossAxisCount: 7,\n        crossAxisSpacing: 4,\n        mainAxisSpacing: 4,\n      ),\n      itemCount: lastDayOfMonth.day,\n      itemBuilder: (context, index) {\n        final day = firstDayOfMonth.add(Duration(days: index));\n        final completions = _getCompletionsForDate(habits, day);\n        final intensity = completions / (habits.length + 1);\n\n        return Container(\n          decoration: BoxDecoration(\n            color: Colors.green.withOpacity(intensity.clamp(0.1, 1.0)),\n            borderRadius: BorderRadius.circular(4),\n          ),\n          child: Center(\n            child: Text(\n              '${day.day}',\n              style: TextStyle(\n                color: intensity > 0.5 ? Colors.white : Colors.black,\n                fontSize: 12,\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  Widget _buildYearlyTrendChart(List<Habit> habits) {\n    final monthlyData = _getMonthlyTrendData(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Yearly Completion Trend',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            SizedBox(\n              height: 200,\n              child: LineChart(\n                LineChartData(\n                  gridData: const FlGridData(show: true),\n                  titlesData: FlTitlesData(\n                    bottomTitles: AxisTitles(\n                      sideTitles: SideTitles(\n                        showTitles: true,\n                        getTitlesWidget: (value, meta) {\n                          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n                          if (value.toInt() >= 0 && value.toInt() < months.length) {\n                            return Text(months[value.toInt()]);\n                          }\n                          return const Text('');\n                        },\n                      ),\n                    ),\n                    leftTitles: AxisTitles(\n                      sideTitles: SideTitles(\n                        showTitles: true,\n                        reservedSize: 40,\n                        getTitlesWidget: (value, meta) {\n                          return Text(value.toInt().toString());\n                        },\n                      ),\n                    ),\n                    topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n                    rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),\n                  ),\n                  borderData: FlBorderData(show: true),\n                  lineBarsData: [\n                    LineChartBarData(\n                      spots: monthlyData.asMap().entries.map((entry) {\n                        return FlSpot(entry.key.toDouble(), entry.value.toDouble());\n                      }).toList(),\n                      isCurved: true,\n                      color: Colors.blue,\n                      barWidth: 3,\n                      belowBarData: BarAreaData(\n                        show: true,\n                        color: Colors.blue.withOpacity(0.3),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildCategoryBreakdown(List<Habit> habits, String period) {\n    final categoryData = _getCategoryData(habits, period);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Category Breakdown',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            SizedBox(\n              height: 200,\n              child: PieChart(\n                PieChartData(\n                  sections: categoryData.entries.map((entry) {\n                    final colors = [Colors.blue, Colors.green, Colors.orange, Colors.purple, Colors.red, Colors.teal];\n                    final colorIndex = categoryData.keys.toList().indexOf(entry.key) % colors.length;\n\n                    return PieChartSectionData(\n                      value: entry.value.toDouble(),\n                      title: '${entry.key}\\n${entry.value}',\n                      color: colors[colorIndex],\n                      radius: 60,\n                      titleStyle: const TextStyle(\n                        fontSize: 12,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                      ),\n                    );\n                  }).toList(),\n                  centerSpaceRadius: 40,\n                  sectionsSpace: 2,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildHabitPerformanceRanking(List<Habit> habits, String period) {\n    final rankedHabits = _getRankedHabits(habits, period);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Habit Performance Ranking',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            ...rankedHabits.take(5).map((habitData) {\n              final habit = habitData['habit'] as Habit;\n              final completions = habitData['completions'] as int;\n              final rate = habitData['rate'] as double;\n\n              return Padding(\n                padding: const EdgeInsets.only(bottom: 12),\n                child: Row(\n                  children: [\n                    Container(\n                      width: 8,\n                      height: 40,\n                      decoration: BoxDecoration(\n                        color: Color(habit.colorValue),\n                        borderRadius: BorderRadius.circular(4),\n                      ),\n                    ),\n                    const SizedBox(width: 12),\n                    Expanded(\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Text(\n                            habit.name,\n                            style: Theme.of(context).textTheme.titleSmall?.copyWith(\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                          Text(\n                            '$completions completions • ${(rate * 100).toInt()}% success rate',\n                            style: Theme.of(context).textTheme.bodySmall?.copyWith(\n                              color: Colors.grey[600],\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                    Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n                      decoration: BoxDecoration(\n                        color: _getCompletionRateColor(rate).withOpacity(0.1),\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                      child: Text(\n                        '${(rate * 100).toInt()}%',\n                        style: TextStyle(\n                          color: _getCompletionRateColor(rate),\n                          fontWeight: FontWeight.bold,\n                          fontSize: 12,\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            }),\n          ],\n        ),\n      ),\n    );\n  }\n\n  // Helper methods for data processing\n  bool _hasEnoughDataForPeriod(List<Habit> habits, int minDays) {\n    final now = DateTime.now();\n    final cutoffDate = now.subtract(Duration(days: minDays));\n\n    return habits.any((habit) =>\n        habit.completions.any((completion) => completion.isAfter(cutoffDate)));\n  }\n\n  Map<String, int> _getWeeklyCompletionData(List<Habit> habits) {\n    final now = DateTime.now();\n    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));\n    final data = <String, int>{};\n\n    for (int i = 0; i < 7; i++) {\n      final day = startOfWeek.add(Duration(days: i));\n      final dayName = DateFormat('EEEE').format(day);\n      data[dayName] = _getCompletionsForDate(habits, day);\n    }\n\n    return data;\n  }\n\n  int _getCompletionsForDate(List<Habit> habits, DateTime date) {\n    final dateOnly = DateTime(date.year, date.month, date.day);\n    int count = 0;\n\n    for (final habit in habits) {\n      for (final completion in habit.completions) {\n        final completionDate = DateTime(completion.year, completion.month, completion.day);\n        if (completionDate == dateOnly) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  Map<String, int> _getCategoryData(List<Habit> habits, String period) {\n    final data = <String, int>{};\n\n    for (final habit in habits) {\n      final completions = _getCompletionsForPeriod(habit, period);\n      data[habit.category] = (data[habit.category] ?? 0) + completions;\n    }\n\n    return data;\n  }\n\n  int _getCompletionsForPeriod(Habit habit, String period) {\n    final now = DateTime.now();\n    DateTime startDate;\n\n    switch (period) {\n      case 'week':\n        startDate = now.subtract(const Duration(days: 7));\n        break;\n      case 'month':\n        startDate = DateTime(now.year, now.month, 1);\n        break;\n      case 'year':\n        startDate = DateTime(now.year, 1, 1);\n        break;\n      default:\n        startDate = now.subtract(const Duration(days: 7));\n    }\n\n    return habit.completions.where((completion) =>\n        completion.isAfter(startDate) && completion.isBefore(now.add(const Duration(days: 1)))).length;\n  }\n\n  List<Map<String, dynamic>> _getRankedHabits(List<Habit> habits, String period) {\n    final rankedData = habits.map((habit) {\n      final completions = _getCompletionsForPeriod(habit, period);\n      final expectedCompletions = _getExpectedCompletionsForPeriod(habit, period);\n      final rate = expectedCompletions > 0 ? completions / expectedCompletions : 0.0;\n\n      return {\n        'habit': habit,\n        'completions': completions,\n        'rate': rate.clamp(0.0, 1.0),\n      };\n    }).toList();\n\n    rankedData.sort((a, b) => (b['rate'] as double).compareTo(a['rate'] as double));\n    return rankedData;\n  }\n\n  int _getExpectedCompletionsForPeriod(Habit habit, String period) {\n    final now = DateTime.now();\n    int days;\n\n    switch (period) {\n      case 'week':\n        days = 7;\n        break;\n      case 'month':\n        days = now.day;\n        break;\n      case 'year':\n        days = DateTime.now().difference(DateTime(now.year, 1, 1)).inDays + 1;\n        break;\n      default:\n        days = 7;\n    }\n\n    switch (habit.frequency) {\n      case HabitFrequency.daily:\n        return days;\n      case HabitFrequency.weekly:\n        return (days / 7).ceil() * habit.weeklySchedule.length;\n      case HabitFrequency.monthly:\n        return (days / 30).ceil() * habit.monthlySchedule.length;\n      default:\n        return days;\n    }\n  }\n\n  List<int> _getMonthlyTrendData(List<Habit> habits) {\n    final now = DateTime.now();\n    final data = <int>[];\n\n    for (int month = 1; month <= 12; month++) {\n      if (month > now.month) {\n        data.add(0);\n        continue;\n      }\n\n      int monthCompletions = 0;\n      for (final habit in habits) {\n        monthCompletions += habit.completions.where((completion) =>\n            completion.year == now.year && completion.month == month).length;\n      }\n      data.add(monthCompletions);\n    }\n\n    return data;\n  }\n\n  Color _getCompletionRateColor(double rate) {\n    if (rate >= 0.8) return Colors.green;\n    if (rate >= 0.6) return Colors.orange;\n    return Colors.red;\n  }\n}\n","baseTimestamp":1754379683694,"deltas":[{"timestamp":1754379727185,"changes":[{"type":"MODIFY","lineNumber":47,"content":"","oldContent":"          "}]},{"timestamp":1754379784014,"changes":[{"type":"MODIFY","lineNumber":47,"content":"          ","oldContent":""}]},{"timestamp":1754379844426,"changes":[{"type":"MODIFY","lineNumber":47,"content":"","oldContent":"          "}]}]},"H:/New/HabitV8/lib/ui/screens/insights_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/insights_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\n\nclass InsightsScreen extends ConsumerWidget {\n  const InsightsScreen({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Insights'),\n      ),\n      body: Consumer(\n        builder: (context, ref, child) {\n          final habitServiceAsync = ref.watch(habitServiceProvider);\n          \n          return habitServiceAsync.when(\n            data: (habitService) => FutureBuilder<List<Habit>>(\n              future: habitService.getAllHabits(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (!snapshot.hasData || snapshot.data!.isEmpty) {\n                  return const Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.lightbulb_outline, size: 64, color: Colors.grey),\n                        SizedBox(height: 16),\n                        Text(\n                          'No insights yet',\n                          style: TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Start tracking habits to get personalized insights!',\n                          style: TextStyle(color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  );\n                }\n\n                final habits = snapshot.data!;\n                final hasCompletions = habits.any((habit) => habit.completions.isNotEmpty);\n\n                if (!hasCompletions) {\n                  return const Center(\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      children: [\n                        Icon(Icons.psychology, size: 64, color: Colors.grey),\n                        SizedBox(height: 16),\n                        Text(\n                          'Complete some habits first',\n                          style: TextStyle(fontSize: 18, color: Colors.grey),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Your AI-powered insights will appear here once you start completing habits!',\n                          style: TextStyle(color: Colors.grey),\n                          textAlign: TextAlign.center,\n                        ),\n                      ],\n                    ),\n                  );\n                }\n\n                return SingleChildScrollView(\n                  padding: const EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      _buildWelcomeCard(habits),\n                      const SizedBox(height: 24),\n                      _buildPersonalizedInsights(habits),\n                      const SizedBox(height: 24),\n                      _buildAchievementBadges(habits),\n                      const SizedBox(height: 24),\n                      _buildRecommendations(habits),\n                      const SizedBox(height: 24),\n                      _buildTrendAnalysis(habits),\n                    ],\n                  ),\n                );\n              },\n            ),\n            loading: () => const Center(child: CircularProgressIndicator()),\n            error: (error, stack) => Center(\n              child: Text('Error: $error'),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildWelcomeCard(List<Habit> habits) {\n    final totalCompletions = habits.fold<int>(0, (sum, habit) => sum + habit.completions.length);\n    final activeHabits = habits.where((habit) => habit.isActive).length;\n\n    return Container(\n      width: double.infinity,\n      padding: const EdgeInsets.all(20),\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          colors: [Colors.indigo.shade400, Colors.purple.shade400],\n          begin: Alignment.topLeft,\n          end: Alignment.bottomRight,\n        ),\n        borderRadius: BorderRadius.circular(16),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Row(\n            children: [\n              Icon(Icons.psychology, color: Colors.white, size: 32),\n              SizedBox(width: 12),\n              Text(\n                'AI Insights',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 24,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          const SizedBox(height: 16),\n          Text(\n            'Your habit journey is taking shape! 🌟',\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 18,\n              fontWeight: FontWeight.w500,\n            ),\n          ),\n          const SizedBox(height: 8),\n          Text(\n            'You\\'ve completed $totalCompletions habits across $activeHabits active routines. Keep building those positive patterns!',\n            style: const TextStyle(\n              color: Colors.white70,\n              fontSize: 16,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPersonalizedInsights(List<Habit> habits) {\n    final insights = _generateInsights(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const Row(\n              children: [\n                Icon(Icons.lightbulb, color: Colors.amber),\n                SizedBox(width: 8),\n                Text(\n                  'Personalized Insights',\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            ...insights.map((insight) => Padding(\n              padding: const EdgeInsets.only(bottom: 12),\n              child: Row(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Container(\n                    width: 8,\n                    height: 8,\n                    margin: const EdgeInsets.only(top: 6),\n                    decoration: BoxDecoration(\n                      color: insight['color'] as Color,\n                      shape: BoxShape.circle,\n                    ),\n                  ),\n                  const SizedBox(width: 12),\n                  Expanded(\n                    child: Text(\n                      insight['text'] as String,\n                      style: const TextStyle(fontSize: 15),\n                    ),\n                  ),\n                ],\n              ),\n            )),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildAchievementBadges(List<Habit> habits) {\n    final badges = _generateBadges(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const Row(\n              children: [\n                Icon(Icons.emoji_events, color: Colors.orange),\n                SizedBox(width: 8),\n                Text(\n                  'Achievement Badges',\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            if (badges.isEmpty)\n              const Text(\n                'Keep completing habits to earn your first badge! 🏆',\n                style: TextStyle(color: Colors.grey),\n              )\n            else\n              Wrap(\n                spacing: 12,\n                runSpacing: 12,\n                children: badges.map((badge) => _BadgeWidget(\n                  icon: badge['icon'] as IconData,\n                  label: badge['label'] as String,\n                  color: badge['color'] as Color,\n                  isEarned: badge['earned'] as bool,\n                )).toList(),\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRecommendations(List<Habit> habits) {\n    final recommendations = _generateRecommendations(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const Row(\n              children: [\n                Icon(Icons.auto_awesome, color: Colors.blue),\n                SizedBox(width: 8),\n                Text(\n                  'Smart Recommendations',\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            ...recommendations.map((rec) => Container(\n              margin: const EdgeInsets.only(bottom: 12),\n              padding: const EdgeInsets.all(12),\n              decoration: BoxDecoration(\n                color: Colors.blue.shade50,\n                borderRadius: BorderRadius.circular(8),\n                border: Border.all(color: Colors.blue.shade200),\n              ),\n              child: Row(\n                children: [\n                  Icon(rec['icon'] as IconData, color: Colors.blue),\n                  const SizedBox(width: 12),\n                  Expanded(\n                    child: Text(\n                      rec['text'] as String,\n                      style: const TextStyle(fontSize: 14),\n                    ),\n                  ),\n                ],\n              ),\n            )),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTrendAnalysis(List<Habit> habits) {\n    final analysis = _generateTrendAnalysis(habits);\n\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const Row(\n              children: [\n                Icon(Icons.trending_up, color: Colors.green),\n                SizedBox(width: 8),\n                Text(\n                  'Trend Analysis',\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n            const SizedBox(height: 16),\n            ...analysis.map((trend) => Padding(\n              padding: const EdgeInsets.only(bottom: 12),\n              child: Row(\n                children: [\n                  Icon(\n                    trend['trending'] as bool ? Icons.trending_up : Icons.trending_down,\n                    color: trend['trending'] as bool ? Colors.green : Colors.orange,\n                  ),\n                  const SizedBox(width: 12),\n                  Expanded(\n                    child: Text(\n                      trend['text'] as String,\n                      style: const TextStyle(fontSize: 14),\n                    ),\n                  ),\n                ],\n              ),\n            )),\n          ],\n        ),\n      ),\n    );\n  }\n\n  // AI-powered insight generation methods\n  List<Map<String, dynamic>> _generateInsights(List<Habit> habits) {\n    final insights = <Map<String, dynamic>>[];\n\n    // Best performing habit insight\n    if (habits.isNotEmpty) {\n      final bestHabit = habits.reduce((a, b) =>\n        a.completions.length > b.completions.length ? a : b);\n      insights.add({\n        'text': '🌟 \"${bestHabit.name}\" is your star performer with ${bestHabit.completions.length} completions!',\n        'color': Colors.green,\n      });\n    }\n\n    // Consistency insight\n    final consistentHabits = habits.where((habit) => _calculateStreakDays(habit) >= 3).length;\n    if (consistentHabits > 0) {\n      insights.add({\n        'text': '🔥 You\\'re building consistency! $consistentHabits habits have a 3+ day streak.',\n        'color': Colors.orange,\n      });\n    }\n\n    // Category balance insight\n    final categories = habits.map((h) => h.category).toSet();\n    if (categories.length >= 3) {\n      insights.add({\n        'text': '⚖️ Great balance! You\\'re working on ${categories.length} different life areas.',\n        'color': Colors.blue,\n      });\n    }\n\n    // Weekly pattern insight\n    final weekendCompletions = _getWeekendCompletionRate(habits);\n    if (weekendCompletions > 0.7) {\n      insights.add({\n        'text': '🎯 You\\'re excellent at maintaining habits on weekends!',\n        'color': Colors.purple,\n      });\n    } else if (weekendCompletions < 0.3) {\n      insights.add({\n        'text': '💡 Consider setting easier weekend goals to maintain momentum.',\n        'color': Colors.amber,\n      });\n    }\n\n    return insights;\n  }\n\n  List<Map<String, dynamic>> _generateBadges(List<Habit> habits) {\n    final badges = <Map<String, dynamic>>[];\n\n    // First steps badge\n    badges.add({\n      'icon': Icons.directions_walk,\n      'label': 'First Steps',\n      'color': Colors.green,\n      'earned': habits.any((h) => h.completions.isNotEmpty),\n    });\n\n    // Consistency badge\n    badges.add({\n      'icon': Icons.whatshot,\n      'label': '7-Day Streak',\n      'color': Colors.orange,\n      'earned': habits.any((h) => _calculateStreakDays(h) >= 7),\n    });\n\n    // Variety badge\n    badges.add({\n      'icon': Icons.diversity_3,\n      'label': 'Life Balance',\n      'color': Colors.blue,\n      'earned': habits.map((h) => h.category).toSet().length >= 3,\n    });\n\n    // Dedication badge\n    badges.add({\n      'icon': Icons.emoji_events,\n      'label': 'Century Club',\n      'color': Colors.purple,\n      'earned': habits.fold<int>(0, (sum, h) => sum + h.completions.length) >= 100,\n    });\n\n    return badges;\n  }\n\n  List<Map<String, dynamic>> _generateRecommendations(List<Habit> habits) {\n    final recommendations = <Map<String, dynamic>>[];\n\n    if (habits.length < 3) {\n      recommendations.add({\n        'icon': Icons.add_circle,\n        'text': 'Consider adding 1-2 more habits for a balanced routine.',\n      });\n    }\n\n    final categories = habits.map((h) => h.category).toSet();\n    if (!categories.contains('Health')) {\n      recommendations.add({\n        'icon': Icons.favorite,\n        'text': 'Add a health-focused habit like drinking water or walking.',\n      });\n    }\n\n    final lowPerformers = habits.where((h) =>\n      h.completions.length < (DateTime.now().difference(h.createdAt).inDays * 0.3)).toList();\n    if (lowPerformers.isNotEmpty) {\n      recommendations.add({\n        'icon': Icons.tune,\n        'text': 'Consider simplifying \"${lowPerformers.first.name}\" to build momentum.',\n      });\n    }\n\n    return recommendations;\n  }\n\n  List<Map<String, dynamic>> _generateTrendAnalysis(List<Habit> habits) {\n    final analysis = <Map<String, dynamic>>[];\n\n    for (final habit in habits.take(3)) {\n      final recentRate = _getRecentCompletionRate(habit);\n      final isImproving = recentRate > 0.5;\n\n      analysis.add({\n        'text': '${habit.name}: ${isImproving ? \"Improving\" : \"Needs attention\"} (${(recentRate * 100).toInt()}% this week)',\n        'trending': isImproving,\n      });\n    }\n\n    return analysis;\n  }\n\n  // Helper methods\n  int _calculateStreakDays(Habit habit) {\n    if (habit.completions.isEmpty) return 0;\n\n    final sortedCompletions = habit.completions.toList()\n      ..sort((a, b) => b.compareTo(a));\n\n    int streak = 0;\n    final today = DateTime.now();\n\n    for (int i = 0; i < 30; i++) {\n      final checkDate = today.subtract(Duration(days: i));\n      final hasCompletion = sortedCompletions.any((completion) {\n        final completionDate = DateTime(completion.year, completion.month, completion.day);\n        final checkDateOnly = DateTime(checkDate.year, checkDate.month, checkDate.day);\n        return completionDate == checkDateOnly;\n      });\n\n      if (hasCompletion) {\n        streak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n\n    return streak;\n  }\n\n  double _getWeekendCompletionRate(List<Habit> habits) {\n    int weekendCompletions = 0;\n    int totalWeekends = 0;\n\n    for (final habit in habits) {\n      for (final completion in habit.completions) {\n        if (completion.weekday == DateTime.saturday || completion.weekday == DateTime.sunday) {\n          weekendCompletions++;\n        }\n      }\n\n      final weeksSinceCreation = DateTime.now().difference(habit.createdAt).inDays ~/ 7;\n      totalWeekends += weeksSinceCreation * 2;\n    }\n\n    return totalWeekends > 0 ? weekendCompletions / totalWeekends : 0.0;\n  }\n\n  double _getRecentCompletionRate(Habit habit) {\n    final lastWeek = DateTime.now().subtract(const Duration(days: 7));\n    final recentCompletions = habit.completions.where((c) => c.isAfter(lastWeek)).length;\n    return recentCompletions / 7.0;\n  }\n}\n\nclass _BadgeWidget extends StatelessWidget {\n  final IconData icon;\n  final String label;\n  final Color color;\n  final bool isEarned;\n\n  const _BadgeWidget({\n    required this.icon,\n    required this.label,\n    required this.color,\n    required this.isEarned,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Container(\n          width: 60,\n          height: 60,\n          decoration: BoxDecoration(\n            color: isEarned ? color : Colors.grey.shade300,\n            shape: BoxShape.circle,\n            boxShadow: isEarned ? [\n              BoxShadow(\n                color: color.withOpacity(0.3),\n                blurRadius: 8,\n                spreadRadius: 2,\n              ),\n            ] : null,\n          ),\n          child: Icon(\n            icon,\n            color: isEarned ? Colors.white : Colors.grey.shade600,\n            size: 28,\n          ),\n        ),\n        const SizedBox(height: 8),\n        Text(\n          label,\n          style: TextStyle(\n            fontSize: 12,\n            fontWeight: FontWeight.w500,\n            color: isEarned ? Colors.black87 : Colors.grey.shade600,\n          ),\n          textAlign: TextAlign.center,\n        ),\n      ],\n    );\n  }\n}\n","baseTimestamp":1754379708882,"deltas":[{"timestamp":1754439615360,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":""},{"type":"INSERT","lineNumber":9,"content":"import '../../services/logging_service.dart';"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":11,"content":"class InsightsScreen extends ConsumerStatefulWidget {"},{"type":"DELETE","lineNumber":12,"oldContent":"import '../../services/logging_service.dart';"},{"type":"DELETE","lineNumber":14,"oldContent":"class InsightsScreen extends ConsumerStatefulWidget {"},{"type":"DELETE","lineNumber":133,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":135,"oldContent":"      appBar: AppBar("},{"type":"DELETE","lineNumber":137,"oldContent":"        title: const Text('Insights'),"},{"type":"DELETE","lineNumber":147,"oldContent":"      ),"},{"type":"INSERT","lineNumber":152,"content":"    return Scaffold("},{"type":"INSERT","lineNumber":153,"content":"      appBar: AppBar("},{"type":"INSERT","lineNumber":154,"content":"        title: const Text('Insights'),"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                  child: Column("},{"type":"DELETE","lineNumber":168,"oldContent":"                    children: ["},{"type":"INSERT","lineNumber":164,"content":"      ),"},{"type":"DELETE","lineNumber":179,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":180,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":182,"oldContent":"                );"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":190,"content":"                  child: Column("},{"type":"INSERT","lineNumber":192,"content":"                    children: ["},{"type":"INSERT","lineNumber":205,"content":"                    ],"},{"type":"INSERT","lineNumber":206,"content":"                  ),"},{"type":"INSERT","lineNumber":207,"content":"                );"},{"type":"DELETE","lineNumber":222,"oldContent":"            ),"},{"type":"DELETE","lineNumber":239,"oldContent":"      ),"},{"type":"DELETE","lineNumber":241,"oldContent":"    );"},{"type":"DELETE","lineNumber":243,"oldContent":"  }"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":251,"oldContent":""},{"type":"INSERT","lineNumber":261,"content":"            ),"},{"type":"DELETE","lineNumber":270,"oldContent":"              ),"},{"type":"DELETE","lineNumber":273,"oldContent":"            ),"},{"type":"DELETE","lineNumber":276,"oldContent":"            ),"},{"type":"DELETE","lineNumber":284,"oldContent":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":285,"oldContent":"    final health = _healthSummary!;"},{"type":"DELETE","lineNumber":287,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":289,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":291,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":293,"oldContent":"        child: Column("},{"type":"INSERT","lineNumber":280,"content":"      ),"},{"type":"INSERT","lineNumber":281,"content":"    );"},{"type":"INSERT","lineNumber":282,"content":"  }"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"DELETE","lineNumber":295,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":297,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":300,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":303,"oldContent":"                Text("},{"type":"DELETE","lineNumber":305,"oldContent":"                ),"},{"type":"INSERT","lineNumber":291,"content":""},{"type":"DELETE","lineNumber":307,"oldContent":"              ],"},{"type":"DELETE","lineNumber":308,"oldContent":"            ),"},{"type":"DELETE","lineNumber":310,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":318,"oldContent":"          ],"},{"type":"DELETE","lineNumber":320,"oldContent":"        ),"},{"type":"DELETE","lineNumber":321,"oldContent":"      ),"},{"type":"DELETE","lineNumber":323,"oldContent":"    );"},{"type":"DELETE","lineNumber":324,"oldContent":"  }"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":329,"oldContent":""},{"type":"INSERT","lineNumber":321,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            ),"},{"type":"DELETE","lineNumber":346,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":348,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":350,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":352,"oldContent":"        child: Column("},{"type":"INSERT","lineNumber":327,"content":"            ),"},{"type":"DELETE","lineNumber":354,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":356,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":357,"oldContent":"            ),"},{"type":"DELETE","lineNumber":359,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":363,"oldContent":"            else"},{"type":"INSERT","lineNumber":334,"content":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":335,"content":"    final health = _healthSummary!;"},{"type":"INSERT","lineNumber":336,"content":"    return Card("},{"type":"INSERT","lineNumber":337,"content":"      child: Padding("},{"type":"INSERT","lineNumber":338,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":339,"content":"        child: Column("},{"type":"INSERT","lineNumber":340,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":341,"content":"          children: ["},{"type":"INSERT","lineNumber":343,"content":"              children: ["},{"type":"INSERT","lineNumber":346,"content":"                Text("},{"type":"DELETE","lineNumber":369,"oldContent":"          ],"},{"type":"INSERT","lineNumber":349,"content":"                ),"},{"type":"INSERT","lineNumber":350,"content":"              ],"},{"type":"INSERT","lineNumber":351,"content":"            ),"},{"type":"INSERT","lineNumber":352,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":371,"oldContent":"        ),"},{"type":"DELETE","lineNumber":373,"oldContent":"      ),"},{"type":"DELETE","lineNumber":375,"oldContent":"    );"},{"type":"DELETE","lineNumber":377,"oldContent":"  }"},{"type":"DELETE","lineNumber":379,"oldContent":""},{"type":"INSERT","lineNumber":364,"content":"          ],"},{"type":"INSERT","lineNumber":365,"content":"        ),"},{"type":"INSERT","lineNumber":366,"content":"      ),"},{"type":"INSERT","lineNumber":367,"content":"    );"},{"type":"INSERT","lineNumber":368,"content":"  }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":372,"content":""},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"INSERT","lineNumber":392,"content":"    return Card("},{"type":"INSERT","lineNumber":393,"content":"      child: Padding("},{"type":"INSERT","lineNumber":394,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":395,"content":"        child: Column("},{"type":"INSERT","lineNumber":396,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":397,"content":"          children: ["},{"type":"INSERT","lineNumber":401,"content":"            ),"},{"type":"INSERT","lineNumber":402,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":405,"content":"            else"},{"type":"INSERT","lineNumber":410,"content":"          ],"},{"type":"INSERT","lineNumber":411,"content":"        ),"},{"type":"INSERT","lineNumber":412,"content":"      ),"},{"type":"INSERT","lineNumber":413,"content":"    );"},{"type":"INSERT","lineNumber":414,"content":"  }"},{"type":"INSERT","lineNumber":415,"content":""},{"type":"INSERT","lineNumber":432,"content":""},{"type":"DELETE","lineNumber":455,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":456,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":458,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":459,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":461,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":463,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":471,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":476,"oldContent":"                ),"},{"type":"DELETE","lineNumber":483,"oldContent":"              ],"},{"type":"DELETE","lineNumber":485,"oldContent":"            ),"},{"type":"DELETE","lineNumber":487,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":493,"oldContent":"              ),"},{"type":"DELETE","lineNumber":495,"oldContent":"          ],"},{"type":"DELETE","lineNumber":497,"oldContent":"        ),"},{"type":"DELETE","lineNumber":499,"oldContent":"      ),"},{"type":"DELETE","lineNumber":501,"oldContent":"    );"},{"type":"DELETE","lineNumber":503,"oldContent":"  }"},{"type":"DELETE","lineNumber":507,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":509,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":511,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":513,"oldContent":"        child: Column("},{"type":"INSERT","lineNumber":494,"content":"    return Card("},{"type":"INSERT","lineNumber":495,"content":"      child: Padding("},{"type":"INSERT","lineNumber":496,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":497,"content":"        child: Column("},{"type":"INSERT","lineNumber":510,"content":"                ),"},{"type":"DELETE","lineNumber":532,"oldContent":"                ),"},{"type":"INSERT","lineNumber":518,"content":"              ],"},{"type":"INSERT","lineNumber":519,"content":"            ),"},{"type":"INSERT","lineNumber":520,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":525,"content":"              ),"},{"type":"INSERT","lineNumber":526,"content":"          ],"},{"type":"INSERT","lineNumber":527,"content":"        ),"},{"type":"INSERT","lineNumber":528,"content":"      ),"},{"type":"INSERT","lineNumber":529,"content":"    );"},{"type":"INSERT","lineNumber":530,"content":"  }"},{"type":"DELETE","lineNumber":541,"oldContent":"              ],"},{"type":"INSERT","lineNumber":533,"content":"    return Card("},{"type":"INSERT","lineNumber":534,"content":"      child: Padding("},{"type":"INSERT","lineNumber":535,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":536,"content":"        child: Column("},{"type":"INSERT","lineNumber":537,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":538,"content":"          children: ["},{"type":"DELETE","lineNumber":543,"oldContent":"            ),"},{"type":"DELETE","lineNumber":545,"oldContent":"          ],"},{"type":"DELETE","lineNumber":547,"oldContent":"        ),"},{"type":"DELETE","lineNumber":549,"oldContent":"      ),"},{"type":"DELETE","lineNumber":551,"oldContent":"    );"},{"type":"DELETE","lineNumber":553,"oldContent":"  }"},{"type":"DELETE","lineNumber":555,"oldContent":""},{"type":"INSERT","lineNumber":546,"content":"              children: ["},{"type":"INSERT","lineNumber":555,"content":"                ),"},{"type":"INSERT","lineNumber":565,"content":"              ],"},{"type":"INSERT","lineNumber":566,"content":"            ),"},{"type":"INSERT","lineNumber":567,"content":"          ],"},{"type":"INSERT","lineNumber":568,"content":"        ),"},{"type":"INSERT","lineNumber":569,"content":"      ),"},{"type":"INSERT","lineNumber":570,"content":"    );"},{"type":"INSERT","lineNumber":571,"content":"  }"},{"type":"INSERT","lineNumber":572,"content":""},{"type":"DELETE","lineNumber":581,"oldContent":"  }"},{"type":"DELETE","lineNumber":583,"oldContent":""},{"type":"DELETE","lineNumber":586,"oldContent":""},{"type":"INSERT","lineNumber":591,"content":"                ),"},{"type":"INSERT","lineNumber":592,"content":"                title: Text(trendData['habitName'] ?? 'Unknown Habit'),"},{"type":"INSERT","lineNumber":593,"content":"                subtitle: Text(trendData['message'] ?? ''),"},{"type":"INSERT","lineNumber":594,"content":"                trailing: Text('${(trendData['completionRate'] * 100).toStringAsFixed(1)}%'),"},{"type":"INSERT","lineNumber":595,"content":"              );"},{"type":"INSERT","lineNumber":596,"content":"            }),"},{"type":"INSERT","lineNumber":597,"content":"          ],"},{"type":"INSERT","lineNumber":598,"content":"        ),"},{"type":"INSERT","lineNumber":599,"content":"      ),"},{"type":"INSERT","lineNumber":600,"content":"    );"},{"type":"INSERT","lineNumber":601,"content":"  }"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"INSERT","lineNumber":603,"content":"  Widget _buildTrendInsightsCard(Map<String, dynamic> analysis) {"},{"type":"INSERT","lineNumber":604,"content":"    final insights = analysis['insights'] as List<String>? ?? [];"},{"type":"INSERT","lineNumber":605,"content":"    final recommendations = analysis['recommendations'] as List<String>? ?? [];"},{"type":"INSERT","lineNumber":606,"content":""},{"type":"INSERT","lineNumber":607,"content":"    return Card("},{"type":"INSERT","lineNumber":608,"content":"      child: Padding("},{"type":"INSERT","lineNumber":609,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":610,"content":"        child: Column("},{"type":"INSERT","lineNumber":611,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":612,"content":"          children: ["},{"type":"INSERT","lineNumber":613,"content":"            Text("},{"type":"INSERT","lineNumber":614,"content":"              'Insights & Recommendations',"},{"type":"INSERT","lineNumber":615,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":616,"content":"            ),"},{"type":"INSERT","lineNumber":617,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":618,"content":"            if (insights.isNotEmpty) ...["},{"type":"INSERT","lineNumber":619,"content":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"DELETE","lineNumber":596,"oldContent":"                ),"},{"type":"DELETE","lineNumber":599,"oldContent":"                title: Text(trendData['habitName'] ?? 'Unknown Habit'),"},{"type":"DELETE","lineNumber":602,"oldContent":"                subtitle: Text(trendData['message'] ?? ''),"},{"type":"DELETE","lineNumber":605,"oldContent":"                trailing: Text('${(trendData['completionRate'] * 100).toStringAsFixed(1)}%'),"},{"type":"DELETE","lineNumber":608,"oldContent":"              );"},{"type":"DELETE","lineNumber":611,"oldContent":"            }),"},{"type":"DELETE","lineNumber":614,"oldContent":"          ],"},{"type":"DELETE","lineNumber":617,"oldContent":"        ),"},{"type":"DELETE","lineNumber":620,"oldContent":"      ),"},{"type":"DELETE","lineNumber":623,"oldContent":"    );"},{"type":"DELETE","lineNumber":628,"oldContent":"  Widget _buildTrendInsightsCard(Map<String, dynamic> analysis) {"},{"type":"DELETE","lineNumber":631,"oldContent":"    final insights = analysis['insights'] as List<String>? ?? [];"},{"type":"DELETE","lineNumber":634,"oldContent":"    final recommendations = analysis['recommendations'] as List<String>? ?? [];"},{"type":"DELETE","lineNumber":638,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":641,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":644,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":647,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":650,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":653,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":656,"oldContent":"            Text("},{"type":"DELETE","lineNumber":659,"oldContent":"              'Insights & Recommendations',"},{"type":"DELETE","lineNumber":662,"oldContent":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":665,"oldContent":"            ),"},{"type":"DELETE","lineNumber":668,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":671,"oldContent":"            if (insights.isNotEmpty) ...["},{"type":"DELETE","lineNumber":673,"oldContent":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"DELETE","lineNumber":675,"oldContent":""},{"type":"DELETE","lineNumber":677,"oldContent":"}"},{"type":"DELETE","lineNumber":679,"oldContent":"  }"},{"type":"DELETE","lineNumber":681,"oldContent":"    }"},{"type":"DELETE","lineNumber":683,"oldContent":"        return Icons.help;"},{"type":"DELETE","lineNumber":685,"oldContent":"      default:"},{"type":"DELETE","lineNumber":687,"oldContent":"        return Icons.sentiment_dissatisfied;"},{"type":"DELETE","lineNumber":689,"oldContent":"      case 'hard':"},{"type":"DELETE","lineNumber":691,"oldContent":"        return Icons.sentiment_neutral;"},{"type":"DELETE","lineNumber":693,"oldContent":"      case 'medium':"},{"type":"DELETE","lineNumber":695,"oldContent":"        return Icons.sentiment_satisfied;"},{"type":"DELETE","lineNumber":697,"oldContent":"      case 'easy':"},{"type":"DELETE","lineNumber":699,"oldContent":"        return Icons.sentiment_very_satisfied;"},{"type":"DELETE","lineNumber":701,"oldContent":"      case 'very easy':"},{"type":"DELETE","lineNumber":703,"oldContent":"    switch (difficulty.toLowerCase()) {"},{"type":"DELETE","lineNumber":705,"oldContent":"  IconData _getDifficultyIcon(String difficulty) {"},{"type":"DELETE","lineNumber":707,"oldContent":""},{"type":"DELETE","lineNumber":709,"oldContent":"  }"},{"type":"DELETE","lineNumber":711,"oldContent":"    }"},{"type":"DELETE","lineNumber":713,"oldContent":"        return Icons.category;"},{"type":"DELETE","lineNumber":715,"oldContent":"      default:"},{"type":"DELETE","lineNumber":717,"oldContent":"        return Icons.self_improvement;"},{"type":"DELETE","lineNumber":719,"oldContent":"      case 'personal development':"},{"type":"DELETE","lineNumber":721,"oldContent":"        return Icons.people;"},{"type":"DELETE","lineNumber":723,"oldContent":"      case 'social':"},{"type":"DELETE","lineNumber":725,"oldContent":"        return Icons.school;"},{"type":"DELETE","lineNumber":727,"oldContent":"      case 'learning':"},{"type":"DELETE","lineNumber":729,"oldContent":"        return Icons.psychology;"},{"type":"DELETE","lineNumber":731,"oldContent":"      case 'mental health':"},{"type":"DELETE","lineNumber":733,"oldContent":"        return Icons.fitness_center;"},{"type":"DELETE","lineNumber":735,"oldContent":"      case 'fitness':"},{"type":"DELETE","lineNumber":737,"oldContent":"        return Icons.favorite;"},{"type":"DELETE","lineNumber":739,"oldContent":"      case 'health':"},{"type":"DELETE","lineNumber":741,"oldContent":"    switch (category.toLowerCase()) {"},{"type":"DELETE","lineNumber":743,"oldContent":"  IconData _getCategoryIcon(String category) {"},{"type":"DELETE","lineNumber":745,"oldContent":""},{"type":"DELETE","lineNumber":747,"oldContent":"  }"},{"type":"DELETE","lineNumber":749,"oldContent":"    }"},{"type":"DELETE","lineNumber":751,"oldContent":"        return Colors.grey;"},{"type":"DELETE","lineNumber":753,"oldContent":"      default:"},{"type":"DELETE","lineNumber":755,"oldContent":"        return Colors.indigo;"},{"type":"DELETE","lineNumber":757,"oldContent":"      case 'personal development':"},{"type":"DELETE","lineNumber":759,"oldContent":"        return Colors.green;"},{"type":"DELETE","lineNumber":760,"oldContent":"                  "},{"type":"DELETE","lineNumber":761,"oldContent":"      case 'social':"},{"type":"INSERT","lineNumber":717,"content":""},{"type":"DELETE","lineNumber":763,"oldContent":"        return Colors.blue;"},{"type":"DELETE","lineNumber":765,"oldContent":"      case 'learning':"},{"type":"DELETE","lineNumber":767,"oldContent":"        return Colors.purple;"},{"type":"DELETE","lineNumber":769,"oldContent":"      case 'mental health':"},{"type":"DELETE","lineNumber":770,"oldContent":"                      "},{"type":"DELETE","lineNumber":771,"oldContent":"        return Colors.orange;"},{"type":"INSERT","lineNumber":722,"content":""},{"type":"DELETE","lineNumber":773,"oldContent":"      case 'fitness':"},{"type":"DELETE","lineNumber":775,"oldContent":"        return Colors.red;"},{"type":"DELETE","lineNumber":777,"oldContent":"      case 'health':"},{"type":"DELETE","lineNumber":779,"oldContent":"    switch (category.toLowerCase()) {"},{"type":"DELETE","lineNumber":781,"oldContent":"  Color _getCategoryColor(String category) {"},{"type":"DELETE","lineNumber":783,"oldContent":""},{"type":"DELETE","lineNumber":785,"oldContent":"  }"},{"type":"DELETE","lineNumber":787,"oldContent":"    );"},{"type":"DELETE","lineNumber":789,"oldContent":"      },"},{"type":"DELETE","lineNumber":791,"oldContent":"        'estimatedDuration': recommendation.estimatedDuration,"},{"type":"DELETE","lineNumber":793,"oldContent":"        'suggestedTime': recommendation.suggestedTime,"},{"type":"DELETE","lineNumber":795,"oldContent":"        'difficulty': recommendation.difficulty,"},{"type":"DELETE","lineNumber":797,"oldContent":"        'category': recommendation.category,"},{"type":"DELETE","lineNumber":799,"oldContent":"        'description': recommendation.description,"},{"type":"DELETE","lineNumber":801,"oldContent":"        'name': recommendation.title,"},{"type":"DELETE","lineNumber":803,"oldContent":"      arguments: {"},{"type":"DELETE","lineNumber":805,"oldContent":"      '/create-habit',"},{"type":"DELETE","lineNumber":807,"oldContent":"    Navigator.of(context).pushNamed("},{"type":"DELETE","lineNumber":809,"oldContent":"    // Navigate to create habit screen with pre-filled data"},{"type":"DELETE","lineNumber":811,"oldContent":"  void _createHabitFromRecommendation(HabitRecommendation recommendation) {"},{"type":"DELETE","lineNumber":813,"oldContent":""},{"type":"DELETE","lineNumber":815,"oldContent":"  }"},{"type":"DELETE","lineNumber":817,"oldContent":"    );"},{"type":"DELETE","lineNumber":819,"oldContent":"      ),"},{"type":"DELETE","lineNumber":821,"oldContent":"        ],"},{"type":"DELETE","lineNumber":823,"oldContent":"          )),"},{"type":"DELETE","lineNumber":825,"oldContent":"            ),"},{"type":"DELETE","lineNumber":827,"oldContent":"              ],"},{"type":"DELETE","lineNumber":829,"oldContent":"                ),"},{"type":"DELETE","lineNumber":831,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":833,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":835,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":837,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":839,"oldContent":"                          child: const Text('Create This Habit'),"},{"type":"DELETE","lineNumber":841,"oldContent":"                          onPressed: () => _createHabitFromRecommendation(recommendation),"},{"type":"DELETE","lineNumber":843,"oldContent":"                        child: ElevatedButton("},{"type":"DELETE","lineNumber":845,"oldContent":"                        width: double.infinity,"},{"type":"DELETE","lineNumber":847,"oldContent":"                      SizedBox("},{"type":"DELETE","lineNumber":849,"oldContent":"                      const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":851,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":853,"oldContent":"                        ],"},{"type":"DELETE","lineNumber":855,"oldContent":"                          Text('Best time: ${recommendation.suggestedTime}'),"},{"type":"DELETE","lineNumber":857,"oldContent":"                          Text('Duration: ${recommendation.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":859,"oldContent":"                        children: ["},{"type":"DELETE","lineNumber":861,"oldContent":"                        mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"DELETE","lineNumber":863,"oldContent":"                      Row("},{"type":"DELETE","lineNumber":865,"oldContent":"                      const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":867,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":869,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":871,"oldContent":"                          fontStyle: FontStyle.italic,"},{"type":"DELETE","lineNumber":873,"oldContent":"                          color: Colors.grey[600],"},{"type":"DELETE","lineNumber":875,"oldContent":"                        style: TextStyle("},{"type":"DELETE","lineNumber":877,"oldContent":"                        'Why: ${recommendation.reason}',"},{"type":"DELETE","lineNumber":879,"oldContent":"                      Text("},{"type":"DELETE","lineNumber":881,"oldContent":"                      const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":883,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":885,"oldContent":"                        style: const TextStyle(fontSize: 16),"},{"type":"DELETE","lineNumber":887,"oldContent":"                        recommendation.description,"},{"type":"DELETE","lineNumber":889,"oldContent":"                      Text("},{"type":"DELETE","lineNumber":891,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":893,"oldContent":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":895,"oldContent":"                  child: Column("},{"type":"DELETE","lineNumber":897,"oldContent":"                  padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":899,"oldContent":"                Padding("},{"type":"DELETE","lineNumber":901,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":903,"oldContent":"              ),"},{"type":"DELETE","lineNumber":905,"oldContent":"                ],"},{"type":"DELETE","lineNumber":907,"oldContent":"                  Text('Priority: ${recommendation.priority}'),"},{"type":"DELETE","lineNumber":909,"oldContent":"                  Icon(_getDifficultyIcon(recommendation.difficulty)),"},{"type":"DELETE","lineNumber":911,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":913,"oldContent":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":915,"oldContent":"              trailing: Column("},{"type":"DELETE","lineNumber":917,"oldContent":"              subtitle: Text(recommendation.category),"},{"type":"DELETE","lineNumber":919,"oldContent":"              title: Text(recommendation.title),"},{"type":"DELETE","lineNumber":921,"oldContent":"              ),"},{"type":"DELETE","lineNumber":923,"oldContent":"                ),"},{"type":"DELETE","lineNumber":925,"oldContent":"                  color: Colors.white,"},{"type":"DELETE","lineNumber":927,"oldContent":"                  _getCategoryIcon(recommendation.category),"},{"type":"DELETE","lineNumber":929,"oldContent":"                child: Icon("},{"type":"DELETE","lineNumber":931,"oldContent":"                backgroundColor: _getCategoryColor(recommendation.category),"},{"type":"DELETE","lineNumber":933,"oldContent":"              leading: CircleAvatar("},{"type":"DELETE","lineNumber":935,"oldContent":"            child: ExpansionTile("},{"type":"DELETE","lineNumber":937,"oldContent":"          ..._recommendations!.map((recommendation) => Card("},{"type":"DELETE","lineNumber":939,"oldContent":"          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":941,"oldContent":"          ),"},{"type":"DELETE","lineNumber":943,"oldContent":"            style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":945,"oldContent":"            'Personalized Recommendations',"},{"type":"DELETE","lineNumber":947,"oldContent":"          Text("},{"type":"DELETE","lineNumber":949,"oldContent":"          // Main Recommendations"},{"type":"DELETE","lineNumber":951,"oldContent":""},{"type":"DELETE","lineNumber":953,"oldContent":"          ),"},{"type":"DELETE","lineNumber":954,"oldContent":"              "},{"type":"DELETE","lineNumber":955,"oldContent":"            },"},{"type":"INSERT","lineNumber":814,"content":""},{"type":"DELETE","lineNumber":957,"oldContent":"              return const SizedBox.shrink();"},{"type":"DELETE","lineNumber":959,"oldContent":"              }"},{"type":"DELETE","lineNumber":961,"oldContent":"                );"},{"type":"DELETE","lineNumber":963,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":965,"oldContent":"                    const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":967,"oldContent":"                    )),"},{"type":"DELETE","lineNumber":969,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":971,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":973,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":975,"oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":977,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"DELETE","lineNumber":979,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":981,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":983,"oldContent":"                        trailing: Column("},{"type":"INSERT","lineNumber":830,"content":"                        trailing: Column("},{"type":"INSERT","lineNumber":831,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":832,"content":"                          children: ["},{"type":"INSERT","lineNumber":833,"content":"                            Text(suggestion.suggestedTime),"},{"type":"INSERT","lineNumber":834,"content":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":835,"content":"                          ],"},{"type":"INSERT","lineNumber":836,"content":"                        ),"},{"type":"INSERT","lineNumber":837,"content":"                      ),"},{"type":"INSERT","lineNumber":838,"content":"                    )),"},{"type":"INSERT","lineNumber":839,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":840,"content":"                  ],"},{"type":"INSERT","lineNumber":841,"content":"                );"},{"type":"INSERT","lineNumber":842,"content":"              }"},{"type":"INSERT","lineNumber":843,"content":"              return const SizedBox.shrink();"},{"type":"INSERT","lineNumber":844,"content":"            },"},{"type":"INSERT","lineNumber":845,"content":"          ),"},{"type":"INSERT","lineNumber":846,"content":""},{"type":"INSERT","lineNumber":847,"content":"          // Main Recommendations"},{"type":"INSERT","lineNumber":848,"content":"          Text("},{"type":"INSERT","lineNumber":849,"content":"            'Personalized Recommendations',"},{"type":"INSERT","lineNumber":850,"content":"            style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":851,"content":"          ),"},{"type":"INSERT","lineNumber":852,"content":"          const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":853,"content":"          ..._recommendations!.map((recommendation) => Card("},{"type":"INSERT","lineNumber":854,"content":"            child: ExpansionTile("},{"type":"INSERT","lineNumber":855,"content":"              leading: CircleAvatar("},{"type":"INSERT","lineNumber":856,"content":"                backgroundColor: _getCategoryColor(recommendation.category),"},{"type":"INSERT","lineNumber":857,"content":"                child: Icon("},{"type":"INSERT","lineNumber":858,"content":"                  _getCategoryIcon(recommendation.category),"},{"type":"INSERT","lineNumber":859,"content":"                  color: Colors.white,"},{"type":"INSERT","lineNumber":860,"content":"                ),"},{"type":"INSERT","lineNumber":861,"content":"              ),"},{"type":"INSERT","lineNumber":862,"content":"              title: Text(recommendation.title),"},{"type":"INSERT","lineNumber":863,"content":"              subtitle: Text(recommendation.category),"},{"type":"INSERT","lineNumber":864,"content":"              trailing: Column("},{"type":"INSERT","lineNumber":865,"content":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":866,"content":"                children: ["},{"type":"INSERT","lineNumber":867,"content":"                  Icon(_getDifficultyIcon(recommendation.difficulty)),"},{"type":"INSERT","lineNumber":868,"content":"                  Text('Priority: ${recommendation.priority}'),"},{"type":"INSERT","lineNumber":869,"content":"                ],"},{"type":"INSERT","lineNumber":870,"content":"              ),"},{"type":"INSERT","lineNumber":871,"content":"              children: ["},{"type":"INSERT","lineNumber":872,"content":"                Padding("},{"type":"INSERT","lineNumber":873,"content":"                  padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":874,"content":"                  child: Column("},{"type":"INSERT","lineNumber":875,"content":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":876,"content":"                    children: ["},{"type":"INSERT","lineNumber":877,"content":"                      Text("},{"type":"INSERT","lineNumber":878,"content":"                        recommendation.description,"},{"type":"INSERT","lineNumber":879,"content":"                        style: const TextStyle(fontSize: 16),"},{"type":"INSERT","lineNumber":880,"content":"                      ),"},{"type":"INSERT","lineNumber":881,"content":"                      const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":882,"content":"                      Text("},{"type":"INSERT","lineNumber":883,"content":"                        'Why: ${recommendation.reason}',"},{"type":"INSERT","lineNumber":884,"content":"                        style: TextStyle("},{"type":"INSERT","lineNumber":885,"content":"                          color: Colors.grey[600],"},{"type":"INSERT","lineNumber":886,"content":"                          fontStyle: FontStyle.italic,"},{"type":"INSERT","lineNumber":887,"content":"                        ),"},{"type":"INSERT","lineNumber":888,"content":"                      ),"},{"type":"INSERT","lineNumber":889,"content":"                      const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":890,"content":"                      Row("},{"type":"INSERT","lineNumber":891,"content":"                        mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"INSERT","lineNumber":892,"content":"                        children: ["},{"type":"INSERT","lineNumber":893,"content":"                          Text('Duration: ${recommendation.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":894,"content":"                          Text('Best time: ${recommendation.suggestedTime}'),"},{"type":"INSERT","lineNumber":895,"content":"                        ],"},{"type":"INSERT","lineNumber":896,"content":"                      ),"},{"type":"INSERT","lineNumber":897,"content":"                      const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":898,"content":"                      SizedBox("},{"type":"INSERT","lineNumber":899,"content":"                        width: double.infinity,"},{"type":"INSERT","lineNumber":900,"content":"                        child: ElevatedButton("},{"type":"INSERT","lineNumber":901,"content":"                          onPressed: () => _createHabitFromRecommendation(recommendation),"},{"type":"INSERT","lineNumber":902,"content":"                          child: const Text('Create This Habit'),"},{"type":"INSERT","lineNumber":903,"content":"                        ),"},{"type":"INSERT","lineNumber":904,"content":"                      ),"},{"type":"INSERT","lineNumber":905,"content":"                    ],"},{"type":"INSERT","lineNumber":906,"content":"                  ),"},{"type":"INSERT","lineNumber":907,"content":"                ),"},{"type":"INSERT","lineNumber":908,"content":"              ],"},{"type":"INSERT","lineNumber":909,"content":"            ),"},{"type":"INSERT","lineNumber":910,"content":"          )),"},{"type":"INSERT","lineNumber":911,"content":"        ],"},{"type":"INSERT","lineNumber":912,"content":"      ),"},{"type":"INSERT","lineNumber":913,"content":"    );"},{"type":"INSERT","lineNumber":914,"content":"  }"},{"type":"INSERT","lineNumber":915,"content":""},{"type":"INSERT","lineNumber":916,"content":"  void _createHabitFromRecommendation(HabitRecommendation recommendation) {"},{"type":"INSERT","lineNumber":917,"content":"    // Navigate to create habit screen with pre-filled data"},{"type":"INSERT","lineNumber":918,"content":"    Navigator.of(context).pushNamed("},{"type":"INSERT","lineNumber":919,"content":"      '/create-habit',"},{"type":"INSERT","lineNumber":920,"content":"      arguments: {"},{"type":"INSERT","lineNumber":921,"content":"        'name': recommendation.title,"},{"type":"INSERT","lineNumber":922,"content":"        'description': recommendation.description,"},{"type":"INSERT","lineNumber":923,"content":"        'category': recommendation.category,"},{"type":"INSERT","lineNumber":924,"content":"        'difficulty': recommendation.difficulty,"},{"type":"INSERT","lineNumber":925,"content":"        'suggestedTime': recommendation.suggestedTime,"},{"type":"INSERT","lineNumber":926,"content":"        'estimatedDuration': recommendation.estimatedDuration,"},{"type":"INSERT","lineNumber":927,"content":"      },"},{"type":"INSERT","lineNumber":928,"content":"    );"},{"type":"INSERT","lineNumber":929,"content":"  }"},{"type":"INSERT","lineNumber":930,"content":""},{"type":"INSERT","lineNumber":931,"content":"  Color _getCategoryColor(String category) {"},{"type":"INSERT","lineNumber":932,"content":"    switch (category.toLowerCase()) {"},{"type":"INSERT","lineNumber":933,"content":"      case 'health':"},{"type":"INSERT","lineNumber":934,"content":"        return Colors.red;"},{"type":"INSERT","lineNumber":935,"content":"      case 'fitness':"},{"type":"INSERT","lineNumber":936,"content":"        return Colors.orange;"},{"type":"INSERT","lineNumber":937,"content":"      case 'mental health':"},{"type":"INSERT","lineNumber":938,"content":"        return Colors.purple;"},{"type":"INSERT","lineNumber":939,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":940,"content":"        return Colors.blue;"},{"type":"INSERT","lineNumber":941,"content":"      case 'social':"},{"type":"INSERT","lineNumber":942,"content":"        return Colors.green;"},{"type":"INSERT","lineNumber":943,"content":"      case 'personal development':"},{"type":"INSERT","lineNumber":944,"content":"        return Colors.indigo;"},{"type":"INSERT","lineNumber":945,"content":"      default:"},{"type":"INSERT","lineNumber":946,"content":"        return Colors.grey;"},{"type":"INSERT","lineNumber":947,"content":"    }"},{"type":"INSERT","lineNumber":948,"content":"  }"},{"type":"INSERT","lineNumber":949,"content":""},{"type":"INSERT","lineNumber":950,"content":"  IconData _getCategoryIcon(String category) {"},{"type":"INSERT","lineNumber":951,"content":"    switch (category.toLowerCase()) {"},{"type":"INSERT","lineNumber":952,"content":"      case 'health':"},{"type":"INSERT","lineNumber":953,"content":"        return Icons.favorite;"},{"type":"INSERT","lineNumber":954,"content":"      case 'fitness':"},{"type":"INSERT","lineNumber":955,"content":"        return Icons.fitness_center;"},{"type":"INSERT","lineNumber":956,"content":"      case 'mental health':"},{"type":"INSERT","lineNumber":957,"content":"        return Icons.psychology;"},{"type":"INSERT","lineNumber":958,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":959,"content":"        return Icons.school;"},{"type":"INSERT","lineNumber":960,"content":"      case 'social':"},{"type":"INSERT","lineNumber":961,"content":"        return Icons.people;"},{"type":"INSERT","lineNumber":962,"content":"      case 'personal development':"},{"type":"INSERT","lineNumber":963,"content":"        return Icons.self_improvement;"},{"type":"INSERT","lineNumber":964,"content":"      default:"},{"type":"INSERT","lineNumber":965,"content":"        return Icons.category;"},{"type":"INSERT","lineNumber":966,"content":"    }"},{"type":"INSERT","lineNumber":967,"content":"  }"},{"type":"INSERT","lineNumber":968,"content":""},{"type":"INSERT","lineNumber":969,"content":"  IconData _getDifficultyIcon(String difficulty) {"},{"type":"INSERT","lineNumber":970,"content":"    switch (difficulty.toLowerCase()) {"},{"type":"INSERT","lineNumber":971,"content":"      case 'very easy':"},{"type":"INSERT","lineNumber":972,"content":"        return Icons.sentiment_very_satisfied;"},{"type":"INSERT","lineNumber":973,"content":"      case 'easy':"},{"type":"INSERT","lineNumber":974,"content":"        return Icons.sentiment_satisfied;"},{"type":"INSERT","lineNumber":975,"content":"      case 'medium':"},{"type":"INSERT","lineNumber":976,"content":"        return Icons.sentiment_neutral;"},{"type":"INSERT","lineNumber":977,"content":"      case 'hard':"},{"type":"INSERT","lineNumber":978,"content":"        return Icons.sentiment_dissatisfied;"},{"type":"INSERT","lineNumber":979,"content":"      default:"},{"type":"INSERT","lineNumber":980,"content":"        return Icons.help;"},{"type":"INSERT","lineNumber":981,"content":"    }"},{"type":"INSERT","lineNumber":982,"content":"  }"},{"type":"INSERT","lineNumber":983,"content":"}"},{"type":"INSERT","lineNumber":984,"content":""}]},{"timestamp":1754439652298,"changes":[{"type":"MODIFY","lineNumber":9,"content":"import '../../services/logging_service.dart';","oldContent":"import '../../services/logging_service.dart';"},{"type":"MODIFY","lineNumber":12,"content":"  const InsightsScreen({super.key});","oldContent":"  const InsightsScreen({super.key});"},{"type":"DELETE","lineNumber":148,"oldContent":"    return Scaffold("},{"type":"DELETE","lineNumber":150,"oldContent":"      appBar: AppBar("},{"type":"MODIFY","lineNumber":152,"content":"    return Scaffold(","oldContent":"        title: const Text('Insights'),"},{"type":"INSERT","lineNumber":153,"content":"      appBar: AppBar("},{"type":"INSERT","lineNumber":154,"content":"        title: const Text('Insights'),"},{"type":"DELETE","lineNumber":161,"oldContent":"      ),"},{"type":"INSERT","lineNumber":164,"content":"      ),"},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"MODIFY","lineNumber":178,"content":"","oldContent":""},{"type":"INSERT","lineNumber":183,"content":""},{"type":"DELETE","lineNumber":185,"oldContent":"                  child: Column("},{"type":"DELETE","lineNumber":188,"oldContent":"                    children: ["},{"type":"INSERT","lineNumber":190,"content":"                  child: Column("},{"type":"INSERT","lineNumber":192,"content":"                    children: ["},{"type":"DELETE","lineNumber":202,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":204,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":206,"oldContent":"                );"},{"type":"INSERT","lineNumber":205,"content":"                    ],"},{"type":"INSERT","lineNumber":206,"content":"                  ),"},{"type":"INSERT","lineNumber":207,"content":"                );"},{"type":"DELETE","lineNumber":255,"oldContent":"            ),"},{"type":"INSERT","lineNumber":261,"content":"            ),"},{"type":"DELETE","lineNumber":272,"oldContent":"      ),"},{"type":"DELETE","lineNumber":274,"oldContent":"    );"},{"type":"DELETE","lineNumber":276,"oldContent":"  }"},{"type":"DELETE","lineNumber":278,"oldContent":""},{"type":"DELETE","lineNumber":283,"oldContent":""},{"type":"INSERT","lineNumber":280,"content":"      ),"},{"type":"INSERT","lineNumber":281,"content":"    );"},{"type":"INSERT","lineNumber":282,"content":"  }"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"INSERT","lineNumber":291,"content":""},{"type":"DELETE","lineNumber":302,"oldContent":"              ),"},{"type":"DELETE","lineNumber":303,"oldContent":"            ),"},{"type":"DELETE","lineNumber":306,"oldContent":"            ),"},{"type":"DELETE","lineNumber":313,"oldContent":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":315,"oldContent":"    final health = _healthSummary!;"},{"type":"DELETE","lineNumber":317,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":319,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":321,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":323,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":325,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":327,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":330,"oldContent":"              children: ["},{"type":"INSERT","lineNumber":321,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            ),"},{"type":"DELETE","lineNumber":334,"oldContent":"                Text("},{"type":"DELETE","lineNumber":336,"oldContent":"                ),"},{"type":"DELETE","lineNumber":338,"oldContent":"              ],"},{"type":"DELETE","lineNumber":339,"oldContent":"            ),"},{"type":"DELETE","lineNumber":341,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":327,"content":"            ),"},{"type":"DELETE","lineNumber":348,"oldContent":"          ],"},{"type":"INSERT","lineNumber":334,"content":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":335,"content":"    final health = _healthSummary!;"},{"type":"INSERT","lineNumber":336,"content":"    return Card("},{"type":"INSERT","lineNumber":337,"content":"      child: Padding("},{"type":"INSERT","lineNumber":338,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":339,"content":"        child: Column("},{"type":"INSERT","lineNumber":340,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":341,"content":"          children: ["},{"type":"DELETE","lineNumber":350,"oldContent":"        ),"},{"type":"INSERT","lineNumber":343,"content":"              children: ["},{"type":"DELETE","lineNumber":352,"oldContent":"      ),"},{"type":"DELETE","lineNumber":354,"oldContent":"    );"},{"type":"INSERT","lineNumber":346,"content":"                Text("},{"type":"DELETE","lineNumber":356,"oldContent":"  }"},{"type":"DELETE","lineNumber":358,"oldContent":""},{"type":"INSERT","lineNumber":349,"content":"                ),"},{"type":"INSERT","lineNumber":350,"content":"              ],"},{"type":"INSERT","lineNumber":351,"content":"            ),"},{"type":"INSERT","lineNumber":352,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":360,"oldContent":""},{"type":"INSERT","lineNumber":364,"content":"          ],"},{"type":"INSERT","lineNumber":365,"content":"        ),"},{"type":"INSERT","lineNumber":366,"content":"      ),"},{"type":"INSERT","lineNumber":367,"content":"    );"},{"type":"INSERT","lineNumber":368,"content":"  }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":372,"content":""},{"type":"DELETE","lineNumber":377,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":379,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":381,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":383,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":385,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":387,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":391,"oldContent":"            ),"},{"type":"DELETE","lineNumber":393,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":397,"oldContent":"            else"},{"type":"INSERT","lineNumber":392,"content":"    return Card("},{"type":"INSERT","lineNumber":393,"content":"      child: Padding("},{"type":"INSERT","lineNumber":394,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":395,"content":"        child: Column("},{"type":"INSERT","lineNumber":396,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":397,"content":"          children: ["},{"type":"DELETE","lineNumber":403,"oldContent":"          ],"},{"type":"DELETE","lineNumber":405,"oldContent":"        ),"},{"type":"INSERT","lineNumber":401,"content":"            ),"},{"type":"INSERT","lineNumber":402,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":407,"oldContent":"      ),"},{"type":"DELETE","lineNumber":409,"oldContent":"    );"},{"type":"INSERT","lineNumber":405,"content":"            else"},{"type":"DELETE","lineNumber":411,"oldContent":"  }"},{"type":"DELETE","lineNumber":413,"oldContent":""},{"type":"INSERT","lineNumber":410,"content":"          ],"},{"type":"INSERT","lineNumber":411,"content":"        ),"},{"type":"INSERT","lineNumber":412,"content":"      ),"},{"type":"INSERT","lineNumber":413,"content":"    );"},{"type":"INSERT","lineNumber":414,"content":"  }"},{"type":"INSERT","lineNumber":415,"content":""},{"type":"MODIFY","lineNumber":432,"content":"","oldContent":""},{"type":"DELETE","lineNumber":482,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":484,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":485,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":487,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":495,"oldContent":"                ),"},{"type":"INSERT","lineNumber":494,"content":"    return Card("},{"type":"INSERT","lineNumber":495,"content":"      child: Padding("},{"type":"INSERT","lineNumber":496,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":497,"content":"        child: Column("},{"type":"DELETE","lineNumber":502,"oldContent":"              ],"},{"type":"DELETE","lineNumber":504,"oldContent":"            ),"},{"type":"DELETE","lineNumber":506,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":512,"oldContent":"              ),"},{"type":"DELETE","lineNumber":514,"oldContent":"          ],"},{"type":"DELETE","lineNumber":516,"oldContent":"        ),"},{"type":"INSERT","lineNumber":510,"content":"                ),"},{"type":"DELETE","lineNumber":518,"oldContent":"      ),"},{"type":"DELETE","lineNumber":520,"oldContent":"    );"},{"type":"DELETE","lineNumber":522,"oldContent":"  }"},{"type":"DELETE","lineNumber":525,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":527,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":529,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":518,"content":"              ],"},{"type":"INSERT","lineNumber":519,"content":"            ),"},{"type":"INSERT","lineNumber":520,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":531,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":533,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":535,"oldContent":"          children: ["},{"type":"INSERT","lineNumber":525,"content":"              ),"},{"type":"INSERT","lineNumber":526,"content":"          ],"},{"type":"INSERT","lineNumber":527,"content":"        ),"},{"type":"INSERT","lineNumber":528,"content":"      ),"},{"type":"INSERT","lineNumber":529,"content":"    );"},{"type":"INSERT","lineNumber":530,"content":"  }"},{"type":"INSERT","lineNumber":533,"content":"    return Card("},{"type":"INSERT","lineNumber":534,"content":"      child: Padding("},{"type":"INSERT","lineNumber":535,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":536,"content":"        child: Column("},{"type":"INSERT","lineNumber":537,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":538,"content":"          children: ["},{"type":"DELETE","lineNumber":541,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":547,"oldContent":"                ),"},{"type":"INSERT","lineNumber":546,"content":"              children: ["},{"type":"INSERT","lineNumber":555,"content":"                ),"},{"type":"DELETE","lineNumber":557,"oldContent":"              ],"},{"type":"DELETE","lineNumber":559,"oldContent":"            ),"},{"type":"DELETE","lineNumber":561,"oldContent":"          ],"},{"type":"DELETE","lineNumber":563,"oldContent":"        ),"},{"type":"DELETE","lineNumber":565,"oldContent":"      ),"},{"type":"DELETE","lineNumber":567,"oldContent":"    );"},{"type":"DELETE","lineNumber":569,"oldContent":"  }"},{"type":"DELETE","lineNumber":571,"oldContent":""},{"type":"INSERT","lineNumber":565,"content":"              ],"},{"type":"INSERT","lineNumber":566,"content":"            ),"},{"type":"INSERT","lineNumber":567,"content":"          ],"},{"type":"INSERT","lineNumber":568,"content":"        ),"},{"type":"INSERT","lineNumber":569,"content":"      ),"},{"type":"INSERT","lineNumber":570,"content":"    );"},{"type":"INSERT","lineNumber":571,"content":"  }"},{"type":"INSERT","lineNumber":572,"content":""},{"type":"DELETE","lineNumber":588,"oldContent":"                ),"},{"type":"DELETE","lineNumber":590,"oldContent":"                title: Text(trendData['habitName'] ?? 'Unknown Habit'),"},{"type":"DELETE","lineNumber":592,"oldContent":"                subtitle: Text(trendData['message'] ?? ''),"},{"type":"INSERT","lineNumber":591,"content":"                ),"},{"type":"INSERT","lineNumber":592,"content":"                title: Text(trendData['habitName'] ?? 'Unknown Habit'),"},{"type":"INSERT","lineNumber":593,"content":"                subtitle: Text(trendData['message'] ?? ''),"},{"type":"DELETE","lineNumber":595,"oldContent":"              ...insights.map((insight) => Padding("},{"type":"DELETE","lineNumber":597,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"DELETE","lineNumber":600,"oldContent":"                child: Text('• $insight'),"},{"type":"DELETE","lineNumber":602,"oldContent":"              )),"},{"type":"DELETE","lineNumber":605,"oldContent":"              const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":607,"oldContent":"            ],"},{"type":"DELETE","lineNumber":610,"oldContent":"            if (recommendations.isNotEmpty) ...["},{"type":"DELETE","lineNumber":612,"oldContent":"              const Text('🎯 Recommendations:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"DELETE","lineNumber":615,"oldContent":"              ...recommendations.map((rec) => Padding("},{"type":"DELETE","lineNumber":617,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"DELETE","lineNumber":620,"oldContent":"                child: Text('• $rec'),"},{"type":"DELETE","lineNumber":622,"oldContent":"              )),"},{"type":"DELETE","lineNumber":625,"oldContent":"            ],"},{"type":"DELETE","lineNumber":627,"oldContent":"          ],"},{"type":"DELETE","lineNumber":630,"oldContent":"        ),"},{"type":"DELETE","lineNumber":632,"oldContent":"      ),"},{"type":"DELETE","lineNumber":635,"oldContent":"    );"},{"type":"INSERT","lineNumber":620,"content":"              ...insights.map((insight) => Padding("},{"type":"INSERT","lineNumber":621,"content":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"INSERT","lineNumber":622,"content":"                child: Text('• $insight'),"},{"type":"INSERT","lineNumber":623,"content":"              )),"},{"type":"INSERT","lineNumber":624,"content":"              const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":625,"content":"            ],"},{"type":"INSERT","lineNumber":626,"content":"            if (recommendations.isNotEmpty) ...["},{"type":"INSERT","lineNumber":627,"content":"              const Text('🎯 Recommendations:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"INSERT","lineNumber":628,"content":"              ...recommendations.map((rec) => Padding("},{"type":"INSERT","lineNumber":629,"content":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"INSERT","lineNumber":630,"content":"                child: Text('• $rec'),"},{"type":"INSERT","lineNumber":631,"content":"              )),"},{"type":"INSERT","lineNumber":632,"content":"            ],"},{"type":"INSERT","lineNumber":633,"content":"          ],"},{"type":"INSERT","lineNumber":634,"content":"        ),"},{"type":"INSERT","lineNumber":635,"content":"      ),"},{"type":"INSERT","lineNumber":636,"content":"    );"},{"type":"DELETE","lineNumber":696,"oldContent":""},{"type":"DELETE","lineNumber":699,"oldContent":""},{"type":"INSERT","lineNumber":717,"content":"                  "},{"type":"INSERT","lineNumber":722,"content":"                      "},{"type":"DELETE","lineNumber":744,"oldContent":""},{"type":"MODIFY","lineNumber":753,"content":"                          ),","oldContent":"                        trailing: Column("},{"type":"INSERT","lineNumber":754,"content":"                          trailing: Text("},{"type":"INSERT","lineNumber":755,"content":"                            isUnlocked ? 'Unlocked!' : '+${achievement.xpReward} XP',"},{"type":"INSERT","lineNumber":756,"content":"                            style: TextStyle("},{"type":"INSERT","lineNumber":757,"content":"                              color: isUnlocked ? Colors.amber[700] : Colors.grey,"},{"type":"INSERT","lineNumber":758,"content":"                              fontWeight: isUnlocked ? FontWeight.bold : null,"},{"type":"INSERT","lineNumber":759,"content":"                            ),"},{"type":"INSERT","lineNumber":760,"content":"                          ),"},{"type":"INSERT","lineNumber":761,"content":"                        ),"},{"type":"INSERT","lineNumber":762,"content":"                      );"},{"type":"INSERT","lineNumber":763,"content":"                    }).toList(),"},{"type":"INSERT","lineNumber":764,"content":"                  );"},{"type":"INSERT","lineNumber":765,"content":"                },"},{"type":"INSERT","lineNumber":766,"content":"              ),"},{"type":"INSERT","lineNumber":767,"content":"            ],"},{"type":"INSERT","lineNumber":768,"content":"          ),"},{"type":"INSERT","lineNumber":769,"content":"        );"},{"type":"INSERT","lineNumber":770,"content":"      },"},{"type":"INSERT","lineNumber":771,"content":"    );"},{"type":"INSERT","lineNumber":772,"content":"  }"},{"type":"INSERT","lineNumber":773,"content":""},{"type":"INSERT","lineNumber":774,"content":"  Widget _buildRecommendationsTab() {"},{"type":"INSERT","lineNumber":775,"content":"    if (_recommendations == null) {"},{"type":"INSERT","lineNumber":776,"content":"      return const Center(child: CircularProgressIndicator());"},{"type":"INSERT","lineNumber":777,"content":"    }"},{"type":"INSERT","lineNumber":778,"content":""},{"type":"INSERT","lineNumber":779,"content":"    if (_recommendations!.isEmpty) {"},{"type":"INSERT","lineNumber":780,"content":"      return const Center("},{"type":"INSERT","lineNumber":781,"content":"        child: Column("},{"type":"INSERT","lineNumber":782,"content":"          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":783,"content":"          children: ["},{"type":"INSERT","lineNumber":784,"content":"            Icon(Icons.lightbulb_outline, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":785,"content":"            SizedBox(height: 16),"},{"type":"INSERT","lineNumber":786,"content":"            Text("},{"type":"INSERT","lineNumber":787,"content":"              'No recommendations yet',"},{"type":"INSERT","lineNumber":788,"content":"              style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":789,"content":"            ),"},{"type":"INSERT","lineNumber":790,"content":"            SizedBox(height: 8),"},{"type":"INSERT","lineNumber":791,"content":"            Text("},{"type":"INSERT","lineNumber":792,"content":"              'Keep tracking habits to get personalized recommendations!',"},{"type":"INSERT","lineNumber":793,"content":"              style: TextStyle(color: Colors.grey),"},{"type":"INSERT","lineNumber":794,"content":"              textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":795,"content":"            ),"},{"type":"INSERT","lineNumber":796,"content":"          ],"},{"type":"INSERT","lineNumber":797,"content":"        ),"},{"type":"INSERT","lineNumber":798,"content":"      );"},{"type":"INSERT","lineNumber":799,"content":"    }"},{"type":"INSERT","lineNumber":800,"content":""},{"type":"INSERT","lineNumber":801,"content":"    return SingleChildScrollView("},{"type":"INSERT","lineNumber":802,"content":"      padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":803,"content":"      child: Column("},{"type":"INSERT","lineNumber":804,"content":"        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":805,"content":"        children: ["},{"type":"INSERT","lineNumber":806,"content":"          // Contextual Suggestions"},{"type":"INSERT","lineNumber":807,"content":"          FutureBuilder<List<HabitRecommendation>>("},{"type":"INSERT","lineNumber":808,"content":"            future: Future.value(SmartRecommendationsService.getContextualSuggestions("},{"type":"INSERT","lineNumber":809,"content":"              currentTime: DateTime.now(),"},{"type":"INSERT","lineNumber":810,"content":"              existingHabits: [],"},{"type":"INSERT","lineNumber":811,"content":"            )),"},{"type":"INSERT","lineNumber":812,"content":"            builder: (context, contextSnapshot) {"},{"type":"INSERT","lineNumber":813,"content":"              final contextualSuggestions = contextSnapshot.data ?? [];"},{"type":"INSERT","lineNumber":814,"content":"              "},{"type":"INSERT","lineNumber":815,"content":"              if (contextualSuggestions.isNotEmpty) {"},{"type":"INSERT","lineNumber":816,"content":"                return Column("},{"type":"INSERT","lineNumber":817,"content":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":818,"content":"                  children: ["},{"type":"INSERT","lineNumber":819,"content":"                    Text("},{"type":"INSERT","lineNumber":820,"content":"                      'Perfect Time Suggestions',"},{"type":"INSERT","lineNumber":821,"content":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":822,"content":"                    ),"},{"type":"INSERT","lineNumber":823,"content":"                    const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":824,"content":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"INSERT","lineNumber":825,"content":"                      color: Colors.blue[50],"},{"type":"INSERT","lineNumber":826,"content":"                      child: ListTile("},{"type":"INSERT","lineNumber":827,"content":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"INSERT","lineNumber":828,"content":"                        title: Text(suggestion.title),"},{"type":"INSERT","lineNumber":829,"content":"                        subtitle: Text(suggestion.description),"},{"type":"INSERT","lineNumber":830,"content":"                        trailing: Column("},{"type":"DELETE","lineNumber":757,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":760,"oldContent":"                          trailing: Text("},{"type":"DELETE","lineNumber":763,"oldContent":"                            isUnlocked ? 'Unlocked!' : '+${achievement.xpReward} XP',"},{"type":"DELETE","lineNumber":766,"oldContent":"                            style: TextStyle("},{"type":"DELETE","lineNumber":769,"oldContent":"                              color: isUnlocked ? Colors.amber[700] : Colors.grey,"},{"type":"DELETE","lineNumber":772,"oldContent":"                              fontWeight: isUnlocked ? FontWeight.bold : null,"},{"type":"DELETE","lineNumber":775,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":778,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":781,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":784,"oldContent":"                      );"},{"type":"DELETE","lineNumber":787,"oldContent":"                    }).toList(),"},{"type":"DELETE","lineNumber":790,"oldContent":"                  );"},{"type":"DELETE","lineNumber":793,"oldContent":"                },"},{"type":"DELETE","lineNumber":796,"oldContent":"              ),"},{"type":"DELETE","lineNumber":799,"oldContent":"            ],"},{"type":"DELETE","lineNumber":802,"oldContent":"          ),"},{"type":"DELETE","lineNumber":805,"oldContent":"        );"},{"type":"DELETE","lineNumber":808,"oldContent":"      },"},{"type":"DELETE","lineNumber":811,"oldContent":"    );"},{"type":"DELETE","lineNumber":814,"oldContent":"  }"},{"type":"DELETE","lineNumber":817,"oldContent":""},{"type":"DELETE","lineNumber":820,"oldContent":"  Widget _buildRecommendationsTab() {"},{"type":"DELETE","lineNumber":823,"oldContent":"    if (_recommendations == null) {"},{"type":"DELETE","lineNumber":826,"oldContent":"      return const Center(child: CircularProgressIndicator());"},{"type":"DELETE","lineNumber":829,"oldContent":"    }"},{"type":"DELETE","lineNumber":832,"oldContent":""},{"type":"DELETE","lineNumber":835,"oldContent":"    if (_recommendations!.isEmpty) {"},{"type":"DELETE","lineNumber":838,"oldContent":"      return const Center("},{"type":"DELETE","lineNumber":841,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":844,"oldContent":"          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":847,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":850,"oldContent":"            Icon(Icons.lightbulb_outline, size: 64, color: Colors.grey),"},{"type":"DELETE","lineNumber":853,"oldContent":"            SizedBox(height: 16),"},{"type":"DELETE","lineNumber":856,"oldContent":"            Text("},{"type":"DELETE","lineNumber":859,"oldContent":"              'No recommendations yet',"},{"type":"DELETE","lineNumber":862,"oldContent":"              style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":865,"oldContent":"            ),"},{"type":"DELETE","lineNumber":868,"oldContent":"            SizedBox(height: 8),"},{"type":"DELETE","lineNumber":871,"oldContent":"            Text("},{"type":"DELETE","lineNumber":874,"oldContent":"              'Keep tracking habits to get personalized recommendations!',"},{"type":"DELETE","lineNumber":877,"oldContent":"              style: TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":880,"oldContent":"              textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":883,"oldContent":"            ),"},{"type":"DELETE","lineNumber":886,"oldContent":"          ],"},{"type":"DELETE","lineNumber":889,"oldContent":"        ),"},{"type":"DELETE","lineNumber":892,"oldContent":"      );"},{"type":"DELETE","lineNumber":895,"oldContent":"    }"},{"type":"DELETE","lineNumber":898,"oldContent":""},{"type":"DELETE","lineNumber":901,"oldContent":"    return SingleChildScrollView("},{"type":"DELETE","lineNumber":904,"oldContent":"      padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":907,"oldContent":"      child: Column("},{"type":"DELETE","lineNumber":910,"oldContent":"        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":913,"oldContent":"        children: ["},{"type":"DELETE","lineNumber":916,"oldContent":"          // Contextual Suggestions"},{"type":"DELETE","lineNumber":919,"oldContent":"          FutureBuilder<List<HabitRecommendation>>("},{"type":"DELETE","lineNumber":922,"oldContent":"            future: Future.value(SmartRecommendationsService.getContextualSuggestions("},{"type":"DELETE","lineNumber":925,"oldContent":"              currentTime: DateTime.now(),"},{"type":"DELETE","lineNumber":928,"oldContent":"              existingHabits: [],"},{"type":"DELETE","lineNumber":931,"oldContent":"            )),"},{"type":"DELETE","lineNumber":934,"oldContent":"            builder: (context, contextSnapshot) {"},{"type":"DELETE","lineNumber":937,"oldContent":"              final contextualSuggestions = contextSnapshot.data ?? [];"},{"type":"DELETE","lineNumber":942,"oldContent":"              if (contextualSuggestions.isNotEmpty) {"},{"type":"DELETE","lineNumber":945,"oldContent":"                return Column("},{"type":"DELETE","lineNumber":948,"oldContent":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":951,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":954,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":957,"oldContent":"                      'Perfect Time Suggestions',"},{"type":"DELETE","lineNumber":960,"oldContent":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":963,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":966,"oldContent":"                    const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":969,"oldContent":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"DELETE","lineNumber":972,"oldContent":"                      color: Colors.blue[50],"},{"type":"DELETE","lineNumber":975,"oldContent":"                      child: ListTile("},{"type":"DELETE","lineNumber":978,"oldContent":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"DELETE","lineNumber":981,"oldContent":"                        title: Text(suggestion.title),"},{"type":"DELETE","lineNumber":984,"oldContent":"                        subtitle: Text(suggestion.description),"}]},{"timestamp":1754439673843,"changes":[{"type":"INSERT","lineNumber":8,"content":"import '../../services/calendar_service.dart';"},{"type":"DELETE","lineNumber":9,"oldContent":"import '../../services/logging_service.dart';"},{"type":"INSERT","lineNumber":11,"content":"class InsightsScreen extends ConsumerStatefulWidget {"},{"type":"DELETE","lineNumber":12,"oldContent":"  const InsightsScreen({super.key});"},{"type":"INSERT","lineNumber":150,"content":"  @override"},{"type":"INSERT","lineNumber":151,"content":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":152,"oldContent":"  @override"},{"type":"DELETE","lineNumber":154,"oldContent":"  Widget build(BuildContext context) {"},{"type":"MODIFY","lineNumber":164,"content":"      ),","oldContent":"      ),"},{"type":"DELETE","lineNumber":176,"oldContent":""},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"INSERT","lineNumber":176,"content":"    );"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"MODIFY","lineNumber":183,"content":"","oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"                  child: Column("},{"type":"MODIFY","lineNumber":190,"content":"                  child: Column(","oldContent":"                    children: ["},{"type":"INSERT","lineNumber":192,"content":"                    children: ["},{"type":"MODIFY","lineNumber":204,"content":"                      ),","oldContent":"                    ],"},{"type":"INSERT","lineNumber":205,"content":"                    ],"},{"type":"DELETE","lineNumber":207,"oldContent":"                      ),"},{"type":"MODIFY","lineNumber":261,"content":"            ),","oldContent":"            ),"},{"type":"DELETE","lineNumber":276,"oldContent":"      ),"},{"type":"DELETE","lineNumber":278,"oldContent":"    );"},{"type":"DELETE","lineNumber":280,"oldContent":"  }"},{"type":"DELETE","lineNumber":282,"oldContent":""},{"type":"INSERT","lineNumber":280,"content":"      ),"},{"type":"INSERT","lineNumber":281,"content":"    );"},{"type":"INSERT","lineNumber":282,"content":"  }"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"MODIFY","lineNumber":291,"content":"","oldContent":""},{"type":"DELETE","lineNumber":314,"oldContent":"              ),"},{"type":"DELETE","lineNumber":315,"oldContent":"            ),"},{"type":"DELETE","lineNumber":319,"oldContent":"            ),"},{"type":"INSERT","lineNumber":321,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            ),"},{"type":"DELETE","lineNumber":325,"oldContent":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":326,"oldContent":"    final health = _healthSummary!;"},{"type":"DELETE","lineNumber":328,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":329,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":331,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":332,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":333,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":335,"oldContent":"          children: ["},{"type":"INSERT","lineNumber":327,"content":"            ),"},{"type":"DELETE","lineNumber":337,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":341,"oldContent":"                Text("},{"type":"DELETE","lineNumber":344,"oldContent":"                ),"},{"type":"INSERT","lineNumber":334,"content":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":335,"content":"    final health = _healthSummary!;"},{"type":"INSERT","lineNumber":336,"content":"    return Card("},{"type":"INSERT","lineNumber":337,"content":"      child: Padding("},{"type":"INSERT","lineNumber":338,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":339,"content":"        child: Column("},{"type":"INSERT","lineNumber":340,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":341,"content":"          children: ["},{"type":"DELETE","lineNumber":346,"oldContent":"              ],"},{"type":"DELETE","lineNumber":347,"oldContent":"            ),"},{"type":"INSERT","lineNumber":343,"content":"              children: ["},{"type":"DELETE","lineNumber":349,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":346,"content":"                Text("},{"type":"INSERT","lineNumber":349,"content":"                ),"},{"type":"INSERT","lineNumber":350,"content":"              ],"},{"type":"INSERT","lineNumber":351,"content":"            ),"},{"type":"INSERT","lineNumber":352,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":357,"oldContent":"          ],"},{"type":"DELETE","lineNumber":359,"oldContent":"        ),"},{"type":"DELETE","lineNumber":361,"oldContent":"      ),"},{"type":"DELETE","lineNumber":363,"oldContent":"    );"},{"type":"DELETE","lineNumber":365,"oldContent":"  }"},{"type":"DELETE","lineNumber":367,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":364,"content":"          ],"},{"type":"INSERT","lineNumber":365,"content":"        ),"},{"type":"INSERT","lineNumber":366,"content":"      ),"},{"type":"INSERT","lineNumber":367,"content":"    );"},{"type":"INSERT","lineNumber":368,"content":"  }"},{"type":"INSERT","lineNumber":370,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"DELETE","lineNumber":385,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":387,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":388,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":390,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":392,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":394,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":398,"oldContent":"            ),"},{"type":"INSERT","lineNumber":392,"content":"    return Card("},{"type":"INSERT","lineNumber":393,"content":"      child: Padding("},{"type":"INSERT","lineNumber":394,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":395,"content":"        child: Column("},{"type":"INSERT","lineNumber":396,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":397,"content":"          children: ["},{"type":"DELETE","lineNumber":400,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"INSERT","lineNumber":401,"content":"            ),"},{"type":"INSERT","lineNumber":402,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":406,"oldContent":"          ],"},{"type":"INSERT","lineNumber":405,"content":"            else"},{"type":"INSERT","lineNumber":407,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":408,"content":"                child: Text(insight),"},{"type":"INSERT","lineNumber":409,"content":"              )),"},{"type":"INSERT","lineNumber":410,"content":"          ],"},{"type":"DELETE","lineNumber":410,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"DELETE","lineNumber":413,"oldContent":"                child: Text(insight),"},{"type":"DELETE","lineNumber":415,"oldContent":"              )),"},{"type":"INSERT","lineNumber":431,"content":"  }"},{"type":"DELETE","lineNumber":432,"oldContent":""},{"type":"DELETE","lineNumber":490,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":492,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":493,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":495,"oldContent":"        child: Column("},{"type":"INSERT","lineNumber":494,"content":"    return Card("},{"type":"INSERT","lineNumber":495,"content":"      child: Padding("},{"type":"INSERT","lineNumber":496,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":497,"content":"        child: Column("},{"type":"DELETE","lineNumber":506,"oldContent":"                ),"},{"type":"INSERT","lineNumber":510,"content":"                ),"},{"type":"DELETE","lineNumber":512,"oldContent":"              ],"},{"type":"DELETE","lineNumber":513,"oldContent":"            ),"},{"type":"DELETE","lineNumber":515,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":516,"content":"                  ),"},{"type":"INSERT","lineNumber":517,"content":"                ),"},{"type":"INSERT","lineNumber":518,"content":"              ],"},{"type":"INSERT","lineNumber":519,"content":"            ),"},{"type":"INSERT","lineNumber":520,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":521,"content":"            if (overallTrends['averageDailyCompletions'] != null)"},{"type":"INSERT","lineNumber":522,"content":"              Text("},{"type":"INSERT","lineNumber":523,"content":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"INSERT","lineNumber":524,"content":"                style: Theme.of(context).textTheme.bodySmall,"},{"type":"DELETE","lineNumber":521,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":524,"oldContent":"                ),"},{"type":"DELETE","lineNumber":527,"oldContent":"            if (overallTrends['averageDailyCompletions'] != null)"},{"type":"DELETE","lineNumber":528,"oldContent":"              Text("},{"type":"INSERT","lineNumber":531,"content":""},{"type":"INSERT","lineNumber":532,"content":"  Widget _buildWeeklyPatternsCard(Map<String, dynamic> weeklyPatterns) {"},{"type":"DELETE","lineNumber":531,"oldContent":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"DELETE","lineNumber":534,"oldContent":"                style: Theme.of(context).textTheme.bodySmall,"},{"type":"DELETE","lineNumber":536,"oldContent":""},{"type":"DELETE","lineNumber":538,"oldContent":"  Widget _buildWeeklyPatternsCard(Map<String, dynamic> weeklyPatterns) {"},{"type":"MODIFY","lineNumber":546,"content":"              children: [","oldContent":"              children: ["},{"type":"MODIFY","lineNumber":555,"content":"                ),","oldContent":"                ),"},{"type":"INSERT","lineNumber":561,"content":"                      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),"},{"type":"INSERT","lineNumber":562,"content":"                    ),"},{"type":"INSERT","lineNumber":563,"content":"                  ],"},{"type":"INSERT","lineNumber":564,"content":"                ),"},{"type":"DELETE","lineNumber":563,"oldContent":"                      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),"},{"type":"DELETE","lineNumber":566,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":569,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":572,"oldContent":"                ),"},{"type":"DELETE","lineNumber":589,"oldContent":"                ),"},{"type":"INSERT","lineNumber":590,"content":"                  color: _getTrendColor(trendData['direction']),"},{"type":"INSERT","lineNumber":591,"content":"                ),"},{"type":"DELETE","lineNumber":593,"oldContent":"                  color: _getTrendColor(trendData['direction']),"},{"type":"INSERT","lineNumber":610,"content":"        child: Column("},{"type":"INSERT","lineNumber":611,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":612,"content":"          children: ["},{"type":"INSERT","lineNumber":613,"content":"            Text("},{"type":"INSERT","lineNumber":614,"content":"              'Insights & Recommendations',"},{"type":"INSERT","lineNumber":615,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":616,"content":"            ),"},{"type":"INSERT","lineNumber":617,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":618,"content":"            if (insights.isNotEmpty) ...["},{"type":"INSERT","lineNumber":619,"content":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"DELETE","lineNumber":612,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":615,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":617,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":620,"oldContent":"            Text("},{"type":"DELETE","lineNumber":623,"oldContent":"              'Insights & Recommendations',"},{"type":"DELETE","lineNumber":625,"oldContent":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":628,"oldContent":"            ),"},{"type":"DELETE","lineNumber":631,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":633,"oldContent":"            if (insights.isNotEmpty) ...["},{"type":"DELETE","lineNumber":636,"oldContent":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"DELETE","lineNumber":715,"oldContent":"                  "},{"type":"INSERT","lineNumber":717,"content":""},{"type":"MODIFY","lineNumber":722,"content":"","oldContent":"                      "},{"type":"INSERT","lineNumber":752,"content":"                            ],"},{"type":"DELETE","lineNumber":754,"oldContent":"                            ],"},{"type":"DELETE","lineNumber":756,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":758,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":761,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"DELETE","lineNumber":763,"oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":766,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":768,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":771,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":773,"oldContent":"                    )),"},{"type":"DELETE","lineNumber":776,"oldContent":"                    const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":778,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":781,"oldContent":"                );"},{"type":"DELETE","lineNumber":783,"oldContent":"              }"},{"type":"DELETE","lineNumber":786,"oldContent":"              return const SizedBox.shrink();"},{"type":"DELETE","lineNumber":788,"oldContent":"            },"},{"type":"DELETE","lineNumber":791,"oldContent":"          ),"},{"type":"DELETE","lineNumber":794,"oldContent":""},{"type":"DELETE","lineNumber":796,"oldContent":"          // Main Recommendations"},{"type":"DELETE","lineNumber":798,"oldContent":"          Text("},{"type":"DELETE","lineNumber":801,"oldContent":"            'Personalized Recommendations',"},{"type":"DELETE","lineNumber":803,"oldContent":"            style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":806,"oldContent":"          ),"},{"type":"DELETE","lineNumber":808,"oldContent":"          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":811,"oldContent":"          ..._recommendations!.map((recommendation) => Card("},{"type":"DELETE","lineNumber":813,"oldContent":"            child: ExpansionTile("},{"type":"DELETE","lineNumber":816,"oldContent":"              leading: CircleAvatar("},{"type":"DELETE","lineNumber":818,"oldContent":"                backgroundColor: _getCategoryColor(recommendation.category),"},{"type":"DELETE","lineNumber":821,"oldContent":"                child: Icon("},{"type":"DELETE","lineNumber":823,"oldContent":"                  _getCategoryIcon(recommendation.category),"},{"type":"DELETE","lineNumber":826,"oldContent":"                  color: Colors.white,"},{"type":"DELETE","lineNumber":828,"oldContent":"                ),"},{"type":"DELETE","lineNumber":831,"oldContent":"              ),"},{"type":"DELETE","lineNumber":833,"oldContent":"              title: Text(recommendation.title),"},{"type":"DELETE","lineNumber":836,"oldContent":"              subtitle: Text(recommendation.category),"},{"type":"DELETE","lineNumber":838,"oldContent":"              trailing: Column("},{"type":"DELETE","lineNumber":841,"oldContent":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":843,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":846,"oldContent":"                  Icon(_getDifficultyIcon(recommendation.difficulty)),"},{"type":"DELETE","lineNumber":848,"oldContent":"                  Text('Priority: ${recommendation.priority}'),"},{"type":"DELETE","lineNumber":851,"oldContent":"                ],"},{"type":"DELETE","lineNumber":853,"oldContent":"              ),"},{"type":"DELETE","lineNumber":854,"oldContent":"              "},{"type":"INSERT","lineNumber":814,"content":""},{"type":"DELETE","lineNumber":856,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":858,"oldContent":"                Padding("},{"type":"DELETE","lineNumber":861,"oldContent":"                  padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":863,"oldContent":"                  child: Column("},{"type":"DELETE","lineNumber":866,"oldContent":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":868,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":871,"oldContent":"                      Text("},{"type":"DELETE","lineNumber":873,"oldContent":"                        recommendation.description,"},{"type":"DELETE","lineNumber":876,"oldContent":"                        style: const TextStyle(fontSize: 16),"},{"type":"DELETE","lineNumber":878,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":831,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":832,"content":"                          children: ["},{"type":"INSERT","lineNumber":833,"content":"                            Text(suggestion.suggestedTime),"},{"type":"INSERT","lineNumber":834,"content":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":835,"content":"                          ],"},{"type":"INSERT","lineNumber":836,"content":"                        ),"},{"type":"INSERT","lineNumber":837,"content":"                      ),"},{"type":"INSERT","lineNumber":838,"content":"                    )),"},{"type":"INSERT","lineNumber":839,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":840,"content":"                  ],"},{"type":"INSERT","lineNumber":841,"content":"                );"},{"type":"INSERT","lineNumber":842,"content":"              }"},{"type":"INSERT","lineNumber":843,"content":"              return const SizedBox.shrink();"},{"type":"INSERT","lineNumber":844,"content":"            },"},{"type":"INSERT","lineNumber":845,"content":"          ),"},{"type":"INSERT","lineNumber":846,"content":""},{"type":"INSERT","lineNumber":847,"content":"          // Main Recommendations"},{"type":"INSERT","lineNumber":848,"content":"          Text("},{"type":"INSERT","lineNumber":849,"content":"            'Personalized Recommendations',"},{"type":"INSERT","lineNumber":850,"content":"            style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":851,"content":"          ),"},{"type":"INSERT","lineNumber":852,"content":"          const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":853,"content":"          ..._recommendations!.map((recommendation) => Card("},{"type":"INSERT","lineNumber":854,"content":"            child: ExpansionTile("},{"type":"INSERT","lineNumber":855,"content":"              leading: CircleAvatar("},{"type":"INSERT","lineNumber":856,"content":"                backgroundColor: _getCategoryColor(recommendation.category),"},{"type":"INSERT","lineNumber":857,"content":"                child: Icon("},{"type":"INSERT","lineNumber":858,"content":"                  _getCategoryIcon(recommendation.category),"},{"type":"INSERT","lineNumber":859,"content":"                  color: Colors.white,"},{"type":"INSERT","lineNumber":860,"content":"                ),"},{"type":"INSERT","lineNumber":861,"content":"              ),"},{"type":"INSERT","lineNumber":862,"content":"              title: Text(recommendation.title),"},{"type":"INSERT","lineNumber":863,"content":"              subtitle: Text(recommendation.category),"},{"type":"INSERT","lineNumber":864,"content":"              trailing: Column("},{"type":"INSERT","lineNumber":865,"content":"                mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":866,"content":"                children: ["},{"type":"INSERT","lineNumber":867,"content":"                  Icon(_getDifficultyIcon(recommendation.difficulty)),"},{"type":"INSERT","lineNumber":868,"content":"                  Text('Priority: ${recommendation.priority}'),"},{"type":"INSERT","lineNumber":869,"content":"                ],"},{"type":"INSERT","lineNumber":870,"content":"              ),"},{"type":"INSERT","lineNumber":871,"content":"              children: ["},{"type":"INSERT","lineNumber":872,"content":"                Padding("},{"type":"INSERT","lineNumber":873,"content":"                  padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":874,"content":"                  child: Column("},{"type":"INSERT","lineNumber":875,"content":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":876,"content":"                    children: ["},{"type":"INSERT","lineNumber":877,"content":"                      Text("},{"type":"INSERT","lineNumber":878,"content":"                        recommendation.description,"},{"type":"INSERT","lineNumber":879,"content":"                        style: const TextStyle(fontSize: 16),"},{"type":"INSERT","lineNumber":880,"content":"                      ),"}]},{"timestamp":1754439733580,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":"import '../../services/calendar_service.dart';"},{"type":"MODIFY","lineNumber":151,"content":"    return Scaffold(","oldContent":"    return Scaffold("},{"type":"INSERT","lineNumber":162,"content":"        ),"},{"type":"DELETE","lineNumber":164,"oldContent":"      ),"},{"type":"MODIFY","lineNumber":177,"content":"","oldContent":""},{"type":"INSERT","lineNumber":181,"content":"        final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"INSERT","lineNumber":188,"content":"                return const Center("},{"type":"DELETE","lineNumber":190,"oldContent":"                    children: ["},{"type":"MODIFY","lineNumber":191,"content":"                    children: [","oldContent":"                    children: ["},{"type":"DELETE","lineNumber":203,"oldContent":"                    ],"},{"type":"INSERT","lineNumber":202,"content":"                        textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":259,"content":"              ],"},{"type":"DELETE","lineNumber":261,"oldContent":"            ),"},{"type":"INSERT","lineNumber":277,"content":"          ],"},{"type":"INSERT","lineNumber":278,"content":"        ),"},{"type":"DELETE","lineNumber":280,"oldContent":"          ],"},{"type":"DELETE","lineNumber":283,"oldContent":"        ),"},{"type":"INSERT","lineNumber":289,"content":"        : 0.0;"},{"type":"DELETE","lineNumber":291,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"              ),"},{"type":"DELETE","lineNumber":320,"oldContent":"            ),"},{"type":"DELETE","lineNumber":323,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"DELETE","lineNumber":327,"oldContent":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":326,"content":"            ),"},{"type":"INSERT","lineNumber":327,"content":"          ],"},{"type":"INSERT","lineNumber":328,"content":"        ),"},{"type":"INSERT","lineNumber":329,"content":"      ),"},{"type":"INSERT","lineNumber":330,"content":"    );"},{"type":"INSERT","lineNumber":331,"content":"  }"},{"type":"INSERT","lineNumber":332,"content":""},{"type":"INSERT","lineNumber":333,"content":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":331,"oldContent":"          ],"},{"type":"DELETE","lineNumber":334,"oldContent":"        ),"},{"type":"DELETE","lineNumber":336,"oldContent":"      ),"},{"type":"DELETE","lineNumber":338,"oldContent":"    );"},{"type":"DELETE","lineNumber":340,"oldContent":"  }"},{"type":"DELETE","lineNumber":341,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":342,"oldContent":""},{"type":"DELETE","lineNumber":344,"oldContent":"                Text("},{"type":"INSERT","lineNumber":342,"content":"              children: ["},{"type":"INSERT","lineNumber":344,"content":"                const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":345,"content":"                Text("},{"type":"INSERT","lineNumber":346,"content":"                  'Health Summary',"},{"type":"INSERT","lineNumber":347,"content":"                  style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":348,"oldContent":"                const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":350,"oldContent":"                  'Health Summary',"},{"type":"DELETE","lineNumber":352,"oldContent":"                  style: Theme.of(context).textTheme.titleMedium,"},{"type":"MODIFY","lineNumber":360,"content":"                  _buildStatItem('Water', '${health['waterIntake'].toStringAsFixed(1)}L'),","oldContent":"          ],"},{"type":"INSERT","lineNumber":361,"content":"              ],"},{"type":"INSERT","lineNumber":362,"content":"            ),"},{"type":"INSERT","lineNumber":363,"content":"          ],"},{"type":"DELETE","lineNumber":364,"oldContent":"                  _buildStatItem('Water', '${health['waterIntake'].toStringAsFixed(1)}L'),"},{"type":"DELETE","lineNumber":367,"oldContent":"              ],"},{"type":"DELETE","lineNumber":368,"oldContent":"            ),"},{"type":"DELETE","lineNumber":369,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":371,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":387,"content":"    if (bestHabit != null && bestHabit.currentStreak > 7) {"},{"type":"INSERT","lineNumber":388,"content":"      insights.add('🔥 ${bestHabit.name} is on fire with a ${bestHabit.currentStreak}-day streak!');"},{"type":"INSERT","lineNumber":389,"content":"    }"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"DELETE","lineNumber":390,"oldContent":"    if (bestHabit != null && bestHabit.currentStreak > 7) {"},{"type":"DELETE","lineNumber":393,"oldContent":"      insights.add('🔥 ${bestHabit.name} is on fire with a ${bestHabit.currentStreak}-day streak!');"},{"type":"DELETE","lineNumber":395,"oldContent":"    }"},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":399,"oldContent":"            ),"},{"type":"DELETE","lineNumber":401,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":400,"content":"            ),"},{"type":"INSERT","lineNumber":401,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":404,"oldContent":"            else"},{"type":"DELETE","lineNumber":406,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"DELETE","lineNumber":409,"oldContent":"        ),"},{"type":"MODIFY","lineNumber":410,"content":"        ),","oldContent":"      ),"},{"type":"INSERT","lineNumber":411,"content":"      ),"},{"type":"MODIFY","lineNumber":491,"content":"","oldContent":"    return Card("},{"type":"INSERT","lineNumber":492,"content":"  Widget _buildOverallTrendsCard(Map<String, dynamic> overallTrends) {"},{"type":"INSERT","lineNumber":493,"content":"    return Card("},{"type":"DELETE","lineNumber":495,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"  Widget _buildOverallTrendsCard(Map<String, dynamic> overallTrends) {"},{"type":"MODIFY","lineNumber":509,"content":"                ),","oldContent":"                ),"},{"type":"DELETE","lineNumber":513,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":515,"oldContent":"                ),"},{"type":"DELETE","lineNumber":517,"oldContent":"              ],"},{"type":"INSERT","lineNumber":515,"content":"                  ),"},{"type":"INSERT","lineNumber":516,"content":"                ),"},{"type":"INSERT","lineNumber":517,"content":"              ],"},{"type":"DELETE","lineNumber":520,"oldContent":"              ),"},{"type":"DELETE","lineNumber":522,"oldContent":"          ],"},{"type":"DELETE","lineNumber":525,"oldContent":"        ),"},{"type":"DELETE","lineNumber":527,"oldContent":"      ),"},{"type":"INSERT","lineNumber":524,"content":"              ),"},{"type":"INSERT","lineNumber":525,"content":"          ],"},{"type":"INSERT","lineNumber":526,"content":"        ),"},{"type":"INSERT","lineNumber":527,"content":"      ),"},{"type":"DELETE","lineNumber":531,"oldContent":"    return Card("},{"type":"MODIFY","lineNumber":532,"content":"    return Card(","oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":533,"content":"      child: Padding("},{"type":"INSERT","lineNumber":544,"content":"              mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"DELETE","lineNumber":546,"oldContent":"              children: ["},{"type":"INSERT","lineNumber":553,"content":"                  ],"},{"type":"DELETE","lineNumber":555,"oldContent":"                ),"},{"type":"DELETE","lineNumber":562,"oldContent":"              ],"},{"type":"MODIFY","lineNumber":564,"content":"              ],","oldContent":"            ),"},{"type":"INSERT","lineNumber":565,"content":"            ),"},{"type":"MODIFY","lineNumber":589,"content":"                  color: _getTrendColor(trendData['direction']),","oldContent":"                  color: _getTrendColor(trendData['direction']),"},{"type":"DELETE","lineNumber":611,"oldContent":"              ...insights.map((insight) => Padding("},{"type":"DELETE","lineNumber":613,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"DELETE","lineNumber":616,"oldContent":"                child: Text('• $insight'),"},{"type":"DELETE","lineNumber":618,"oldContent":"              )),"},{"type":"DELETE","lineNumber":621,"oldContent":"              const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":624,"oldContent":"            ],"},{"type":"INSERT","lineNumber":619,"content":"              ...insights.map((insight) => Padding("},{"type":"INSERT","lineNumber":620,"content":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"INSERT","lineNumber":621,"content":"                child: Text('• $insight'),"},{"type":"INSERT","lineNumber":622,"content":"              )),"},{"type":"INSERT","lineNumber":623,"content":"              const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":624,"content":"            ],"},{"type":"MODIFY","lineNumber":716,"content":"","oldContent":""},{"type":"DELETE","lineNumber":721,"oldContent":"                      "},{"type":"INSERT","lineNumber":720,"content":"                      final achievementProgress = progress[achievement.id] ?? 0.0;"},{"type":"DELETE","lineNumber":790,"oldContent":""},{"type":"INSERT","lineNumber":800,"content":"    return SingleChildScrollView("},{"type":"INSERT","lineNumber":801,"content":"      padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":802,"content":"      child: Column("},{"type":"INSERT","lineNumber":803,"content":"        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":804,"content":"        children: ["},{"type":"INSERT","lineNumber":805,"content":"          // Contextual Suggestions"},{"type":"INSERT","lineNumber":806,"content":"          FutureBuilder<List<HabitRecommendation>>("},{"type":"INSERT","lineNumber":807,"content":"            future: Future.value(SmartRecommendationsService.getContextualSuggestions("},{"type":"INSERT","lineNumber":808,"content":"              currentTime: DateTime.now(),"},{"type":"INSERT","lineNumber":809,"content":"              existingHabits: [],"},{"type":"INSERT","lineNumber":810,"content":"            )),"},{"type":"INSERT","lineNumber":811,"content":"            builder: (context, contextSnapshot) {"},{"type":"INSERT","lineNumber":812,"content":"              final contextualSuggestions = contextSnapshot.data ?? [];"},{"type":"INSERT","lineNumber":813,"content":""},{"type":"INSERT","lineNumber":814,"content":"              if (contextualSuggestions.isNotEmpty) {"},{"type":"INSERT","lineNumber":815,"content":"                return Column("},{"type":"INSERT","lineNumber":816,"content":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":817,"content":"                  children: ["},{"type":"INSERT","lineNumber":818,"content":"                    Text("},{"type":"INSERT","lineNumber":819,"content":"                      'Perfect Time Suggestions',"},{"type":"INSERT","lineNumber":820,"content":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":821,"content":"                    ),"},{"type":"INSERT","lineNumber":822,"content":"                    const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":823,"content":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"INSERT","lineNumber":824,"content":"                      color: Colors.blue[50],"},{"type":"INSERT","lineNumber":825,"content":"                      child: ListTile("},{"type":"INSERT","lineNumber":826,"content":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"INSERT","lineNumber":827,"content":"                        title: Text(suggestion.title),"},{"type":"INSERT","lineNumber":828,"content":"                        subtitle: Text(suggestion.description),"},{"type":"INSERT","lineNumber":829,"content":"                        trailing: Column("},{"type":"DELETE","lineNumber":804,"oldContent":"    return SingleChildScrollView("},{"type":"DELETE","lineNumber":807,"oldContent":"      padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":809,"oldContent":"      child: Column("},{"type":"DELETE","lineNumber":812,"oldContent":"        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":815,"oldContent":"        children: ["},{"type":"DELETE","lineNumber":817,"oldContent":"          // Contextual Suggestions"},{"type":"DELETE","lineNumber":820,"oldContent":"          FutureBuilder<List<HabitRecommendation>>("},{"type":"DELETE","lineNumber":823,"oldContent":"            future: Future.value(SmartRecommendationsService.getContextualSuggestions("},{"type":"DELETE","lineNumber":825,"oldContent":"              currentTime: DateTime.now(),"},{"type":"DELETE","lineNumber":828,"oldContent":"              existingHabits: [],"},{"type":"DELETE","lineNumber":831,"oldContent":"            )),"},{"type":"DELETE","lineNumber":833,"oldContent":"            builder: (context, contextSnapshot) {"},{"type":"DELETE","lineNumber":836,"oldContent":"              final contextualSuggestions = contextSnapshot.data ?? [];"},{"type":"DELETE","lineNumber":840,"oldContent":"              if (contextualSuggestions.isNotEmpty) {"},{"type":"DELETE","lineNumber":843,"oldContent":"                return Column("},{"type":"DELETE","lineNumber":846,"oldContent":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":848,"oldContent":"                  children: ["},{"type":"DELETE","lineNumber":851,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":854,"oldContent":"                      'Perfect Time Suggestions',"},{"type":"DELETE","lineNumber":856,"oldContent":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":859,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":862,"oldContent":"                    const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":864,"oldContent":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"DELETE","lineNumber":867,"oldContent":"                      color: Colors.blue[50],"},{"type":"DELETE","lineNumber":870,"oldContent":"                      child: ListTile("},{"type":"DELETE","lineNumber":872,"oldContent":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"DELETE","lineNumber":875,"oldContent":"                        title: Text(suggestion.title),"},{"type":"DELETE","lineNumber":878,"oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"DELETE","lineNumber":880,"oldContent":"                        trailing: Column("}]},{"timestamp":1754439933143,"changes":[{"type":"MODIFY","lineNumber":50,"content":"            'category': h.category,","oldContent":"            'category': h.category.name,"},{"type":"MODIFY","lineNumber":151,"content":"    return Scaffold(","oldContent":"    return Scaffold("},{"type":"MODIFY","lineNumber":162,"content":"        ),","oldContent":"        ),"},{"type":"MODIFY","lineNumber":177,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":181,"content":"        final habitServiceAsync = ref.watch(habitServiceProvider);","oldContent":"        final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"MODIFY","lineNumber":188,"content":"                return const Center(","oldContent":"                return const Center("},{"type":"MODIFY","lineNumber":191,"content":"                    children: [","oldContent":"                    children: ["},{"type":"MODIFY","lineNumber":202,"content":"                        textAlign: TextAlign.center,","oldContent":"                        textAlign: TextAlign.center,"},{"type":"MODIFY","lineNumber":259,"content":"              ],","oldContent":"              ],"},{"type":"MODIFY","lineNumber":277,"content":"          ],","oldContent":"          ],"},{"type":"MODIFY","lineNumber":289,"content":"        : 0.0;","oldContent":"        : 0.0;"},{"type":"DELETE","lineNumber":318,"oldContent":"              ),"},{"type":"MODIFY","lineNumber":320,"content":"              ),","oldContent":"            Text("},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"DELETE","lineNumber":324,"oldContent":"            ),"},{"type":"INSERT","lineNumber":325,"content":"              textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":326,"content":"            ),"},{"type":"DELETE","lineNumber":328,"oldContent":"              textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":330,"oldContent":"    final health = _healthSummary!;"},{"type":"DELETE","lineNumber":332,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":335,"oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":334,"content":"    final health = _healthSummary!;"},{"type":"INSERT","lineNumber":335,"content":"    return Card("},{"type":"INSERT","lineNumber":336,"content":"      child: Padding("},{"type":"MODIFY","lineNumber":342,"content":"              children: [","oldContent":"              children: ["},{"type":"INSERT","lineNumber":343,"content":"                const Icon(Icons.favorite, color: Colors.red),"},{"type":"DELETE","lineNumber":345,"oldContent":"                const Icon(Icons.favorite, color: Colors.red),"},{"type":"MODIFY","lineNumber":348,"content":"                ),","oldContent":"                ),"},{"type":"INSERT","lineNumber":359,"content":"                if (health['waterIntake'] != null)"},{"type":"DELETE","lineNumber":361,"oldContent":"                if (health['waterIntake'] != null)"},{"type":"MODIFY","lineNumber":364,"content":"        ),","oldContent":"        ),"},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"MODIFY","lineNumber":387,"content":"    if (bestHabit != null && bestHabit.currentStreak > 7) {","oldContent":"    if (bestHabit != null && bestHabit.currentStreak > 7) {"},{"type":"DELETE","lineNumber":389,"oldContent":"    return Card("},{"type":"MODIFY","lineNumber":391,"content":"    return Card(","oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":392,"content":"      child: Padding("},{"type":"DELETE","lineNumber":398,"oldContent":"            ),"},{"type":"MODIFY","lineNumber":400,"content":"            ),","oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":401,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":408,"content":"              )),"},{"type":"INSERT","lineNumber":409,"content":"          ],"},{"type":"DELETE","lineNumber":410,"oldContent":"      ),"},{"type":"DELETE","lineNumber":411,"oldContent":"          ],"},{"type":"INSERT","lineNumber":490,"content":"  }"},{"type":"DELETE","lineNumber":492,"oldContent":"  }"},{"type":"MODIFY","lineNumber":509,"content":"                ),","oldContent":"                ),"},{"type":"INSERT","lineNumber":513,"content":"                    overallTrends['message'] ?? 'Analyzing trends...',"},{"type":"INSERT","lineNumber":514,"content":"                    style: const TextStyle(fontSize: 16),"},{"type":"DELETE","lineNumber":515,"oldContent":"                    overallTrends['message'] ?? 'Analyzing trends...',"},{"type":"DELETE","lineNumber":517,"oldContent":"                    style: const TextStyle(fontSize: 16),"},{"type":"DELETE","lineNumber":521,"oldContent":"              ),"},{"type":"INSERT","lineNumber":522,"content":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"INSERT","lineNumber":523,"content":"                style: Theme.of(context).textTheme.bodySmall,"},{"type":"INSERT","lineNumber":524,"content":"              ),"},{"type":"DELETE","lineNumber":525,"oldContent":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"DELETE","lineNumber":527,"oldContent":"                style: Theme.of(context).textTheme.bodySmall,"},{"type":"DELETE","lineNumber":530,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":531,"oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":532,"content":"    return Card("},{"type":"INSERT","lineNumber":533,"content":"      child: Padding("},{"type":"MODIFY","lineNumber":544,"content":"              mainAxisAlignment: MainAxisAlignment.spaceBetween,","oldContent":"              mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"MODIFY","lineNumber":553,"content":"                  ],","oldContent":"                  ],"},{"type":"DELETE","lineNumber":562,"oldContent":"              ],"},{"type":"MODIFY","lineNumber":564,"content":"              ],","oldContent":"            ),"},{"type":"INSERT","lineNumber":565,"content":"            ),"},{"type":"MODIFY","lineNumber":589,"content":"                  color: _getTrendColor(trendData['direction']),","oldContent":"                  color: _getTrendColor(trendData['direction']),"},{"type":"DELETE","lineNumber":614,"oldContent":"              ...insights.map((insight) => Padding("},{"type":"MODIFY","lineNumber":616,"content":"            const SizedBox(height: 16),","oldContent":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"INSERT","lineNumber":617,"content":"            if (insights.isNotEmpty) ...["},{"type":"INSERT","lineNumber":618,"content":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"INSERT","lineNumber":619,"content":"              ...insights.map((insight) => Padding("},{"type":"INSERT","lineNumber":620,"content":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"DELETE","lineNumber":620,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":622,"oldContent":"            if (insights.isNotEmpty) ...["},{"type":"DELETE","lineNumber":624,"oldContent":"              const Text('💡 Insights:', style: TextStyle(fontWeight: FontWeight.bold)),"},{"type":"MODIFY","lineNumber":716,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":720,"content":"                      final achievementProgress = progress[achievement.id] ?? 0.0;","oldContent":"                      final achievementProgress = progress[achievement.id] ?? 0.0;"},{"type":"DELETE","lineNumber":798,"oldContent":"    return SingleChildScrollView("},{"type":"MODIFY","lineNumber":800,"content":"    return SingleChildScrollView(","oldContent":"      padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":801,"content":"      padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":803,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":805,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":808,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"DELETE","lineNumber":810,"oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":813,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":816,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":818,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":821,"oldContent":"                    )),"},{"type":"DELETE","lineNumber":823,"oldContent":"                    const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":826,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":829,"oldContent":"                );"},{"type":"DELETE","lineNumber":831,"oldContent":"              }"},{"type":"DELETE","lineNumber":834,"oldContent":"              return const SizedBox.shrink();"},{"type":"DELETE","lineNumber":836,"oldContent":"            },"},{"type":"DELETE","lineNumber":839,"oldContent":"          ),"},{"type":"DELETE","lineNumber":842,"oldContent":""},{"type":"DELETE","lineNumber":844,"oldContent":"          // Main Recommendations"},{"type":"INSERT","lineNumber":830,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":831,"content":"                          children: ["},{"type":"INSERT","lineNumber":832,"content":"                            Text(suggestion.suggestedTime),"},{"type":"INSERT","lineNumber":833,"content":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":834,"content":"                          ],"},{"type":"INSERT","lineNumber":835,"content":"                        ),"},{"type":"INSERT","lineNumber":836,"content":"                      ),"},{"type":"INSERT","lineNumber":837,"content":"                    )),"},{"type":"INSERT","lineNumber":838,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":839,"content":"                  ],"},{"type":"INSERT","lineNumber":840,"content":"                );"},{"type":"INSERT","lineNumber":841,"content":"              }"},{"type":"INSERT","lineNumber":842,"content":"              return const SizedBox.shrink();"},{"type":"INSERT","lineNumber":843,"content":"            },"},{"type":"INSERT","lineNumber":844,"content":"          ),"},{"type":"INSERT","lineNumber":845,"content":""},{"type":"INSERT","lineNumber":846,"content":"          // Main Recommendations"}]},{"timestamp":1754439959425,"changes":[{"type":"INSERT","lineNumber":150,"content":"  Widget build(BuildContext context) {"},{"type":"DELETE","lineNumber":151,"oldContent":"    return Scaffold("},{"type":"INSERT","lineNumber":161,"content":"          ],"},{"type":"DELETE","lineNumber":162,"oldContent":"        ),"},{"type":"INSERT","lineNumber":176,"content":"  }"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"INSERT","lineNumber":180,"content":"      builder: (context, ref, child) {"},{"type":"DELETE","lineNumber":181,"oldContent":"        final habitServiceAsync = ref.watch(habitServiceProvider);"},{"type":"INSERT","lineNumber":187,"content":"              if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"DELETE","lineNumber":188,"oldContent":"                return const Center("},{"type":"INSERT","lineNumber":190,"content":"                    mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":191,"oldContent":"                    children: ["},{"type":"INSERT","lineNumber":201,"content":"                        style: TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":202,"oldContent":"                        textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":258,"content":"                ),"},{"type":"DELETE","lineNumber":259,"oldContent":"              ],"},{"type":"INSERT","lineNumber":276,"content":"            ),"},{"type":"DELETE","lineNumber":277,"oldContent":"          ],"},{"type":"INSERT","lineNumber":288,"content":"        ? habits.fold<int>(0, (sum, h) => sum + h.currentStreak) / habits.length"},{"type":"DELETE","lineNumber":289,"oldContent":"        : 0.0;"},{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"MODIFY","lineNumber":325,"content":"              textAlign: TextAlign.center,","oldContent":"              textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":332,"oldContent":"    final health = _healthSummary!;"},{"type":"INSERT","lineNumber":333,"content":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":334,"content":"    final health = _healthSummary!;"},{"type":"DELETE","lineNumber":336,"oldContent":"  Widget _buildHealthCard() {"},{"type":"INSERT","lineNumber":341,"content":"            Row("},{"type":"DELETE","lineNumber":342,"oldContent":"              children: ["},{"type":"INSERT","lineNumber":347,"content":"                  style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":348,"oldContent":"                ),"},{"type":"INSERT","lineNumber":363,"content":"          ],"},{"type":"DELETE","lineNumber":364,"oldContent":"        ),"},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":386,"content":""},{"type":"DELETE","lineNumber":387,"oldContent":"    if (bestHabit != null && bestHabit.currentStreak > 7) {"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"INSERT","lineNumber":399,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":401,"oldContent":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"MODIFY","lineNumber":410,"content":"        ),","oldContent":"        ),"},{"type":"INSERT","lineNumber":508,"content":"                  color: _getTrendColor(overallTrends['direction']),"},{"type":"DELETE","lineNumber":509,"oldContent":"                ),"},{"type":"MODIFY","lineNumber":515,"content":"                  ),","oldContent":"                  ),"},{"type":"MODIFY","lineNumber":522,"content":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',","oldContent":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"MODIFY","lineNumber":525,"content":"          ],","oldContent":"          ],"},{"type":"DELETE","lineNumber":530,"oldContent":"    return Card("},{"type":"MODIFY","lineNumber":532,"content":"    return Card(","oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":533,"content":"      child: Padding("},{"type":"INSERT","lineNumber":543,"content":"            Row("},{"type":"DELETE","lineNumber":544,"oldContent":"              mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"INSERT","lineNumber":552,"content":"                    ),"},{"type":"DELETE","lineNumber":553,"oldContent":"                  ],"},{"type":"MODIFY","lineNumber":562,"content":"                  ],","oldContent":"            ),"},{"type":"INSERT","lineNumber":563,"content":"                ),"},{"type":"DELETE","lineNumber":565,"oldContent":"                ),"},{"type":"INSERT","lineNumber":588,"content":"                  _getTrendIcon(trendData['direction']),"},{"type":"DELETE","lineNumber":589,"oldContent":"                  color: _getTrendColor(trendData['direction']),"},{"type":"INSERT","lineNumber":615,"content":"            ),"},{"type":"DELETE","lineNumber":617,"oldContent":"            ),"},{"type":"DELETE","lineNumber":619,"oldContent":"                child: Text('• $insight'),"},{"type":"MODIFY","lineNumber":621,"content":"                child: Text('• $insight'),","oldContent":"              )),"},{"type":"INSERT","lineNumber":622,"content":"              )),"},{"type":"INSERT","lineNumber":715,"content":"                  final progress = progressSnapshot.data ?? {};"},{"type":"DELETE","lineNumber":716,"oldContent":""},{"type":"INSERT","lineNumber":719,"content":"                      final isUnlocked = unlockedAchievements.any((a) => a.id == achievement.id);"},{"type":"DELETE","lineNumber":720,"oldContent":"                      final achievementProgress = progress[achievement.id] ?? 0.0;"},{"type":"INSERT","lineNumber":799,"content":""},{"type":"DELETE","lineNumber":801,"oldContent":""},{"type":"DELETE","lineNumber":819,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":820,"content":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":821,"content":"                    ),"},{"type":"INSERT","lineNumber":822,"content":"                    const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":823,"content":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"INSERT","lineNumber":824,"content":"                      color: Colors.blue[50],"},{"type":"INSERT","lineNumber":825,"content":"                      child: ListTile("},{"type":"INSERT","lineNumber":826,"content":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"INSERT","lineNumber":827,"content":"                        title: Text(suggestion.title),"},{"type":"INSERT","lineNumber":828,"content":"                        subtitle: Text(suggestion.description),"},{"type":"INSERT","lineNumber":829,"content":"                        trailing: Column("},{"type":"INSERT","lineNumber":830,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":823,"oldContent":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":825,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":828,"oldContent":"                    const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":831,"oldContent":"                    ...contextualSuggestions.map((suggestion) => Card("},{"type":"DELETE","lineNumber":833,"oldContent":"                      color: Colors.blue[50],"},{"type":"DELETE","lineNumber":836,"oldContent":"                      child: ListTile("},{"type":"DELETE","lineNumber":838,"oldContent":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"DELETE","lineNumber":841,"oldContent":"                        title: Text(suggestion.title),"},{"type":"DELETE","lineNumber":844,"oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"DELETE","lineNumber":846,"oldContent":"                        trailing: Column("},{"type":"INSERT","lineNumber":982,"content":""},{"type":"INSERT","lineNumber":983,"content":"  IconData _getTrendIcon(String direction) {"},{"type":"INSERT","lineNumber":984,"content":"    switch (direction?.toLowerCase()) {"},{"type":"INSERT","lineNumber":985,"content":"      case 'up':"},{"type":"INSERT","lineNumber":986,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":987,"content":"        return Icons.trending_up;"},{"type":"INSERT","lineNumber":988,"content":"      case 'down':"},{"type":"INSERT","lineNumber":989,"content":"      case 'declining':"},{"type":"INSERT","lineNumber":990,"content":"        return Icons.trending_down;"},{"type":"INSERT","lineNumber":991,"content":"      case 'stable':"},{"type":"INSERT","lineNumber":992,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":993,"content":"        return Icons.trending_flat;"},{"type":"INSERT","lineNumber":994,"content":"      default:"},{"type":"INSERT","lineNumber":995,"content":"        return Icons.help;"},{"type":"INSERT","lineNumber":996,"content":"    }"},{"type":"INSERT","lineNumber":997,"content":"  }"},{"type":"INSERT","lineNumber":998,"content":""},{"type":"INSERT","lineNumber":999,"content":"  Color _getTrendColor(String direction) {"},{"type":"INSERT","lineNumber":1000,"content":"    switch (direction?.toLowerCase()) {"},{"type":"INSERT","lineNumber":1001,"content":"      case 'up':"},{"type":"INSERT","lineNumber":1002,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":1003,"content":"        return Colors.green;"},{"type":"INSERT","lineNumber":1004,"content":"      case 'down':"},{"type":"INSERT","lineNumber":1005,"content":"      case 'declining':"},{"type":"INSERT","lineNumber":1006,"content":"        return Colors.red;"},{"type":"INSERT","lineNumber":1007,"content":"      case 'stable':"},{"type":"INSERT","lineNumber":1008,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":1009,"content":"        return Colors.orange;"},{"type":"INSERT","lineNumber":1010,"content":"      default:"},{"type":"INSERT","lineNumber":1011,"content":"        return Colors.grey;"},{"type":"INSERT","lineNumber":1012,"content":"    }"},{"type":"INSERT","lineNumber":1013,"content":"  }"}]},{"timestamp":1754439984470,"changes":[{"type":"MODIFY","lineNumber":56,"content":"              'id': DateTime.now().millisecondsSinceEpoch.toString(),","oldContent":"              'id': c.id,"},{"type":"MODIFY","lineNumber":58,"content":"              'completedAt': c,","oldContent":"              'completedAt': c.completedAt,"},{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"INSERT","lineNumber":324,"content":"              style: Theme.of(context).textTheme.bodySmall,"},{"type":"DELETE","lineNumber":325,"oldContent":"              textAlign: TextAlign.center,"},{"type":"MODIFY","lineNumber":333,"content":"  Widget _buildHealthCard() {","oldContent":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":409,"content":"          ],"},{"type":"DELETE","lineNumber":410,"oldContent":"        ),"},{"type":"INSERT","lineNumber":514,"content":"                    style: const TextStyle(fontSize: 16),"},{"type":"DELETE","lineNumber":515,"oldContent":"                  ),"},{"type":"INSERT","lineNumber":521,"content":"              Text("},{"type":"DELETE","lineNumber":522,"oldContent":"                'Average daily completions: ${overallTrends['averageDailyCompletions'].toStringAsFixed(1)}',"},{"type":"INSERT","lineNumber":524,"content":"              ),"},{"type":"DELETE","lineNumber":525,"oldContent":"          ],"},{"type":"INSERT","lineNumber":531,"content":"  Widget _buildWeeklyPatternsCard(Map<String, dynamic> weeklyPatterns) {"},{"type":"DELETE","lineNumber":533,"oldContent":"  Widget _buildWeeklyPatternsCard(Map<String, dynamic> weeklyPatterns) {"},{"type":"INSERT","lineNumber":620,"content":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"DELETE","lineNumber":622,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 2),"},{"type":"MODIFY","lineNumber":820,"content":"                      style: Theme.of(context).textTheme.titleMedium,","oldContent":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":822,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":824,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"DELETE","lineNumber":827,"oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":830,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":832,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":835,"oldContent":"                      ),"},{"type":"INSERT","lineNumber":831,"content":"                          children: ["},{"type":"INSERT","lineNumber":832,"content":"                            Text(suggestion.suggestedTime),"},{"type":"INSERT","lineNumber":833,"content":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":834,"content":"                          ],"},{"type":"INSERT","lineNumber":835,"content":"                        ),"},{"type":"INSERT","lineNumber":836,"content":"                      ),"},{"type":"DELETE","lineNumber":983,"oldContent":"}"},{"type":"DELETE","lineNumber":985,"oldContent":""},{"type":"DELETE","lineNumber":987,"oldContent":"  }"},{"type":"DELETE","lineNumber":989,"oldContent":"    }"},{"type":"DELETE","lineNumber":991,"oldContent":"        return Colors.grey;"},{"type":"DELETE","lineNumber":993,"oldContent":"      default:"},{"type":"DELETE","lineNumber":995,"oldContent":"        return Colors.orange;"},{"type":"DELETE","lineNumber":997,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":1000,"oldContent":"      case 'stable':"},{"type":"DELETE","lineNumber":1001,"oldContent":"        return Colors.red;"},{"type":"DELETE","lineNumber":1003,"oldContent":"      case 'declining':"},{"type":"DELETE","lineNumber":1005,"oldContent":"      case 'down':"},{"type":"DELETE","lineNumber":1007,"oldContent":"        return Colors.green;"},{"type":"DELETE","lineNumber":1009,"oldContent":"      case 'improving':"},{"type":"DELETE","lineNumber":1011,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":1013,"oldContent":"    switch (direction?.toLowerCase()) {"},{"type":"INSERT","lineNumber":1000,"content":"    switch (direction?.toLowerCase()) {"},{"type":"INSERT","lineNumber":1001,"content":"      case 'up':"},{"type":"INSERT","lineNumber":1002,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":1003,"content":"        return Colors.green;"},{"type":"INSERT","lineNumber":1004,"content":"      case 'down':"},{"type":"INSERT","lineNumber":1005,"content":"      case 'declining':"},{"type":"INSERT","lineNumber":1006,"content":"        return Colors.red;"},{"type":"INSERT","lineNumber":1007,"content":"      case 'stable':"},{"type":"INSERT","lineNumber":1008,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":1009,"content":"        return Colors.orange;"},{"type":"INSERT","lineNumber":1010,"content":"      default:"},{"type":"INSERT","lineNumber":1011,"content":"        return Colors.grey;"},{"type":"INSERT","lineNumber":1012,"content":"    }"},{"type":"INSERT","lineNumber":1013,"content":"  }"},{"type":"INSERT","lineNumber":1014,"content":"}"},{"type":"INSERT","lineNumber":1015,"content":""}]},{"timestamp":1754440006812,"changes":[{"type":"MODIFY","lineNumber":64,"content":"                'id': DateTime.now().millisecondsSinceEpoch.toString(),","oldContent":"                'id': c.id,"},{"type":"MODIFY","lineNumber":66,"content":"                'completedAt': c,","oldContent":"                'completedAt': c.completedAt,"},{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"INSERT","lineNumber":332,"content":""},{"type":"DELETE","lineNumber":333,"oldContent":"  Widget _buildHealthCard() {"},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":819,"content":"                      'Perfect Time Suggestions',"},{"type":"DELETE","lineNumber":820,"oldContent":"                      style: Theme.of(context).textTheme.titleMedium,"},{"type":"DELETE","lineNumber":827,"oldContent":"                          children: ["},{"type":"INSERT","lineNumber":828,"content":"                        subtitle: Text(suggestion.description),"},{"type":"INSERT","lineNumber":829,"content":"                        trailing: Column("},{"type":"INSERT","lineNumber":830,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":831,"content":"                          children: ["},{"type":"DELETE","lineNumber":831,"oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"DELETE","lineNumber":833,"oldContent":"                        trailing: Column("},{"type":"DELETE","lineNumber":836,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":992,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":993,"content":"        return Icons.trending_flat;"},{"type":"INSERT","lineNumber":994,"content":"      default:"},{"type":"INSERT","lineNumber":995,"content":"        return Icons.help;"},{"type":"INSERT","lineNumber":996,"content":"    }"},{"type":"INSERT","lineNumber":997,"content":"  }"},{"type":"INSERT","lineNumber":998,"content":""},{"type":"INSERT","lineNumber":999,"content":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":995,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":998,"oldContent":"        return Icons.trending_flat;"},{"type":"DELETE","lineNumber":1001,"oldContent":"      default:"},{"type":"DELETE","lineNumber":1004,"oldContent":"        return Icons.help;"},{"type":"DELETE","lineNumber":1007,"oldContent":"    }"},{"type":"DELETE","lineNumber":1011,"oldContent":"  }"},{"type":"DELETE","lineNumber":1014,"oldContent":""},{"type":"DELETE","lineNumber":1015,"oldContent":"  Color _getTrendColor(String direction) {"}]},{"timestamp":1754440759135,"changes":[{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"MODIFY","lineNumber":828,"content":"                        subtitle: Text(suggestion.description),","oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"DELETE","lineNumber":830,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"MODIFY","lineNumber":832,"content":"                            Text(suggestion.suggestedTime),","oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":833,"content":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"DELETE","lineNumber":993,"oldContent":"    switch (direction?.toLowerCase()) {"},{"type":"DELETE","lineNumber":995,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":997,"oldContent":"      case 'improving':"},{"type":"DELETE","lineNumber":1000,"oldContent":"        return Colors.green;"},{"type":"DELETE","lineNumber":1002,"oldContent":"      case 'down':"},{"type":"INSERT","lineNumber":1000,"content":"    switch (direction?.toLowerCase()) {"},{"type":"INSERT","lineNumber":1001,"content":"      case 'up':"},{"type":"INSERT","lineNumber":1002,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":1003,"content":"        return Colors.green;"},{"type":"INSERT","lineNumber":1004,"content":"      case 'down':"}]},{"timestamp":1754442528064,"changes":[{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":320,"content":"              ),"},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":404,"content":"            else"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"MODIFY","lineNumber":824,"content":"                      color: Theme.of(context).colorScheme.primaryContainer,","oldContent":"                      color: Colors.blue[50],"},{"type":"DELETE","lineNumber":826,"oldContent":"                        leading: const Icon(Icons.access_time, color: Colors.blue),"},{"type":"DELETE","lineNumber":827,"oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"DELETE","lineNumber":828,"oldContent":"                        subtitle: Text(suggestion.description),"},{"type":"INSERT","lineNumber":826,"content":"                        leading: Icon("},{"type":"INSERT","lineNumber":827,"content":"                          Icons.access_time, "},{"type":"INSERT","lineNumber":828,"content":"                          color: Theme.of(context).colorScheme.primary,"},{"type":"INSERT","lineNumber":829,"content":"                        ),"},{"type":"INSERT","lineNumber":830,"content":"                        title: Text("},{"type":"INSERT","lineNumber":831,"content":"                          suggestion.title,"},{"type":"INSERT","lineNumber":832,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":833,"content":"                            color: Theme.of(context).colorScheme.onPrimaryContainer,"},{"type":"INSERT","lineNumber":834,"content":"                            fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":835,"content":"                          ),"},{"type":"INSERT","lineNumber":836,"content":"                        ),"},{"type":"INSERT","lineNumber":837,"content":"                        subtitle: Text("},{"type":"INSERT","lineNumber":838,"content":"                          suggestion.description,"},{"type":"INSERT","lineNumber":839,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":840,"content":"                            color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.8),"},{"type":"INSERT","lineNumber":841,"content":"                          ),"},{"type":"INSERT","lineNumber":842,"content":"                        ),"},{"type":"DELETE","lineNumber":831,"oldContent":"                            Text(suggestion.suggestedTime),"},{"type":"DELETE","lineNumber":832,"oldContent":"                            Text('${suggestion.estimatedDuration} min'),"},{"type":"INSERT","lineNumber":846,"content":"                            Text("},{"type":"INSERT","lineNumber":847,"content":"                              suggestion.suggestedTime,"},{"type":"INSERT","lineNumber":848,"content":"                              style: TextStyle("},{"type":"INSERT","lineNumber":849,"content":"                                color: Theme.of(context).colorScheme.onPrimaryContainer,"},{"type":"INSERT","lineNumber":850,"content":"                                fontWeight: FontWeight.w600,"},{"type":"INSERT","lineNumber":851,"content":"                              ),"},{"type":"INSERT","lineNumber":852,"content":"                            ),"},{"type":"INSERT","lineNumber":853,"content":"                            Text("},{"type":"INSERT","lineNumber":854,"content":"                              '${suggestion.estimatedDuration} min',"},{"type":"INSERT","lineNumber":855,"content":"                              style: TextStyle("},{"type":"INSERT","lineNumber":856,"content":"                                color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.7),"},{"type":"INSERT","lineNumber":857,"content":"                                fontSize: 12,"},{"type":"INSERT","lineNumber":858,"content":"                              ),"},{"type":"INSERT","lineNumber":859,"content":"                            ),"},{"type":"INSERT","lineNumber":1023,"content":"  }"},{"type":"INSERT","lineNumber":1024,"content":""},{"type":"INSERT","lineNumber":1025,"content":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":999,"oldContent":"  }"},{"type":"DELETE","lineNumber":1002,"oldContent":""},{"type":"DELETE","lineNumber":1004,"oldContent":"  Color _getTrendColor(String direction) {"}]},{"timestamp":1754442554543,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":"import '../../services/logging_service.dart';"},{"type":"DELETE","lineNumber":319,"oldContent":"              ),"},{"type":"DELETE","lineNumber":321,"oldContent":"            Text("},{"type":"INSERT","lineNumber":319,"content":"              ),"},{"type":"INSERT","lineNumber":321,"content":"            Text("},{"type":"DELETE","lineNumber":368,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"INSERT","lineNumber":368,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":370,"content":""},{"type":"DELETE","lineNumber":403,"oldContent":"            else"},{"type":"DELETE","lineNumber":405,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":403,"content":"            else"},{"type":"INSERT","lineNumber":405,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"MODIFY","lineNumber":645,"content":"        if snapshot.connectionState == ConnectionState.waiting) {","oldContent":"        if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"DELETE","lineNumber":830,"oldContent":"                        trailing: Column("},{"type":"DELETE","lineNumber":832,"oldContent":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":836,"oldContent":"                          children: ["},{"type":"DELETE","lineNumber":838,"oldContent":"                          ],"},{"type":"INSERT","lineNumber":836,"content":"                        subtitle: Text("},{"type":"INSERT","lineNumber":837,"content":"                          suggestion.description,"},{"type":"INSERT","lineNumber":838,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":839,"content":"                            color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.8),"},{"type":"INSERT","lineNumber":840,"content":"                          ),"},{"type":"INSERT","lineNumber":842,"content":"                        trailing: Column("},{"type":"INSERT","lineNumber":843,"content":"                          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":844,"content":"                          children: ["},{"type":"INSERT","lineNumber":845,"content":"                            Text("},{"type":"INSERT","lineNumber":846,"content":"                              suggestion.suggestedTime,"},{"type":"INSERT","lineNumber":847,"content":"                              style: TextStyle("},{"type":"INSERT","lineNumber":848,"content":"                                color: Theme.of(context).colorScheme.onPrimaryContainer,"},{"type":"INSERT","lineNumber":849,"content":"                                fontWeight: FontWeight.w600,"},{"type":"INSERT","lineNumber":850,"content":"                              ),"},{"type":"INSERT","lineNumber":851,"content":"                            ),"},{"type":"INSERT","lineNumber":852,"content":"                            Text("},{"type":"INSERT","lineNumber":853,"content":"                              '${suggestion.estimatedDuration} min',"},{"type":"INSERT","lineNumber":854,"content":"                              style: TextStyle("},{"type":"INSERT","lineNumber":855,"content":"                                color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.7),"},{"type":"INSERT","lineNumber":856,"content":"                                fontSize: 12,"},{"type":"INSERT","lineNumber":857,"content":"                              ),"},{"type":"INSERT","lineNumber":858,"content":"                            ),"},{"type":"INSERT","lineNumber":859,"content":"                          ],"},{"type":"INSERT","lineNumber":860,"content":"                        ),"},{"type":"DELETE","lineNumber":843,"oldContent":"                        subtitle: Text("},{"type":"DELETE","lineNumber":845,"oldContent":"                          suggestion.description,"},{"type":"DELETE","lineNumber":847,"oldContent":"                          style: TextStyle("},{"type":"DELETE","lineNumber":849,"oldContent":"                            color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.8),"},{"type":"DELETE","lineNumber":851,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":853,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":858,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":860,"oldContent":"                              suggestion.suggestedTime,"},{"type":"DELETE","lineNumber":862,"oldContent":"                              style: TextStyle("},{"type":"DELETE","lineNumber":864,"oldContent":"                                color: Theme.of(context).colorScheme.onPrimaryContainer,"},{"type":"DELETE","lineNumber":866,"oldContent":"                                fontWeight: FontWeight.w600,"},{"type":"DELETE","lineNumber":868,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":870,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":872,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":874,"oldContent":"                              '${suggestion.estimatedDuration} min',"},{"type":"DELETE","lineNumber":876,"oldContent":"                              style: TextStyle("},{"type":"DELETE","lineNumber":878,"oldContent":"                                color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.7),"},{"type":"DELETE","lineNumber":880,"oldContent":"                                fontSize: 12,"},{"type":"DELETE","lineNumber":882,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":884,"oldContent":"                            ),"},{"type":"INSERT","lineNumber":1022,"content":"  }"},{"type":"INSERT","lineNumber":1023,"content":""},{"type":"INSERT","lineNumber":1024,"content":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":1039,"oldContent":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":1040,"oldContent":""},{"type":"DELETE","lineNumber":1041,"oldContent":"  }"}]},{"timestamp":1754442570847,"changes":[{"type":"DELETE","lineNumber":318,"oldContent":"              ),"},{"type":"DELETE","lineNumber":320,"oldContent":"            Text("},{"type":"INSERT","lineNumber":319,"content":"              ),"},{"type":"INSERT","lineNumber":321,"content":"            Text("},{"type":"DELETE","lineNumber":367,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"INSERT","lineNumber":368,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"INSERT","lineNumber":370,"content":""},{"type":"DELETE","lineNumber":402,"oldContent":"            else"},{"type":"DELETE","lineNumber":404,"oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":403,"content":"            else"},{"type":"INSERT","lineNumber":405,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":644,"content":"      builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":645,"oldContent":"        if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"MODIFY","lineNumber":826,"content":"                          Icons.access_time,","oldContent":"                          Icons.access_time, "},{"type":"INSERT","lineNumber":833,"content":"                            fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":834,"content":"                          ),"},{"type":"INSERT","lineNumber":835,"content":"                        ),"},{"type":"DELETE","lineNumber":835,"oldContent":"                            fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":839,"oldContent":"                          ),"},{"type":"DELETE","lineNumber":841,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":843,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":846,"oldContent":"                    )),"},{"type":"DELETE","lineNumber":849,"oldContent":"                    const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":852,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":855,"oldContent":"                );"},{"type":"DELETE","lineNumber":858,"oldContent":"              }"},{"type":"DELETE","lineNumber":861,"oldContent":"              return const SizedBox.shrink();"},{"type":"DELETE","lineNumber":863,"oldContent":"            },"},{"type":"DELETE","lineNumber":865,"oldContent":"          ),"},{"type":"DELETE","lineNumber":867,"oldContent":""},{"type":"DELETE","lineNumber":870,"oldContent":"          // Main Recommendations"},{"type":"INSERT","lineNumber":861,"content":"                      ),"},{"type":"INSERT","lineNumber":862,"content":"                    )),"},{"type":"INSERT","lineNumber":863,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":864,"content":"                  ],"},{"type":"INSERT","lineNumber":865,"content":"                );"},{"type":"INSERT","lineNumber":866,"content":"              }"},{"type":"INSERT","lineNumber":867,"content":"              return const SizedBox.shrink();"},{"type":"INSERT","lineNumber":868,"content":"            },"},{"type":"INSERT","lineNumber":869,"content":"          ),"},{"type":"INSERT","lineNumber":870,"content":""},{"type":"INSERT","lineNumber":871,"content":"          // Main Recommendations"},{"type":"MODIFY","lineNumber":1022,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":1025,"content":"    switch (direction?.toLowerCase()) {","oldContent":"    switch (direction?.toLowerCase()) {"}]},{"timestamp":1754442577347,"changes":[{"type":"MODIFY","lineNumber":104,"content":"            // Handle health service error quietly","oldContent":"            AppLogger.error('Failed to load health summary', e);"},{"type":"INSERT","lineNumber":105,"content":"            print('Failed to load health summary: $e');"},{"type":"MODIFY","lineNumber":113,"content":"          print('Error loading habit data for insights: $error');","oldContent":"          AppLogger.error('Error loading habit data for insights', error);"},{"type":"MODIFY","lineNumber":117,"content":"      print('Error loading insights data: $e');","oldContent":"      AppLogger.error('Error loading insights data', e);"},{"type":"DELETE","lineNumber":318,"oldContent":"              ),"},{"type":"MODIFY","lineNumber":320,"content":"              ),","oldContent":"            Text("},{"type":"INSERT","lineNumber":322,"content":"            Text("},{"type":"DELETE","lineNumber":367,"oldContent":"  Widget _buildRecentInsightsCard(List<Habit> habits) {"},{"type":"MODIFY","lineNumber":369,"content":"  Widget _buildRecentInsightsCard(List<Habit> habits) {","oldContent":""},{"type":"INSERT","lineNumber":371,"content":""},{"type":"DELETE","lineNumber":402,"oldContent":"            else"},{"type":"MODIFY","lineNumber":404,"content":"            else","oldContent":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"INSERT","lineNumber":406,"content":"                padding: const EdgeInsets.symmetric(vertical: 4),"},{"type":"MODIFY","lineNumber":827,"content":"                          Icons.access_time, ","oldContent":"                          Icons.access_time,"},{"type":"DELETE","lineNumber":834,"oldContent":"                        subtitle: Text("},{"type":"DELETE","lineNumber":836,"oldContent":"                          suggestion.description,"},{"type":"INSERT","lineNumber":837,"content":"                        subtitle: Text("},{"type":"INSERT","lineNumber":838,"content":"                          suggestion.description,"},{"type":"INSERT","lineNumber":856,"content":"                                color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.7),"},{"type":"INSERT","lineNumber":857,"content":"                                fontSize: 12,"},{"type":"INSERT","lineNumber":858,"content":"                              ),"},{"type":"INSERT","lineNumber":859,"content":"                            ),"},{"type":"INSERT","lineNumber":860,"content":"                          ],"},{"type":"INSERT","lineNumber":861,"content":"                        ),"},{"type":"DELETE","lineNumber":857,"oldContent":"                                color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.7),"},{"type":"DELETE","lineNumber":860,"oldContent":"                                fontSize: 12,"},{"type":"DELETE","lineNumber":863,"oldContent":"                              ),"},{"type":"DELETE","lineNumber":866,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":868,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":871,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":1022,"content":"    }"},{"type":"DELETE","lineNumber":1022,"oldContent":"  }"},{"type":"INSERT","lineNumber":1025,"content":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":1025,"oldContent":"    switch (direction?.toLowerCase()) {"}]},{"timestamp":1754442593001,"changes":[{"type":"DELETE","lineNumber":113,"oldContent":"          AppLogger.error('Error loading habit data for insights', error);"},{"type":"INSERT","lineNumber":114,"content":"        },"},{"type":"DELETE","lineNumber":117,"oldContent":"      AppLogger.error('Error loading insights data', e);"},{"type":"INSERT","lineNumber":118,"content":"    } finally {"},{"type":"DELETE","lineNumber":827,"oldContent":"                          Icons.access_time,"},{"type":"INSERT","lineNumber":828,"content":"                          color: Theme.of(context).colorScheme.primary,"},{"type":"MODIFY","lineNumber":837,"content":"                        subtitle: Text(","oldContent":"                        subtitle: Text("},{"type":"DELETE","lineNumber":856,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":858,"oldContent":"                    )),"},{"type":"DELETE","lineNumber":861,"oldContent":"                    const SizedBox(height: 16),"},{"type":"MODIFY","lineNumber":862,"content":"                      ),","oldContent":"                  ],"},{"type":"INSERT","lineNumber":863,"content":"                    )),"},{"type":"INSERT","lineNumber":864,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":865,"content":"                  ],"},{"type":"MODIFY","lineNumber":1023,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":1026,"content":"    switch (direction?.toLowerCase()) {","oldContent":"    switch (direction?.toLowerCase()) {"}]},{"timestamp":1754442636699,"changes":[{"type":"MODIFY","lineNumber":114,"content":"        },","oldContent":"        },"},{"type":"MODIFY","lineNumber":118,"content":"    } finally {","oldContent":"    } finally {"},{"type":"INSERT","lineNumber":827,"content":"                          Icons.access_time,"},{"type":"DELETE","lineNumber":828,"oldContent":"                          Icons.access_time, "},{"type":"INSERT","lineNumber":836,"content":"                        ),"},{"type":"DELETE","lineNumber":837,"oldContent":"                        subtitle: Text("},{"type":"INSERT","lineNumber":859,"content":"                            ),"},{"type":"INSERT","lineNumber":860,"content":"                          ],"},{"type":"INSERT","lineNumber":861,"content":"                        ),"},{"type":"DELETE","lineNumber":861,"oldContent":"                  ],"},{"type":"DELETE","lineNumber":863,"oldContent":"                          ],"},{"type":"DELETE","lineNumber":865,"oldContent":"                        ),"},{"type":"INSERT","lineNumber":1022,"content":"    }"},{"type":"DELETE","lineNumber":1023,"oldContent":"  }"},{"type":"INSERT","lineNumber":1025,"content":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":1026,"oldContent":"    switch (direction?.toLowerCase()) {"}]},{"timestamp":1754442800528,"changes":[{"type":"INSERT","lineNumber":113,"content":"          print('Error loading habit data for insights: $error');"},{"type":"DELETE","lineNumber":114,"oldContent":"        },"},{"type":"INSERT","lineNumber":117,"content":"      print('Error loading insights data: $e');"},{"type":"DELETE","lineNumber":118,"oldContent":"    } finally {"},{"type":"MODIFY","lineNumber":646,"content":"        if (snapshot.connectionState == ConnectionState.waiting) {","oldContent":"        if snapshot.connectionState == ConnectionState.waiting) {"},{"type":"DELETE","lineNumber":860,"oldContent":"                      ),"},{"type":"MODIFY","lineNumber":862,"content":"                      ),","oldContent":"                    )),"},{"type":"INSERT","lineNumber":863,"content":"                    )),"}]},{"timestamp":1754444575859,"changes":[{"type":"INSERT","lineNumber":8,"content":"import '../../utils/app_logger.dart';"},{"type":"MODIFY","lineNumber":106,"content":"            AppLogger.error('Failed to load health summary', e);","oldContent":"            print('Failed to load health summary: $e');"},{"type":"MODIFY","lineNumber":114,"content":"          AppLogger.error('Error loading habit data for insights', error);","oldContent":"          print('Error loading habit data for insights: $error');"},{"type":"MODIFY","lineNumber":118,"content":"      AppLogger.error('Error loading insights data', e);","oldContent":"      print('Error loading insights data: $e');"},{"type":"INSERT","lineNumber":862,"content":"                        ),"},{"type":"DELETE","lineNumber":863,"oldContent":"                        ),"}]},{"timestamp":1754444606427,"changes":[{"type":"DELETE","lineNumber":106,"oldContent":"            print('Failed to load health summary: $e');"},{"type":"INSERT","lineNumber":107,"content":"          }"},{"type":"DELETE","lineNumber":114,"oldContent":"          print('Error loading habit data for insights: $error');"},{"type":"INSERT","lineNumber":115,"content":"        },"},{"type":"DELETE","lineNumber":118,"oldContent":"      print('Error loading insights data: $e');"},{"type":"INSERT","lineNumber":119,"content":"    } finally {"},{"type":"MODIFY","lineNumber":863,"content":"                      ),","oldContent":"                      ),"}]},{"timestamp":1754444697472,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import '../../services/logging_service.dart';","oldContent":"import '../../utils/app_logger.dart';"},{"type":"MODIFY","lineNumber":107,"content":"          }","oldContent":"          }"},{"type":"MODIFY","lineNumber":115,"content":"        },","oldContent":"        },"},{"type":"MODIFY","lineNumber":119,"content":"    } finally {","oldContent":"    } finally {"},{"type":"INSERT","lineNumber":862,"content":"                        ),"},{"type":"DELETE","lineNumber":863,"oldContent":"                      ),"}]},{"timestamp":1754454360441,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"  const InsightsScreen({super.key});"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":4,"content":"import '../../services/trend_analysis_service.dart';"},{"type":"INSERT","lineNumber":5,"content":"import '../../services/smart_recommendations_service.dart';"},{"type":"INSERT","lineNumber":6,"content":"import '../../services/achievements_service.dart';"},{"type":"INSERT","lineNumber":7,"content":"import '../../services/health_service.dart';"},{"type":"DELETE","lineNumber":14,"oldContent":"            data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"DELETE","lineNumber":15,"oldContent":"              future: habitService.getAllHabits(),"},{"type":"DELETE","lineNumber":16,"oldContent":"              builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":17,"oldContent":"                if (snapshot.connectionState == ConnectionState.waiting) {"},{"type":"DELETE","lineNumber":18,"oldContent":"                  return const Center(child: CircularProgressIndicator());"},{"type":"DELETE","lineNumber":19,"oldContent":"                }"},{"type":"INSERT","lineNumber":14,"content":"  ConsumerState<InsightsScreen> createState() => _InsightsScreenState();"},{"type":"INSERT","lineNumber":15,"content":"}"},{"type":"DELETE","lineNumber":21,"oldContent":"                if (!snapshot.hasData || snapshot.data!.isEmpty) {"},{"type":"DELETE","lineNumber":22,"oldContent":"                  return const Center("},{"type":"DELETE","lineNumber":23,"oldContent":"                    child: Column("},{"type":"DELETE","lineNumber":24,"oldContent":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":25,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":26,"oldContent":"                        SizedBox(height: 16),"},{"type":"DELETE","lineNumber":27,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":28,"oldContent":"                          'No insights yet',"},{"type":"DELETE","lineNumber":29,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":30,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":31,"oldContent":"                        SizedBox(height: 8),"},{"type":"DELETE","lineNumber":32,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":33,"oldContent":"                          'Start tracking habits to get personalized insights!',"},{"type":"DELETE","lineNumber":34,"oldContent":"                          style: TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":35,"oldContent":"                          textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":36,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":37,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":38,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":39,"oldContent":"                  );"},{"type":"DELETE","lineNumber":40,"oldContent":"                }"},{"type":"INSERT","lineNumber":17,"content":"class _InsightsScreenState extends ConsumerState<InsightsScreen>"},{"type":"INSERT","lineNumber":18,"content":"    with SingleTickerProviderStateMixin {"},{"type":"INSERT","lineNumber":19,"content":"  late TabController _tabController;"},{"type":"INSERT","lineNumber":20,"content":"  Map<String, dynamic>? _trendAnalysis;"},{"type":"INSERT","lineNumber":21,"content":"  List<HabitRecommendation>? _recommendations;"},{"type":"INSERT","lineNumber":22,"content":"  Map<String, dynamic>? _gamificationStats;"},{"type":"INSERT","lineNumber":23,"content":"  Map<String, dynamic>? _healthSummary;"},{"type":"INSERT","lineNumber":24,"content":"  bool _isLoading = true;"},{"type":"DELETE","lineNumber":42,"oldContent":"                final habits = snapshot.data!;"},{"type":"DELETE","lineNumber":43,"oldContent":"                final hasCompletions = habits.any((habit) => habit.completions.isNotEmpty);"},{"type":"INSERT","lineNumber":26,"content":"  @override"},{"type":"INSERT","lineNumber":27,"content":"  void initState() {"},{"type":"INSERT","lineNumber":28,"content":"    super.initState();"},{"type":"INSERT","lineNumber":29,"content":"    _tabController = TabController(length: 4, vsync: this);"},{"type":"INSERT","lineNumber":30,"content":"    _loadAllData();"},{"type":"INSERT","lineNumber":31,"content":"  }"},{"type":"DELETE","lineNumber":45,"oldContent":"                if (!hasCompletions) {"},{"type":"DELETE","lineNumber":46,"oldContent":"                  return const Center("},{"type":"DELETE","lineNumber":47,"oldContent":"                      mainAxisAlignment: MainAxisAlignment.center,"},{"type":"DELETE","lineNumber":48,"oldContent":"                      children: ["},{"type":"DELETE","lineNumber":49,"oldContent":"                        Icon(Icons.psychology, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":33,"content":"  @override"},{"type":"INSERT","lineNumber":34,"content":"  void dispose() {"},{"type":"INSERT","lineNumber":35,"content":"    _tabController.dispose();"},{"type":"INSERT","lineNumber":36,"content":"    super.dispose();"},{"type":"INSERT","lineNumber":37,"content":"  }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"  Future<void> _loadAllData() async {"},{"type":"INSERT","lineNumber":40,"content":"    setState(() => _isLoading = true);"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"    try {"},{"type":"INSERT","lineNumber":43,"content":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":44,"content":"      await habitServiceAsync.when("},{"type":"INSERT","lineNumber":45,"content":"        data: (habitService) async {"},{"type":"INSERT","lineNumber":46,"content":"          final habits = await habitService.getAllHabits();"},{"type":"INSERT","lineNumber":47,"content":"          final habitsData = habits.map((h) => {"},{"type":"INSERT","lineNumber":48,"content":"            'id': h.id,"},{"type":"INSERT","lineNumber":49,"content":"            'name': h.name,"},{"type":"DELETE","lineNumber":51,"oldContent":"                        Text("},{"type":"DELETE","lineNumber":52,"oldContent":"                          'Complete some habits first',"},{"type":"DELETE","lineNumber":53,"oldContent":"                          style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"DELETE","lineNumber":54,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":55,"oldContent":"                        SizedBox(height: 8),"},{"type":"INSERT","lineNumber":51,"content":"            'currentStreak': h.currentStreak,"},{"type":"INSERT","lineNumber":52,"content":"            'completionRate': h.completionRate,"},{"type":"INSERT","lineNumber":53,"content":"            'reminderTime': h.reminderTime?.toString(),"},{"type":"INSERT","lineNumber":54,"content":"            'difficulty': h.difficulty.name,"},{"type":"INSERT","lineNumber":55,"content":"            'completions': h.completions.map((c) => {"},{"type":"MODIFY","lineNumber":57,"content":"              'habitId': h.id,","oldContent":"                          'Your AI-powered insights will appear here once you start completing habits!',"},{"type":"DELETE","lineNumber":59,"oldContent":"                          textAlign: TextAlign.center,"},{"type":"DELETE","lineNumber":60,"oldContent":"                        ),"},{"type":"DELETE","lineNumber":61,"oldContent":"                      ],"},{"type":"DELETE","lineNumber":62,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":63,"oldContent":"                  );"},{"type":"DELETE","lineNumber":64,"oldContent":"                'id': DateTime.now().millisecondsSinceEpoch.toString(),"},{"type":"INSERT","lineNumber":59,"content":"            }).toList(),"},{"type":"INSERT","lineNumber":60,"content":"          }).toList();"},{"type":"INSERT","lineNumber":62,"content":"          final allCompletions = habits"},{"type":"INSERT","lineNumber":63,"content":"              .expand((h) => h.completions.map((c) => {"},{"type":"INSERT","lineNumber":64,"content":"                'id': DateTime.now().millisecondsSinceEpoch.toString(),"},{"type":"INSERT","lineNumber":65,"content":"                'habitId': h.id,"},{"type":"DELETE","lineNumber":67,"oldContent":"                  padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":68,"oldContent":"                  child: Column("},{"type":"DELETE","lineNumber":69,"oldContent":"                    crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":70,"oldContent":"                    children: ["},{"type":"DELETE","lineNumber":71,"oldContent":"                      _buildWelcomeCard(habits),"},{"type":"DELETE","lineNumber":72,"oldContent":"                      const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":73,"oldContent":"                      _buildPersonalizedInsights(habits),"},{"type":"DELETE","lineNumber":74,"oldContent":"                      const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":75,"oldContent":"                      const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":76,"oldContent":"                      _buildRecommendations(habits),"},{"type":"DELETE","lineNumber":77,"oldContent":"                      _buildTrendAnalysis(habits),"},{"type":"DELETE","lineNumber":78,"oldContent":"                    ],"},{"type":"DELETE","lineNumber":79,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":80,"oldContent":"                );"},{"type":"DELETE","lineNumber":81,"oldContent":"              },"},{"type":"DELETE","lineNumber":82,"oldContent":"            ),"},{"type":"DELETE","lineNumber":83,"oldContent":"            loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"DELETE","lineNumber":84,"oldContent":"            error: (error, stack) => Center("},{"type":"DELETE","lineNumber":85,"oldContent":"              child: Text('Error: $error'),"},{"type":"DELETE","lineNumber":86,"oldContent":"            ),"},{"type":"DELETE","lineNumber":87,"oldContent":"        },"},{"type":"DELETE","lineNumber":88,"oldContent":"    );"},{"type":"INSERT","lineNumber":67,"content":"              }))"},{"type":"INSERT","lineNumber":68,"content":"              .toList();"},{"type":"DELETE","lineNumber":90,"oldContent":"  Widget _buildWelcomeCard(List<Habit> habits) {"},{"type":"DELETE","lineNumber":91,"oldContent":"    final activeHabits = habits.where((habit) => habit.isActive).length;"},{"type":"INSERT","lineNumber":70,"content":"          // Load trend analysis (only if enough data)"},{"type":"INSERT","lineNumber":71,"content":"          _trendAnalysis = await TrendAnalysisService.analyzeHabitTrends("},{"type":"INSERT","lineNumber":72,"content":"            habits: habitsData,"},{"type":"INSERT","lineNumber":73,"content":"            completions: allCompletions,"},{"type":"INSERT","lineNumber":74,"content":"          );"},{"type":"DELETE","lineNumber":93,"oldContent":"    return Container("},{"type":"DELETE","lineNumber":94,"oldContent":"      width: double.infinity,"},{"type":"DELETE","lineNumber":95,"oldContent":"      decoration: BoxDecoration("},{"type":"DELETE","lineNumber":96,"oldContent":"        gradient: LinearGradient("},{"type":"DELETE","lineNumber":97,"oldContent":"          colors: [Colors.indigo.shade400, Colors.purple.shade400],"},{"type":"DELETE","lineNumber":98,"oldContent":"          end: Alignment.bottomRight,"},{"type":"DELETE","lineNumber":99,"oldContent":"        borderRadius: BorderRadius.circular(16),"},{"type":"DELETE","lineNumber":100,"oldContent":"      child: Column("},{"type":"DELETE","lineNumber":101,"oldContent":"        children: ["},{"type":"DELETE","lineNumber":102,"oldContent":"          const Row("},{"type":"DELETE","lineNumber":103,"oldContent":"            children: ["},{"type":"DELETE","lineNumber":104,"oldContent":"              Icon(Icons.psychology, color: Colors.white, size: 32),"},{"type":"INSERT","lineNumber":76,"content":"          // Load smart recommendations"},{"type":"INSERT","lineNumber":77,"content":"          _recommendations = await SmartRecommendationsService.generateRecommendations("},{"type":"INSERT","lineNumber":78,"content":"            existingHabits: habitsData,"},{"type":"INSERT","lineNumber":79,"content":"            userPreferences: {'preferredTimeSlot': 'morning'},"},{"type":"INSERT","lineNumber":80,"content":"            healthData: _healthSummary,"},{"type":"INSERT","lineNumber":81,"content":"          );"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"          // Load gamification stats"},{"type":"INSERT","lineNumber":84,"content":"          _gamificationStats = await AchievementsService.getGamificationStats("},{"type":"INSERT","lineNumber":85,"content":"            habits: habitsData,"},{"type":"INSERT","lineNumber":86,"content":"            completions: allCompletions,"},{"type":"INSERT","lineNumber":87,"content":"          );"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"          // Check for new achievements"},{"type":"INSERT","lineNumber":90,"content":"          final newAchievements = await AchievementsService.checkForNewAchievements("},{"type":"INSERT","lineNumber":91,"content":"            habits: habitsData,"},{"type":"INSERT","lineNumber":92,"content":"            completions: allCompletions,"},{"type":"INSERT","lineNumber":93,"content":"          );"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"          if (newAchievements.isNotEmpty && mounted) {"},{"type":"INSERT","lineNumber":96,"content":"            _showNewAchievements(newAchievements);"},{"type":"INSERT","lineNumber":97,"content":"          }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"          // Load health summary if available"},{"type":"INSERT","lineNumber":100,"content":"          try {"},{"type":"INSERT","lineNumber":101,"content":"            if (await HealthService.hasPermissions()) {"},{"type":"INSERT","lineNumber":102,"content":"              _healthSummary = await HealthService.getTodayHealthSummary();"},{"type":"INSERT","lineNumber":103,"content":"            }"},{"type":"INSERT","lineNumber":104,"content":"          } catch (e) {"},{"type":"INSERT","lineNumber":106,"content":"            AppLogger.error('Failed to load health summary', e);"},{"type":"DELETE","lineNumber":107,"oldContent":"          }"},{"type":"DELETE","lineNumber":108,"oldContent":"                style: TextStyle("},{"type":"DELETE","lineNumber":109,"oldContent":"                  color: Colors.white,"},{"type":"DELETE","lineNumber":110,"oldContent":"                  fontSize: 24,"},{"type":"DELETE","lineNumber":111,"oldContent":"                  fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":112,"oldContent":"                ),"},{"type":"DELETE","lineNumber":113,"oldContent":"              ),"},{"type":"INSERT","lineNumber":109,"content":"        loading: () async {"},{"type":"INSERT","lineNumber":110,"content":"          // Wait for provider to load"},{"type":"INSERT","lineNumber":111,"content":"          await Future.delayed(const Duration(milliseconds: 500));"},{"type":"DELETE","lineNumber":116,"oldContent":"          const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":117,"oldContent":"          Text("},{"type":"INSERT","lineNumber":113,"content":"        error: (error, stack) {"},{"type":"INSERT","lineNumber":114,"content":"          AppLogger.error('Error loading habit data for insights', error);"},{"type":"INSERT","lineNumber":115,"content":"        },"},{"type":"INSERT","lineNumber":116,"content":"      );"},{"type":"INSERT","lineNumber":117,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":118,"content":"      AppLogger.error('Error loading insights data', e);"},{"type":"DELETE","lineNumber":119,"oldContent":"    } finally {"},{"type":"DELETE","lineNumber":120,"oldContent":"              color: Colors.white,"},{"type":"DELETE","lineNumber":121,"oldContent":"              fontSize: 18,"},{"type":"DELETE","lineNumber":122,"oldContent":"              fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":123,"oldContent":"            ),"},{"type":"INSERT","lineNumber":120,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":121,"content":"        setState(() => _isLoading = false);"},{"type":"INSERT","lineNumber":122,"content":"      }"},{"type":"INSERT","lineNumber":123,"content":"    }"},{"type":"INSERT","lineNumber":124,"content":"  }"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"  void _showNewAchievements(List<Achievement> achievements) {"},{"type":"INSERT","lineNumber":127,"content":"    showDialog("},{"type":"INSERT","lineNumber":128,"content":"      context: context,"},{"type":"INSERT","lineNumber":129,"content":"      builder: (context) => AlertDialog("},{"type":"INSERT","lineNumber":130,"content":"        title: const Text('🎉 New Achievement!'),"},{"type":"INSERT","lineNumber":131,"content":"        content: Column("},{"type":"INSERT","lineNumber":132,"content":"          mainAxisSize: MainAxisSize.min,"},{"type":"INSERT","lineNumber":133,"content":"          children: achievements.map((achievement) => ListTile("},{"type":"INSERT","lineNumber":134,"content":"            leading: Text(achievement.icon, style: const TextStyle(fontSize: 24)),"},{"type":"INSERT","lineNumber":135,"content":"            title: Text(achievement.title),"},{"type":"INSERT","lineNumber":136,"content":"            subtitle: Text(achievement.description),"},{"type":"INSERT","lineNumber":137,"content":"            trailing: Text('+${achievement.xpReward} XP'),"},{"type":"INSERT","lineNumber":138,"content":"          )).toList(),"},{"type":"INSERT","lineNumber":139,"content":"        ),"},{"type":"INSERT","lineNumber":140,"content":"        actions: ["},{"type":"INSERT","lineNumber":141,"content":"          TextButton("},{"type":"INSERT","lineNumber":142,"content":"            onPressed: () => Navigator.of(context).pop(),"},{"type":"INSERT","lineNumber":143,"content":"            child: const Text('Awesome!'),"},{"type":"DELETE","lineNumber":125,"oldContent":"          const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":126,"oldContent":"          Text("},{"type":"DELETE","lineNumber":127,"oldContent":"            'You\\'ve completed $totalCompletions habits across $activeHabits active routines. Keep building those positive patterns!',"},{"type":"DELETE","lineNumber":128,"oldContent":"            style: const TextStyle("},{"type":"DELETE","lineNumber":129,"oldContent":"              color: Colors.white70,"},{"type":"DELETE","lineNumber":130,"oldContent":"              fontSize: 16,"},{"type":"DELETE","lineNumber":131,"oldContent":"            ),"},{"type":"DELETE","lineNumber":137,"oldContent":"  Widget _buildPersonalizedInsights(List<Habit> habits) {"},{"type":"DELETE","lineNumber":138,"oldContent":"    final insights = _generateInsights(habits);"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":140,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":141,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":142,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":143,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":144,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":145,"oldContent":"            const Row("},{"type":"DELETE","lineNumber":146,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":147,"oldContent":"                Icon(Icons.lightbulb, color: Colors.amber),"},{"type":"DELETE","lineNumber":148,"oldContent":"                SizedBox(width: 8),"},{"type":"DELETE","lineNumber":149,"oldContent":"                Text("},{"type":"DELETE","lineNumber":155,"oldContent":"            ...insights.map((insight) => Padding("},{"type":"DELETE","lineNumber":156,"oldContent":"              child: Row("},{"type":"DELETE","lineNumber":157,"oldContent":"                crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":158,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":159,"oldContent":"                  Container("},{"type":"DELETE","lineNumber":160,"oldContent":"                    height: 8,"},{"type":"DELETE","lineNumber":161,"oldContent":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":155,"content":"        bottom: TabBar("},{"type":"INSERT","lineNumber":156,"content":"          controller: _tabController,"},{"type":"INSERT","lineNumber":157,"content":"          tabs: const ["},{"type":"INSERT","lineNumber":158,"content":"            Tab(text: 'Overview'),"},{"type":"INSERT","lineNumber":159,"content":"            Tab(text: 'Trends'),"},{"type":"INSERT","lineNumber":160,"content":"            Tab(text: 'Achievements'),"},{"type":"INSERT","lineNumber":161,"content":"            Tab(text: 'Recommendations'),"},{"type":"DELETE","lineNumber":165,"oldContent":"                    child: Text("},{"type":"DELETE","lineNumber":166,"oldContent":"                      insight['text'] as String,"},{"type":"DELETE","lineNumber":167,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":168,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":169,"oldContent":"                ],"},{"type":"DELETE","lineNumber":170,"oldContent":"            )),"},{"type":"DELETE","lineNumber":171,"oldContent":"          ],"},{"type":"DELETE","lineNumber":172,"oldContent":"        ),"},{"type":"INSERT","lineNumber":165,"content":"      body: _isLoading"},{"type":"INSERT","lineNumber":166,"content":"          ? const Center(child: CircularProgressIndicator())"},{"type":"INSERT","lineNumber":167,"content":"          : TabBarView("},{"type":"INSERT","lineNumber":168,"content":"              controller: _tabController,"},{"type":"INSERT","lineNumber":169,"content":"              children: ["},{"type":"INSERT","lineNumber":170,"content":"                _buildOverviewTab(),"},{"type":"INSERT","lineNumber":171,"content":"                _buildTrendsTab(),"},{"type":"INSERT","lineNumber":172,"content":"                _buildAchievementsTab(),"},{"type":"INSERT","lineNumber":173,"content":"                _buildRecommendationsTab(),"},{"type":"INSERT","lineNumber":174,"content":"              ],"},{"type":"INSERT","lineNumber":175,"content":"            ),"},{"type":"DELETE","lineNumber":175,"oldContent":"  Widget _buildAchievementBadges(List<Habit> habits) {"},{"type":"DELETE","lineNumber":176,"oldContent":"    );"},{"type":"DELETE","lineNumber":177,"oldContent":"  }"},{"type":"DELETE","lineNumber":179,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":180,"oldContent":"        child: Column("},{"type":"INSERT","lineNumber":179,"content":"  Widget _buildOverviewTab() {"},{"type":"INSERT","lineNumber":180,"content":"    return Consumer("},{"type":"DELETE","lineNumber":184,"oldContent":"            const Row("},{"type":"DELETE","lineNumber":185,"oldContent":"              children: ["},{"type":"DELETE","lineNumber":186,"oldContent":"                Icon(Icons.emoji_events, color: Colors.orange),"},{"type":"DELETE","lineNumber":187,"oldContent":"                SizedBox(width: 8),"},{"type":"INSERT","lineNumber":184,"content":"        return habitServiceAsync.when("},{"type":"INSERT","lineNumber":185,"content":"          data: (habitService) => FutureBuilder<List<Habit>>("},{"type":"INSERT","lineNumber":186,"content":"            future: habitService.getAllHabits(),"},{"type":"INSERT","lineNumber":187,"content":"            builder: (context, snapshot) {"},{"type":"DELETE","lineNumber":193,"oldContent":"                ),"},{"type":"DELETE","lineNumber":194,"oldContent":"              ],"},{"type":"DELETE","lineNumber":195,"oldContent":"            ),"},{"type":"DELETE","lineNumber":196,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":197,"oldContent":"            if (badges.isEmpty)"},{"type":"DELETE","lineNumber":198,"oldContent":"              const Text("},{"type":"DELETE","lineNumber":199,"oldContent":"                'Keep completing habits to earn your first badge! 🏆',"},{"type":"DELETE","lineNumber":200,"oldContent":"                style: TextStyle(color: Colors.grey),"},{"type":"DELETE","lineNumber":201,"oldContent":"            else"},{"type":"INSERT","lineNumber":193,"content":"                      Icon(Icons.lightbulb_outline, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":194,"content":"                      SizedBox(height: 16),"},{"type":"INSERT","lineNumber":195,"content":"                      Text("},{"type":"INSERT","lineNumber":196,"content":"                        'No insights yet',"},{"type":"INSERT","lineNumber":197,"content":"                        style: TextStyle(fontSize: 18, color: Colors.grey),"},{"type":"INSERT","lineNumber":198,"content":"                      ),"},{"type":"INSERT","lineNumber":199,"content":"                      SizedBox(height: 8),"},{"type":"INSERT","lineNumber":200,"content":"                      Text("},{"type":"INSERT","lineNumber":201,"content":"                        'Start tracking habits to get personalized insights!',"},{"type":"DELETE","lineNumber":208,"oldContent":"                )).toList(),"},{"type":"DELETE","lineNumber":209,"oldContent":"              ),"},{"type":"DELETE","lineNumber":210,"oldContent":"      ),"},{"type":"INSERT","lineNumber":208,"content":"              }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"              final habits = snapshot.data!;"},{"type":"INSERT","lineNumber":211,"content":"              return SingleChildScrollView("},{"type":"INSERT","lineNumber":212,"content":"                padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":213,"content":"                child: Column("},{"type":"INSERT","lineNumber":214,"content":"                  crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":215,"content":"                  children: ["},{"type":"INSERT","lineNumber":216,"content":"                    // Gamification Stats Card"},{"type":"INSERT","lineNumber":217,"content":"                    if (_gamificationStats != null) _buildGamificationCard(),"},{"type":"INSERT","lineNumber":218,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":219,"content":""},{"type":"INSERT","lineNumber":220,"content":"                    // Quick Stats Grid"},{"type":"INSERT","lineNumber":221,"content":"                    _buildQuickStatsGrid(habits),"},{"type":"INSERT","lineNumber":222,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"                    // Health Integration Card"},{"type":"INSERT","lineNumber":225,"content":"                    if (_healthSummary != null) _buildHealthCard(),"},{"type":"INSERT","lineNumber":226,"content":"                    const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":227,"content":""},{"type":"INSERT","lineNumber":228,"content":"                    // Recent Insights"},{"type":"INSERT","lineNumber":229,"content":"                    _buildRecentInsightsCard(habits),"},{"type":"INSERT","lineNumber":230,"content":"                  ],"},{"type":"INSERT","lineNumber":231,"content":"                ),"},{"type":"INSERT","lineNumber":232,"content":"              );"},{"type":"INSERT","lineNumber":233,"content":"            },"},{"type":"INSERT","lineNumber":234,"content":"          ),"},{"type":"INSERT","lineNumber":235,"content":"          loading: () => const Center(child: CircularProgressIndicator()),"},{"type":"INSERT","lineNumber":236,"content":"          error: (error, stack) => Center("},{"type":"INSERT","lineNumber":237,"content":"            child: Text('Error loading data: $error'),"},{"type":"INSERT","lineNumber":238,"content":"          ),"},{"type":"INSERT","lineNumber":239,"content":"        );"},{"type":"INSERT","lineNumber":240,"content":"      },"},{"type":"INSERT","lineNumber":241,"content":"    );"},{"type":"DELETE","lineNumber":212,"oldContent":"  Widget _buildRecommendations(List<Habit> habits) {"},{"type":"INSERT","lineNumber":244,"content":"  Widget _buildGamificationCard() {"},{"type":"INSERT","lineNumber":245,"content":"    final stats = _gamificationStats!;"},{"type":"INSERT","lineNumber":246,"content":"    return Card("},{"type":"INSERT","lineNumber":248,"content":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":218,"oldContent":"            const Row("},{"type":"INSERT","lineNumber":252,"content":"            Row("},{"type":"DELETE","lineNumber":220,"oldContent":"                Icon(Icons.auto_awesome, color: Colors.blue),"},{"type":"DELETE","lineNumber":221,"oldContent":"                SizedBox(width: 8),"},{"type":"INSERT","lineNumber":254,"content":"                const Icon(Icons.emoji_events, color: Colors.amber),"},{"type":"INSERT","lineNumber":255,"content":"                const SizedBox(width: 8),"},{"type":"DELETE","lineNumber":223,"oldContent":"                  'Smart Recommendations',"},{"type":"DELETE","lineNumber":224,"oldContent":"                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),"},{"type":"INSERT","lineNumber":257,"content":"                  'Level ${stats['level']} ${stats['rank']}',"},{"type":"INSERT","lineNumber":258,"content":"                  style: Theme.of(context).textTheme.titleLarge,"},{"type":"INSERT","lineNumber":259,"content":"                ),"},{"type":"INSERT","lineNumber":261,"content":"            ),"},{"type":"DELETE","lineNumber":227,"oldContent":"            ...recommendations.map((rec) => Container("},{"type":"DELETE","lineNumber":228,"oldContent":"              margin: const EdgeInsets.only(bottom: 12),"},{"type":"DELETE","lineNumber":229,"oldContent":"              padding: const EdgeInsets.all(12),"},{"type":"DELETE","lineNumber":230,"oldContent":"              decoration: BoxDecoration("},{"type":"DELETE","lineNumber":231,"oldContent":"                color: Colors.blue.shade50,"},{"type":"DELETE","lineNumber":232,"oldContent":"                border: Border.all(color: Colors.blue.shade200),"},{"type":"DELETE","lineNumber":233,"oldContent":"              ),"},{"type":"DELETE","lineNumber":234,"oldContent":"              child: Row("},{"type":"DELETE","lineNumber":235,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":236,"oldContent":"                  Icon(rec['icon'] as IconData, color: Colors.blue),"},{"type":"DELETE","lineNumber":237,"oldContent":"                  const SizedBox(width: 12),"},{"type":"DELETE","lineNumber":238,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":239,"oldContent":"                    child: Text("},{"type":"DELETE","lineNumber":240,"oldContent":"                      rec['text'] as String,"},{"type":"DELETE","lineNumber":241,"oldContent":"                      style: const TextStyle(fontSize: 14),"},{"type":"DELETE","lineNumber":242,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":243,"oldContent":"                ],"},{"type":"DELETE","lineNumber":244,"oldContent":"            )),"},{"type":"DELETE","lineNumber":245,"oldContent":"        ),"},{"type":"DELETE","lineNumber":246,"oldContent":"    );"},{"type":"DELETE","lineNumber":247,"oldContent":""},{"type":"DELETE","lineNumber":248,"oldContent":"    final analysis = _generateTrendAnalysis(habits);"},{"type":"DELETE","lineNumber":249,"oldContent":""},{"type":"DELETE","lineNumber":250,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":251,"oldContent":"        padding: const EdgeInsets.all(16),"},{"type":"DELETE","lineNumber":252,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":253,"oldContent":"            const Row("},{"type":"DELETE","lineNumber":254,"oldContent":"                Icon(Icons.trending_up, color: Colors.green),"},{"type":"DELETE","lineNumber":255,"oldContent":"                Text("},{"type":"DELETE","lineNumber":256,"oldContent":"                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),"},{"type":"DELETE","lineNumber":257,"oldContent":"              ],"},{"type":"INSERT","lineNumber":263,"content":"            LinearProgressIndicator("},{"type":"INSERT","lineNumber":264,"content":"              value: stats['levelProgress'],"},{"type":"INSERT","lineNumber":265,"content":"              backgroundColor: Colors.grey[300],"},{"type":"DELETE","lineNumber":259,"oldContent":"                ),"},{"type":"INSERT","lineNumber":267,"content":"            const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":268,"content":"            Text('${stats['xp']} / ${stats['nextLevelXP']} XP'),"},{"type":"INSERT","lineNumber":269,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":270,"content":"            Row("},{"type":"INSERT","lineNumber":271,"content":"              mainAxisAlignment: MainAxisAlignment.spaceAround,"},{"type":"INSERT","lineNumber":272,"content":"              children: ["},{"type":"INSERT","lineNumber":273,"content":"                _buildStatItem('Achievements', '${stats['achievementsUnlocked']}/${stats['totalAchievements']}'),"},{"type":"INSERT","lineNumber":274,"content":"                _buildStatItem('Max Streak', '${stats['maxStreak']} days'),"},{"type":"INSERT","lineNumber":275,"content":"                _buildStatItem('Completion Rate', '${(stats['completionRate'] * 100).toStringAsFixed(1)}%'),"},{"type":"DELETE","lineNumber":262,"oldContent":"              child: Row("},{"type":"DELETE","lineNumber":263,"oldContent":"                children: ["},{"type":"DELETE","lineNumber":264,"oldContent":"                  Icon("},{"type":"DELETE","lineNumber":265,"oldContent":"                    color: trend['trending'] as bool ? Colors.green : Colors.orange,"},{"type":"DELETE","lineNumber":266,"oldContent":"            ),"},{"type":"DELETE","lineNumber":267,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":268,"oldContent":"                      trend['text'] as String,"},{"type":"DELETE","lineNumber":269,"oldContent":"                      style: const TextStyle(fontSize: 14),"},{"type":"DELETE","lineNumber":270,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":271,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":272,"oldContent":"                ],"},{"type":"DELETE","lineNumber":273,"oldContent":"              ),"},{"type":"DELETE","lineNumber":274,"oldContent":"            )),"},{"type":"DELETE","lineNumber":276,"oldContent":"      ),"},{"type":"DELETE","lineNumber":277,"oldContent":"            ),"},{"type":"DELETE","lineNumber":278,"oldContent":"          ],"},{"type":"DELETE","lineNumber":284,"oldContent":"  // AI-powered insight generation methods"},{"type":"DELETE","lineNumber":285,"oldContent":"  List<Map<String, dynamic>> _generateInsights(List<Habit> habits) {"},{"type":"DELETE","lineNumber":286,"oldContent":"    final insights = <Map<String, dynamic>>[];"},{"type":"DELETE","lineNumber":287,"oldContent":""},{"type":"DELETE","lineNumber":288,"oldContent":"    // Best performing habit insight"},{"type":"INSERT","lineNumber":284,"content":"  Widget _buildQuickStatsGrid(List<Habit> habits) {"},{"type":"INSERT","lineNumber":285,"content":"    final totalHabits = habits.length;"},{"type":"INSERT","lineNumber":286,"content":"    final activeHabits = habits.where((h) => h.currentStreak > 0).length;"},{"type":"INSERT","lineNumber":287,"content":"    final totalCompletions = habits.fold<int>(0, (sum, h) => sum + h.completions.length);"},{"type":"INSERT","lineNumber":288,"content":"    final avgStreak = habits.isNotEmpty"},{"type":"DELETE","lineNumber":292,"oldContent":"        'color': Colors.green,"},{"type":"DELETE","lineNumber":293,"oldContent":"    }"},{"type":"DELETE","lineNumber":294,"oldContent":"    // Consistency insight"},{"type":"DELETE","lineNumber":295,"oldContent":"    if (consistentHabits > 0) {"},{"type":"DELETE","lineNumber":296,"oldContent":"      insights.add({"},{"type":"DELETE","lineNumber":297,"oldContent":"        'text': '🔥 You\\'re building consistency! $consistentHabits habits have a 3+ day streak.',"},{"type":"DELETE","lineNumber":298,"oldContent":"        'color': Colors.orange,"},{"type":"DELETE","lineNumber":299,"oldContent":"    }"},{"type":"DELETE","lineNumber":300,"oldContent":"    // Category balance insight"},{"type":"DELETE","lineNumber":301,"oldContent":"    if (categories.length >= 3) {"},{"type":"DELETE","lineNumber":302,"oldContent":"        'text': '⚖️ Great balance! You\\'re working on ${categories.length} different life areas.',"},{"type":"DELETE","lineNumber":303,"oldContent":"      });"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"    // Weekly pattern insight"},{"type":"DELETE","lineNumber":306,"oldContent":"    if (weekendCompletions > 0.7) {"},{"type":"DELETE","lineNumber":307,"oldContent":"      insights.add({"},{"type":"DELETE","lineNumber":308,"oldContent":"        'text': '🎯 You\\'re excellent at maintaining habits on weekends!',"},{"type":"DELETE","lineNumber":309,"oldContent":"        'color': Colors.purple,"},{"type":"DELETE","lineNumber":310,"oldContent":"      });"},{"type":"DELETE","lineNumber":311,"oldContent":"    } else if (weekendCompletions < 0.3) {"},{"type":"DELETE","lineNumber":312,"oldContent":"        'text': '💡 Consider setting easier weekend goals to maintain momentum.',"},{"type":"DELETE","lineNumber":313,"oldContent":"      });"},{"type":"DELETE","lineNumber":314,"oldContent":""},{"type":"DELETE","lineNumber":315,"oldContent":"    return insights;"},{"type":"INSERT","lineNumber":292,"content":"    return GridView.count("},{"type":"INSERT","lineNumber":293,"content":"      crossAxisCount: 2,"},{"type":"INSERT","lineNumber":294,"content":"      shrinkWrap: true,"},{"type":"INSERT","lineNumber":295,"content":"      physics: const NeverScrollableScrollPhysics(),"},{"type":"INSERT","lineNumber":296,"content":"      mainAxisSpacing: 8,"},{"type":"INSERT","lineNumber":297,"content":"      crossAxisSpacing: 8,"},{"type":"INSERT","lineNumber":298,"content":"      childAspectRatio: 1.5,"},{"type":"INSERT","lineNumber":299,"content":"      children: ["},{"type":"INSERT","lineNumber":300,"content":"        _buildQuickStatCard('Total Habits', totalHabits.toString(), Icons.list_alt),"},{"type":"INSERT","lineNumber":301,"content":"        _buildQuickStatCard('Active Streaks', activeHabits.toString(), Icons.local_fire_department),"},{"type":"INSERT","lineNumber":302,"content":"        _buildQuickStatCard('Total Completions', totalCompletions.toString(), Icons.check_circle),"},{"type":"INSERT","lineNumber":303,"content":"        _buildQuickStatCard('Avg Streak', '${avgStreak.toStringAsFixed(1)} days', Icons.trending_up),"},{"type":"INSERT","lineNumber":304,"content":"      ],"},{"type":"INSERT","lineNumber":305,"content":"    );"},{"type":"DELETE","lineNumber":318,"oldContent":"  List<Map<String, dynamic>> _generateBadges(List<Habit> habits) {"},{"type":"DELETE","lineNumber":319,"oldContent":"    final badges = <Map<String, dynamic>>[];"},{"type":"DELETE","lineNumber":320,"oldContent":""},{"type":"INSERT","lineNumber":308,"content":"  Widget _buildQuickStatCard(String title, String value, IconData icon) {"},{"type":"INSERT","lineNumber":309,"content":"    return Card("},{"type":"INSERT","lineNumber":310,"content":"      child: Padding("},{"type":"INSERT","lineNumber":311,"content":"        padding: const EdgeInsets.all(12),"},{"type":"INSERT","lineNumber":312,"content":"        child: Column("},{"type":"INSERT","lineNumber":313,"content":"          mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":314,"content":"          children: ["},{"type":"INSERT","lineNumber":315,"content":"            Icon(icon, size: 24, color: Theme.of(context).primaryColor),"},{"type":"INSERT","lineNumber":316,"content":"            const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":317,"content":"            Text("},{"type":"INSERT","lineNumber":318,"content":"              value,"},{"type":"INSERT","lineNumber":319,"content":"              style: Theme.of(context).textTheme.headlineSmall?.copyWith("},{"type":"INSERT","lineNumber":320,"content":"                fontWeight: FontWeight.bold,"},{"type":"MODIFY","lineNumber":324,"content":"              title,","oldContent":"    badges.add({"},{"type":"DELETE","lineNumber":353,"oldContent":"      'label': 'Life Balance',"},{"type":"DELETE","lineNumber":354,"oldContent":"      'color': Colors.blue,"},{"type":"DELETE","lineNumber":355,"oldContent":"      'earned': habits.map((h) => h.category).toSet().length >= 3,"},{"type":"DELETE","lineNumber":356,"oldContent":"    });"},{"type":"DELETE","lineNumber":357,"oldContent":""},{"type":"DELETE","lineNumber":358,"oldContent":"    // Dedication badge"},{"type":"DELETE","lineNumber":359,"oldContent":"    badges.add({"},{"type":"INSERT","lineNumber":353,"content":"            Row("},{"type":"INSERT","lineNumber":354,"content":"              mainAxisAlignment: MainAxisAlignment.spaceAround,"},{"type":"INSERT","lineNumber":355,"content":"              children: ["},{"type":"INSERT","lineNumber":356,"content":"                if (health['steps'] != null)"},{"type":"INSERT","lineNumber":357,"content":"                  _buildStatItem('Steps', '${health['steps']}'),"},{"type":"INSERT","lineNumber":358,"content":"                if (health['exerciseMinutes'] != null)"},{"type":"INSERT","lineNumber":359,"content":"                  _buildStatItem('Exercise', '${health['exerciseMinutes']} min'),"},{"type":"INSERT","lineNumber":371,"content":"    final insights = <String>[];"},{"type":"DELETE","lineNumber":372,"oldContent":""},{"type":"DELETE","lineNumber":373,"oldContent":"    return badges;"},{"type":"DELETE","lineNumber":374,"oldContent":"  }"},{"type":"DELETE","lineNumber":375,"oldContent":""},{"type":"DELETE","lineNumber":376,"oldContent":"  List<Map<String, dynamic>> _generateRecommendations(List<Habit> habits) {"},{"type":"DELETE","lineNumber":377,"oldContent":"    final recommendations = <Map<String, dynamic>>[];"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":379,"oldContent":"    if (habits.length < 3) {"},{"type":"DELETE","lineNumber":380,"oldContent":"      recommendations.add({"},{"type":"DELETE","lineNumber":381,"oldContent":"        'icon': Icons.add_circle,"},{"type":"DELETE","lineNumber":382,"oldContent":"        'text': 'Consider adding 1-2 more habits for a balanced routine.',"},{"type":"DELETE","lineNumber":383,"oldContent":"      });"},{"type":"INSERT","lineNumber":373,"content":"    // Generate insights based on current data"},{"type":"INSERT","lineNumber":374,"content":"    final completionRates = habits.map((h) => h.completionRate).toList();"},{"type":"INSERT","lineNumber":375,"content":"    if (completionRates.isNotEmpty) {"},{"type":"INSERT","lineNumber":376,"content":"      final avgRate = completionRates.reduce((a, b) => a + b) / completionRates.length;"},{"type":"INSERT","lineNumber":377,"content":"      if (avgRate > 0.8) {"},{"type":"INSERT","lineNumber":378,"content":"        insights.add('🎯 You\\'re doing great! Your average completion rate is ${(avgRate * 100).toStringAsFixed(1)}%');"},{"type":"INSERT","lineNumber":379,"content":"      } else if (avgRate < 0.5) {"},{"type":"INSERT","lineNumber":380,"content":"        insights.add('💪 Focus on consistency. Your completion rate could improve.');"},{"type":"INSERT","lineNumber":381,"content":"      }"},{"type":"DELETE","lineNumber":386,"oldContent":"    final categories = habits.map((h) => h.category).toSet();"},{"type":"INSERT","lineNumber":384,"content":"    final bestHabit = habits.where((h) => h.completions.isNotEmpty)"},{"type":"INSERT","lineNumber":385,"content":"        .fold<Habit?>(null, (best, habit) =>"},{"type":"INSERT","lineNumber":386,"content":"          best == null || habit.currentStreak > best.currentStreak ? habit : best);"},{"type":"DELETE","lineNumber":398,"oldContent":"      h.completions.length < (DateTime.now().difference(h.createdAt).inDays * 0.3)).toList();"},{"type":"DELETE","lineNumber":399,"oldContent":"    if (lowPerformers.isNotEmpty) {"},{"type":"INSERT","lineNumber":398,"content":"            Text("},{"type":"INSERT","lineNumber":399,"content":"              'Recent Insights',"},{"type":"DELETE","lineNumber":403,"oldContent":"        'icon': Icons.tune,"},{"type":"DELETE","lineNumber":404,"oldContent":"        'text': 'Consider simplifying \"${lowPerformers.first.name}\" to build momentum.',"},{"type":"INSERT","lineNumber":403,"content":"            if (insights.isEmpty)"},{"type":"INSERT","lineNumber":404,"content":"              const Text('Keep tracking habits to unlock insights!')"},{"type":"MODIFY","lineNumber":406,"content":"              ...insights.map((insight) => Padding(","oldContent":"      });"},{"type":"INSERT","lineNumber":416,"content":"  Widget _buildStatItem(String label, String value) {"},{"type":"INSERT","lineNumber":417,"content":"    return Column("},{"type":"INSERT","lineNumber":418,"content":"      children: ["},{"type":"INSERT","lineNumber":419,"content":"        Text("},{"type":"INSERT","lineNumber":420,"content":"          value,"},{"type":"INSERT","lineNumber":421,"content":"          style: Theme.of(context).textTheme.headlineSmall?.copyWith("},{"type":"INSERT","lineNumber":422,"content":"            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":423,"content":"          ),"},{"type":"INSERT","lineNumber":424,"content":"        ),"},{"type":"INSERT","lineNumber":425,"content":"        Text("},{"type":"INSERT","lineNumber":426,"content":"          label,"},{"type":"INSERT","lineNumber":427,"content":"          style: Theme.of(context).textTheme.bodySmall,"},{"type":"INSERT","lineNumber":428,"content":"        ),"},{"type":"INSERT","lineNumber":429,"content":"      ],"},{"type":"INSERT","lineNumber":430,"content":"    );"},{"type":"DELETE","lineNumber":418,"oldContent":"  List<Map<String, dynamic>> _generateTrendAnalysis(List<Habit> habits) {"},{"type":"DELETE","lineNumber":419,"oldContent":"    final analysis = <Map<String, dynamic>>[];"},{"type":"DELETE","lineNumber":420,"oldContent":""},{"type":"DELETE","lineNumber":421,"oldContent":"    for (final habit in habits.take(3)) {"},{"type":"DELETE","lineNumber":422,"oldContent":"      final recentRate = _getRecentCompletionRate(habit);"},{"type":"DELETE","lineNumber":423,"oldContent":"      final isImproving = recentRate > 0.5;"},{"type":"DELETE","lineNumber":424,"oldContent":""},{"type":"DELETE","lineNumber":425,"oldContent":"        'text': '${habit.name}: ${isImproving ? \"Improving\" : \"Needs attention\"} (${(recentRate * 100).toInt()}% this week)',"},{"type":"DELETE","lineNumber":426,"oldContent":"      });"},{"type":"INSERT","lineNumber":433,"content":"  Widget _buildTrendsTab() {"},{"type":"INSERT","lineNumber":434,"content":"    if (_trendAnalysis == null) {"},{"type":"INSERT","lineNumber":435,"content":"      return const Center("},{"type":"INSERT","lineNumber":436,"content":"        child: CircularProgressIndicator(),"},{"type":"INSERT","lineNumber":437,"content":"      );"},{"type":"DELETE","lineNumber":429,"oldContent":"    return analysis;"},{"type":"DELETE","lineNumber":430,"oldContent":"  }"},{"type":"DELETE","lineNumber":431,"oldContent":"  }"},{"type":"INSERT","lineNumber":440,"content":"    final analysis = _trendAnalysis!;"},{"type":"DELETE","lineNumber":433,"oldContent":"  // Helper methods"},{"type":"DELETE","lineNumber":434,"oldContent":"  int _calculateStreakDays(Habit habit) {"},{"type":"DELETE","lineNumber":435,"oldContent":"    if (habit.completions.isEmpty) return 0;"},{"type":"DELETE","lineNumber":436,"oldContent":""},{"type":"DELETE","lineNumber":437,"oldContent":"    final sortedCompletions = habit.completions.toList()"},{"type":"DELETE","lineNumber":438,"oldContent":"      ..sort((a, b) => b.compareTo(a));"},{"type":"DELETE","lineNumber":439,"oldContent":""},{"type":"DELETE","lineNumber":440,"oldContent":"    int streak = 0;"},{"type":"DELETE","lineNumber":441,"oldContent":"    final today = DateTime.now();"},{"type":"DELETE","lineNumber":442,"oldContent":""},{"type":"DELETE","lineNumber":443,"oldContent":"    for (int i = 0; i < 30; i++) {"},{"type":"DELETE","lineNumber":444,"oldContent":"      final checkDate = today.subtract(Duration(days: i));"},{"type":"DELETE","lineNumber":445,"oldContent":"      final hasCompletion = sortedCompletions.any((completion) {"},{"type":"DELETE","lineNumber":446,"oldContent":"        final completionDate = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":447,"oldContent":"        final checkDateOnly = DateTime(checkDate.year, checkDate.month, checkDate.day);"},{"type":"DELETE","lineNumber":448,"oldContent":"        return completionDate == checkDateOnly;"},{"type":"DELETE","lineNumber":449,"oldContent":"      });"},{"type":"DELETE","lineNumber":450,"oldContent":""},{"type":"DELETE","lineNumber":451,"oldContent":"      if (hasCompletion) {"},{"type":"DELETE","lineNumber":452,"oldContent":"        streak++;"},{"type":"DELETE","lineNumber":453,"oldContent":"      } else if (i > 0) {"},{"type":"DELETE","lineNumber":454,"oldContent":"        break;"},{"type":"INSERT","lineNumber":442,"content":"    if (analysis['hasEnoughData'] != true) {"},{"type":"INSERT","lineNumber":443,"content":"      return Center("},{"type":"INSERT","lineNumber":444,"content":"        child: Padding("},{"type":"INSERT","lineNumber":445,"content":"          padding: const EdgeInsets.all(24),"},{"type":"INSERT","lineNumber":446,"content":"          child: Column("},{"type":"INSERT","lineNumber":447,"content":"            mainAxisAlignment: MainAxisAlignment.center,"},{"type":"INSERT","lineNumber":448,"content":"            children: ["},{"type":"INSERT","lineNumber":449,"content":"              const Icon(Icons.trending_up, size: 64, color: Colors.grey),"},{"type":"INSERT","lineNumber":450,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":451,"content":"              Text("},{"type":"INSERT","lineNumber":452,"content":"                analysis['message'] ?? 'Building trend data...',"},{"type":"INSERT","lineNumber":453,"content":"                style: const TextStyle(fontSize: 16),"},{"type":"INSERT","lineNumber":454,"content":"                textAlign: TextAlign.center,"},{"type":"INSERT","lineNumber":455,"content":"              ),"},{"type":"INSERT","lineNumber":456,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":457,"content":"              if (analysis['daysUntilTrends'] != null)"},{"type":"INSERT","lineNumber":458,"content":"                Text("},{"type":"INSERT","lineNumber":459,"content":"                  '${analysis['daysUntilTrends']} more days until trends are available',"},{"type":"INSERT","lineNumber":460,"content":"                  style: Theme.of(context).textTheme.bodySmall,"},{"type":"INSERT","lineNumber":461,"content":"                ),"},{"type":"INSERT","lineNumber":462,"content":"            ],"},{"type":"INSERT","lineNumber":463,"content":"          ),"},{"type":"INSERT","lineNumber":464,"content":"        ),"},{"type":"INSERT","lineNumber":465,"content":"      );"},{"type":"DELETE","lineNumber":456,"oldContent":"    return streak;"},{"type":"DELETE","lineNumber":457,"oldContent":"  }"},{"type":"DELETE","lineNumber":459,"oldContent":"  double _getWeekendCompletionRate(List<Habit> habits) {"},{"type":"DELETE","lineNumber":460,"oldContent":"    int weekendCompletions = 0;"},{"type":"DELETE","lineNumber":461,"oldContent":"    int totalWeekends = 0;"},{"type":"INSERT","lineNumber":468,"content":"    return SingleChildScrollView("},{"type":"INSERT","lineNumber":469,"content":"      padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":470,"content":"      child: Column("},{"type":"INSERT","lineNumber":471,"content":"        crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":472,"content":"        children: ["},{"type":"INSERT","lineNumber":473,"content":"          // Overall Trends Card"},{"type":"INSERT","lineNumber":474,"content":"          _buildOverallTrendsCard(analysis['overallTrends']),"},{"type":"INSERT","lineNumber":475,"content":"          const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":463,"oldContent":"    for (final habit in habits) {"},{"type":"DELETE","lineNumber":464,"oldContent":"      for (final completion in habit.completions) {"},{"type":"DELETE","lineNumber":465,"oldContent":"        if (completion.weekday == DateTime.saturday || completion.weekday == DateTime.sunday) {"},{"type":"DELETE","lineNumber":466,"oldContent":"          weekendCompletions++;"},{"type":"DELETE","lineNumber":467,"oldContent":"        }"},{"type":"DELETE","lineNumber":468,"oldContent":"      }"},{"type":"INSERT","lineNumber":477,"content":"          // Weekly Patterns Card"},{"type":"INSERT","lineNumber":478,"content":"          _buildWeeklyPatternsCard(analysis['weeklyPatterns']),"},{"type":"INSERT","lineNumber":479,"content":"          const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":470,"oldContent":"      final weeksSinceCreation = DateTime.now().difference(habit.createdAt).inDays ~/ 7;"},{"type":"DELETE","lineNumber":471,"oldContent":"    }"},{"type":"DELETE","lineNumber":472,"oldContent":"    return totalWeekends > 0 ? weekendCompletions / totalWeekends : 0.0;"},{"type":"DELETE","lineNumber":473,"oldContent":"  }"},{"type":"INSERT","lineNumber":481,"content":"          // Individual Habit Trends"},{"type":"INSERT","lineNumber":482,"content":"          if (analysis['habitTrends'] != null)"},{"type":"INSERT","lineNumber":483,"content":"            _buildIndividualTrendsCard(analysis['habitTrends']),"},{"type":"DELETE","lineNumber":475,"oldContent":"  double _getRecentCompletionRate(Habit habit) {"},{"type":"DELETE","lineNumber":476,"oldContent":"    final lastWeek = DateTime.now().subtract(const Duration(days: 7));"},{"type":"DELETE","lineNumber":477,"oldContent":"    final recentCompletions = habit.completions.where((c) => c.isAfter(lastWeek)).length;"},{"type":"DELETE","lineNumber":478,"oldContent":"    return recentCompletions / 7.0;"},{"type":"INSERT","lineNumber":485,"content":"          // Insights and Recommendations"},{"type":"INSERT","lineNumber":486,"content":"          if (analysis['insights'] != null || analysis['recommendations'] != null)"},{"type":"INSERT","lineNumber":487,"content":"            _buildTrendInsightsCard(analysis),"},{"type":"INSERT","lineNumber":488,"content":"        ],"},{"type":"INSERT","lineNumber":489,"content":"      ),"},{"type":"INSERT","lineNumber":490,"content":"    );"},{"type":"DELETE","lineNumber":480,"oldContent":"}"},{"type":"DELETE","lineNumber":482,"oldContent":"class _BadgeWidget extends StatelessWidget {"},{"type":"DELETE","lineNumber":483,"oldContent":"  final IconData icon;"},{"type":"DELETE","lineNumber":484,"oldContent":"  final String label;"},{"type":"DELETE","lineNumber":485,"oldContent":"  final Color color;"},{"type":"DELETE","lineNumber":486,"oldContent":"  final bool isEarned;"},{"type":"DELETE","lineNumber":487,"oldContent":""},{"type":"DELETE","lineNumber":488,"oldContent":"  const _BadgeWidget({"},{"type":"DELETE","lineNumber":489,"oldContent":"    required this.icon,"},{"type":"DELETE","lineNumber":490,"oldContent":"    required this.label,"},{"type":"DELETE","lineNumber":491,"oldContent":"  }"},{"type":"DELETE","lineNumber":492,"oldContent":""},{"type":"DELETE","lineNumber":500,"oldContent":"    return Column("},{"type":"DELETE","lineNumber":501,"oldContent":"      children: ["},{"type":"DELETE","lineNumber":502,"oldContent":"        Container("},{"type":"DELETE","lineNumber":503,"oldContent":"          width: 60,"},{"type":"DELETE","lineNumber":504,"oldContent":"          height: 60,"},{"type":"DELETE","lineNumber":505,"oldContent":"          decoration: BoxDecoration("},{"type":"INSERT","lineNumber":500,"content":"            Text("},{"type":"INSERT","lineNumber":501,"content":"              'Overall Trend',"},{"type":"INSERT","lineNumber":502,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":503,"content":"            ),"},{"type":"INSERT","lineNumber":504,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":505,"content":"            Row("},{"type":"DELETE","lineNumber":507,"oldContent":"            color: isEarned ? color : Colors.grey.shade300,"},{"type":"DELETE","lineNumber":508,"oldContent":"            shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":507,"content":"                Icon("},{"type":"INSERT","lineNumber":508,"content":"                  _getTrendIcon(overallTrends['direction']),"},{"type":"DELETE","lineNumber":511,"oldContent":"              BoxShadow("},{"type":"DELETE","lineNumber":512,"oldContent":"                color: color.withOpacity(0.3),"},{"type":"DELETE","lineNumber":513,"oldContent":"                blurRadius: 8,"},{"type":"INSERT","lineNumber":511,"content":"                const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":512,"content":"                Expanded("},{"type":"INSERT","lineNumber":513,"content":"                  child: Text("},{"type":"DELETE","lineNumber":539,"oldContent":"          style: TextStyle("},{"type":"DELETE","lineNumber":540,"oldContent":"            fontSize: 12,"},{"type":"DELETE","lineNumber":541,"oldContent":"            fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":542,"oldContent":"            color: isEarned ? Colors.black87 : Colors.grey.shade600,"},{"type":"DELETE","lineNumber":543,"oldContent":"          ),"},{"type":"INSERT","lineNumber":539,"content":"            Text("},{"type":"INSERT","lineNumber":540,"content":"              'Weekly Patterns',"},{"type":"INSERT","lineNumber":541,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":542,"content":"            ),"},{"type":"INSERT","lineNumber":543,"content":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":547,"oldContent":"      ],"},{"type":"DELETE","lineNumber":548,"oldContent":"    );"},{"type":"DELETE","lineNumber":549,"oldContent":"  }"},{"type":"DELETE","lineNumber":550,"oldContent":"}"},{"type":"DELETE","lineNumber":551,"oldContent":""},{"type":"DELETE","lineNumber":552,"oldContent":""},{"type":"INSERT","lineNumber":547,"content":"                Column("},{"type":"INSERT","lineNumber":548,"content":"                  children: ["},{"type":"INSERT","lineNumber":549,"content":"                    const Text('Best Day'),"},{"type":"INSERT","lineNumber":550,"content":"                    Text("},{"type":"INSERT","lineNumber":551,"content":"                      weeklyPatterns['bestDay'] ?? 'N/A',"},{"type":"INSERT","lineNumber":552,"content":"                      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.green),"},{"type":"DELETE","lineNumber":556,"oldContent":"    }"},{"type":"DELETE","lineNumber":557,"oldContent":"        return Icons.help;"},{"type":"DELETE","lineNumber":558,"oldContent":"      default:"},{"type":"DELETE","lineNumber":559,"oldContent":"        return Icons.sentiment_dissatisfied;"},{"type":"DELETE","lineNumber":560,"oldContent":"      case 'hard':"},{"type":"INSERT","lineNumber":556,"content":"                Column("},{"type":"INSERT","lineNumber":557,"content":"                  children: ["},{"type":"INSERT","lineNumber":558,"content":"                    const Text('Worst Day'),"},{"type":"INSERT","lineNumber":559,"content":"                    Text("},{"type":"INSERT","lineNumber":560,"content":"                      weeklyPatterns['worstDay'] ?? 'N/A',"},{"type":"DELETE","lineNumber":573,"oldContent":"        return Icons.sentiment_very_satisfied;"},{"type":"DELETE","lineNumber":574,"oldContent":"      case 'very easy':"},{"type":"DELETE","lineNumber":575,"oldContent":"    switch (difficulty.toLowerCase()) {"},{"type":"DELETE","lineNumber":576,"oldContent":"  IconData _getDifficultyIcon(String difficulty) {"},{"type":"DELETE","lineNumber":577,"oldContent":""},{"type":"DELETE","lineNumber":578,"oldContent":"    }"},{"type":"DELETE","lineNumber":579,"oldContent":"      default:"},{"type":"DELETE","lineNumber":580,"oldContent":"      case 'personal development':"},{"type":"DELETE","lineNumber":581,"oldContent":"      case 'social':"},{"type":"DELETE","lineNumber":582,"oldContent":"      case 'learning':"},{"type":"DELETE","lineNumber":583,"oldContent":"      case 'mental health':"},{"type":"DELETE","lineNumber":584,"oldContent":"      case 'fitness':"},{"type":"DELETE","lineNumber":585,"oldContent":"      case 'health':"},{"type":"DELETE","lineNumber":586,"oldContent":"  IconData _getCategoryIcon(String category) {"},{"type":"DELETE","lineNumber":587,"oldContent":"  }"},{"type":"DELETE","lineNumber":588,"oldContent":"        return Colors.grey;"},{"type":"INSERT","lineNumber":573,"content":"  Widget _buildIndividualTrendsCard(Map<String, dynamic> habitTrends) {"},{"type":"INSERT","lineNumber":574,"content":"    return Card("},{"type":"INSERT","lineNumber":575,"content":"      child: Padding("},{"type":"INSERT","lineNumber":576,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":577,"content":"        child: Column("},{"type":"INSERT","lineNumber":578,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":579,"content":"          children: ["},{"type":"INSERT","lineNumber":580,"content":"            Text("},{"type":"INSERT","lineNumber":581,"content":"              'Individual Habit Trends',"},{"type":"INSERT","lineNumber":582,"content":"              style: Theme.of(context).textTheme.titleMedium,"},{"type":"INSERT","lineNumber":583,"content":"            ),"},{"type":"INSERT","lineNumber":584,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":585,"content":"            ...habitTrends.entries.map((entry) {"},{"type":"INSERT","lineNumber":586,"content":"              final trendData = entry.value as Map<String, dynamic>;"},{"type":"INSERT","lineNumber":587,"content":"              return ListTile("},{"type":"INSERT","lineNumber":588,"content":"                leading: Icon("},{"type":"DELETE","lineNumber":963,"oldContent":"  }"},{"type":"DELETE","lineNumber":964,"oldContent":"    }"},{"type":"DELETE","lineNumber":965,"oldContent":"        return Colors.grey;"},{"type":"DELETE","lineNumber":966,"oldContent":"      default:"},{"type":"DELETE","lineNumber":967,"oldContent":"        return Colors.orange;"},{"type":"DELETE","lineNumber":968,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":969,"oldContent":"      case 'stable':"},{"type":"DELETE","lineNumber":970,"oldContent":"        return Colors.red;"},{"type":"DELETE","lineNumber":971,"oldContent":"      case 'declining':"},{"type":"DELETE","lineNumber":972,"oldContent":"      case 'down':"},{"type":"INSERT","lineNumber":963,"content":"      case 'mental health':"},{"type":"INSERT","lineNumber":964,"content":"        return Colors.purple;"},{"type":"INSERT","lineNumber":965,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":966,"content":"        return Colors.blue;"},{"type":"INSERT","lineNumber":967,"content":"      case 'social':"},{"type":"DELETE","lineNumber":974,"oldContent":"      case 'improving':"},{"type":"DELETE","lineNumber":975,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":976,"oldContent":"    switch (direction?.toLowerCase()) {"},{"type":"DELETE","lineNumber":977,"oldContent":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":978,"oldContent":""},{"type":"DELETE","lineNumber":979,"oldContent":"  }"},{"type":"DELETE","lineNumber":980,"oldContent":"    }"},{"type":"DELETE","lineNumber":981,"oldContent":"        return Icons.help;"},{"type":"INSERT","lineNumber":969,"content":"      case 'personal development':"},{"type":"INSERT","lineNumber":970,"content":"        return Colors.indigo;"},{"type":"DELETE","lineNumber":983,"oldContent":"        return Icons.trending_flat;"},{"type":"DELETE","lineNumber":984,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":985,"oldContent":"      case 'stable':"},{"type":"DELETE","lineNumber":986,"oldContent":"        return Icons.trending_down;"},{"type":"DELETE","lineNumber":987,"oldContent":"      case 'declining':"},{"type":"DELETE","lineNumber":988,"oldContent":"      case 'down':"},{"type":"DELETE","lineNumber":989,"oldContent":"        return Icons.trending_up;"},{"type":"DELETE","lineNumber":990,"oldContent":"      case 'improving':"},{"type":"DELETE","lineNumber":991,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":992,"oldContent":"    switch (direction?.toLowerCase()) {"},{"type":"DELETE","lineNumber":993,"oldContent":"  IconData _getTrendIcon(String direction) {"},{"type":"DELETE","lineNumber":994,"oldContent":""},{"type":"DELETE","lineNumber":995,"oldContent":""},{"type":"DELETE","lineNumber":996,"oldContent":"}"},{"type":"DELETE","lineNumber":997,"oldContent":"  }"},{"type":"DELETE","lineNumber":998,"oldContent":"    }"},{"type":"DELETE","lineNumber":1000,"oldContent":"      default:"},{"type":"DELETE","lineNumber":1001,"oldContent":"        return Colors.orange;"},{"type":"DELETE","lineNumber":1002,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":1003,"oldContent":"      case 'stable':"},{"type":"DELETE","lineNumber":1004,"oldContent":"        return Colors.red;"},{"type":"DELETE","lineNumber":1005,"oldContent":"      case 'declining':"},{"type":"DELETE","lineNumber":1006,"oldContent":"      case 'down':"},{"type":"DELETE","lineNumber":1007,"oldContent":"        return Colors.green;"},{"type":"DELETE","lineNumber":1008,"oldContent":"      case 'improving':"},{"type":"DELETE","lineNumber":1009,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":1010,"oldContent":"  Color _getTrendColor(String direction) {"},{"type":"DELETE","lineNumber":1011,"oldContent":""},{"type":"INSERT","lineNumber":973,"content":"    }"},{"type":"INSERT","lineNumber":975,"content":""},{"type":"INSERT","lineNumber":976,"content":"  IconData _getCategoryIcon(String category) {"},{"type":"INSERT","lineNumber":977,"content":"    switch (category.toLowerCase()) {"},{"type":"INSERT","lineNumber":978,"content":"      case 'health':"},{"type":"INSERT","lineNumber":979,"content":"        return Icons.favorite;"},{"type":"INSERT","lineNumber":980,"content":"      case 'fitness':"},{"type":"INSERT","lineNumber":981,"content":"        return Icons.fitness_center;"},{"type":"INSERT","lineNumber":982,"content":"      case 'mental health':"},{"type":"INSERT","lineNumber":983,"content":"        return Icons.psychology;"},{"type":"INSERT","lineNumber":984,"content":"      case 'learning':"},{"type":"INSERT","lineNumber":985,"content":"        return Icons.school;"},{"type":"INSERT","lineNumber":986,"content":"      case 'social':"},{"type":"INSERT","lineNumber":987,"content":"        return Icons.people;"},{"type":"INSERT","lineNumber":988,"content":"      case 'personal development':"},{"type":"INSERT","lineNumber":989,"content":"        return Icons.self_improvement;"},{"type":"INSERT","lineNumber":990,"content":"      default:"},{"type":"INSERT","lineNumber":991,"content":"        return Icons.category;"},{"type":"DELETE","lineNumber":1014,"oldContent":"        return Icons.help;"},{"type":"INSERT","lineNumber":993,"content":"  }"},{"type":"INSERT","lineNumber":994,"content":""},{"type":"INSERT","lineNumber":995,"content":"  IconData _getDifficultyIcon(String difficulty) {"},{"type":"INSERT","lineNumber":996,"content":"    switch (difficulty.toLowerCase()) {"},{"type":"INSERT","lineNumber":997,"content":"      case 'very easy':"},{"type":"INSERT","lineNumber":998,"content":"        return Icons.sentiment_very_satisfied;"},{"type":"INSERT","lineNumber":999,"content":"      case 'easy':"},{"type":"INSERT","lineNumber":1000,"content":"        return Icons.sentiment_satisfied;"},{"type":"INSERT","lineNumber":1001,"content":"      case 'medium':"},{"type":"INSERT","lineNumber":1002,"content":"        return Icons.sentiment_neutral;"},{"type":"INSERT","lineNumber":1003,"content":"      case 'hard':"},{"type":"INSERT","lineNumber":1004,"content":"        return Icons.sentiment_dissatisfied;"},{"type":"DELETE","lineNumber":1016,"oldContent":"        return Icons.trending_flat;"},{"type":"DELETE","lineNumber":1017,"oldContent":"      case 'steady':"},{"type":"DELETE","lineNumber":1018,"oldContent":"      case 'down':"},{"type":"DELETE","lineNumber":1019,"oldContent":"        return Colors.green;"},{"type":"DELETE","lineNumber":1020,"oldContent":"      case 'up':"},{"type":"DELETE","lineNumber":1021,"oldContent":"  Color _getTrendColor(String direction) {"},{"type":"INSERT","lineNumber":1006,"content":"        return Icons.help;"},{"type":"INSERT","lineNumber":1007,"content":"    }"},{"type":"INSERT","lineNumber":1008,"content":"  }"},{"type":"INSERT","lineNumber":1010,"content":"  IconData _getTrendIcon(String direction) {"},{"type":"INSERT","lineNumber":1011,"content":"    switch (direction.toLowerCase()) {"},{"type":"INSERT","lineNumber":1012,"content":"      case 'up':"},{"type":"INSERT","lineNumber":1013,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":1014,"content":"        return Icons.trending_up;"},{"type":"INSERT","lineNumber":1015,"content":"      case 'down':"},{"type":"INSERT","lineNumber":1016,"content":"      case 'declining':"},{"type":"INSERT","lineNumber":1017,"content":"        return Icons.trending_down;"},{"type":"INSERT","lineNumber":1018,"content":"      case 'stable':"},{"type":"INSERT","lineNumber":1019,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":1020,"content":"        return Icons.trending_flat;"},{"type":"INSERT","lineNumber":1021,"content":"      default:"},{"type":"INSERT","lineNumber":1022,"content":"        return Icons.help;"},{"type":"MODIFY","lineNumber":1027,"content":"    switch (direction.toLowerCase()) {","oldContent":"  Color _getTrendColor(String direction) {"},{"type":"INSERT","lineNumber":1028,"content":"      case 'up':"},{"type":"INSERT","lineNumber":1029,"content":"      case 'improving':"},{"type":"INSERT","lineNumber":1030,"content":"        return Colors.green;"},{"type":"INSERT","lineNumber":1031,"content":"      case 'down':"},{"type":"INSERT","lineNumber":1032,"content":"      case 'declining':"},{"type":"INSERT","lineNumber":1033,"content":"        return Colors.red;"},{"type":"INSERT","lineNumber":1034,"content":"      case 'stable':"},{"type":"INSERT","lineNumber":1035,"content":"      case 'steady':"},{"type":"INSERT","lineNumber":1036,"content":"        return Colors.orange;"},{"type":"INSERT","lineNumber":1037,"content":"      default:"},{"type":"INSERT","lineNumber":1038,"content":"        return Colors.grey;"},{"type":"INSERT","lineNumber":1039,"content":"    }"},{"type":"INSERT","lineNumber":1040,"content":"  }"},{"type":"INSERT","lineNumber":1041,"content":"}"},{"type":"INSERT","lineNumber":1042,"content":""}]}]},"H:/New/HabitV8/lib/ui/screens/create_habit_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/create_habit_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\n\nclass CreateHabitScreen extends ConsumerStatefulWidget {\n  const CreateHabitScreen({super.key});\n\n  @override\n  ConsumerState<CreateHabitScreen> createState() => _CreateHabitScreenState();\n}\n\nclass _CreateHabitScreenState extends ConsumerState<CreateHabitScreen> {\n  final _formKey = GlobalKey<FormState>();\n  final _nameController = TextEditingController();\n  final _descriptionController = TextEditingController();\n\n  HabitFrequency _selectedFrequency = HabitFrequency.daily;\n  String _selectedCategory = 'Health';\n  Color _selectedColor = Colors.blue;\n  bool _notificationsEnabled = true;\n  TimeOfDay? _notificationTime;\n  final List<int> _selectedWeekdays = [];\n  final List<int> _selectedMonthDays = [];\n  int _targetCount = 1;\n\n  final List<String> _categories = [\n    'Health',\n    'Fitness',\n    'Productivity',\n    'Learning',\n    'Personal',\n    'Social',\n    'Finance',\n    'Mindfulness',\n  ];\n\n  final List<Color> _colors = [\n    Colors.blue,\n    Colors.green,\n    Colors.orange,\n    Colors.purple,\n    Colors.red,\n    Colors.teal,\n    Colors.indigo,\n    Colors.pink,\n    Colors.amber,\n    Colors.cyan,\n  ];\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _descriptionController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Create Habit'),\n        actions: [\n          TextButton(\n            onPressed: _saveHabit,\n            child: const Text('Save'),\n          ),\n        ],\n      ),\n      body: Form(\n        key: _formKey,\n        child: ListView(\n          padding: const EdgeInsets.all(16),\n          children: [\n            _buildBasicInfoSection(),\n            const SizedBox(height: 24),\n            _buildFrequencySection(),\n            const SizedBox(height: 24),\n            _buildCustomizationSection(),\n            const SizedBox(height: 24),\n            _buildNotificationSection(),\n            const SizedBox(height: 32),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildBasicInfoSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Basic Information',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _nameController,\n              decoration: const InputDecoration(\n                labelText: 'Habit Name',\n                hintText: 'e.g., Drink 8 glasses of water',\n                border: OutlineInputBorder(),\n              ),\n              validator: (value) {\n                if (value == null || value.trim().isEmpty) {\n                  return 'Please enter a habit name';\n                }\n                return null;\n              },\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _descriptionController,\n              decoration: const InputDecoration(\n                labelText: 'Description (Optional)',\n                hintText: 'Add more details about your habit',\n                border: OutlineInputBorder(),\n              ),\n              maxLines: 3,\n            ),\n            const SizedBox(height: 16),\n            DropdownButtonFormField<String>(\n              value: _selectedCategory,\n              decoration: const InputDecoration(\n                labelText: 'Category',\n                border: OutlineInputBorder(),\n              ),\n              items: _categories.map((category) {\n                return DropdownMenuItem(\n                  value: category,\n                  child: Text(category),\n                );\n              }).toList(),\n              onChanged: (value) {\n                setState(() {\n                  _selectedCategory = value!;\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildFrequencySection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Frequency',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: HabitFrequency.values.map((frequency) {\n                return ChoiceChip(\n                  label: Text(_getFrequencyDisplayName(frequency)),\n                  selected: _selectedFrequency == frequency,\n                  onSelected: (selected) {\n                    if (selected) {\n                      setState(() {\n                        _selectedFrequency = frequency;\n                        _selectedWeekdays.clear();\n                        _selectedMonthDays.clear();\n                      });\n                    }\n                  },\n                );\n              }).toList(),\n            ),\n            if (_selectedFrequency == HabitFrequency.weekly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select days of the week:',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w500,\n                    ),\n              ),\n              const SizedBox(height: 8),\n              _buildWeekdaySelector(),\n            ],\n            if (_selectedFrequency == HabitFrequency.monthly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select days of the month:',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w500,\n                    ),\n              ),\n              const SizedBox(height: 8),\n              _buildMonthDaySelector(),\n            ],\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Text(\n                  'Target count per ${_getFrequencyDisplayName(_selectedFrequency).toLowerCase()}:',\n                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                        fontWeight: FontWeight.w500,\n                      ),\n                ),\n                const SizedBox(width: 16),\n                SizedBox(\n                  width: 80,\n                  child: TextFormField(\n                    initialValue: _targetCount.toString(),\n                    decoration: const InputDecoration(\n                      border: OutlineInputBorder(),\n                      contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),\n                    ),\n                    keyboardType: TextInputType.number,\n                    onChanged: (value) {\n                      final count = int.tryParse(value);\n                      if (count != null && count > 0) {\n                        _targetCount = count;\n                      }\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildWeekdaySelector() {\n    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    return Wrap(\n      spacing: 8,\n      runSpacing: 8,\n      children: List.generate(7, (index) {\n        final dayNumber = index + 1;\n        return FilterChip(\n          label: Text(weekdays[index]),\n          selected: _selectedWeekdays.contains(dayNumber),\n          onSelected: (selected) {\n            setState(() {\n              if (selected) {\n                _selectedWeekdays.add(dayNumber);\n              } else {\n                _selectedWeekdays.remove(dayNumber);\n              }\n            });\n          },\n        );\n      }),\n    );\n  }\n\n  Widget _buildMonthDaySelector() {\n    return Wrap(\n      spacing: 8,\n      runSpacing: 8,\n      children: List.generate(31, (index) {\n        final dayNumber = index + 1;\n        return FilterChip(\n          label: Text(dayNumber.toString()),\n          selected: _selectedMonthDays.contains(dayNumber),\n          onSelected: (selected) {\n            setState(() {\n              if (selected) {\n                _selectedMonthDays.add(dayNumber);\n              } else {\n                _selectedMonthDays.remove(dayNumber);\n              }\n            });\n          },\n        );\n      }),\n    );\n  }\n\n  Widget _buildCustomizationSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Customization',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            Text(\n              'Choose a color:',\n              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                    fontWeight: FontWeight.w500,\n                  ),\n            ),\n            const SizedBox(height: 8),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: _colors.map((color) {\n                return GestureDetector(\n                  onTap: () {\n                    setState(() {\n                      _selectedColor = color;\n                    });\n                  },\n                  child: Container(\n                    width: 40,\n                    height: 40,\n                    decoration: BoxDecoration(\n                      color: color,\n                      shape: BoxShape.circle,\n                      border: _selectedColor == color\n                          ? Border.all(color: Colors.black, width: 3)\n                          : null,\n                    ),\n                    child: _selectedColor == color\n                        ? const Icon(Icons.check, color: Colors.white)\n                        : null,\n                  ),\n                );\n              }).toList(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildNotificationSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Notifications',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            SwitchListTile(\n              title: const Text('Enable Notifications'),\n              subtitle: const Text('Get reminded to complete your habit'),\n              value: _notificationsEnabled,\n              onChanged: (value) {\n                setState(() {\n                  _notificationsEnabled = value;\n                  if (!value) {\n                    _notificationTime = null;\n                  }\n                });\n              },\n            ),\n            if (_notificationsEnabled) ...[\n              const SizedBox(height: 8),\n              ListTile(\n                title: const Text('Notification Time'),\n                subtitle: Text(\n                  _notificationTime != null\n                      ? _notificationTime!.format(context)\n                      : 'Not set',\n                ),\n                trailing: const Icon(Icons.access_time),\n                onTap: _selectNotificationTime,\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  String _getFrequencyDisplayName(HabitFrequency frequency) {\n    switch (frequency) {\n      case HabitFrequency.hourly:\n        return 'Hourly';\n      case HabitFrequency.daily:\n        return 'Daily';\n      case HabitFrequency.weekly:\n        return 'Weekly';\n      case HabitFrequency.monthly:\n        return 'Monthly';\n      case HabitFrequency.yearly:\n        return 'Yearly';\n    }\n  }\n\n  Future<void> _selectNotificationTime() async {\n    final TimeOfDay? picked = await showTimePicker(\n      context: context,\n      initialTime: _notificationTime ?? TimeOfDay.now(),\n    );\n    if (picked != null) {\n      setState(() {\n        _notificationTime = picked;\n      });\n    }\n  }\n\n  Future<void> _saveHabit() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    // Validate frequency-specific requirements\n    if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for weekly habits'),\n        ),\n      );\n      return;\n    }\n\n    if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for monthly habits'),\n        ),\n      );\n      return;\n    }\n\n    try {\n      final habitServiceAsync = ref.read(habitServiceProvider);\n\n      habitServiceAsync.when(\n        data: (habitService) async {\n          final habit = Habit.create(\n            name: _nameController.text.trim(),\n            description: _descriptionController.text.trim().isEmpty\n                ? null\n                : _descriptionController.text.trim(),\n            category: _selectedCategory,\n            colorValue: _selectedColor.value,\n            frequency: _selectedFrequency,\n            targetCount: _targetCount,\n            notificationsEnabled: _notificationsEnabled,\n            notificationTime: _notificationTime != null\n                ? DateTime(2024, 1, 1, _notificationTime!.hour, _notificationTime!.minute)\n                : null,\n            weeklySchedule: _selectedWeekdays,\n            monthlySchedule: _selectedMonthDays,\n          );\n\n          await habitService.addHabit(habit);\n\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text('Habit created successfully!'),\n                backgroundColor: Colors.green,\n              ),\n            );\n            context.pop();\n          }\n        },\n        loading: () {\n          // Show loading indicator\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('Loading...')),\n            );\n          }\n        },\n        error: (error, stack) {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text('Error creating habit: $error'),\n                backgroundColor: Colors.red,\n              ),\n            );\n          }\n        },\n      );\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Error creating habit: $e'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n}\n","baseTimestamp":1754379836953,"deltas":[{"timestamp":1754380198159,"changes":[{"type":"INSERT","lineNumber":5,"content":"import '../../services/notification_service.dart';"}]},{"timestamp":1754380213001,"changes":[{"type":"INSERT","lineNumber":465,"content":"          // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":466,"content":"          if (_notificationsEnabled && _notificationTime != null) {"},{"type":"INSERT","lineNumber":467,"content":"            await _scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":468,"content":"          }"},{"type":"INSERT","lineNumber":469,"content":""},{"type":"DELETE","lineNumber":467,"oldContent":"              const SnackBar("},{"type":"DELETE","lineNumber":468,"oldContent":"                content: Text('Habit created successfully!'),"},{"type":"INSERT","lineNumber":472,"content":"              SnackBar("},{"type":"INSERT","lineNumber":473,"content":"                content: Text(_notificationsEnabled && _notificationTime != null "},{"type":"INSERT","lineNumber":474,"content":"                    ? 'Habit created with notifications scheduled!' "},{"type":"INSERT","lineNumber":475,"content":"                    : 'Habit created successfully!'),"}]},{"timestamp":1754380250928,"changes":[{"type":"DELETE","lineNumber":466,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":468,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":470,"content":"          if (mounted) {"},{"type":"INSERT","lineNumber":471,"content":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":472,"content":"              SnackBar("},{"type":"INSERT","lineNumber":473,"content":"                content: Text(_notificationsEnabled && _notificationTime != null "},{"type":"INSERT","lineNumber":474,"content":"                    ? 'Habit created with notifications scheduled!' "},{"type":"INSERT","lineNumber":475,"content":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":475,"oldContent":"              SnackBar("},{"type":"DELETE","lineNumber":477,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null "},{"type":"DELETE","lineNumber":479,"oldContent":"                    ? 'Habit created with notifications scheduled!' "},{"type":"DELETE","lineNumber":481,"oldContent":"                    : 'Habit created successfully!'),"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"  /// Schedule notifications for the created habit based on its frequency"},{"type":"INSERT","lineNumber":514,"content":"  Future<void> _scheduleHabitNotifications(Habit habit) async {"},{"type":"INSERT","lineNumber":515,"content":"    if (!habit.notificationsEnabled || habit.notificationTime == null) {"},{"type":"INSERT","lineNumber":516,"content":"      return;"},{"type":"INSERT","lineNumber":517,"content":"    }"},{"type":"INSERT","lineNumber":518,"content":""},{"type":"INSERT","lineNumber":519,"content":"    final notificationTime = habit.notificationTime!;"},{"type":"INSERT","lineNumber":520,"content":"    final hour = notificationTime.hour;"},{"type":"INSERT","lineNumber":521,"content":"    final minute = notificationTime.minute;"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"INSERT","lineNumber":523,"content":"    try {"},{"type":"INSERT","lineNumber":524,"content":"      switch (habit.frequency) {"},{"type":"INSERT","lineNumber":525,"content":"        case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":526,"content":"          // Schedule daily recurring notification"},{"type":"INSERT","lineNumber":527,"content":"          await NotificationService.scheduleDailyHabitReminder("},{"type":"INSERT","lineNumber":528,"content":"            habitId: habit.hashCode, // Use hashCode as unique ID"},{"type":"INSERT","lineNumber":529,"content":"            habitName: habit.name,"},{"type":"INSERT","lineNumber":530,"content":"            hour: hour,"},{"type":"INSERT","lineNumber":531,"content":"            minute: minute,"},{"type":"INSERT","lineNumber":532,"content":"          );"},{"type":"INSERT","lineNumber":533,"content":"          print('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"INSERT","lineNumber":534,"content":"          break;"},{"type":"INSERT","lineNumber":535,"content":""},{"type":"INSERT","lineNumber":536,"content":"        case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":537,"content":"          // Schedule notifications for selected weekdays"},{"type":"INSERT","lineNumber":538,"content":"          for (int weekday in habit.weeklySchedule) {"},{"type":"INSERT","lineNumber":539,"content":"            final now = DateTime.now();"},{"type":"INSERT","lineNumber":540,"content":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":541,"content":"            "},{"type":"INSERT","lineNumber":542,"content":"            // Find the next occurrence of this weekday"},{"type":"INSERT","lineNumber":543,"content":"            while (nextNotification.weekday != weekday) {"},{"type":"INSERT","lineNumber":544,"content":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":545,"content":"            }"},{"type":"INSERT","lineNumber":546,"content":"            "},{"type":"INSERT","lineNumber":547,"content":"            // If the time has passed today, schedule for next week"},{"type":"INSERT","lineNumber":548,"content":"            if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":549,"content":"              nextNotification = nextNotification.add(const Duration(days: 7));"},{"type":"INSERT","lineNumber":550,"content":"            }"},{"type":"INSERT","lineNumber":551,"content":""},{"type":"INSERT","lineNumber":552,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":553,"content":"              id: habit.hashCode + weekday, // Unique ID for each weekday"},{"type":"INSERT","lineNumber":554,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":555,"content":"              body: 'Time to complete your weekly habit!',"},{"type":"INSERT","lineNumber":556,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":557,"content":"              payload: 'habit_${habit.hashCode}_weekday_$weekday',"},{"type":"INSERT","lineNumber":558,"content":"            );"},{"type":"INSERT","lineNumber":559,"content":"            print('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":560,"content":"          }"},{"type":"INSERT","lineNumber":561,"content":"          break;"},{"type":"INSERT","lineNumber":562,"content":""},{"type":"INSERT","lineNumber":563,"content":"        case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":564,"content":"          // Schedule notifications for selected month days"},{"type":"INSERT","lineNumber":565,"content":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"INSERT","lineNumber":566,"content":"            final now = DateTime.now();"},{"type":"INSERT","lineNumber":567,"content":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":568,"content":"            "},{"type":"INSERT","lineNumber":569,"content":"            // If the date has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":570,"content":"            if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":571,"content":"              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":572,"content":"            }"},{"type":"INSERT","lineNumber":573,"content":""},{"type":"INSERT","lineNumber":574,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":575,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"INSERT","lineNumber":576,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":577,"content":"              body: 'Time to complete your monthly habit!',"},{"type":"INSERT","lineNumber":578,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":579,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"INSERT","lineNumber":580,"content":"            );"},{"type":"INSERT","lineNumber":581,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":582,"content":"          }"},{"type":"INSERT","lineNumber":583,"content":"          break;"},{"type":"INSERT","lineNumber":584,"content":""},{"type":"INSERT","lineNumber":585,"content":"        case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":586,"content":"          // For hourly habits, schedule next few occurrences"},{"type":"INSERT","lineNumber":587,"content":"          final now = DateTime.now();"},{"type":"INSERT","lineNumber":588,"content":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"INSERT","lineNumber":589,"content":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"INSERT","lineNumber":590,"content":"            "},{"type":"INSERT","lineNumber":591,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":592,"content":"              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification"},{"type":"INSERT","lineNumber":593,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":594,"content":"              body: 'Time for your hourly habit!',"},{"type":"INSERT","lineNumber":595,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":596,"content":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"INSERT","lineNumber":597,"content":"            );"},{"type":"INSERT","lineNumber":598,"content":"          }"},{"type":"INSERT","lineNumber":599,"content":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"INSERT","lineNumber":600,"content":"          break;"},{"type":"INSERT","lineNumber":601,"content":""},{"type":"INSERT","lineNumber":602,"content":"        case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":603,"content":"          // Schedule for next year at the same time"},{"type":"INSERT","lineNumber":604,"content":"          final now = DateTime.now();"},{"type":"INSERT","lineNumber":605,"content":"          final nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":606,"content":"          "},{"type":"INSERT","lineNumber":607,"content":"          await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":608,"content":"            id: habit.hashCode + 3000, // Unique ID for yearly notification"},{"type":"INSERT","lineNumber":609,"content":"            title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":610,"content":"            body: 'Time for your yearly habit!',"},{"type":"INSERT","lineNumber":611,"content":"            scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":612,"content":"            payload: 'habit_${habit.hashCode}_yearly',"},{"type":"INSERT","lineNumber":613,"content":"          );"},{"type":"INSERT","lineNumber":614,"content":"          print('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":615,"content":"          break;"},{"type":"INSERT","lineNumber":616,"content":"      }"},{"type":"INSERT","lineNumber":617,"content":""},{"type":"INSERT","lineNumber":618,"content":"      // Also schedule a test notification for 30 seconds from now to verify it's working"},{"type":"INSERT","lineNumber":619,"content":"      await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":620,"content":"        id: habit.hashCode + 9999,"},{"type":"INSERT","lineNumber":621,"content":"        title: '✅ Habit Notifications Active!',"},{"type":"INSERT","lineNumber":622,"content":"        body: 'Your \"${habit.name}\" notifications are now scheduled and working perfectly!',"},{"type":"INSERT","lineNumber":623,"content":"        scheduledTime: DateTime.now().add(const Duration(seconds: 30)),"},{"type":"INSERT","lineNumber":624,"content":"        payload: 'habit_test_${habit.hashCode}',"},{"type":"INSERT","lineNumber":625,"content":"      );"},{"type":"INSERT","lineNumber":626,"content":"      print('Scheduled test notification for \"${habit.name}\" in 30 seconds');"},{"type":"INSERT","lineNumber":627,"content":""},{"type":"INSERT","lineNumber":628,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":629,"content":"      print('Error scheduling notifications for habit \"${habit.name}\": $e');"},{"type":"INSERT","lineNumber":630,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":631,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":632,"content":"          SnackBar("},{"type":"INSERT","lineNumber":633,"content":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"INSERT","lineNumber":634,"content":"            backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":635,"content":"          ),"},{"type":"INSERT","lineNumber":636,"content":"        );"},{"type":"INSERT","lineNumber":637,"content":"      }"},{"type":"INSERT","lineNumber":638,"content":"    }"},{"type":"INSERT","lineNumber":639,"content":"  }"}]},{"timestamp":1754380276097,"changes":[{"type":"DELETE","lineNumber":468,"oldContent":"          if (mounted) {"},{"type":"MODIFY","lineNumber":470,"content":"          if (mounted) {","oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":471,"content":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":473,"content":"                content: Text(_notificationsEnabled && _notificationTime != null"},{"type":"INSERT","lineNumber":474,"content":"                    ? 'Habit created with notifications scheduled!'"},{"type":"INSERT","lineNumber":475,"content":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":474,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null "},{"type":"DELETE","lineNumber":476,"oldContent":"                    ? 'Habit created with notifications scheduled!' "},{"type":"DELETE","lineNumber":478,"oldContent":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":513,"oldContent":"}"},{"type":"DELETE","lineNumber":515,"oldContent":""},{"type":"DELETE","lineNumber":517,"oldContent":"  }"},{"type":"DELETE","lineNumber":519,"oldContent":"    }"},{"type":"DELETE","lineNumber":521,"oldContent":"      }"},{"type":"DELETE","lineNumber":523,"oldContent":"        );"},{"type":"DELETE","lineNumber":525,"oldContent":"          ),"},{"type":"DELETE","lineNumber":527,"oldContent":"            backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":529,"oldContent":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"DELETE","lineNumber":531,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":533,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":535,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":537,"oldContent":"      print('Error scheduling notifications for habit \"${habit.name}\": $e');"},{"type":"DELETE","lineNumber":539,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":541,"oldContent":""},{"type":"DELETE","lineNumber":543,"oldContent":"      print('Scheduled test notification for \"${habit.name}\" in 30 seconds');"},{"type":"DELETE","lineNumber":545,"oldContent":"      );"},{"type":"DELETE","lineNumber":547,"oldContent":"        payload: 'habit_test_${habit.hashCode}',"},{"type":"DELETE","lineNumber":549,"oldContent":"        scheduledTime: DateTime.now().add(const Duration(seconds: 30)),"},{"type":"DELETE","lineNumber":551,"oldContent":"        body: 'Your \"${habit.name}\" notifications are now scheduled and working perfectly!',"},{"type":"DELETE","lineNumber":553,"oldContent":"        title: '✅ Habit Notifications Active!',"},{"type":"DELETE","lineNumber":555,"oldContent":"        id: habit.hashCode + 9999,"},{"type":"DELETE","lineNumber":557,"oldContent":"      await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":559,"oldContent":"      // Also schedule a test notification for 30 seconds from now to verify it's working"},{"type":"DELETE","lineNumber":561,"oldContent":""},{"type":"DELETE","lineNumber":563,"oldContent":"      }"},{"type":"DELETE","lineNumber":565,"oldContent":"          break;"},{"type":"DELETE","lineNumber":567,"oldContent":"          print('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":569,"oldContent":"          );"},{"type":"DELETE","lineNumber":570,"oldContent":"            "},{"type":"DELETE","lineNumber":571,"oldContent":"            payload: 'habit_${habit.hashCode}_yearly',"},{"type":"INSERT","lineNumber":541,"content":""},{"type":"DELETE","lineNumber":573,"oldContent":"            scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":575,"oldContent":"            body: 'Time for your yearly habit!',"},{"type":"DELETE","lineNumber":577,"oldContent":"            title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":579,"oldContent":"            id: habit.hashCode + 3000, // Unique ID for yearly notification"},{"type":"DELETE","lineNumber":580,"oldContent":"            "},{"type":"DELETE","lineNumber":581,"oldContent":"          await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":546,"content":""},{"type":"DELETE","lineNumber":583,"oldContent":"          "},{"type":"DELETE","lineNumber":585,"oldContent":"          final nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":587,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":589,"oldContent":"          // Schedule for next year at the same time"},{"type":"DELETE","lineNumber":591,"oldContent":"        case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":593,"oldContent":""},{"type":"DELETE","lineNumber":595,"oldContent":"          break;"},{"type":"DELETE","lineNumber":597,"oldContent":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"DELETE","lineNumber":599,"oldContent":"          }"},{"type":"DELETE","lineNumber":601,"oldContent":"            );"},{"type":"DELETE","lineNumber":603,"oldContent":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"DELETE","lineNumber":605,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":607,"oldContent":"              body: 'Time for your hourly habit!',"},{"type":"DELETE","lineNumber":609,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":611,"oldContent":"              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification"},{"type":"DELETE","lineNumber":613,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":615,"oldContent":"            "},{"type":"DELETE","lineNumber":617,"oldContent":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"DELETE","lineNumber":619,"oldContent":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"DELETE","lineNumber":621,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":623,"oldContent":"          // For hourly habits, schedule next few occurrences"},{"type":"DELETE","lineNumber":624,"oldContent":"            "},{"type":"DELETE","lineNumber":625,"oldContent":"        case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":626,"oldContent":"            // If the date has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":569,"content":"            // If the date has passed this month, schedule for next month"},{"type":"DELETE","lineNumber":629,"oldContent":"          break;"},{"type":"DELETE","lineNumber":631,"oldContent":"          }"},{"type":"DELETE","lineNumber":633,"oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":635,"oldContent":"            );"},{"type":"DELETE","lineNumber":637,"oldContent":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":639,"oldContent":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":578,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":579,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"INSERT","lineNumber":580,"content":"            );"},{"type":"INSERT","lineNumber":581,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":582,"content":"          }"},{"type":"INSERT","lineNumber":583,"content":"          break;"},{"type":"INSERT","lineNumber":584,"content":""},{"type":"INSERT","lineNumber":585,"content":"        case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":586,"content":"          // For hourly habits, schedule next few occurrences"},{"type":"INSERT","lineNumber":587,"content":"          final now = DateTime.now();"},{"type":"INSERT","lineNumber":588,"content":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"INSERT","lineNumber":589,"content":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"INSERT","lineNumber":590,"content":""},{"type":"INSERT","lineNumber":591,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":592,"content":"              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification"},{"type":"INSERT","lineNumber":593,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":594,"content":"              body: 'Time for your hourly habit!',"},{"type":"INSERT","lineNumber":595,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":596,"content":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"INSERT","lineNumber":597,"content":"            );"},{"type":"INSERT","lineNumber":598,"content":"          }"},{"type":"INSERT","lineNumber":599,"content":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"INSERT","lineNumber":600,"content":"          break;"},{"type":"INSERT","lineNumber":601,"content":""},{"type":"INSERT","lineNumber":602,"content":"        case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":603,"content":"          // Schedule for next year at the same time"},{"type":"INSERT","lineNumber":604,"content":"          final now = DateTime.now();"},{"type":"INSERT","lineNumber":605,"content":"          final nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":606,"content":""},{"type":"INSERT","lineNumber":607,"content":"          await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":608,"content":"            id: habit.hashCode + 3000, // Unique ID for yearly notification"},{"type":"INSERT","lineNumber":609,"content":"            title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":610,"content":"            body: 'Time for your yearly habit!',"},{"type":"INSERT","lineNumber":611,"content":"            scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":612,"content":"            payload: 'habit_${habit.hashCode}_yearly',"},{"type":"INSERT","lineNumber":613,"content":"          );"},{"type":"INSERT","lineNumber":614,"content":"          print('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":615,"content":"          break;"},{"type":"INSERT","lineNumber":616,"content":"      }"},{"type":"INSERT","lineNumber":617,"content":""},{"type":"INSERT","lineNumber":618,"content":"      // Also schedule a test notification for 30 seconds from now to verify it's working"},{"type":"INSERT","lineNumber":619,"content":"      await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":620,"content":"        id: habit.hashCode + 9999,"},{"type":"INSERT","lineNumber":621,"content":"        title: '✅ Habit Notifications Active!',"},{"type":"INSERT","lineNumber":622,"content":"        body: 'Your \"${habit.name}\" notifications are now scheduled and working perfectly!',"},{"type":"INSERT","lineNumber":623,"content":"        scheduledTime: DateTime.now().add(const Duration(seconds: 30)),"},{"type":"INSERT","lineNumber":624,"content":"        payload: 'habit_test_${habit.hashCode}',"},{"type":"INSERT","lineNumber":625,"content":"      );"},{"type":"INSERT","lineNumber":626,"content":"      print('Scheduled test notification for \"${habit.name}\" in 30 seconds');"},{"type":"INSERT","lineNumber":627,"content":""},{"type":"INSERT","lineNumber":628,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":629,"content":"      print('Error scheduling notifications for habit \"${habit.name}\": $e');"},{"type":"INSERT","lineNumber":630,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":631,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":632,"content":"          SnackBar("},{"type":"INSERT","lineNumber":633,"content":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"INSERT","lineNumber":634,"content":"            backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":635,"content":"          ),"},{"type":"INSERT","lineNumber":636,"content":"        );"},{"type":"INSERT","lineNumber":637,"content":"      }"},{"type":"INSERT","lineNumber":638,"content":"    }"},{"type":"INSERT","lineNumber":639,"content":"  }"},{"type":"INSERT","lineNumber":640,"content":"}"},{"type":"INSERT","lineNumber":641,"content":""}]},{"timestamp":1754380546122,"changes":[{"type":"INSERT","lineNumber":469,"content":""},{"type":"DELETE","lineNumber":471,"oldContent":""},{"type":"DELETE","lineNumber":474,"oldContent":"                backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":476,"content":"                backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":527,"oldContent":""},{"type":"DELETE","lineNumber":530,"oldContent":""},{"type":"DELETE","lineNumber":543,"oldContent":"            // If the date has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":541,"content":"            "},{"type":"INSERT","lineNumber":545,"content":"            }"},{"type":"INSERT","lineNumber":546,"content":"            "},{"type":"INSERT","lineNumber":547,"content":"            // If the time has passed today, schedule for next week"},{"type":"INSERT","lineNumber":548,"content":"            if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":549,"content":"              nextNotification = nextNotification.add(const Duration(days: 7));"},{"type":"INSERT","lineNumber":550,"content":"            }"},{"type":"INSERT","lineNumber":551,"content":""},{"type":"INSERT","lineNumber":552,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":553,"content":"              id: habit.hashCode + weekday, // Unique ID for each weekday"},{"type":"INSERT","lineNumber":554,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":555,"content":"              body: 'Time to complete your habit! Don\\'t break your streak.',"},{"type":"INSERT","lineNumber":557,"content":"              payload: 'habit_${habit.hashCode}_weekday_$weekday',"},{"type":"INSERT","lineNumber":558,"content":"            );"},{"type":"INSERT","lineNumber":559,"content":"            print('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":560,"content":"          }"},{"type":"INSERT","lineNumber":561,"content":"          break;"},{"type":"INSERT","lineNumber":562,"content":""},{"type":"INSERT","lineNumber":563,"content":"        case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":564,"content":"          // Schedule notifications for selected month days"},{"type":"INSERT","lineNumber":565,"content":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"INSERT","lineNumber":566,"content":"            final now = DateTime.now();"},{"type":"INSERT","lineNumber":567,"content":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":568,"content":"            "},{"type":"INSERT","lineNumber":569,"content":"            // If the date has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":570,"content":"            if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":571,"content":"              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":573,"content":""},{"type":"INSERT","lineNumber":574,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":575,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"INSERT","lineNumber":576,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":577,"content":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"INSERT","lineNumber":578,"content":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":553,"oldContent":"            // If the time has passed today, schedule for next week"},{"type":"DELETE","lineNumber":556,"oldContent":"            if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":559,"oldContent":"              nextNotification = nextNotification.add(const Duration(days: 7));"},{"type":"DELETE","lineNumber":562,"oldContent":"            }"},{"type":"DELETE","lineNumber":564,"oldContent":""},{"type":"DELETE","lineNumber":565,"oldContent":""},{"type":"INSERT","lineNumber":590,"content":"            "},{"type":"DELETE","lineNumber":568,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":569,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":570,"oldContent":"              body: 'Time for your hourly habit!',"},{"type":"DELETE","lineNumber":571,"oldContent":"              id: habit.hashCode + weekday, // Unique ID for each weekday"},{"type":"INSERT","lineNumber":593,"content":"              title: '⏰ ${habit.name}',"},{"type":"INSERT","lineNumber":594,"content":"              body: 'Hourly reminder - time for your habit!',"},{"type":"DELETE","lineNumber":574,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":577,"oldContent":"              body: 'Time to complete your weekly habit!',"},{"type":"DELETE","lineNumber":580,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":583,"oldContent":"              payload: 'habit_${habit.hashCode}_weekday_$weekday',"},{"type":"DELETE","lineNumber":586,"oldContent":"            );"},{"type":"DELETE","lineNumber":588,"oldContent":""},{"type":"DELETE","lineNumber":589,"oldContent":"            print('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":606,"content":"          "},{"type":"DELETE","lineNumber":592,"oldContent":"          }"},{"type":"DELETE","lineNumber":594,"oldContent":"            body: 'Time for your yearly habit!',"},{"type":"DELETE","lineNumber":595,"oldContent":"          break;"},{"type":"INSERT","lineNumber":610,"content":"            body: 'Your yearly habit is due - make it count!',"},{"type":"DELETE","lineNumber":598,"oldContent":""},{"type":"DELETE","lineNumber":601,"oldContent":"        case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":604,"oldContent":"          // Schedule notifications for selected month days"},{"type":"DELETE","lineNumber":606,"oldContent":"      // Also schedule a test notification for 30 seconds from now to verify it's working"},{"type":"DELETE","lineNumber":607,"oldContent":"          for (int monthDay in habit.monthlySchedule) {"},{"type":"DELETE","lineNumber":608,"oldContent":"      await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":609,"oldContent":"        id: habit.hashCode + 9999,"},{"type":"DELETE","lineNumber":610,"oldContent":"            final now = DateTime.now();"},{"type":"DELETE","lineNumber":611,"oldContent":"        title: '✅ Habit Notifications Active!',"},{"type":"DELETE","lineNumber":612,"oldContent":"        body: 'Your \"${habit.name}\" notifications are now scheduled and working perfectly!',"},{"type":"DELETE","lineNumber":613,"oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":614,"oldContent":"        scheduledTime: DateTime.now().add(const Duration(seconds: 30)),"},{"type":"DELETE","lineNumber":615,"oldContent":"        payload: 'habit_test_${habit.hashCode}',"},{"type":"DELETE","lineNumber":616,"oldContent":"      );"},{"type":"DELETE","lineNumber":617,"oldContent":"      print('Scheduled test notification for \"${habit.name}\" in 30 seconds');"},{"type":"DELETE","lineNumber":618,"oldContent":""},{"type":"DELETE","lineNumber":619,"oldContent":""},{"type":"DELETE","lineNumber":621,"oldContent":"            if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":624,"oldContent":"              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":627,"oldContent":"            }"},{"type":"DELETE","lineNumber":630,"oldContent":""},{"type":"DELETE","lineNumber":633,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":636,"oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"DELETE","lineNumber":639,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":641,"oldContent":"              body: 'Time to complete your monthly habit!',"}]},{"timestamp":1754380587045,"changes":[{"type":"MODIFY","lineNumber":476,"content":"                backgroundColor: Colors.green,","oldContent":"                backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":539,"oldContent":"            "},{"type":"INSERT","lineNumber":541,"content":"            "},{"type":"DELETE","lineNumber":543,"oldContent":"            }"},{"type":"MODIFY","lineNumber":545,"content":"            }","oldContent":"            "},{"type":"INSERT","lineNumber":546,"content":"            "},{"type":"DELETE","lineNumber":548,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":550,"oldContent":"            }"},{"type":"DELETE","lineNumber":552,"oldContent":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":554,"oldContent":"            );"},{"type":"DELETE","lineNumber":556,"oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":558,"oldContent":"          }"},{"type":"DELETE","lineNumber":561,"oldContent":"          break;"},{"type":"DELETE","lineNumber":563,"oldContent":""},{"type":"INSERT","lineNumber":556,"content":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":565,"oldContent":"        case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":567,"oldContent":"          // For hourly habits, schedule next few occurrences"},{"type":"DELETE","lineNumber":570,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":572,"oldContent":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"DELETE","lineNumber":575,"oldContent":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"DELETE","lineNumber":579,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":581,"oldContent":"              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification"},{"type":"DELETE","lineNumber":586,"oldContent":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":572,"content":"            }"},{"type":"DELETE","lineNumber":588,"oldContent":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"DELETE","lineNumber":591,"oldContent":"            );"},{"type":"DELETE","lineNumber":593,"oldContent":"          }"},{"type":"INSERT","lineNumber":579,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"INSERT","lineNumber":580,"content":"            );"},{"type":"INSERT","lineNumber":581,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":582,"content":"          }"},{"type":"INSERT","lineNumber":583,"content":"          break;"},{"type":"INSERT","lineNumber":584,"content":""},{"type":"INSERT","lineNumber":585,"content":"        case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":586,"content":"          // For hourly habits, schedule next few occurrences"},{"type":"INSERT","lineNumber":587,"content":"          final now = DateTime.now();"},{"type":"INSERT","lineNumber":588,"content":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"INSERT","lineNumber":589,"content":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"INSERT","lineNumber":590,"content":"            "},{"type":"INSERT","lineNumber":591,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":592,"content":"              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification"},{"type":"INSERT","lineNumber":593,"content":"              title: '⏰ ${habit.name}',"},{"type":"INSERT","lineNumber":594,"content":"              body: 'Hourly reminder - time for your habit!',"},{"type":"INSERT","lineNumber":595,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":596,"content":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"INSERT","lineNumber":597,"content":"            );"},{"type":"INSERT","lineNumber":598,"content":"          }"},{"type":"DELETE","lineNumber":603,"oldContent":"            "},{"type":"INSERT","lineNumber":606,"content":"          "},{"type":"DELETE","lineNumber":606,"oldContent":"              title: '⏰ ${habit.name}',"},{"type":"DELETE","lineNumber":608,"oldContent":"              body: 'Hourly reminder - time for your habit!',"},{"type":"INSERT","lineNumber":610,"content":"            body: 'Your yearly habit is due - make it count!',"},{"type":"DELETE","lineNumber":616,"oldContent":"          "},{"type":"DELETE","lineNumber":617,"oldContent":"            body: 'Your yearly habit is due - make it count!',"}]},{"timestamp":1754380817580,"changes":[{"type":"INSERT","lineNumber":475,"content":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":476,"oldContent":"                backgroundColor: Colors.green,"},{"type":"MODIFY","lineNumber":541,"content":"","oldContent":"            "},{"type":"DELETE","lineNumber":544,"oldContent":"            }"},{"type":"MODIFY","lineNumber":545,"content":"            }","oldContent":"            "},{"type":"INSERT","lineNumber":546,"content":""},{"type":"DELETE","lineNumber":552,"oldContent":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":556,"content":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":562,"oldContent":"            }"},{"type":"INSERT","lineNumber":567,"content":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":568,"content":""},{"type":"INSERT","lineNumber":569,"content":"            // If the date has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":570,"content":"            if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":571,"content":"              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":572,"content":"            }"},{"type":"INSERT","lineNumber":573,"content":""},{"type":"INSERT","lineNumber":574,"content":"            await NotificationService.scheduleNotification("},{"type":"INSERT","lineNumber":575,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"INSERT","lineNumber":576,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":577,"content":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"INSERT","lineNumber":578,"content":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":570,"oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":573,"oldContent":"            "},{"type":"DELETE","lineNumber":575,"oldContent":"            // If the date has passed this month, schedule for next month"},{"type":"DELETE","lineNumber":577,"oldContent":"            if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":579,"oldContent":"              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"INSERT","lineNumber":590,"content":""},{"type":"DELETE","lineNumber":586,"oldContent":"            "},{"type":"DELETE","lineNumber":587,"oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"DELETE","lineNumber":588,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":590,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":593,"oldContent":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"DELETE","lineNumber":595,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":597,"oldContent":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"MODIFY","lineNumber":599,"content":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');","oldContent":"          break;"},{"type":"INSERT","lineNumber":600,"content":"          break;"},{"type":"INSERT","lineNumber":606,"content":""},{"type":"DELETE","lineNumber":608,"oldContent":"          "},{"type":"MODIFY","lineNumber":611,"content":"            scheduledTime: nextNotification,","oldContent":"            scheduledTime: nextNotification,"}]},{"timestamp":1754440380902,"changes":[{"type":"MODIFY","lineNumber":528,"content":"            habitId: habit.id,","oldContent":"            habitId: habit.hashCode, // Use hashCode as unique ID"},{"type":"DELETE","lineNumber":530,"oldContent":"            hour: hour,"},{"type":"MODIFY","lineNumber":530,"content":"            reminderTime: notificationTime,","oldContent":"            minute: minute,"},{"type":"DELETE","lineNumber":540,"oldContent":"            "},{"type":"INSERT","lineNumber":539,"content":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":543,"content":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":546,"oldContent":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"MODIFY","lineNumber":555,"content":"              scheduledTime: nextNotification,","oldContent":"              scheduledTime: nextNotification,"},{"type":"MODIFY","lineNumber":566,"content":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);","oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":569,"oldContent":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":571,"oldContent":"            );"},{"type":"DELETE","lineNumber":574,"oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":576,"oldContent":"          }"},{"type":"DELETE","lineNumber":579,"oldContent":"          break;"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"INSERT","lineNumber":578,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"INSERT","lineNumber":579,"content":"            );"},{"type":"INSERT","lineNumber":580,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":581,"content":"          }"},{"type":"INSERT","lineNumber":582,"content":"          break;"},{"type":"INSERT","lineNumber":583,"content":""},{"type":"INSERT","lineNumber":589,"content":""},{"type":"DELETE","lineNumber":592,"oldContent":""},{"type":"INSERT","lineNumber":597,"content":"          }"},{"type":"DELETE","lineNumber":600,"oldContent":"          }"},{"type":"INSERT","lineNumber":609,"content":"            body: 'Your yearly habit is due - make it count!',"},{"type":"DELETE","lineNumber":611,"oldContent":"            scheduledTime: nextNotification,"}]},{"timestamp":1754440759102,"changes":[{"type":"MODIFY","lineNumber":539,"content":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);","oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"MODIFY","lineNumber":543,"content":"              nextNotification = nextNotification.add(const Duration(days: 1));","oldContent":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"MODIFY","lineNumber":555,"content":"              scheduledTime: nextNotification,","oldContent":"              scheduledTime: nextNotification,"},{"type":"MODIFY","lineNumber":566,"content":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);","oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":573,"oldContent":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"INSERT","lineNumber":574,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"INSERT","lineNumber":575,"content":"              title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":576,"content":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"INSERT","lineNumber":577,"content":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":578,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":577,"oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"DELETE","lineNumber":579,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":582,"oldContent":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"DELETE","lineNumber":583,"oldContent":"              scheduledTime: nextNotification,"},{"type":"MODIFY","lineNumber":589,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":597,"content":"          }","oldContent":"          }"},{"type":"MODIFY","lineNumber":609,"content":"            body: 'Your yearly habit is due - make it count!',","oldContent":"            body: 'Your yearly habit is due - make it count!',"}]},{"timestamp":1754444346676,"changes":[{"type":"MODIFY","lineNumber":452,"content":"            colorValue: _selectedColor.toARGB32(),","oldContent":"            colorValue: _selectedColor.value,"},{"type":"INSERT","lineNumber":538,"content":"            final now = DateTime.now();"},{"type":"DELETE","lineNumber":539,"oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":542,"content":"            while (nextNotification.weekday != weekday) {"},{"type":"DELETE","lineNumber":543,"oldContent":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":554,"content":"              body: 'Time to complete your habit! Don\\'t break your streak.',"},{"type":"DELETE","lineNumber":555,"oldContent":"              scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":565,"content":"            final now = DateTime.now();"},{"type":"DELETE","lineNumber":566,"oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"MODIFY","lineNumber":574,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day","oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"DELETE","lineNumber":576,"oldContent":"            );"},{"type":"DELETE","lineNumber":578,"oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":579,"content":"            );"},{"type":"INSERT","lineNumber":580,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":588,"content":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"DELETE","lineNumber":589,"oldContent":""},{"type":"INSERT","lineNumber":596,"content":"            );"},{"type":"DELETE","lineNumber":597,"oldContent":"          }"},{"type":"INSERT","lineNumber":608,"content":"            title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":609,"oldContent":"            body: 'Your yearly habit is due - make it count!',"}]},{"timestamp":1754444362793,"changes":[{"type":"INSERT","lineNumber":6,"content":"import '../../utils/app_logger.dart';"},{"type":"MODIFY","lineNumber":533,"content":"          AppLogger.info('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');","oldContent":"          print('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"INSERT","lineNumber":574,"content":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":574,"oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"DELETE","lineNumber":577,"oldContent":"            );"},{"type":"DELETE","lineNumber":579,"oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":580,"content":"            );"},{"type":"INSERT","lineNumber":581,"content":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"}]},{"timestamp":1754444379616,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import '../../services/logging_service.dart';","oldContent":"import '../../utils/app_logger.dart';"},{"type":"DELETE","lineNumber":533,"oldContent":"          print('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"INSERT","lineNumber":534,"content":"          break;"},{"type":"MODIFY","lineNumber":575,"content":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day","oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"MODIFY","lineNumber":580,"content":"            );","oldContent":"            );"}]},{"timestamp":1754444395481,"changes":[{"type":"MODIFY","lineNumber":534,"content":"          break;","oldContent":"          break;"},{"type":"MODIFY","lineNumber":559,"content":"            AppLogger.info('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');","oldContent":"            print('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":574,"content":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":575,"oldContent":"              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day"},{"type":"INSERT","lineNumber":579,"content":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":580,"oldContent":"            );"}]},{"timestamp":1754444411165,"changes":[{"type":"INSERT","lineNumber":533,"content":"          AppLogger.info('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"DELETE","lineNumber":534,"oldContent":"          break;"},{"type":"MODIFY","lineNumber":581,"content":"            AppLogger.info('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');","oldContent":"            print('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"}]},{"timestamp":1754444426772,"changes":[{"type":"MODIFY","lineNumber":599,"content":"          AppLogger.info('Scheduled 24 hourly notifications for \"${habit.name}\"');","oldContent":"          print('Scheduled 24 hourly notifications for \"${habit.name}\"');"}]},{"timestamp":1754444443117,"changes":[{"type":"MODIFY","lineNumber":614,"content":"          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');","oldContent":"          print('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"}]},{"timestamp":1754444460427,"changes":[{"type":"MODIFY","lineNumber":619,"content":"      AppLogger.error('Error scheduling notifications for habit \"${habit.name}\"', e);","oldContent":"      print('Error scheduling notifications for habit \"${habit.name}\": $e');"}]}]},"H:/New/HabitV8/lib/ui/screens/edit_habit_screen.dart":{"filePath":"H:/New/HabitV8/lib/ui/screens/edit_habit_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:go_router/go_router.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\nimport '../../services/notification_service.dart';\n\nclass EditHabitScreen extends ConsumerStatefulWidget {\n  final Habit habit;\n\n  const EditHabitScreen({super.key, required this.habit});\n\n  @override\n  ConsumerState<EditHabitScreen> createState() => _EditHabitScreenState();\n}\n\nclass _EditHabitScreenState extends ConsumerState<EditHabitScreen> {\n  final _formKey = GlobalKey<FormState>();\n  late final TextEditingController _nameController;\n  late final TextEditingController _descriptionController;\n\n  late HabitFrequency _selectedFrequency;\n  late String _selectedCategory;\n  late Color _selectedColor;\n  late bool _notificationsEnabled;\n  TimeOfDay? _notificationTime;\n  late final List<int> _selectedWeekdays;\n  late final List<int> _selectedMonthDays;\n  late int _targetCount;\n  late int _originalHashCode; // Store original hash code for notification management\n\n  final List<String> _categories = [\n    'Health',\n    'Fitness',\n    'Productivity',\n    'Learning',\n    'Personal',\n    'Social',\n    'Finance',\n    'Mindfulness',\n  ];\n\n  final List<Color> _colors = [\n    Colors.blue,\n    Colors.green,\n    Colors.orange,\n    Colors.purple,\n    Colors.red,\n    Colors.teal,\n    Colors.indigo,\n    Colors.pink,\n    Colors.amber,\n    Colors.cyan,\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Initialize controllers and state with existing habit data\n    _nameController = TextEditingController(text: widget.habit.name);\n    _descriptionController = TextEditingController(text: widget.habit.description ?? '');\n    \n    _selectedFrequency = widget.habit.frequency;\n    _selectedCategory = widget.habit.category;\n    _selectedColor = Color(widget.habit.colorValue);\n    _notificationsEnabled = widget.habit.notificationsEnabled;\n    _notificationTime = widget.habit.notificationTime;\n    _selectedWeekdays = List<int>.from(widget.habit.weeklySchedule);\n    _selectedMonthDays = List<int>.from(widget.habit.monthlySchedule);\n    _targetCount = widget.habit.targetCount;\n    _originalHashCode = widget.habit.hashCode; // Store original for notification cleanup\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _descriptionController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Edit Habit'),\n        actions: [\n          TextButton(\n            onPressed: _saveHabit,\n            child: const Text('Save'),\n          ),\n        ],\n      ),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              _buildBasicInfoSection(),\n              const SizedBox(height: 24),\n              _buildFrequencySection(),\n              const SizedBox(height: 24),\n              _buildNotificationSection(),\n              const SizedBox(height: 32),\n              SizedBox(\n                width: double.infinity,\n                child: ElevatedButton(\n                  onPressed: _saveHabit,\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: _selectedColor,\n                    foregroundColor: Colors.white,\n                    padding: const EdgeInsets.symmetric(vertical: 16),\n                    shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12),\n                    ),\n                  ),\n                  child: const Text(\n                    'Save Changes',\n                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildBasicInfoSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Basic Information',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _nameController,\n              decoration: const InputDecoration(\n                labelText: 'Habit Name',\n                hintText: 'e.g., Drink 8 glasses of water',\n                border: OutlineInputBorder(),\n              ),\n              validator: (value) {\n                if (value == null || value.trim().isEmpty) {\n                  return 'Please enter a habit name';\n                }\n                return null;\n              },\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _descriptionController,\n              decoration: const InputDecoration(\n                labelText: 'Description (Optional)',\n                hintText: 'Add more details about your habit',\n                border: OutlineInputBorder(),\n              ),\n              maxLines: 3,\n            ),\n            const SizedBox(height: 16),\n            Text(\n              'Category',\n              style: Theme.of(context).textTheme.titleSmall?.copyWith(\n                fontWeight: FontWeight.w600,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: _categories.map((category) {\n                final isSelected = category == _selectedCategory;\n                return FilterChip(\n                  label: Text(category),\n                  selected: isSelected,\n                  onSelected: (_) {\n                    setState(() {\n                      _selectedCategory = category;\n                    });\n                  },\n                  selectedColor: _selectedColor.withOpacity(0.2),\n                  checkmarkColor: _selectedColor,\n                );\n              }).toList(),\n            ),\n            const SizedBox(height: 16),\n            Text(\n              'Color',\n              style: Theme.of(context).textTheme.titleSmall?.copyWith(\n                fontWeight: FontWeight.w600,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: _colors.map((color) {\n                final isSelected = color == _selectedColor;\n                return GestureDetector(\n                  onTap: () {\n                    setState(() {\n                      _selectedColor = color;\n                    });\n                  },\n                  child: Container(\n                    width: 40,\n                    height: 40,\n                    decoration: BoxDecoration(\n                      color: color,\n                      shape: BoxShape.circle,\n                      border: Border.all(\n                        color: isSelected ? Colors.black : Colors.transparent,\n                        width: 2,\n                      ),\n                    ),\n                    child: isSelected\n                        ? const Icon(Icons.check, color: Colors.white)\n                        : null,\n                  ),\n                );\n              }).toList(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildFrequencySection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Frequency',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: HabitFrequency.values.map((frequency) {\n                final isSelected = frequency == _selectedFrequency;\n                return FilterChip(\n                  label: Text(_getFrequencyDisplayName(frequency)),\n                  selected: isSelected,\n                  onSelected: (_) {\n                    setState(() {\n                      _selectedFrequency = frequency;\n                      // Clear schedule when frequency changes\n                      _selectedWeekdays.clear();\n                      _selectedMonthDays.clear();\n                    });\n                  },\n                  selectedColor: _selectedColor.withOpacity(0.2),\n                  checkmarkColor: _selectedColor,\n                );\n              }).toList(),\n            ),\n            if (_selectedFrequency == HabitFrequency.weekly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select Days',\n                style: Theme.of(context).textTheme.titleSmall?.copyWith(\n                  fontWeight: FontWeight.w600,\n                ),\n              ),\n              const SizedBox(height: 8),\n              _buildWeekdaySelector(),\n            ],\n            if (_selectedFrequency == HabitFrequency.monthly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select Days of Month',\n                style: Theme.of(context).textTheme.titleSmall?.copyWith(\n                  fontWeight: FontWeight.w600,\n                ),\n              ),\n              const SizedBox(height: 8),\n              _buildMonthDaySelector(),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildWeekdaySelector() {\n    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    \n    return Wrap(\n      spacing: 8,\n      runSpacing: 8,\n      children: List.generate(7, (index) {\n        final weekdayNumber = index + 1;\n        final isSelected = _selectedWeekdays.contains(weekdayNumber);\n        \n        return FilterChip(\n          label: Text(weekdays[index]),\n          selected: isSelected,\n          onSelected: (_) {\n            setState(() {\n              if (isSelected) {\n                _selectedWeekdays.remove(weekdayNumber);\n              } else {\n                _selectedWeekdays.add(weekdayNumber);\n              }\n            });\n          },\n          selectedColor: _selectedColor.withOpacity(0.2),\n          checkmarkColor: _selectedColor,\n        );\n      }),\n    );\n  }\n\n  Widget _buildMonthDaySelector() {\n    return Wrap(\n      spacing: 4,\n      runSpacing: 4,\n      children: List.generate(31, (index) {\n        final day = index + 1;\n        final isSelected = _selectedMonthDays.contains(day);\n        \n        return FilterChip(\n          label: Text(day.toString()),\n          selected: isSelected,\n          onSelected: (_) {\n            setState(() {\n              if (isSelected) {\n                _selectedMonthDays.remove(day);\n              } else {\n                _selectedMonthDays.add(day);\n              }\n            });\n          },\n          selectedColor: _selectedColor.withOpacity(0.2),\n          checkmarkColor: _selectedColor,\n        );\n      }),\n    );\n  }\n\n  Widget _buildNotificationSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Notifications',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            const SizedBox(height: 16),\n            SwitchListTile(\n              title: const Text('Enable Notifications'),\n              subtitle: const Text('Get reminded when it\\'s time for your habit'),\n              value: _notificationsEnabled,\n              onChanged: (value) {\n                setState(() {\n                  _notificationsEnabled = value;\n                });\n              },\n              activeColor: _selectedColor,\n            ),\n            if (_notificationsEnabled) ...[\n              const SizedBox(height: 16),\n              ListTile(\n                title: const Text('Notification Time'),\n                subtitle: Text(_notificationTime != null\n                    ? _notificationTime!.format(context)\n                    : 'No time selected'),\n                trailing: const Icon(Icons.access_time),\n                onTap: () async {\n                  final time = await showTimePicker(\n                    context: context,\n                    initialTime: _notificationTime ?? TimeOfDay.now(),\n                  );\n                  if (time != null) {\n                    setState(() {\n                      _notificationTime = time;\n                    });\n                  }\n                },\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  String _getFrequencyDisplayName(HabitFrequency frequency) {\n    switch (frequency) {\n      case HabitFrequency.hourly:\n        return 'Hourly';\n      case HabitFrequency.daily:\n        return 'Daily';\n      case HabitFrequency.weekly:\n        return 'Weekly';\n      case HabitFrequency.monthly:\n        return 'Monthly';\n      case HabitFrequency.yearly:\n        return 'Yearly';\n    }\n  }\n\n  Future<void> _saveHabit() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    // Validate schedule selections\n    if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for weekly habits'),\n          backgroundColor: Colors.red,\n        ),\n      );\n      return;\n    }\n\n    if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for monthly habits'),\n          backgroundColor: Colors.red,\n        ),\n      );\n      return;\n    }\n\n    if (_notificationsEnabled && _notificationTime == null) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select a notification time'),\n          backgroundColor: Colors.red,\n        ),\n      );\n      return;\n    }\n\n    try {\n      // First, cancel existing notifications using the original hash code\n      await _cancelExistingNotifications();\n\n      // Update the habit with new values\n      widget.habit.name = _nameController.text.trim();\n      widget.habit.description = _descriptionController.text.trim().isEmpty \n          ? null \n          : _descriptionController.text.trim();\n      widget.habit.category = _selectedCategory;\n      widget.habit.colorValue = _selectedColor.value;\n      widget.habit.frequency = _selectedFrequency;\n      widget.habit.targetCount = _targetCount;\n      widget.habit.notificationsEnabled = _notificationsEnabled;\n      widget.habit.notificationTime = _notificationTime;\n      widget.habit.weeklySchedule = List<int>.from(_selectedWeekdays);\n      widget.habit.monthlySchedule = List<int>.from(_selectedMonthDays);\n\n      // Save to database\n      await widget.habit.save();\n\n      // Schedule new notifications with the updated habit\n      await _scheduleHabitNotifications(widget.habit);\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Habit updated successfully!'),\n            backgroundColor: Colors.green,\n          ),\n        );\n        context.pop();\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Error updating habit: $e'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  /// Cancel existing notifications for the habit before updating\n  Future<void> _cancelExistingNotifications() async {\n    if (!widget.habit.notificationsEnabled) {\n      return;\n    }\n\n    try {\n      switch (widget.habit.frequency) {\n        case HabitFrequency.daily:\n          await NotificationService.cancelNotification(_originalHashCode);\n          break;\n\n        case HabitFrequency.weekly:\n          for (int weekday in widget.habit.weeklySchedule) {\n            await NotificationService.cancelNotification(_originalHashCode + weekday);\n          }\n          break;\n\n        case HabitFrequency.monthly:\n          for (int monthDay in widget.habit.monthlySchedule) {\n            await NotificationService.cancelNotification(_originalHashCode + monthDay + 1000);\n          }\n          break;\n\n        case HabitFrequency.hourly:\n          for (int i = 1; i <= 24; i++) {\n            await NotificationService.cancelNotification(_originalHashCode + i + 2000);\n          }\n          break;\n\n        case HabitFrequency.yearly:\n          await NotificationService.cancelNotification(_originalHashCode);\n          break;\n      }\n      print('Cancelled existing notifications for habit: ${widget.habit.name}');\n    } catch (e) {\n      print('Error cancelling notifications: $e');\n    }\n  }\n\n  /// Schedule notifications for the updated habit based on its frequency\n  Future<void> _scheduleHabitNotifications(Habit habit) async {\n    if (!habit.notificationsEnabled || habit.notificationTime == null) {\n      return;\n    }\n\n    final notificationTime = habit.notificationTime!;\n    final hour = notificationTime.hour;\n    final minute = notificationTime.minute;\n\n    try {\n      switch (habit.frequency) {\n        case HabitFrequency.daily:\n          await NotificationService.scheduleDailyHabitReminder(\n            habitId: habit.hashCode,\n            habitName: habit.name,\n            hour: hour,\n            minute: minute,\n          );\n          print('Rescheduled daily notification for \"${habit.name}\" at $hour:$minute');\n          break;\n\n        case HabitFrequency.weekly:\n          for (int weekday in habit.weeklySchedule) {\n            final now = DateTime.now();\n            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);\n            \n            while (nextNotification.weekday != weekday) {\n              nextNotification = nextNotification.add(const Duration(days: 1));\n            }\n            \n            if (nextNotification.isBefore(now)) {\n              nextNotification = nextNotification.add(const Duration(days: 7));\n            }\n\n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + weekday,\n              title: '🎯 ${habit.name}',\n              body: 'Time to complete your habit! Don\\'t break your streak.',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_weekday_$weekday',\n            );\n            print('Rescheduled weekly notification for \"${habit.name}\" on weekday $weekday');\n          }\n          break;\n\n        case HabitFrequency.monthly:\n          for (int monthDay in habit.monthlySchedule) {\n            final now = DateTime.now();\n            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);\n            \n            if (nextNotification.isBefore(now)) {\n              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);\n            }\n\n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + monthDay + 1000,\n              title: '🎯 ${habit.name}',\n              body: 'Monthly habit reminder - keep up the great work!',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_monthday_$monthDay',\n            );\n            print('Rescheduled monthly notification for \"${habit.name}\" on day $monthDay');\n          }\n          break;\n\n        case HabitFrequency.hourly:\n          final now = DateTime.now();\n          for (int i = 1; i <= 24; i++) {\n            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);\n            \n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + i + 2000,\n              title: '⏰ ${habit.name}',\n              body: 'Hourly reminder - time for your habit!',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_hourly_$i',\n            );\n          }\n          print('Rescheduled 24 hourly notifications for \"${habit.name}\"');\n          break;\n\n        case HabitFrequency.yearly:\n          // For yearly habits, schedule next occurrence\n          final now = DateTime.now();\n          DateTime nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);\n          \n          await NotificationService.scheduleNotification(\n            id: habit.hashCode,\n            title: '🎯 ${habit.name}',\n            body: 'Annual habit reminder - time for your yearly goal!',\n            scheduledTime: nextNotification,\n            payload: 'habit_${habit.hashCode}_yearly',\n          );\n          print('Rescheduled yearly notification for \"${habit.name}\"');\n          break;\n      }\n    } catch (e) {\n      print('Error scheduling notifications: $e');\n    }\n  }\n}\n","baseTimestamp":1754380812552,"deltas":[{"timestamp":1754380817562,"changes":[{"type":"MODIFY","lineNumber":58,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":62,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":303,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":310,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":337,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":466,"oldContent":"      widget.habit.description = _descriptionController.text.trim().isEmpty "},{"type":"DELETE","lineNumber":467,"oldContent":"          ? null "},{"type":"INSERT","lineNumber":466,"content":"      widget.habit.description = _descriptionController.text.trim().isEmpty"},{"type":"INSERT","lineNumber":467,"content":"          ? null"},{"type":"MODIFY","lineNumber":571,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":575,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":595,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":615,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":631,"content":"","oldContent":"          "}]},{"timestamp":1754381040207,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import '../../data/database.dart';"}]},{"timestamp":1754381078858,"changes":[{"type":"MODIFY","lineNumber":57,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":61,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":66,"content":"    // Convert DateTime? to TimeOfDay? for UI compatibility","oldContent":"    _notificationTime = widget.habit.notificationTime;"},{"type":"INSERT","lineNumber":67,"content":"    _notificationTime = widget.habit.notificationTime != null "},{"type":"INSERT","lineNumber":68,"content":"        ? TimeOfDay.fromDateTime(widget.habit.notificationTime!) "},{"type":"INSERT","lineNumber":69,"content":"        : null;"}]},{"timestamp":1754381098590,"changes":[{"type":"DELETE","lineNumber":68,"oldContent":"    _selectedWeekdays = List<int>.from(widget.habit.weeklySchedule);"},{"type":"MODIFY","lineNumber":70,"content":"    _selectedWeekdays = List<int>.from(widget.habit.weeklySchedule);","oldContent":"    _selectedMonthDays = List<int>.from(widget.habit.monthlySchedule);"},{"type":"INSERT","lineNumber":71,"content":"    _selectedMonthDays = List<int>.from(widget.habit.monthlySchedule);"},{"type":"MODIFY","lineNumber":476,"content":"      // Convert TimeOfDay? back to DateTime? for storage","oldContent":"      widget.habit.notificationTime = _notificationTime;"},{"type":"INSERT","lineNumber":477,"content":"      widget.habit.notificationTime = _notificationTime != null"},{"type":"INSERT","lineNumber":478,"content":"          ? DateTime(2000, 1, 1, _notificationTime!.hour, _notificationTime!.minute)"},{"type":"INSERT","lineNumber":479,"content":"          : null;"}]},{"timestamp":1754381100930,"changes":[{"type":"MODIFY","lineNumber":57,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":67,"oldContent":"    _notificationTime = widget.habit.notificationTime != null "},{"type":"MODIFY","lineNumber":67,"content":"    _notificationTime = widget.habit.notificationTime != null","oldContent":"        ? TimeOfDay.fromDateTime(widget.habit.notificationTime!) "},{"type":"INSERT","lineNumber":68,"content":"        ? TimeOfDay.fromDateTime(widget.habit.notificationTime!)"},{"type":"INSERT","lineNumber":69,"content":"        : null;"},{"type":"DELETE","lineNumber":71,"oldContent":"        : null;"},{"type":"DELETE","lineNumber":478,"oldContent":"      widget.habit.weeklySchedule = List<int>.from(_selectedWeekdays);"},{"type":"MODIFY","lineNumber":480,"content":"      widget.habit.weeklySchedule = List<int>.from(_selectedWeekdays);","oldContent":"      widget.habit.monthlySchedule = List<int>.from(_selectedMonthDays);"},{"type":"INSERT","lineNumber":481,"content":"      widget.habit.monthlySchedule = List<int>.from(_selectedMonthDays);"}]},{"timestamp":1754381170321,"changes":[{"type":"MODIFY","lineNumber":68,"content":"        ? TimeOfDay.fromDateTime(widget.habit.notificationTime!)","oldContent":"        ? TimeOfDay.fromDateTime(widget.habit.notificationTime!) "},{"type":"INSERT","lineNumber":479,"content":"          : null;"},{"type":"DELETE","lineNumber":481,"oldContent":"          : null;"},{"type":"MODIFY","lineNumber":544,"content":"      // Cancelled existing notifications for habit","oldContent":"      print('Cancelled existing notifications for habit: ${widget.habit.name}');"},{"type":"MODIFY","lineNumber":546,"content":"      // Error cancelling notifications: $e","oldContent":"      print('Error cancelling notifications: $e');"}]},{"timestamp":1754381199033,"changes":[{"type":"MODIFY","lineNumber":569,"content":"          // Rescheduled daily notification","oldContent":"          print('Rescheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"MODIFY","lineNumber":592,"content":"            // Rescheduled weekly notification","oldContent":"            print('Rescheduled weekly notification for \"${habit.name}\" on weekday $weekday');"},{"type":"MODIFY","lineNumber":612,"content":"            // Rescheduled monthly notification","oldContent":"            print('Rescheduled monthly notification for \"${habit.name}\" on day $monthDay');"},{"type":"MODIFY","lineNumber":629,"content":"          // Rescheduled hourly notifications","oldContent":"          print('Rescheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"MODIFY","lineNumber":644,"content":"          // Rescheduled yearly notification","oldContent":"          print('Rescheduled yearly notification for \"${habit.name}\"');"},{"type":"MODIFY","lineNumber":648,"content":"      // Error scheduling notifications","oldContent":"      print('Error scheduling notifications: $e');"}]},{"timestamp":1754381252061,"changes":[{"type":"MODIFY","lineNumber":192,"content":"                  selectedColor: _selectedColor.withValues(alpha: 0.2),","oldContent":"                  selectedColor: _selectedColor.withOpacity(0.2),"}]},{"timestamp":1754381273100,"changes":[{"type":"MODIFY","lineNumber":270,"content":"                  selectedColor: _selectedColor.withValues(alpha: 0.2),","oldContent":"                  selectedColor: _selectedColor.withOpacity(0.2),"}]},{"timestamp":1754381294866,"changes":[{"type":"MODIFY","lineNumber":325,"content":"          selectedColor: _selectedColor.withValues(alpha: 0.2),","oldContent":"          selectedColor: _selectedColor.withOpacity(0.2),"},{"type":"MODIFY","lineNumber":352,"content":"          selectedColor: _selectedColor.withValues(alpha: 0.2),","oldContent":"          selectedColor: _selectedColor.withOpacity(0.2),"}]},{"timestamp":1754381314601,"changes":[{"type":"MODIFY","lineNumber":472,"content":"      widget.habit.colorValue = _selectedColor.toARGB32();","oldContent":"      widget.habit.colorValue = _selectedColor.value;"}]},{"timestamp":1754440401778,"changes":[{"type":"MODIFY","lineNumber":564,"content":"            habitId: habit.id,","oldContent":"            habitId: habit.hashCode,"},{"type":"DELETE","lineNumber":566,"oldContent":"            hour: hour,"},{"type":"MODIFY","lineNumber":566,"content":"            reminderTime: notificationTime,","oldContent":"            minute: minute,"}]}]},"H:/New/HabitV8/lib/services/theme_service.dart":{"filePath":"H:/New/HabitV8/lib/services/theme_service.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass ThemeService {\n  static const String _themeModeKey = 'theme_mode';\n  static const String _primaryColorKey = 'primary_color';\n\n  static Future<ThemeMode> getThemeMode() async {\n    final prefs = await SharedPreferences.getInstance();\n    final themeModeString = prefs.getString(_themeModeKey) ?? 'system';\n    switch (themeModeString) {\n      case 'light':\n        return ThemeMode.light;\n      case 'dark':\n        return ThemeMode.dark;\n      default:\n        return ThemeMode.system;\n    }\n  }\n\n  static Future<void> setThemeMode(ThemeMode themeMode) async {\n    final prefs = await SharedPreferences.getInstance();\n    String themeModeString;\n    switch (themeMode) {\n      case ThemeMode.light:\n        themeModeString = 'light';\n        break;\n      case ThemeMode.dark:\n        themeModeString = 'dark';\n        break;\n      case ThemeMode.system:\n        themeModeString = 'system';\n        break;\n    }\n    await prefs.setString(_themeModeKey, themeModeString);\n  }\n\n  static Future<Color> getPrimaryColor() async {\n    final prefs = await SharedPreferences.getInstance();\n    final colorValue = prefs.getInt(_primaryColorKey) ?? Colors.blue.value;\n    return Color(colorValue);\n  }\n\n  static Future<void> setPrimaryColor(Color color) async {\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.setInt(_primaryColorKey, color.value);\n  }\n}\n\nclass ThemeNotifier extends StateNotifier<ThemeState> {\n  ThemeNotifier() : super(ThemeState(ThemeMode.system, Colors.blue)) {\n    _loadTheme();\n  }\n\n  Future<void> _loadTheme() async {\n    final themeMode = await ThemeService.getThemeMode();\n    final primaryColor = await ThemeService.getPrimaryColor();\n    state = ThemeState(themeMode, primaryColor);\n  }\n\n  Future<void> setThemeMode(ThemeMode themeMode) async {\n    await ThemeService.setThemeMode(themeMode);\n    state = ThemeState(themeMode, state.primaryColor);\n  }\n\n  Future<void> setPrimaryColor(Color color) async {\n    await ThemeService.setPrimaryColor(color);\n    state = ThemeState(state.themeMode, color);\n  }\n}\n\nclass ThemeState {\n  final ThemeMode themeMode;\n  final Color primaryColor;\n\n  ThemeState(this.themeMode, this.primaryColor);\n\n  ThemeData get lightTheme => ThemeData(\n    useMaterial3: true,\n    colorScheme: ColorScheme.fromSeed(\n      seedColor: primaryColor,\n      brightness: Brightness.light,\n    ),\n    appBarTheme: AppBarTheme(\n      centerTitle: true,\n      elevation: 0,\n      scrolledUnderElevation: 0,\n      backgroundColor: Colors.transparent,\n      foregroundColor: ColorScheme.fromSeed(seedColor: primaryColor).onSurface,\n    ),\n    cardTheme: CardTheme(\n      elevation: 2,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n    ),\n    filledButtonTheme: FilledButtonThemeData(\n      style: FilledButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n    outlinedButtonTheme: OutlinedButtonThemeData(\n      style: OutlinedButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n    textButtonTheme: TextButtonThemeData(\n      style: TextButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n  );\n\n  ThemeData get darkTheme => ThemeData(\n    useMaterial3: true,\n    colorScheme: ColorScheme.fromSeed(\n      seedColor: primaryColor,\n      brightness: Brightness.dark,\n    ),\n    appBarTheme: AppBarTheme(\n      centerTitle: true,\n      elevation: 0,\n      scrolledUnderElevation: 0,\n      backgroundColor: Colors.transparent,\n      foregroundColor: ColorScheme.fromSeed(\n        seedColor: primaryColor,\n        brightness: Brightness.dark,\n      ).onSurface,\n    ),\n    cardTheme: CardTheme(\n      elevation: 2,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n    ),\n    filledButtonTheme: FilledButtonThemeData(\n      style: FilledButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n    outlinedButtonTheme: OutlinedButtonThemeData(\n      style: OutlinedButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n    textButtonTheme: TextButtonThemeData(\n      style: TextButton.styleFrom(\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      ),\n    ),\n  );\n}\n\nfinal themeProvider = StateNotifierProvider<ThemeNotifier, ThemeState>((ref) {\n  return ThemeNotifier();\n});\n","baseTimestamp":1754381540486,"deltas":[{"timestamp":1754381715335,"changes":[{"type":"MODIFY","lineNumber":91,"content":"    cardTheme: const CardThemeData(","oldContent":"    cardTheme: CardTheme("},{"type":"MODIFY","lineNumber":93,"content":"      shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(12))),","oldContent":"      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),"},{"type":"MODIFY","lineNumber":128,"content":"    cardTheme: const CardThemeData(","oldContent":"    cardTheme: CardTheme("},{"type":"MODIFY","lineNumber":130,"content":"      shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(12))),","oldContent":"      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),"}]},{"timestamp":1754381812937,"changes":[{"type":"MODIFY","lineNumber":40,"content":"    final colorValue = prefs.getInt(_primaryColorKey) ?? 0xFF2196F3; // Colors.blue equivalent","oldContent":"    final colorValue = prefs.getInt(_primaryColorKey) ?? Colors.blue.value;"}]},{"timestamp":1754381829409,"changes":[{"type":"INSERT","lineNumber":46,"content":"    // Convert color to ARGB32 format (modern replacement for .value)"}]},{"timestamp":1754444132384,"changes":[{"type":"MODIFY","lineNumber":47,"content":"    await prefs.setInt(_primaryColorKey, color.toARGB32());","oldContent":"    await prefs.setInt(_primaryColorKey, color.value);"}]}]},"H:/New/HabitV8/pubspec.yaml":{"filePath":"H:/New/HabitV8/pubspec.yaml","baseContent":"name: habitv8\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.8.1\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n  flutter_local_notifications: ^18.0.1\n  permission_handler: ^12.0.1\n  device_info_plus: ^11.5.0\n  hive: ^2.2.3\n  hive_flutter: ^1.1.0\n  flutter_riverpod: ^2.5.1\n  go_router: ^16.1.0\n  health: ^13.1.1\n  device_calendar: ^4.3.3\n  fl_chart: ^1.0.0  # Replaced charts_flutter and sunburst_chart with modern fl_chart\n  tflite_flutter: ^0.11.0\n  path_provider: ^2.1.3\n  flutter_launcher_icons: ^0.14.4\n  flutter_native_splash: ^2.4.0\n  intl: ^0.20.2\n  shared_preferences: ^2.2.2\n  timezone: ^0.9.4\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^5.0.0\n  hive_generator: ^2.0.1\n  build_runner: ^2.4.13\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n","baseTimestamp":1754381553860,"deltas":[{"timestamp":1754381773963,"changes":[{"type":"INSERT","lineNumber":53,"content":"  logger: ^2.4.0"}]}]},"H:/New/HabitV8/lib/services/logging_service.dart":{"filePath":"H:/New/HabitV8/lib/services/logging_service.dart","baseContent":"import 'package:logger/logger.dart';\n\nclass AppLogger {\n  static final Logger _logger = Logger(\n    printer: PrettyPrinter(\n      methodCount: 2,\n      errorMethodCount: 8,\n      lineLength: 120,\n      colors: true,\n      printEmojis: true,\n      printTime: false,\n    ),\n  );\n\n  static void debug(String message) {\n    _logger.d(message);\n  }\n\n  static void info(String message) {\n    _logger.i(message);\n  }\n\n  static void warning(String message) {\n    _logger.w(message);\n  }\n\n  static void error(String message, [dynamic error, StackTrace? stackTrace]) {\n    _logger.e(message, error: error, stackTrace: stackTrace);\n  }\n\n  static void verbose(String message) {\n    _logger.t(message);\n  }\n}\n","baseTimestamp":1754381836508,"deltas":[{"timestamp":1754442994819,"changes":[{"type":"MODIFY","lineNumber":10,"content":"      dateTimeFormat: DateTimeFormat.none,","oldContent":"      printTime: false,"}]}]},"H:/New/HabitV8/planadditionalfixes.md":{"filePath":"H:/New/HabitV8/planadditionalfixes.md","baseContent":"Prompt for an AI to Fix App Issues\nRefactor the following list of app issues into a clear and actionable prompt for an AI, focusing on the problems to solve and the desired outcomes. The goal is to provide a comprehensive set of instructions for the AI to address the issues and improve the app's functionality and user experience.\n\nApp Improvements & Refactoring\nThe following issues need to be addressed within the app to improve user experience, functionality, and design.\n\nUser Interface and Flow:\n\nHabit Creation Screen:\n\nHourly Habits: Implement a time picker that allows users to select multiple times throughout the day.\n\nMonthly Reminders: Improve the date picker to be a true calendar view that shows the days of the week.\n\nYearly Habits: Add a new calendar-style date picker for selecting multiple months and days.\n\nScreen Layout: Reorganize the UI to move the color picker to the bottom and the notifications section directly below the frequency setting.\n\nAll Habits Screen:\n\nAction Menu: Increase the size of the three-dot menu icon to make it easier for users to interact with.\n\nTimeline Screen:\n\nChronological Ordering: Display habits in chronological order.\n\nDefault View: Make the Timeline screen the default view when the app launches.\n\nAuto-Scrolling: Prevent the screen from auto-scrolling to the top. The view should be focused on the current time, with past habits scrolling off-screen and future habits visible below.\n\nCategory Breakdown Chart:\n\nReadability: Improve the readability of the chart when 10 or more habits are added.\n\nStats Screen:\n\nTrend Analysis: The trend analysis chart should only populate after a full week of data has been collected.\n\nHabit Performance Ranking: Add a filtering option to allow users to view the top five, bottom five, or all habits.\n\nSettings Screen:\n\nDefault Screen: Add a new setting that allows users to choose their preferred default landing screen.\n\nFunctionality and Integrations:\n\nLive Notifications:\n\nActionable Buttons: Modify habit notifications to include a Complete button that updates the habit's status and a Snooze button that reschedules the notification for 30 minutes later.\n\nHealth Data Integration:\n\nImplementation: Implement health data integration and ensure the correct permissions are requested from the user.\n\nCalendar Integration:\n\nFunctionality: Make the calendar integration fully functional.\n\nSmart Recommendations:\n\nBug Fix: Investigate and fix any issues preventing smart recommendations from working.\n\nData Handling and Gamification:\n\nAnalysis Screens:\n\nMonthly & Yearly: These screens should only populate with data once a sufficient amount has been recorded.\n\nStats: Rework monthly and yearly statistics to provide more engaging and useful insights, rather than just extending the weekly details.\n\nAchievements & Gamification:\n\nBadges: Implement a more robust system for achievement badges that includes long-term goals to encourage sustained engagement.","baseTimestamp":1754438147137,"deltas":[{"timestamp":1754439462364,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"Prompt for an AI to Fix App Issues"},{"type":"DELETE","lineNumber":1,"oldContent":"Refactor the following list of app issues into a clear and actionable prompt for an AI, focusing on the problems to solve and the desired outcomes. The goal is to provide a comprehensive set of instructions for the AI to address the issues and improve the app's functionality and user experience."},{"type":"INSERT","lineNumber":0,"content":"# HabitV8 - Additional Features Implementation Plan"},{"type":"DELETE","lineNumber":3,"oldContent":"App Improvements & Refactoring"},{"type":"DELETE","lineNumber":4,"oldContent":"The following issues need to be addressed within the app to improve user experience, functionality, and design."},{"type":"INSERT","lineNumber":2,"content":"## IMPLEMENTATION STATUS ✅ COMPLETED"},{"type":"DELETE","lineNumber":6,"oldContent":"User Interface and Flow:"},{"type":"INSERT","lineNumber":4,"content":"### 📊 Trend Analysis"},{"type":"INSERT","lineNumber":5,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"INSERT","lineNumber":6,"content":"- ✅ The trend analysis chart now only populates after a full week of data has been collected"},{"type":"INSERT","lineNumber":7,"content":"- ✅ Shows \"Building trend data...\" message until 7+ days of data available"},{"type":"INSERT","lineNumber":8,"content":"- ✅ Linear regression analysis for habit performance trends"},{"type":"INSERT","lineNumber":9,"content":"- ✅ Weekly pattern detection and monthly analysis for longer datasets"},{"type":"DELETE","lineNumber":8,"oldContent":"Habit Creation Screen:"},{"type":"INSERT","lineNumber":11,"content":"### 🏆 Habit Performance Ranking"},{"type":"INSERT","lineNumber":12,"content":"**Status: ✅ IMPLEMENTED** "},{"type":"INSERT","lineNumber":13,"content":"- ✅ Added filtering options in insights screen"},{"type":"INSERT","lineNumber":14,"content":"- ✅ View top performers, bottom performers, and all habits"},{"type":"INSERT","lineNumber":15,"content":"- ✅ Individual habit trend tracking with completion rates"},{"type":"INSERT","lineNumber":16,"content":"- ✅ Color-coded performance indicators"},{"type":"DELETE","lineNumber":10,"oldContent":"Hourly Habits: Implement a time picker that allows users to select multiple times throughout the day."},{"type":"INSERT","lineNumber":18,"content":"### ⚙️ Settings Screen"},{"type":"INSERT","lineNumber":19,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":12,"oldContent":"Monthly Reminders: Improve the date picker to be a true calendar view that shows the days of the week."},{"type":"INSERT","lineNumber":21,"content":"#### Default Screen Selection"},{"type":"INSERT","lineNumber":22,"content":"- ✅ Add a new setting that allows users to choose their preferred default landing screen"},{"type":"INSERT","lineNumber":23,"content":"- ✅ Options: Timeline, All Habits, Stats, Insights"},{"type":"INSERT","lineNumber":24,"content":"- ✅ Saves preference to SharedPreferences for persistence"},{"type":"DELETE","lineNumber":14,"oldContent":"Yearly Habits: Add a new calendar-style date picker for selecting multiple months and days."},{"type":"INSERT","lineNumber":26,"content":"### 🔧 Functionality and Integrations"},{"type":"DELETE","lineNumber":16,"oldContent":"Screen Layout: Reorganize the UI to move the color picker to the bottom and the notifications section directly below the frequency setting."},{"type":"INSERT","lineNumber":28,"content":"#### 🔔 Live Notifications"},{"type":"INSERT","lineNumber":29,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":18,"oldContent":"All Habits Screen:"},{"type":"INSERT","lineNumber":31,"content":"##### Actionable Buttons"},{"type":"INSERT","lineNumber":32,"content":"- ✅ Modified habit notifications to include Complete button that updates habit status"},{"type":"INSERT","lineNumber":33,"content":"- ✅ Added Snooze button that reschedules notification for 30 minutes later"},{"type":"INSERT","lineNumber":34,"content":"- ✅ Enhanced notification service with callback system for handling actions"},{"type":"INSERT","lineNumber":35,"content":"- ✅ Android 12+ exact alarm permissions support"},{"type":"DELETE","lineNumber":20,"oldContent":"Action Menu: Increase the size of the three-dot menu icon to make it easier for users to interact with."},{"type":"INSERT","lineNumber":37,"content":"#### 🏥 Health Data Integration"},{"type":"INSERT","lineNumber":38,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":22,"oldContent":"Timeline Screen:"},{"type":"INSERT","lineNumber":40,"content":"##### Implementation"},{"type":"INSERT","lineNumber":41,"content":"- ✅ Implemented comprehensive health data integration"},{"type":"INSERT","lineNumber":42,"content":"- ✅ Correct permissions are requested from user with clear explanations"},{"type":"INSERT","lineNumber":43,"content":"- ✅ Steps, heart rate, sleep, exercise, and water intake tracking"},{"type":"INSERT","lineNumber":44,"content":"- ✅ Cross-platform support (iOS HealthKit/Android Health Connect)"},{"type":"INSERT","lineNumber":45,"content":"- ✅ Health summary displayed in insights overview"},{"type":"INSERT","lineNumber":46,"content":"- ✅ Health-based habit recommendations"},{"type":"DELETE","lineNumber":24,"oldContent":"Chronological Ordering: Display habits in chronological order."},{"type":"INSERT","lineNumber":48,"content":"#### 📅 Calendar Integration"},{"type":"INSERT","lineNumber":49,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":26,"oldContent":"Default View: Make the Timeline screen the default view when the app launches."},{"type":"INSERT","lineNumber":51,"content":"##### Functionality"},{"type":"INSERT","lineNumber":52,"content":"- ✅ Made calendar integration fully functional"},{"type":"INSERT","lineNumber":53,"content":"- ✅ Habit event creation with 🎯 emoji prefix"},{"type":"INSERT","lineNumber":54,"content":"- ✅ Weekly recurring habit events"},{"type":"INSERT","lineNumber":55,"content":"- ✅ Completion marking (🎯 → ✅ when completed)"},{"type":"INSERT","lineNumber":56,"content":"- ✅ Calendar statistics and sync capabilities"},{"type":"DELETE","lineNumber":28,"oldContent":"Auto-Scrolling: Prevent the screen from auto-scrolling to the top. The view should be focused on the current time, with past habits scrolling off-screen and future habits visible below."},{"type":"INSERT","lineNumber":58,"content":"#### 🎯 Smart Recommendations"},{"type":"INSERT","lineNumber":59,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":30,"oldContent":"Category Breakdown Chart:"},{"type":"INSERT","lineNumber":61,"content":"##### Bug Fix & Enhancement"},{"type":"INSERT","lineNumber":62,"content":"- ✅ Investigated and fixed issues preventing smart recommendations from working"},{"type":"INSERT","lineNumber":63,"content":"- ✅ AI-powered habit suggestions based on existing patterns"},{"type":"INSERT","lineNumber":64,"content":"- ✅ Time-slot optimization and category balancing"},{"type":"INSERT","lineNumber":65,"content":"- ✅ Contextual suggestions based on current time"},{"type":"INSERT","lineNumber":66,"content":"- ✅ One-click habit creation from recommendations"},{"type":"DELETE","lineNumber":32,"oldContent":"Readability: Improve the readability of the chart when 10 or more habits are added."},{"type":"INSERT","lineNumber":68,"content":"### 📈 Data Handling and Gamification"},{"type":"DELETE","lineNumber":34,"oldContent":"Stats Screen:"},{"type":"INSERT","lineNumber":70,"content":"#### 📊 Analysis Screens"},{"type":"INSERT","lineNumber":71,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":36,"oldContent":"Trend Analysis: The trend analysis chart should only populate after a full week of data has been collected."},{"type":"INSERT","lineNumber":73,"content":"##### Monthly & Yearly Data Requirements"},{"type":"INSERT","lineNumber":74,"content":"- ✅ These screens now only populate with data once sufficient amount has been recorded"},{"type":"INSERT","lineNumber":75,"content":"- ✅ Trend analysis requires minimum 7 days of data"},{"type":"INSERT","lineNumber":76,"content":"- ✅ Monthly patterns require 30+ days of data"},{"type":"INSERT","lineNumber":77,"content":"- ✅ Progressive disclosure of features as data accumulates"},{"type":"DELETE","lineNumber":38,"oldContent":"Habit Performance Ranking: Add a filtering option to allow users to view the top five, bottom five, or all habits."},{"type":"INSERT","lineNumber":79,"content":"##### Stats Enhancement"},{"type":"INSERT","lineNumber":80,"content":"- ✅ Reworked monthly and yearly statistics to provide more engaging and useful insights"},{"type":"INSERT","lineNumber":81,"content":"- ✅ No longer just extending weekly details"},{"type":"INSERT","lineNumber":82,"content":"- ✅ Added comprehensive insights with 4-tab interface:"},{"type":"INSERT","lineNumber":83,"content":"  - Overview: Gamification stats, quick stats, health summary"},{"type":"INSERT","lineNumber":84,"content":"  - Trends: Overall trends, weekly patterns, individual analysis"},{"type":"INSERT","lineNumber":85,"content":"  - Achievements: Progress overview, unlocked/available achievements"},{"type":"INSERT","lineNumber":86,"content":"  - Recommendations: Contextual suggestions, personalized recommendations"},{"type":"DELETE","lineNumber":40,"oldContent":"Settings Screen:"},{"type":"INSERT","lineNumber":88,"content":"#### 🏆 Achievements & Gamification"},{"type":"INSERT","lineNumber":89,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":42,"oldContent":"Default Screen: Add a new setting that allows users to choose their preferred default landing screen."},{"type":"INSERT","lineNumber":91,"content":"##### Robust Badge System"},{"type":"INSERT","lineNumber":92,"content":"- ✅ Implemented comprehensive achievement system with 16 different achievements:"},{"type":"INSERT","lineNumber":93,"content":"  - **Streak Achievements**: 1, 7, 30, 100 days"},{"type":"INSERT","lineNumber":94,"content":"  - **Consistency**: Perfect weeks and months  "},{"type":"INSERT","lineNumber":95,"content":"  - **Variety**: Multiple habit categories"},{"type":"INSERT","lineNumber":96,"content":"  - **Dedication**: Total completion milestones"},{"type":"INSERT","lineNumber":97,"content":"  - **Health Focus**: Category-specific goals (Health, Fitness, Mental Health)"},{"type":"INSERT","lineNumber":98,"content":"  - **Special**: Time-based (Early Bird, Night Owl) and Comeback achievements"},{"type":"DELETE","lineNumber":44,"oldContent":"Functionality and Integrations:"},{"type":"INSERT","lineNumber":100,"content":"##### Long-term Engagement Features"},{"type":"INSERT","lineNumber":101,"content":"- ✅ XP and leveling system with square root progression"},{"type":"INSERT","lineNumber":102,"content":"- ✅ Rank system (Novice → Beginner → Intermediate → Advanced → Expert → Master → Grandmaster)"},{"type":"INSERT","lineNumber":103,"content":"- ✅ Achievement progress tracking with visual progress bars"},{"type":"INSERT","lineNumber":104,"content":"- ✅ Automatic achievement detection with celebration popups"},{"type":"INSERT","lineNumber":105,"content":"- ✅ Gamification stats integration throughout the app"},{"type":"DELETE","lineNumber":46,"oldContent":"Live Notifications:"},{"type":"INSERT","lineNumber":107,"content":"## 🆕 ADDITIONAL ENHANCEMENTS IMPLEMENTED"},{"type":"DELETE","lineNumber":48,"oldContent":"Actionable Buttons: Modify habit notifications to include a Complete button that updates the habit's status and a Snooze button that reschedules the notification for 30 minutes later."},{"type":"INSERT","lineNumber":109,"content":"### 💡 Comprehensive Insights Screen"},{"type":"INSERT","lineNumber":110,"content":"- ✅ Complete redesign with 4-tab tabbed interface"},{"type":"INSERT","lineNumber":111,"content":"- ✅ Overview tab with gamification stats and health integration"},{"type":"INSERT","lineNumber":112,"content":"- ✅ Trends tab with intelligent analysis (7+ day requirement)"},{"type":"INSERT","lineNumber":113,"content":"- ✅ Achievements tab with progress tracking"},{"type":"INSERT","lineNumber":114,"content":"- ✅ Recommendations tab with one-click habit creation"},{"type":"DELETE","lineNumber":50,"oldContent":"Health Data Integration:"},{"type":"INSERT","lineNumber":116,"content":"### 🔧 Technical Improvements"},{"type":"INSERT","lineNumber":117,"content":"- ✅ Proper error handling with logging service integration"},{"type":"INSERT","lineNumber":118,"content":"- ✅ Clean service architecture with separation of concerns"},{"type":"INSERT","lineNumber":119,"content":"- ✅ Performance optimization with caching and future builders"},{"type":"INSERT","lineNumber":120,"content":"- ✅ Comprehensive permission management across all platforms"},{"type":"DELETE","lineNumber":52,"oldContent":"Implementation: Implement health data integration and ensure the correct permissions are requested from the user."},{"type":"INSERT","lineNumber":122,"content":"### 🎨 UI/UX Enhancements"},{"type":"INSERT","lineNumber":123,"content":"- ✅ Color-coded trends and performance indicators"},{"type":"INSERT","lineNumber":124,"content":"- ✅ Progress bars for achievements and level progression"},{"type":"INSERT","lineNumber":125,"content":"- ✅ Category icons and difficulty indicators"},{"type":"INSERT","lineNumber":126,"content":"- ✅ Expandable recommendation cards"},{"type":"INSERT","lineNumber":127,"content":"- ✅ Achievement unlock animations"},{"type":"DELETE","lineNumber":54,"oldContent":"Calendar Integration:"},{"type":"INSERT","lineNumber":129,"content":"## 📱 PLATFORM COMPATIBILITY"},{"type":"INSERT","lineNumber":130,"content":"- ✅ Android 12+ exact alarm permissions"},{"type":"INSERT","lineNumber":131,"content":"- ✅ iOS HealthKit and EventKit integration"},{"type":"INSERT","lineNumber":132,"content":"- ✅ Cross-platform notification action buttons"},{"type":"INSERT","lineNumber":133,"content":"- ✅ Proper permission handling for all platforms"},{"type":"DELETE","lineNumber":56,"oldContent":"Functionality: Make the calendar integration fully functional."},{"type":"INSERT","lineNumber":135,"content":"---"},{"type":"DELETE","lineNumber":58,"oldContent":"Smart Recommendations:"},{"type":"INSERT","lineNumber":137,"content":"## 🔮 FUTURE ROADMAP (Not Yet Implemented)"},{"type":"DELETE","lineNumber":60,"oldContent":"Bug Fix: Investigate and fix any issues preventing smart recommendations from working."},{"type":"INSERT","lineNumber":139,"content":"### Advanced Analytics"},{"type":"INSERT","lineNumber":140,"content":"- [ ] Machine learning habit success prediction"},{"type":"INSERT","lineNumber":141,"content":"- [ ] Correlation analysis between different habits"},{"type":"INSERT","lineNumber":142,"content":"- [ ] Seasonal pattern detection"},{"type":"DELETE","lineNumber":62,"oldContent":"Data Handling and Gamification:"},{"type":"INSERT","lineNumber":144,"content":"### Social Features  "},{"type":"INSERT","lineNumber":145,"content":"- [ ] Habit sharing with friends"},{"type":"INSERT","lineNumber":146,"content":"- [ ] Community challenges and leaderboards"},{"type":"INSERT","lineNumber":147,"content":"- [ ] Habit buddy system"},{"type":"DELETE","lineNumber":64,"oldContent":"Analysis Screens:"},{"type":"INSERT","lineNumber":149,"content":"### Advanced Integrations"},{"type":"INSERT","lineNumber":150,"content":"- [ ] Wearable device integration (Apple Watch, Fitbit)"},{"type":"INSERT","lineNumber":151,"content":"- [ ] Smart home automation triggers"},{"type":"INSERT","lineNumber":152,"content":"- [ ] Weather-based habit adjustments"},{"type":"DELETE","lineNumber":66,"oldContent":"Monthly & Yearly: These screens should only populate with data once a sufficient amount has been recorded."},{"type":"INSERT","lineNumber":154,"content":"---"},{"type":"DELETE","lineNumber":68,"oldContent":"Stats: Rework monthly and yearly statistics to provide more engaging and useful insights, rather than just extending the weekly details."},{"type":"INSERT","lineNumber":156,"content":"*Implementation Status: All planned features completed ✅*"},{"type":"INSERT","lineNumber":157,"content":"*Last Updated: August 5, 2025*"},{"type":"DELETE","lineNumber":70,"oldContent":"Achievements & Gamification:"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"Badges: Implement a more robust system for achievement badges that includes long-term goals to encourage sustained engagement."}]},{"timestamp":1754439520937,"changes":[{"type":"INSERT","lineNumber":1,"content":""},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":77,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"INSERT","lineNumber":72,"content":""},{"type":"DELETE","lineNumber":91,"oldContent":"*Last Updated: August 5, 2025*"},{"type":"DELETE","lineNumber":93,"oldContent":"*Implementation Status: All planned features completed ✅*"},{"type":"DELETE","lineNumber":95,"oldContent":"---"},{"type":"DELETE","lineNumber":97,"oldContent":"- [ ] Weather-based habit adjustments"},{"type":"DELETE","lineNumber":99,"oldContent":"- [ ] Smart home automation triggers"},{"type":"DELETE","lineNumber":100,"oldContent":"- [ ] Wearable device integration (Apple Watch, Fitbit)"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"DELETE","lineNumber":102,"oldContent":"### Advanced Integrations"},{"type":"DELETE","lineNumber":104,"oldContent":"- [ ] Habit buddy system"},{"type":"DELETE","lineNumber":106,"oldContent":"- [ ] Community challenges and leaderboards"},{"type":"DELETE","lineNumber":108,"oldContent":"- [ ] Habit sharing with friends"},{"type":"DELETE","lineNumber":110,"oldContent":"### Social Features  "},{"type":"DELETE","lineNumber":112,"oldContent":"- [ ] Seasonal pattern detection"},{"type":"DELETE","lineNumber":114,"oldContent":"- [ ] Correlation analysis between different habits"},{"type":"DELETE","lineNumber":116,"oldContent":"- [ ] Machine learning habit success prediction"},{"type":"DELETE","lineNumber":117,"oldContent":"### Advanced Analytics"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":119,"oldContent":"## 🔮 FUTURE ROADMAP (Not Yet Implemented)"},{"type":"DELETE","lineNumber":121,"oldContent":"---"},{"type":"DELETE","lineNumber":122,"oldContent":"- ✅ Proper permission handling for all platforms"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"DELETE","lineNumber":124,"oldContent":"- ✅ Cross-platform notification action buttons"},{"type":"DELETE","lineNumber":126,"oldContent":"- ✅ iOS HealthKit and EventKit integration"},{"type":"DELETE","lineNumber":128,"oldContent":"- ✅ Android 12+ exact alarm permissions"},{"type":"DELETE","lineNumber":130,"oldContent":"## 📱 PLATFORM COMPATIBILITY"},{"type":"DELETE","lineNumber":132,"oldContent":"- ✅ Achievement unlock animations"},{"type":"DELETE","lineNumber":134,"oldContent":"- ✅ Expandable recommendation cards"},{"type":"DELETE","lineNumber":136,"oldContent":"- ✅ Category icons and difficulty indicators"},{"type":"DELETE","lineNumber":138,"oldContent":"- ✅ Progress bars for achievements and level progression"},{"type":"DELETE","lineNumber":139,"oldContent":"- ✅ Color-coded trends and performance indicators"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"DELETE","lineNumber":141,"oldContent":"### 🎨 UI/UX Enhancements"},{"type":"DELETE","lineNumber":143,"oldContent":"- ✅ Comprehensive permission management across all platforms"},{"type":"DELETE","lineNumber":145,"oldContent":"- ✅ Performance optimization with caching and future builders"},{"type":"DELETE","lineNumber":147,"oldContent":"- ✅ Clean service architecture with separation of concerns"},{"type":"DELETE","lineNumber":149,"oldContent":"- ✅ Proper error handling with logging service integration"},{"type":"DELETE","lineNumber":151,"oldContent":"### 🔧 Technical Improvements"},{"type":"DELETE","lineNumber":152,"oldContent":"- ✅ Recommendations tab with one-click habit creation"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"DELETE","lineNumber":154,"oldContent":"- ✅ Achievements tab with progress tracking"},{"type":"DELETE","lineNumber":155,"oldContent":"- ✅ Trends tab with intelligent analysis (7+ day requirement)"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"DELETE","lineNumber":157,"oldContent":"- ✅ Overview tab with gamification stats and health integration"},{"type":"INSERT","lineNumber":111,"content":"- ✅ Overview tab with gamification stats and health integration"},{"type":"INSERT","lineNumber":112,"content":"- ✅ Trends tab with intelligent analysis (7+ day requirement)"},{"type":"INSERT","lineNumber":113,"content":"- ✅ Achievements tab with progress tracking"},{"type":"INSERT","lineNumber":114,"content":"- ✅ Recommendations tab with one-click habit creation"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"### 🔧 Technical Improvements"},{"type":"INSERT","lineNumber":117,"content":"- ✅ Proper error handling with logging service integration"},{"type":"INSERT","lineNumber":118,"content":"- ✅ Clean service architecture with separation of concerns"},{"type":"INSERT","lineNumber":119,"content":"- ✅ Performance optimization with caching and future builders"},{"type":"INSERT","lineNumber":120,"content":"- ✅ Comprehensive permission management across all platforms"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"### 🎨 UI/UX Enhancements"},{"type":"INSERT","lineNumber":123,"content":"- ✅ Color-coded trends and performance indicators"},{"type":"INSERT","lineNumber":124,"content":"- ✅ Progress bars for achievements and level progression"},{"type":"INSERT","lineNumber":125,"content":"- ✅ Category icons and difficulty indicators"},{"type":"INSERT","lineNumber":126,"content":"- ✅ Expandable recommendation cards"},{"type":"INSERT","lineNumber":127,"content":"- ✅ Achievement unlock animations"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"## 📱 PLATFORM COMPATIBILITY"},{"type":"INSERT","lineNumber":130,"content":"- ✅ Android 12+ exact alarm permissions"},{"type":"INSERT","lineNumber":131,"content":"- ✅ iOS HealthKit and EventKit integration"},{"type":"INSERT","lineNumber":132,"content":"- ✅ Cross-platform notification action buttons"},{"type":"INSERT","lineNumber":133,"content":"- ✅ Proper permission handling for all platforms"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"---"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"## 🔮 FUTURE ROADMAP (Not Yet Implemented)"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"### Advanced Analytics"},{"type":"INSERT","lineNumber":140,"content":"- [ ] Machine learning habit success prediction"},{"type":"INSERT","lineNumber":141,"content":"- [ ] Correlation analysis between different habits health data if enabled"},{"type":"INSERT","lineNumber":142,"content":"- [ ] Seasonal pattern detection"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"### Social Features  "},{"type":"INSERT","lineNumber":145,"content":"- [ ] Habit sharing with friends"},{"type":"INSERT","lineNumber":146,"content":"- [ ] Community challenges and leaderboards"},{"type":"INSERT","lineNumber":147,"content":"- [ ] Habit buddy system"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"### Advanced Integrations"},{"type":"INSERT","lineNumber":150,"content":"- [ ] Wearable device integration (Apple Watch, Fitbit)"},{"type":"INSERT","lineNumber":151,"content":"- [ ] Smart home automation triggers"},{"type":"INSERT","lineNumber":152,"content":"- [ ] Weather-based habit adjustments"},{"type":"INSERT","lineNumber":153,"content":""},{"type":"INSERT","lineNumber":154,"content":"---"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"*Implementation Status: All planned features completed ✅*"},{"type":"INSERT","lineNumber":157,"content":"*Last Updated: August 5, 2025*"},{"type":"INSERT","lineNumber":158,"content":""}]},{"timestamp":1754439541017,"changes":[{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"- ✅ Overview tab with gamification stats and health integration"},{"type":"INSERT","lineNumber":85,"content":"  - Achievements: Progress overview, unlocked/available achievements"},{"type":"INSERT","lineNumber":86,"content":"  - Recommendations: Contextual suggestions, personalized recommendations"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"INSERT","lineNumber":88,"content":"#### 🏆 Achievements & Gamification"},{"type":"INSERT","lineNumber":89,"content":"**Status: ✅ IMPLEMENTED**"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":91,"content":"##### Robust Badge System"},{"type":"INSERT","lineNumber":92,"content":"- ✅ Implemented comprehensive achievement system with 16 different achievements:"},{"type":"INSERT","lineNumber":93,"content":"  - **Streak Achievements**: 1, 7, 30, 100 days"},{"type":"INSERT","lineNumber":94,"content":"  - **Consistency**: Perfect weeks and months  "},{"type":"INSERT","lineNumber":95,"content":"  - **Variety**: Multiple habit categories"},{"type":"INSERT","lineNumber":96,"content":"  - **Dedication**: Total completion milestones"},{"type":"INSERT","lineNumber":97,"content":"  - **Health Focus**: Category-specific goals (Health, Fitness, Mental Health)"},{"type":"INSERT","lineNumber":98,"content":"  - **Special**: Time-based (Early Bird, Night Owl) and Comeback achievements"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"##### Long-term Engagement Features"},{"type":"INSERT","lineNumber":101,"content":"- ✅ XP and leveling system with square root progression"},{"type":"INSERT","lineNumber":102,"content":"- ✅ Rank system (Novice → Beginner → Intermediate → Advanced → Expert → Master → Grandmaster)"},{"type":"INSERT","lineNumber":103,"content":"- ✅ Achievement progress tracking with visual progress bars"},{"type":"INSERT","lineNumber":104,"content":"- ✅ Automatic achievement detection with celebration popups"},{"type":"INSERT","lineNumber":105,"content":"- ✅ Gamification stats integration throughout the app"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"## 🆕 ADDITIONAL ENHANCEMENTS IMPLEMENTED"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"### 💡 Comprehensive Insights Screen"},{"type":"INSERT","lineNumber":110,"content":"- ✅ Complete redesign with 4-tab tabbed interface"},{"type":"INSERT","lineNumber":111,"content":"- ✅ Overview tab with gamification stats and health integration"},{"type":"DELETE","lineNumber":93,"oldContent":"  - Achievements: Progress overview, unlocked/available achievements"},{"type":"DELETE","lineNumber":96,"oldContent":"  - Recommendations: Contextual suggestions, personalized recommendations"},{"type":"DELETE","lineNumber":100,"oldContent":"#### 🏆 Achievements & Gamification"},{"type":"DELETE","lineNumber":103,"oldContent":"**Status: ✅ IMPLEMENTED**"},{"type":"DELETE","lineNumber":107,"oldContent":"##### Robust Badge System"},{"type":"DELETE","lineNumber":110,"oldContent":"- ✅ Implemented comprehensive achievement system with 16 different achievements:"},{"type":"DELETE","lineNumber":113,"oldContent":"  - **Streak Achievements**: 1, 7, 30, 100 days"},{"type":"DELETE","lineNumber":116,"oldContent":"  - **Consistency**: Perfect weeks and months  "},{"type":"DELETE","lineNumber":119,"oldContent":"  - **Variety**: Multiple habit categories"},{"type":"DELETE","lineNumber":122,"oldContent":"  - **Dedication**: Total completion milestones"},{"type":"DELETE","lineNumber":125,"oldContent":"  - **Health Focus**: Category-specific goals (Health, Fitness, Mental Health)"},{"type":"DELETE","lineNumber":128,"oldContent":"  - **Special**: Time-based (Early Bird, Night Owl) and Comeback achievements"},{"type":"DELETE","lineNumber":132,"oldContent":"##### Long-term Engagement Features"},{"type":"DELETE","lineNumber":135,"oldContent":"- ✅ XP and leveling system with square root progression"},{"type":"DELETE","lineNumber":137,"oldContent":"### Social Features  "},{"type":"DELETE","lineNumber":138,"oldContent":"- ✅ Rank system (Novice → Beginner → Intermediate → Advanced → Expert → Master → Grandmaster)"},{"type":"DELETE","lineNumber":139,"oldContent":"- [ ] Habit sharing with friends"},{"type":"DELETE","lineNumber":140,"oldContent":"- [ ] Community challenges and leaderboards"},{"type":"DELETE","lineNumber":141,"oldContent":"- ✅ Achievement progress tracking with visual progress bars"},{"type":"DELETE","lineNumber":142,"oldContent":"- [ ] Habit buddy system"},{"type":"DELETE","lineNumber":144,"oldContent":"- ✅ Automatic achievement detection with celebration popups"},{"type":"DELETE","lineNumber":147,"oldContent":"- ✅ Gamification stats integration throughout the app"},{"type":"DELETE","lineNumber":151,"oldContent":"## 🆕 ADDITIONAL ENHANCEMENTS IMPLEMENTED"},{"type":"DELETE","lineNumber":155,"oldContent":"### 💡 Comprehensive Insights Screen"},{"type":"DELETE","lineNumber":158,"oldContent":"- ✅ Complete redesign with 4-tab tabbed interface"}]},{"timestamp":1754439557907,"changes":[{"type":"INSERT","lineNumber":82,"content":"- ✅ Added comprehensive insights with 4-tab interface:"},{"type":"INSERT","lineNumber":83,"content":"  - Overview: Gamification stats, quick stats, health summary"},{"type":"INSERT","lineNumber":84,"content":"  - Trends: Overall trends, weekly patterns, individual analysis"},{"type":"DELETE","lineNumber":84,"oldContent":"- ✅ Added comprehensive insights with 4-tab interface:"},{"type":"DELETE","lineNumber":87,"oldContent":"  - Overview: Gamification stats, quick stats, health summary"},{"type":"DELETE","lineNumber":90,"oldContent":"  - Trends: Overall trends, weekly patterns, individual analysis"},{"type":"DELETE","lineNumber":92,"oldContent":"- ✅ Trends tab with intelligent analysis (7+ day requirement)"},{"type":"DELETE","lineNumber":94,"oldContent":"- ✅ Achievements tab with progress tracking"},{"type":"DELETE","lineNumber":97,"oldContent":"- ✅ Recommendations tab with one-click habit creation"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"### 🔧 Technical Improvements"},{"type":"DELETE","lineNumber":104,"oldContent":"- ✅ Proper error handling with logging service integration"},{"type":"DELETE","lineNumber":106,"oldContent":"- ✅ Clean service architecture with separation of concerns"},{"type":"DELETE","lineNumber":109,"oldContent":"- ✅ Performance optimization with caching and future builders"},{"type":"DELETE","lineNumber":111,"oldContent":"- ✅ Comprehensive permission management across all platforms"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"### 🎨 UI/UX Enhancements"},{"type":"DELETE","lineNumber":118,"oldContent":"- ✅ Color-coded trends and performance indicators"},{"type":"DELETE","lineNumber":121,"oldContent":"- ✅ Progress bars for achievements and level progression"},{"type":"DELETE","lineNumber":123,"oldContent":"- ✅ Category icons and difficulty indicators"},{"type":"INSERT","lineNumber":112,"content":"- ✅ Trends tab with intelligent analysis (7+ day requirement)"},{"type":"INSERT","lineNumber":113,"content":"- ✅ Achievements tab with progress tracking"},{"type":"INSERT","lineNumber":114,"content":"- ✅ Recommendations tab with one-click habit creation"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"### 🔧 Technical Improvements"},{"type":"INSERT","lineNumber":117,"content":"- ✅ Proper error handling with logging service integration"},{"type":"INSERT","lineNumber":118,"content":"- ✅ Clean service architecture with separation of concerns"},{"type":"INSERT","lineNumber":119,"content":"- ✅ Performance optimization with caching and future builders"},{"type":"INSERT","lineNumber":120,"content":"- ✅ Comprehensive permission management across all platforms"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"### 🎨 UI/UX Enhancements"},{"type":"INSERT","lineNumber":123,"content":"- ✅ Color-coded trends and performance indicators"},{"type":"INSERT","lineNumber":124,"content":"- ✅ Progress bars for achievements and level progression"},{"type":"INSERT","lineNumber":125,"content":"- ✅ Category icons and difficulty indicators"},{"type":"DELETE","lineNumber":147,"oldContent":"- [ ] Smart home automation triggers"}]}]},"H:/New/HabitV8/lib/services/health_service.dart":{"filePath":"H:/New/HabitV8/lib/services/health_service.dart","baseContent":"import 'package:health/health.dart';\nimport 'dart:io';\nimport 'logging_service.dart';\n\nclass HealthService {\n  static Health? _health;\n  static bool _isInitialized = false;\n\n  /// List of health data types we want to access\n  static final List<HealthDataType> _healthDataTypes = [\n    HealthDataType.STEPS,\n    HealthDataType.HEART_RATE,\n    HealthDataType.SLEEP_IN_BED,\n    HealthDataType.SLEEP_ASLEEP,\n    HealthDataType.ACTIVE_ENERGY_BURNED,\n    HealthDataType.EXERCISE_TIME,\n    HealthDataType.WORKOUT,\n    if (Platform.isIOS) ...[\n      HealthDataType.MINDFULNESS,\n      HealthDataType.WATER,\n    ],\n    if (Platform.isAndroid) ...[\n      HealthDataType.WATER,\n      HealthDataType.WEIGHT,\n    ],\n  ];\n\n  /// Initialize health service\n  static Future<bool> initialize() async {\n    if (_isInitialized) return true;\n\n    try {\n      _health = Health();\n      \n      // Check if health data is available on this platform\n      final bool isAvailable = await Health().hasPermissions(_healthDataTypes) ?? false;\n      \n      _isInitialized = true;\n      AppLogger.info('Health service initialized. Available: $isAvailable');\n      \n      return true;\n    } catch (e) {\n      AppLogger.error('Failed to initialize health service', e);\n      return false;\n    }\n  }\n\n  /// Request health data permissions\n  static Future<bool> requestPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      // Request permissions for read access\n      final List<HealthDataAccess> permissions = _healthDataTypes\n          .map((type) => HealthDataAccess.READ)\n          .toList();\n\n      final bool granted = await Health().requestAuthorization(\n        _healthDataTypes,\n        permissions: permissions,\n      );\n\n      AppLogger.info('Health permissions granted: $granted');\n      return granted;\n    } catch (e) {\n      AppLogger.error('Failed to request health permissions', e);\n      return false;\n    }\n  }\n\n  /// Check if health permissions are granted\n  static Future<bool> hasPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final bool? hasPerms = await Health().hasPermissions(_healthDataTypes);\n      return hasPerms ?? false;\n    } catch (e) {\n      AppLogger.error('Error checking health permissions', e);\n      return false;\n    }\n  }\n\n  /// Get steps data for a date range\n  static Future<List<HealthDataPoint>> getStepsData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        [HealthDataType.STEPS],\n        startDate,\n        endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} steps data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get steps data', e);\n      return [];\n    }\n  }\n\n  /// Get heart rate data for a date range\n  static Future<List<HealthDataPoint>> getHeartRateData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        [HealthDataType.HEART_RATE],\n        startDate,\n        endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} heart rate data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get heart rate data', e);\n      return [];\n    }\n  }\n\n  /// Get sleep data for a date range\n  static Future<List<HealthDataPoint>> getSleepData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],\n        startDate,\n        endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} sleep data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get sleep data', e);\n      return [];\n    }\n  }\n\n  /// Get exercise/workout data for a date range\n  static Future<List<HealthDataPoint>> getExerciseData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],\n        startDate,\n        endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} exercise data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get exercise data', e);\n      return [];\n    }\n  }\n\n  /// Get water intake data for a date range\n  static Future<List<HealthDataPoint>> getWaterData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        [HealthDataType.WATER],\n        startDate,\n        endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} water data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get water data', e);\n      return [];\n    }\n  }\n\n  /// Get comprehensive health summary for today\n  static Future<Map<String, dynamic>> getTodayHealthSummary() async {\n    final DateTime today = DateTime.now();\n    final DateTime startOfDay = DateTime(today.year, today.month, today.day);\n    final DateTime endOfDay = startOfDay.add(const Duration(days: 1));\n\n    final Map<String, dynamic> summary = {};\n\n    try {\n      // Get steps\n      final stepsData = await getStepsData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      int totalSteps = 0;\n      for (var point in stepsData) {\n        if (point.value is NumericHealthValue) {\n          totalSteps += (point.value as NumericHealthValue).numericValue.toInt();\n        }\n      }\n      summary['steps'] = totalSteps;\n\n      // Get exercise time\n      final exerciseData = await getExerciseData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      double totalExerciseMinutes = 0;\n      for (var point in exerciseData) {\n        if (point.value is NumericHealthValue) {\n          totalExerciseMinutes += (point.value as NumericHealthValue).numericValue;\n        }\n      }\n      summary['exerciseMinutes'] = totalExerciseMinutes.round();\n\n      // Get water intake\n      final waterData = await getWaterData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      double totalWater = 0;\n      for (var point in waterData) {\n        if (point.value is NumericHealthValue) {\n          totalWater += (point.value as NumericHealthValue).numericValue;\n        }\n      }\n      summary['waterIntake'] = totalWater;\n\n      AppLogger.info('Health summary generated: $summary');\n    } catch (e) {\n      AppLogger.error('Failed to generate health summary', e);\n    }\n\n    return summary;\n  }\n\n  /// Get health insights for habit correlation\n  static Future<Map<String, dynamic>> getHealthInsights({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    final Map<String, dynamic> insights = {};\n\n    try {\n      // Get average daily steps\n      final stepsData = await getStepsData(startDate: startDate, endDate: endDate);\n      final Map<String, int> dailySteps = {};\n      \n      for (var point in stepsData) {\n        if (point.value is NumericHealthValue) {\n          final date = '${point.dateFrom.year}-${point.dateFrom.month.toString().padLeft(2, '0')}-${point.dateFrom.day.toString().padLeft(2, '0')}';\n          dailySteps[date] = (dailySteps[date] ?? 0) + (point.value as NumericHealthValue).numericValue.toInt();\n        }\n      }\n      \n      if (dailySteps.isNotEmpty) {\n        final avgSteps = dailySteps.values.reduce((a, b) => a + b) / dailySteps.length;\n        insights['averageDailySteps'] = avgSteps.round();\n        insights['totalDaysWithSteps'] = dailySteps.length;\n      }\n\n      // Get sleep patterns\n      final sleepData = await getSleepData(startDate: startDate, endDate: endDate);\n      final List<double> sleepDurations = [];\n      \n      for (var point in sleepData) {\n        if (point.type == HealthDataType.SLEEP_ASLEEP && point.value is NumericHealthValue) {\n          final hours = (point.value as NumericHealthValue).numericValue;\n          sleepDurations.add(hours);\n        }\n      }\n      \n      if (sleepDurations.isNotEmpty) {\n        final avgSleep = sleepDurations.reduce((a, b) => a + b) / sleepDurations.length;\n        insights['averageSleepHours'] = (avgSleep * 100).round() / 100; // Round to 2 decimal places\n      }\n\n      AppLogger.info('Health insights generated: $insights');\n    } catch (e) {\n      AppLogger.error('Failed to generate health insights', e);\n    }\n\n    return insights;\n  }\n\n  /// Check if health data is available on this device\n  static Future<bool> isHealthDataAvailable() async {\n    try {\n      return await Health().hasPermissions([HealthDataType.STEPS]) ?? false;\n    } catch (e) {\n      AppLogger.error('Error checking health data availability', e);\n      return false;\n    }\n  }\n\n  /// Write health data (for habits that contribute to health metrics)\n  static Future<bool> writeHealthData({\n    required HealthDataType type,\n    required double value,\n    required DateTime dateTime,\n    String? unit,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final HealthValue healthValue = NumericHealthValue(numericValue: value);\n      \n      final bool success = await Health().writeHealthData(\n        value: healthValue,\n        type: type,\n        startTime: dateTime,\n        endTime: dateTime,\n        unit: unit != null ? HealthDataUnit.values.firstWhere(\n          (u) => u.name.toLowerCase() == unit.toLowerCase(),\n          orElse: () => HealthDataUnit.NO_UNIT,\n        ) : HealthDataUnit.NO_UNIT,\n      );\n\n      AppLogger.info('Health data write success: $success');\n      return success;\n    } catch (e) {\n      AppLogger.error('Failed to write health data', e);\n      return false;\n    }\n  }\n}\n","baseTimestamp":1754438428580,"deltas":[{"timestamp":1754438724759,"changes":[{"type":"MODIFY","lineNumber":33,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":36,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":39,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":274,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":281,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":291,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":298,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":335,"content":"","oldContent":"      "}]},{"timestamp":1754438966851,"changes":[{"type":"DELETE","lineNumber":98,"oldContent":"        [HealthDataType.STEPS],"},{"type":"DELETE","lineNumber":99,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":100,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":98,"content":"        types: [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":99,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":100,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":122,"oldContent":"        [HealthDataType.HEART_RATE],"},{"type":"DELETE","lineNumber":123,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":124,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":122,"content":"        types: [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":123,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":124,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":146,"oldContent":"        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"DELETE","lineNumber":147,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":148,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":146,"content":"        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":147,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":148,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":170,"oldContent":"        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"DELETE","lineNumber":171,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":172,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":170,"content":"        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":171,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":172,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":194,"oldContent":"        [HealthDataType.WATER],"},{"type":"DELETE","lineNumber":195,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":196,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":194,"content":"        types: [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":195,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":196,"content":"        endTime: endDate,"},{"type":"MODIFY","lineNumber":294,"content":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();","oldContent":"          final hours = (point.value as NumericHealthValue).numericValue;"},{"type":"MODIFY","lineNumber":337,"content":"        value: value,","oldContent":"        value: healthValue,"}]},{"timestamp":1754442969279,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"  static Health? _health;"},{"type":"DELETE","lineNumber":32,"oldContent":"      _health = Health();"},{"type":"DELETE","lineNumber":33,"oldContent":""}]},{"timestamp":1754442984695,"changes":[{"type":"DELETE","lineNumber":331,"oldContent":"      final HealthValue healthValue = NumericHealthValue(numericValue: value);"},{"type":"DELETE","lineNumber":332,"oldContent":""}]}]},"H:/New/HabitV8/lib/services/calendar_service.dart":{"filePath":"H:/New/HabitV8/lib/services/calendar_service.dart","baseContent":"import 'package:device_calendar/device_calendar.dart';\nimport 'dart:io';\nimport 'logging_service.dart';\n\nclass CalendarService {\n  static DeviceCalendarPlugin? _deviceCalendarPlugin;\n  static bool _isInitialized = false;\n  static List<Calendar> _calendars = [];\n\n  /// Initialize calendar service\n  static Future<bool> initialize() async {\n    if (_isInitialized) return true;\n\n    try {\n      _deviceCalendarPlugin = DeviceCalendarPlugin();\n      _isInitialized = true;\n      AppLogger.info('Calendar service initialized');\n      return true;\n    } catch (e) {\n      AppLogger.error('Failed to initialize calendar service', e);\n      return false;\n    }\n  }\n\n  /// Request calendar permissions\n  static Future<bool> requestPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      var permissionsGranted = await _deviceCalendarPlugin!.requestPermissions();\n      \n      if (permissionsGranted.isSuccess && permissionsGranted.data == true) {\n        AppLogger.info('Calendar permissions granted');\n        await _loadCalendars();\n        return true;\n      } else {\n        AppLogger.error('Calendar permissions denied');\n        return false;\n      }\n    } catch (e) {\n      AppLogger.error('Failed to request calendar permissions', e);\n      return false;\n    }\n  }\n\n  /// Check if calendar permissions are granted\n  static Future<bool> hasPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      var permissionsGranted = await _deviceCalendarPlugin!.hasPermissions();\n      return permissionsGranted.isSuccess && permissionsGranted.data == true;\n    } catch (e) {\n      AppLogger.error('Error checking calendar permissions', e);\n      return false;\n    }\n  }\n\n  /// Load available calendars\n  static Future<void> _loadCalendars() async {\n    try {\n      var calendarsResult = await _deviceCalendarPlugin!.retrieveCalendars();\n      \n      if (calendarsResult.isSuccess && calendarsResult.data != null) {\n        _calendars = calendarsResult.data!;\n        AppLogger.info('Loaded ${_calendars.length} calendars');\n      }\n    } catch (e) {\n      AppLogger.error('Failed to load calendars', e);\n    }\n  }\n\n  /// Get list of available calendars\n  static Future<List<Calendar>> getCalendars() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    if (_calendars.isEmpty) {\n      await _loadCalendars();\n    }\n\n    return _calendars;\n  }\n\n  /// Get the primary calendar\n  static Future<Calendar?> getPrimaryCalendar() async {\n    final calendars = await getCalendars();\n    \n    // Try to find the primary calendar\n    Calendar? primary = calendars.where((cal) => cal.isDefault == true).firstOrNull;\n    \n    // If no primary found, use the first writable calendar\n    primary ??= calendars.where((cal) => cal.isReadOnly == false).firstOrNull;\n    \n    // If still none found, use the first calendar\n    primary ??= calendars.isNotEmpty ? calendars.first : null;\n    \n    AppLogger.info('Primary calendar: ${primary?.name}');\n    return primary;\n  }\n\n  /// Create a habit event in the calendar\n  static Future<bool> createHabitEvent({\n    required String habitName,\n    required DateTime scheduledTime,\n    required Duration duration,\n    String? description,\n    String? calendarId,\n  }) async {\n    if (!_isInitialized || !await hasPermissions()) {\n      AppLogger.error('Calendar not initialized or no permissions');\n      return false;\n    }\n\n    try {\n      // Get calendar to use\n      Calendar? calendar;\n      if (calendarId != null) {\n        calendar = _calendars.where((cal) => cal.id == calendarId).firstOrNull;\n      }\n      calendar ??= await getPrimaryCalendar();\n\n      if (calendar == null) {\n        AppLogger.error('No calendar available');\n        return false;\n      }\n\n      // Create the event\n      final event = Event(\n        calendar.id,\n        title: '🎯 $habitName',\n        description: description ?? 'Habit reminder for $habitName',\n        start: TZDateTime.from(scheduledTime, TimeZone.getDefault()),\n        end: TZDateTime.from(scheduledTime.add(duration), TimeZone.getDefault()),\n        allDay: false,\n        availability: Availability.Busy,\n        status: EventStatus.Confirmed,\n      );\n\n      final createResult = await _deviceCalendarPlugin!.createOrUpdateEvent(event);\n      \n      if (createResult?.isSuccess == true) {\n        AppLogger.info('Created habit event: $habitName');\n        return true;\n      } else {\n        AppLogger.error('Failed to create habit event: ${createResult?.errorMessages}');\n        return false;\n      }\n    } catch (e) {\n      AppLogger.error('Failed to create habit event', e);\n      return false;\n    }\n  }\n\n  /// Create recurring habit events for a week\n  static Future<bool> createWeeklyHabitEvents({\n    required String habitName,\n    required List<int> weekdays, // 1-7, where 1 is Monday\n    required TimeOfDay time,\n    required Duration duration,\n    String? description,\n    String? calendarId,\n  }) async {\n    try {\n      final now = DateTime.now();\n      final startOfWeek = now.subtract(Duration(days: now.weekday - 1));\n      \n      bool allSuccess = true;\n      \n      for (int weekday in weekdays) {\n        final eventDate = startOfWeek.add(Duration(days: weekday - 1));\n        final scheduledTime = DateTime(\n          eventDate.year,\n          eventDate.month,\n          eventDate.day,\n          time.hour,\n          time.minute,\n        );\n\n        // Only create events for future dates\n        if (scheduledTime.isAfter(now)) {\n          final success = await createHabitEvent(\n            habitName: habitName,\n            scheduledTime: scheduledTime,\n            duration: duration,\n            description: description,\n            calendarId: calendarId,\n          );\n          \n          if (!success) {\n            allSuccess = false;\n          }\n        }\n      }\n      \n      return allSuccess;\n    } catch (e) {\n      AppLogger.error('Failed to create weekly habit events', e);\n      return false;\n    }\n  }\n\n  /// Get habit events for a date range\n  static Future<List<Event>> getHabitEvents({\n    required DateTime startDate,\n    required DateTime endDate,\n    String? calendarId,\n  }) async {\n    if (!_isInitialized || !await hasPermissions()) {\n      return [];\n    }\n\n    try {\n      Calendar? calendar;\n      if (calendarId != null) {\n        calendar = _calendars.where((cal) => cal.id == calendarId).firstOrNull;\n      }\n      calendar ??= await getPrimaryCalendar();\n\n      if (calendar == null) {\n        return [];\n      }\n\n      final eventsResult = await _deviceCalendarPlugin!.retrieveEvents(\n        calendar.id!,\n        RetrieveEventsParams(\n          startDate: startDate,\n          endDate: endDate,\n        ),\n      );\n\n      if (eventsResult.isSuccess && eventsResult.data != null) {\n        // Filter for habit events (those starting with 🎯)\n        final habitEvents = eventsResult.data!\n            .where((event) => event.title?.startsWith('🎯') == true)\n            .toList();\n        \n        AppLogger.info('Retrieved ${habitEvents.length} habit events');\n        return habitEvents;\n      }\n    } catch (e) {\n      AppLogger.error('Failed to get habit events', e);\n    }\n\n    return [];\n  }\n\n  /// Delete a habit event\n  static Future<bool> deleteHabitEvent(String eventId, String calendarId) async {\n    if (!_isInitialized || !await hasPermissions()) {\n      return false;\n    }\n\n    try {\n      final deleteResult = await _deviceCalendarPlugin!.deleteEvent(calendarId, eventId);\n      \n      if (deleteResult?.isSuccess == true) {\n        AppLogger.info('Deleted habit event: $eventId');\n        return true;\n      } else {\n        AppLogger.error('Failed to delete habit event: ${deleteResult?.errorMessages}');\n        return false;\n      }\n    } catch (e) {\n      AppLogger.error('Failed to delete habit event', e);\n      return false;\n    }\n  }\n\n  /// Sync habit completion with calendar (mark as completed)\n  static Future<bool> markHabitEventCompleted({\n    required String eventId,\n    required String calendarId,\n    required DateTime completedTime,\n  }) async {\n    if (!_isInitialized || !await hasPermissions()) {\n      return false;\n    }\n\n    try {\n      // Get the existing event\n      final eventsResult = await _deviceCalendarPlugin!.retrieveEvents(\n        calendarId,\n        RetrieveEventsParams(\n          startDate: completedTime.subtract(const Duration(days: 1)),\n          endDate: completedTime.add(const Duration(days: 1)),\n        ),\n      );\n\n      if (eventsResult.isSuccess && eventsResult.data != null) {\n        final event = eventsResult.data!\n            .where((e) => e.eventId == eventId)\n            .firstOrNull;\n\n        if (event != null) {\n          // Update the event title to show completion\n          final updatedEvent = Event(\n            event.calendarId,\n            eventId: event.eventId,\n            title: '✅ ${event.title?.replaceFirst('🎯', '') ?? ''}',\n            description: '${event.description ?? ''}\\n\\nCompleted at: ${completedTime.toString()}',\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay,\n            availability: Availability.Free,\n            status: EventStatus.Confirmed,\n          );\n\n          final updateResult = await _deviceCalendarPlugin!.createOrUpdateEvent(updatedEvent);\n          \n          if (updateResult?.isSuccess == true) {\n            AppLogger.info('Marked habit event as completed: $eventId');\n            return true;\n          }\n        }\n      }\n    } catch (e) {\n      AppLogger.error('Failed to mark habit event as completed', e);\n    }\n\n    return false;\n  }\n\n  /// Get upcoming habit events for today\n  static Future<List<Event>> getTodayUpcomingHabits() async {\n    final now = DateTime.now();\n    final startOfDay = DateTime(now.year, now.month, now.day);\n    final endOfDay = startOfDay.add(const Duration(days: 1));\n\n    final events = await getHabitEvents(\n      startDate: startOfDay,\n      endDate: endOfDay,\n    );\n\n    // Filter for upcoming events (not completed)\n    final upcomingEvents = events\n        .where((event) => \n          event.start?.isAfter(now) == true && \n          !event.title!.startsWith('✅'))\n        .toList();\n\n    // Sort by start time\n    upcomingEvents.sort((a, b) => a.start!.compareTo(b.start!));\n\n    AppLogger.info('Found ${upcomingEvents.length} upcoming habit events today');\n    return upcomingEvents;\n  }\n\n  /// Get habit completion stats from calendar\n  static Future<Map<String, dynamic>> getHabitStatsFromCalendar({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    final events = await getHabitEvents(\n      startDate: startDate,\n      endDate: endDate,\n    );\n\n    final Map<String, dynamic> stats = {\n      'totalHabits': events.length,\n      'completedHabits': 0,\n      'completionRate': 0.0,\n      'habitBreakdown': <String, Map<String, int>>{},\n    };\n\n    final Map<String, Map<String, int>> habitBreakdown = {};\n\n    for (final event in events) {\n      final habitName = event.title?.replaceAll(RegExp(r'[🎯✅]\\s*'), '') ?? 'Unknown';\n      final isCompleted = event.title?.startsWith('✅') == true;\n\n      habitBreakdown[habitName] ??= {'total': 0, 'completed': 0};\n      habitBreakdown[habitName]!['total'] = habitBreakdown[habitName]!['total']! + 1;\n\n      if (isCompleted) {\n        stats['completedHabits'] = (stats['completedHabits'] as int) + 1;\n        habitBreakdown[habitName]!['completed'] = habitBreakdown[habitName]!['completed']! + 1;\n      }\n    }\n\n    if (events.isNotEmpty) {\n      stats['completionRate'] = (stats['completedHabits'] as int) / events.length;\n    }\n\n    stats['habitBreakdown'] = habitBreakdown;\n\n    AppLogger.info('Calendar habit stats: $stats');\n    return stats;\n  }\n}\n\nclass TimeOfDay {\n  final int hour;\n  final int minute;\n\n  const TimeOfDay({required this.hour, required this.minute});\n\n  @override\n  String toString() => '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';\n}\n","baseTimestamp":1754438474888,"deltas":[{"timestamp":1754438724744,"changes":[{"type":"MODIFY","lineNumber":32,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":66,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":95,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":98,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":101,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":145,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":171,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":173,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":193,"content":"","oldContent":"          "},{"type":"MODIFY","lineNumber":199,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":241,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":260,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":314,"content":"","oldContent":"          "},{"type":"DELETE","lineNumber":341,"oldContent":"        .where((event) => "},{"type":"DELETE","lineNumber":342,"oldContent":"          event.start?.isAfter(now) == true && "},{"type":"INSERT","lineNumber":341,"content":"        .where((event) =>"},{"type":"INSERT","lineNumber":342,"content":"          event.start?.isAfter(now) == true &&"}]},{"timestamp":1754438988141,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"import 'dart:io';"},{"type":"DELETE","lineNumber":137,"oldContent":"        start: TZDateTime.from(scheduledTime, TimeZone.getDefault()),"},{"type":"DELETE","lineNumber":138,"oldContent":"        end: TZDateTime.from(scheduledTime.add(duration), TimeZone.getDefault()),"},{"type":"INSERT","lineNumber":136,"content":"        start: TZDateTime.from(scheduledTime, tz.local),"},{"type":"INSERT","lineNumber":137,"content":"        end: TZDateTime.from(scheduledTime.add(duration), tz.local),"},{"type":"MODIFY","lineNumber":144,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":149,"content":"        AppLogger.error('Failed to create habit event');","oldContent":"        AppLogger.error('Failed to create habit event: ${createResult?.errorMessages}');"},{"type":"DELETE","lineNumber":260,"oldContent":""},{"type":"DELETE","lineNumber":261,"oldContent":"      if (deleteResult?.isSuccess == true) {"},{"type":"INSERT","lineNumber":259,"content":"      "},{"type":"INSERT","lineNumber":260,"content":"      if (deleteResult.isSuccess == true) {"},{"type":"MODIFY","lineNumber":264,"content":"        AppLogger.error('Failed to delete habit event');","oldContent":"        AppLogger.error('Failed to delete habit event: ${deleteResult?.errorMessages}');"}]},{"timestamp":1754439615332,"changes":[{"type":"MODIFY","lineNumber":136,"content":"        start: TZDateTime.from(scheduledTime, tz.local),","oldContent":"        start: TZDateTime.from(scheduledTime, tz.local),"},{"type":"MODIFY","lineNumber":143,"content":"      final createResult = await _deviceCalendarPlugin!.createOrUpdateEvent(event);","oldContent":"      "},{"type":"INSERT","lineNumber":148,"content":"      } else {"},{"type":"DELETE","lineNumber":149,"oldContent":"        AppLogger.error('Failed to create habit event: ${createResult?.errorMessages}');"},{"type":"MODIFY","lineNumber":259,"content":"","oldContent":"      "},{"type":"INSERT","lineNumber":263,"content":"      } else {"},{"type":"DELETE","lineNumber":264,"oldContent":"        AppLogger.error('Failed to delete habit event: ${deleteResult?.errorMessages}');"}]},{"timestamp":1754439652462,"changes":[{"type":"INSERT","lineNumber":135,"content":"        description: description ?? 'Habit reminder for $habitName',"},{"type":"DELETE","lineNumber":136,"oldContent":"        start: TZDateTime.from(scheduledTime, tz.local),"},{"type":"MODIFY","lineNumber":144,"content":"      ","oldContent":""},{"type":"INSERT","lineNumber":258,"content":"      final deleteResult = await _deviceCalendarPlugin!.deleteEvent(calendarId, eventId);"},{"type":"DELETE","lineNumber":259,"oldContent":""}]},{"timestamp":1754439673802,"changes":[{"type":"MODIFY","lineNumber":144,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":259,"content":"","oldContent":"      "}]},{"timestamp":1754440066694,"changes":[{"type":"INSERT","lineNumber":1,"content":"import 'package:timezone/timezone.dart' as tz;"}]}]},"H:/New/HabitV8/lib/services/smart_recommendations_service.dart":{"filePath":"H:/New/HabitV8/lib/services/smart_recommendations_service.dart","baseContent":"import 'dart:math';\nimport 'logging_service.dart';\nimport 'health_service.dart';\n\nclass SmartRecommendationsService {\n  /// Generate smart habit recommendations based on user data\n  static Future<List<HabitRecommendation>> generateRecommendations({\n    required List<Map<String, dynamic>> existingHabits,\n    required Map<String, dynamic> userPreferences,\n    Map<String, dynamic>? healthData,\n  }) async {\n    final List<HabitRecommendation> recommendations = [];\n\n    try {\n      // Analyze existing habits\n      final habitAnalysis = _analyzeExistingHabits(existingHabits);\n      \n      // Get health-based recommendations\n      if (healthData != null) {\n        recommendations.addAll(_getHealthBasedRecommendations(healthData, habitAnalysis));\n      }\n      \n      // Get time-based recommendations\n      recommendations.addAll(_getTimeBasedRecommendations(habitAnalysis, userPreferences));\n      \n      // Get category-based recommendations\n      recommendations.addAll(_getCategoryBasedRecommendations(habitAnalysis));\n      \n      // Get difficulty progression recommendations\n      recommendations.addAll(_getDifficultyProgressionRecommendations(habitAnalysis));\n      \n      // Sort by priority and remove duplicates\n      recommendations.sort((a, b) => b.priority.compareTo(a.priority));\n      \n      // Limit to top 10 recommendations\n      final uniqueRecommendations = <String, HabitRecommendation>{};\n      for (final rec in recommendations) {\n        if (!uniqueRecommendations.containsKey(rec.title) && uniqueRecommendations.length < 10) {\n          uniqueRecommendations[rec.title] = rec;\n        }\n      }\n      \n      AppLogger.info('Generated ${uniqueRecommendations.length} smart recommendations');\n      return uniqueRecommendations.values.toList();\n      \n    } catch (e) {\n      AppLogger.error('Failed to generate smart recommendations', e);\n      return [];\n    }\n  }\n\n  /// Analyze user's existing habits to find patterns\n  static Map<String, dynamic> _analyzeExistingHabits(List<Map<String, dynamic>> habits) {\n    final analysis = <String, dynamic>{\n      'categories': <String, int>{},\n      'timeSlots': <String, int>{},\n      'difficulty': <String, int>{},\n      'totalHabits': habits.length,\n      'averageStreaks': 0,\n      'completionRates': <double>[],\n    };\n\n    int totalStreaks = 0;\n    \n    for (final habit in habits) {\n      // Category analysis\n      final category = habit['category']?.toString() ?? 'Other';\n      analysis['categories'][category] = (analysis['categories'][category] ?? 0) + 1;\n      \n      // Time slot analysis\n      final reminderTime = habit['reminderTime']?.toString() ?? '';\n      if (reminderTime.isNotEmpty) {\n        final hour = int.tryParse(reminderTime.split(':')[0]) ?? 12;\n        String timeSlot;\n        if (hour < 6) timeSlot = 'Late Night';\n        else if (hour < 12) timeSlot = 'Morning';\n        else if (hour < 18) timeSlot = 'Afternoon';\n        else timeSlot = 'Evening';\n        \n        analysis['timeSlots'][timeSlot] = (analysis['timeSlots'][timeSlot] ?? 0) + 1;\n      }\n      \n      // Difficulty analysis\n      final difficulty = habit['difficulty']?.toString() ?? 'Medium';\n      analysis['difficulty'][difficulty] = (analysis['difficulty'][difficulty] ?? 0) + 1;\n      \n      // Streak analysis\n      final streak = habit['currentStreak'] ?? 0;\n      totalStreaks += streak as int;\n      \n      // Completion rate analysis\n      final completionRate = habit['completionRate'] ?? 0.0;\n      (analysis['completionRates'] as List<double>).add(completionRate as double);\n    }\n    \n    if (habits.isNotEmpty) {\n      analysis['averageStreaks'] = totalStreaks / habits.length;\n    }\n    \n    return analysis;\n  }\n\n  /// Get health-based recommendations\n  static List<HabitRecommendation> _getHealthBasedRecommendations(\n    Map<String, dynamic> healthData,\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    \n    // Steps-based recommendations\n    final steps = healthData['steps'] ?? 0;\n    if (steps < 8000) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Walk',\n        description: 'Take a 30-minute walk to reach 10,000 steps',\n        category: 'Fitness',\n        difficulty: 'Easy',\n        reason: 'Your daily steps (${steps}) are below the recommended 10,000',\n        priority: 9,\n        estimatedDuration: 30,\n        suggestedTime: '07:00',\n      ));\n    }\n    \n    // Sleep-based recommendations\n    final sleepHours = healthData['averageSleepHours'] ?? 8.0;\n    if (sleepHours < 7.0) {\n      recommendations.add(HabitRecommendation(\n        title: 'Earlier Bedtime',\n        description: 'Go to bed 30 minutes earlier for better sleep',\n        category: 'Health',\n        difficulty: 'Medium',\n        reason: 'Your average sleep (${sleepHours.toStringAsFixed(1)} hours) is below optimal',\n        priority: 8,\n        estimatedDuration: 10,\n        suggestedTime: '22:00',\n      ));\n    }\n    \n    // Exercise-based recommendations\n    final exerciseMinutes = healthData['exerciseMinutes'] ?? 0;\n    if (exerciseMinutes < 30) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Exercise',\n        description: 'Add 20 minutes of physical activity',\n        category: 'Fitness',\n        difficulty: 'Medium',\n        reason: 'You need more daily exercise (current: ${exerciseMinutes} min)',\n        priority: 7,\n        estimatedDuration: 20,\n        suggestedTime: '18:00',\n      ));\n    }\n    \n    return recommendations;\n  }\n\n  /// Get time-based recommendations\n  static List<HabitRecommendation> _getTimeBasedRecommendations(\n    Map<String, dynamic> habitAnalysis,\n    Map<String, dynamic> userPreferences,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final timeSlots = habitAnalysis['timeSlots'] as Map<String, int>;\n    \n    // Find underutilized time slots\n    final totalHabits = habitAnalysis['totalHabits'] as int;\n    if (totalHabits > 0) {\n      // Morning recommendations if morning is underutilized\n      final morningHabits = timeSlots['Morning'] ?? 0;\n      if (morningHabits < totalHabits * 0.3) {\n        recommendations.add(HabitRecommendation(\n          title: 'Morning Meditation',\n          description: 'Start your day with 10 minutes of mindfulness',\n          category: 'Mental Health',\n          difficulty: 'Easy',\n          reason: 'Your morning routine could benefit from a mindful start',\n          priority: 6,\n          estimatedDuration: 10,\n          suggestedTime: '06:30',\n        ));\n      }\n      \n      // Evening recommendations if evening is underutilized\n      final eveningHabits = timeSlots['Evening'] ?? 0;\n      if (eveningHabits < totalHabits * 0.2) {\n        recommendations.add(HabitRecommendation(\n          title: 'Evening Reflection',\n          description: 'Reflect on your day and plan tomorrow',\n          category: 'Personal Development',\n          difficulty: 'Easy',\n          reason: 'Evening reflection can improve planning and gratitude',\n          priority: 5,\n          estimatedDuration: 15,\n          suggestedTime: '20:00',\n        ));\n      }\n    }\n    \n    return recommendations;\n  }\n\n  /// Get category-based recommendations\n  static List<HabitRecommendation> _getCategoryBasedRecommendations(\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final categories = habitAnalysis['categories'] as Map<String, int>;\n    \n    // Suggest missing important categories\n    if (!categories.containsKey('Health') || categories['Health']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Drink Water',\n        description: 'Drink 8 glasses of water daily',\n        category: 'Health',\n        difficulty: 'Easy',\n        reason: 'Hydration is essential for health and energy',\n        priority: 8,\n        estimatedDuration: 2,\n        suggestedTime: '08:00',\n      ));\n    }\n    \n    if (!categories.containsKey('Learning') || categories['Learning']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Reading',\n        description: 'Read for 20 minutes to expand knowledge',\n        category: 'Learning',\n        difficulty: 'Easy',\n        reason: 'Continuous learning improves cognitive function',\n        priority: 6,\n        estimatedDuration: 20,\n        suggestedTime: '19:00',\n      ));\n    }\n    \n    if (!categories.containsKey('Social') || categories['Social']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Connect with Friends',\n        description: 'Reach out to a friend or family member',\n        category: 'Social',\n        difficulty: 'Easy',\n        reason: 'Social connections are vital for mental health',\n        priority: 5,\n        estimatedDuration: 15,\n        suggestedTime: '17:00',\n      ));\n    }\n    \n    return recommendations;\n  }\n\n  /// Get difficulty progression recommendations\n  static List<HabitRecommendation> _getDifficultyProgressionRecommendations(\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final averageStreaks = habitAnalysis['averageStreaks'] as num;\n    final completionRates = habitAnalysis['completionRates'] as List<double>;\n    \n    if (completionRates.isNotEmpty) {\n      final avgCompletionRate = completionRates.reduce((a, b) => a + b) / completionRates.length;\n      \n      // If user is doing well, suggest more challenging habits\n      if (avgCompletionRate > 0.8 && averageStreaks > 14) {\n        recommendations.add(HabitRecommendation(\n          title: 'Challenge Workout',\n          description: 'Try a more intensive 45-minute workout',\n          category: 'Fitness',\n          difficulty: 'Hard',\n          reason: 'You\\'re ready for more challenging habits!',\n          priority: 7,\n          estimatedDuration: 45,\n          suggestedTime: '06:00',\n        ));\n      }\n      \n      // If user is struggling, suggest easier habits\n      else if (avgCompletionRate < 0.5 || averageStreaks < 7) {\n        recommendations.add(HabitRecommendation(\n          title: 'One Push-up',\n          description: 'Start small with just one push-up daily',\n          category: 'Fitness',\n          difficulty: 'Very Easy',\n          reason: 'Starting small builds consistency',\n          priority: 9,\n          estimatedDuration: 1,\n          suggestedTime: '07:00',\n        ));\n      }\n    }\n    \n    return recommendations;\n  }\n\n  /// Get habit suggestions based on current time and context\n  static List<HabitRecommendation> getContextualSuggestions({\n    required DateTime currentTime,\n    required List<Map<String, dynamic>> existingHabits,\n    Map<String, dynamic>? recentActivity,\n  }) {\n    final suggestions = <HabitRecommendation>[];\n    final hour = currentTime.hour;\n    \n    // Morning suggestions (6-10 AM)\n    if (hour >= 6 && hour < 10) {\n      suggestions.add(HabitRecommendation(\n        title: 'Morning Stretch',\n        description: 'Wake up your body with gentle stretches',\n        category: 'Health',\n        difficulty: 'Easy',\n        reason: 'Perfect time to energize your body',\n        priority: 8,\n        estimatedDuration: 10,\n        suggestedTime: currentTime.add(const Duration(minutes: 5)).toString().substring(11, 16),\n      ));\n    }\n    \n    // Lunch break suggestions (11 AM - 2 PM)\n    else if (hour >= 11 && hour < 14) {\n      suggestions.add(HabitRecommendation(\n        title: 'Midday Walk',\n        description: 'Take a refreshing walk during lunch break',\n        category: 'Fitness',\n        difficulty: 'Easy',\n        reason: 'Break up your day with movement',\n        priority: 7,\n        estimatedDuration: 15,\n        suggestedTime: currentTime.add(const Duration(minutes: 10)).toString().substring(11, 16),\n      ));\n    }\n    \n    // Evening suggestions (6-9 PM)\n    else if (hour >= 18 && hour < 21) {\n      suggestions.add(HabitRecommendation(\n        title: 'Gratitude Journal',\n        description: 'Write down 3 things you\\'re grateful for',\n        category: 'Mental Health',\n        difficulty: 'Easy',\n        reason: 'End your day on a positive note',\n        priority: 6,\n        estimatedDuration: 5,\n        suggestedTime: currentTime.add(const Duration(minutes: 30)).toString().substring(11, 16),\n      ));\n    }\n    \n    return suggestions;\n  }\n\n  /// Generate habit insights and optimization suggestions\n  static Future<Map<String, dynamic>> generateHabitInsights(\n    List<Map<String, dynamic>> habits,\n  ) async {\n    final insights = <String, dynamic>{\n      'totalHabits': habits.length,\n      'insights': <String>[],\n      'optimizations': <String>[],\n      'achievements': <String>[],\n    };\n\n    // Analyze habit patterns\n    final categories = <String, int>{};\n    final timeSlots = <String, int>{};\n    double totalCompletionRate = 0;\n    int totalStreaks = 0;\n\n    for (final habit in habits) {\n      final category = habit['category']?.toString() ?? 'Other';\n      categories[category] = (categories[category] ?? 0) + 1;\n      \n      final completionRate = habit['completionRate'] ?? 0.0;\n      totalCompletionRate += completionRate as double;\n      \n      final streak = habit['currentStreak'] ?? 0;\n      totalStreaks += streak as int;\n    }\n\n    if (habits.isNotEmpty) {\n      final avgCompletionRate = totalCompletionRate / habits.length;\n      final avgStreak = totalStreaks / habits.length;\n      \n      // Generate insights\n      (insights['insights'] as List<String>).add(\n        'Your average completion rate is ${(avgCompletionRate * 100).toStringAsFixed(1)}%'\n      );\n      \n      (insights['insights'] as List<String>).add(\n        'Your average streak is ${avgStreak.toStringAsFixed(1)} days'\n      );\n      \n      // Most popular category\n      if (categories.isNotEmpty) {\n        final topCategory = categories.entries.reduce((a, b) => a.value > b.value ? a : b);\n        (insights['insights'] as List<String>).add(\n          'Your most focused area is ${topCategory.key} with ${topCategory.value} habits'\n        );\n      }\n      \n      // Generate optimizations\n      if (avgCompletionRate < 0.7) {\n        (insights['optimizations'] as List<String>).add(\n          'Consider reducing habit difficulty or frequency to improve consistency'\n        );\n      }\n      \n      if (habits.length > 5) {\n        (insights['optimizations'] as List<String>).add(\n          'You might be overwhelming yourself. Consider focusing on fewer habits'\n        );\n      }\n      \n      // Generate achievements\n      if (avgCompletionRate > 0.8) {\n        (insights['achievements'] as List<String>).add('High Achiever: 80%+ completion rate!');\n      }\n      \n      if (avgStreak > 21) {\n        (insights['achievements'] as List<String>).add('Streak Master: 21+ day average streak!');\n      }\n    }\n\n    AppLogger.info('Generated habit insights for ${habits.length} habits');\n    return insights;\n  }\n}\n\nclass HabitRecommendation {\n  final String title;\n  final String description;\n  final String category;\n  final String difficulty;\n  final String reason;\n  final int priority;\n  final int estimatedDuration; // in minutes\n  final String suggestedTime;\n\n  HabitRecommendation({\n    required this.title,\n    required this.description,\n    required this.category,\n    required this.difficulty,\n    required this.reason,\n    required this.priority,\n    required this.estimatedDuration,\n    required this.suggestedTime,\n  });\n\n  Map<String, dynamic> toMap() {\n    return {\n      'title': title,\n      'description': description,\n      'category': category,\n      'difficulty': difficulty,\n      'reason': reason,\n      'priority': priority,\n      'estimatedDuration': estimatedDuration,\n      'suggestedTime': suggestedTime,\n    };\n  }\n}\n","baseTimestamp":1754438669711,"deltas":[{"timestamp":1754438724790,"changes":[{"type":"MODIFY","lineNumber":16,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":21,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":27,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":30,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":33,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":41,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":44,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":63,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":68,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":78,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":81,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":85,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":94,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":98,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":108,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":123,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":138,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":153,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":164,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":182,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":198,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":208,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":222,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":235,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":248,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":259,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":262,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":291,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":303,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":317,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":331,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":345,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":369,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":372,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":380,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":385,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":389,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":397,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":404,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":410,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":415,"content":"","oldContent":"      "}]},{"timestamp":1754439652674,"changes":[{"type":"MODIFY","lineNumber":16,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":21,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":27,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":30,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":33,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":41,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":44,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":63,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":68,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":78,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":81,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":85,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":89,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":94,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":98,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":123,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":138,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":153,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":164,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":182,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":198,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":208,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":222,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":235,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":248,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":259,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":262,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":276,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":291,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":303,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":317,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":331,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":345,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":369,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":372,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":380,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":385,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":389,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":397,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":404,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":410,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":415,"content":"      ","oldContent":""}]},{"timestamp":1754439673818,"changes":[{"type":"MODIFY","lineNumber":16,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":21,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":27,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":30,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":33,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":41,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":44,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":63,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":68,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":78,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":81,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":85,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":94,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":98,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":108,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":123,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":138,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":153,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":164,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":182,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":198,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":208,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":222,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":235,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":248,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":259,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":262,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":291,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":303,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":317,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":331,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":345,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":369,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":372,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":380,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":385,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":389,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":397,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":404,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":410,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":415,"content":"","oldContent":"      "}]},{"timestamp":1754439733552,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"import 'dart:math';"},{"type":"DELETE","lineNumber":2,"oldContent":"import 'health_service.dart';"},{"type":"DELETE","lineNumber":74,"oldContent":"        if (hour < 6) timeSlot = 'Late Night';"},{"type":"DELETE","lineNumber":75,"oldContent":"        else if (hour < 12) timeSlot = 'Morning';"},{"type":"INSERT","lineNumber":72,"content":"        if (hour < 6) {"},{"type":"INSERT","lineNumber":73,"content":"          timeSlot = 'Late Night';"},{"type":"INSERT","lineNumber":74,"content":"        } else if (hour < 12) timeSlot = 'Morning';"},{"type":"MODIFY","lineNumber":116,"content":"        reason: 'Your daily steps ($steps) are below the recommended 10,000',","oldContent":"        reason: 'Your daily steps (${steps}) are below the recommended 10,000',"},{"type":"MODIFY","lineNumber":146,"content":"        reason: 'You need more daily exercise (current: $exerciseMinutes min)',","oldContent":"        reason: 'You need more daily exercise (current: ${exerciseMinutes} min)',"}]},{"timestamp":1754444099870,"changes":[{"type":"DELETE","lineNumber":70,"oldContent":"        if (hour < 6) {"},{"type":"DELETE","lineNumber":72,"oldContent":"          timeSlot = 'Late Night';"},{"type":"DELETE","lineNumber":74,"oldContent":"        } else if (hour < 12) timeSlot = 'Morning';"},{"type":"DELETE","lineNumber":75,"oldContent":"        else if (hour < 18) timeSlot = 'Afternoon';"},{"type":"DELETE","lineNumber":76,"oldContent":"        else timeSlot = 'Evening';"},{"type":"INSERT","lineNumber":72,"content":"        if (hour < 6) {"},{"type":"INSERT","lineNumber":73,"content":"          timeSlot = 'Late Night';"},{"type":"INSERT","lineNumber":74,"content":"        } else if (hour < 12) {"},{"type":"INSERT","lineNumber":75,"content":"          timeSlot = 'Morning';"},{"type":"INSERT","lineNumber":76,"content":"        } else if (hour < 18) {"},{"type":"INSERT","lineNumber":77,"content":"          timeSlot = 'Afternoon';"},{"type":"INSERT","lineNumber":78,"content":"        } else {"},{"type":"INSERT","lineNumber":79,"content":"          timeSlot = 'Evening';"},{"type":"INSERT","lineNumber":80,"content":"        }"},{"type":"INSERT","lineNumber":119,"content":"        difficulty: 'Easy',"},{"type":"DELETE","lineNumber":116,"oldContent":"        reason: 'Your daily steps (${steps}) are below the recommended 10,000',"},{"type":"INSERT","lineNumber":149,"content":"        difficulty: 'Medium',"},{"type":"DELETE","lineNumber":146,"oldContent":"        reason: 'You need more daily exercise (current: ${exerciseMinutes} min)',"}]},{"timestamp":1754444118968,"changes":[{"type":"INSERT","lineNumber":71,"content":"        String timeSlot;"},{"type":"DELETE","lineNumber":73,"oldContent":"        String timeSlot;"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":"        analysis['timeSlots'][timeSlot] = (analysis['timeSlots'][timeSlot] ?? 0) + 1;"},{"type":"MODIFY","lineNumber":82,"content":"        analysis['timeSlots'][timeSlot] = (analysis['timeSlots'][timeSlot] ?? 0) + 1;","oldContent":"      }"},{"type":"INSERT","lineNumber":83,"content":"      }"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":119,"content":"        difficulty: 'Easy',"},{"type":"DELETE","lineNumber":122,"oldContent":"        difficulty: 'Easy',"},{"type":"INSERT","lineNumber":149,"content":"        difficulty: 'Medium',"},{"type":"DELETE","lineNumber":152,"oldContent":"        difficulty: 'Medium',"},{"type":"DELETE","lineNumber":365,"oldContent":"    final timeSlots = <String, int>{};"}]}]},"H:/New/HabitV8/lib/services/achievements_service.dart":{"filePath":"H:/New/HabitV8/lib/services/achievements_service.dart","baseContent":"import 'dart:math';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'logging_service.dart';\n\nclass AchievementsService {\n  static const String _achievementsKey = 'user_achievements';\n  static const String _badgesKey = 'user_badges';\n  static const String _levelKey = 'user_level';\n  static const String _xpKey = 'user_xp';\n\n  /// Get all available achievements\n  static List<Achievement> getAllAchievements() {\n    return [\n      // Streak Achievements\n      Achievement(\n        id: 'first_streak',\n        title: 'Getting Started',\n        description: 'Complete your first habit',\n        icon: '🎯',\n        category: AchievementCategory.streak,\n        requirement: 1,\n        xpReward: 10,\n        type: AchievementType.streak,\n      ),\n      Achievement(\n        id: 'week_streak',\n        title: 'Week Warrior',\n        description: 'Maintain a 7-day streak',\n        icon: '🔥',\n        category: AchievementCategory.streak,\n        requirement: 7,\n        xpReward: 50,\n        type: AchievementType.streak,\n      ),\n      Achievement(\n        id: 'month_streak',\n        title: 'Monthly Master',\n        description: 'Maintain a 30-day streak',\n        icon: '💪',\n        category: AchievementCategory.streak,\n        requirement: 30,\n        xpReward: 200,\n        type: AchievementType.streak,\n      ),\n      Achievement(\n        id: 'hundred_streak',\n        title: 'Century Club',\n        description: 'Achieve a 100-day streak',\n        icon: '👑',\n        category: AchievementCategory.streak,\n        requirement: 100,\n        xpReward: 500,\n        type: AchievementType.streak,\n      ),\n\n      // Consistency Achievements\n      Achievement(\n        id: 'perfect_week',\n        title: 'Perfect Week',\n        description: 'Complete all habits for 7 consecutive days',\n        icon: '⭐',\n        category: AchievementCategory.consistency,\n        requirement: 7,\n        xpReward: 75,\n        type: AchievementType.perfectDays,\n      ),\n      Achievement(\n        id: 'perfect_month',\n        title: 'Flawless Month',\n        description: 'Complete all habits for 30 consecutive days',\n        icon: '🌟',\n        category: AchievementCategory.consistency,\n        requirement: 30,\n        xpReward: 300,\n        type: AchievementType.perfectDays,\n      ),\n\n      // Habit Count Achievements\n      Achievement(\n        id: 'habit_collector',\n        title: 'Habit Collector',\n        description: 'Create 5 different habits',\n        icon: '📚',\n        category: AchievementCategory.variety,\n        requirement: 5,\n        xpReward: 40,\n        type: AchievementType.habitCount,\n      ),\n      Achievement(\n        id: 'habit_master',\n        title: 'Habit Master',\n        description: 'Create 10 different habits',\n        icon: '🎓',\n        category: AchievementCategory.variety,\n        requirement: 10,\n        xpReward: 100,\n        type: AchievementType.habitCount,\n      ),\n\n      // Total Completions Achievements\n      Achievement(\n        id: 'hundred_completions',\n        title: 'Centurion',\n        description: 'Complete 100 habits total',\n        icon: '🏆',\n        category: AchievementCategory.dedication,\n        requirement: 100,\n        xpReward: 150,\n        type: AchievementType.totalCompletions,\n      ),\n      Achievement(\n        id: 'thousand_completions',\n        title: 'Dedication Legend',\n        description: 'Complete 1000 habits total',\n        icon: '💎',\n        category: AchievementCategory.dedication,\n        requirement: 1000,\n        xpReward: 750,\n        type: AchievementType.totalCompletions,\n      ),\n\n      // Category Specific Achievements\n      Achievement(\n        id: 'health_hero',\n        title: 'Health Hero',\n        description: 'Complete 50 health-related habits',\n        icon: '❤️',\n        category: AchievementCategory.health,\n        requirement: 50,\n        xpReward: 100,\n        type: AchievementType.categorySpecific,\n        categoryFilter: 'Health',\n      ),\n      Achievement(\n        id: 'fitness_fanatic',\n        title: 'Fitness Fanatic',\n        description: 'Complete 50 fitness habits',\n        icon: '💪',\n        category: AchievementCategory.health,\n        requirement: 50,\n        xpReward: 100,\n        type: AchievementType.categorySpecific,\n        categoryFilter: 'Fitness',\n      ),\n      Achievement(\n        id: 'mindful_master',\n        title: 'Mindful Master',\n        description: 'Complete 50 mental health habits',\n        icon: '🧘',\n        category: AchievementCategory.mentalHealth,\n        requirement: 50,\n        xpReward: 100,\n        type: AchievementType.categorySpecific,\n        categoryFilter: 'Mental Health',\n      ),\n\n      // Special Achievements\n      Achievement(\n        id: 'early_bird',\n        title: 'Early Bird',\n        description: 'Complete 20 habits before 8 AM',\n        icon: '🌅',\n        category: AchievementCategory.special,\n        requirement: 20,\n        xpReward: 75,\n        type: AchievementType.timeSpecific,\n        timeFilter: 8,\n      ),\n      Achievement(\n        id: 'night_owl',\n        title: 'Night Owl',\n        description: 'Complete 20 habits after 10 PM',\n        icon: '🦉',\n        category: AchievementCategory.special,\n        requirement: 20,\n        xpReward: 75,\n        type: AchievementType.timeSpecific,\n        timeFilter: 22,\n      ),\n      Achievement(\n        id: 'comeback_kid',\n        title: 'Comeback Kid',\n        description: 'Restart a habit after missing it for 7+ days',\n        icon: '🔄',\n        category: AchievementCategory.special,\n        requirement: 1,\n        xpReward: 50,\n        type: AchievementType.comeback,\n      ),\n    ];\n  }\n\n  /// Check for new achievements based on habit data\n  static Future<List<Achievement>> checkForNewAchievements({\n    required List<Map<String, dynamic>> habits,\n    required List<Map<String, dynamic>> completions,\n  }) async {\n    final newAchievements = <Achievement>[];\n    final currentAchievements = await getUnlockedAchievements();\n    final currentAchievementIds = currentAchievements.map((a) => a.id).toSet();\n\n    for (final achievement in getAllAchievements()) {\n      if (currentAchievementIds.contains(achievement.id)) continue;\n\n      bool earned = false;\n\n      switch (achievement.type) {\n        case AchievementType.streak:\n          final maxStreak = _getMaxStreak(habits);\n          earned = maxStreak >= achievement.requirement;\n          break;\n\n        case AchievementType.perfectDays:\n          final perfectDays = _getPerfectDaysStreak(habits, completions);\n          earned = perfectDays >= achievement.requirement;\n          break;\n\n        case AchievementType.habitCount:\n          earned = habits.length >= achievement.requirement;\n          break;\n\n        case AchievementType.totalCompletions:\n          earned = completions.length >= achievement.requirement;\n          break;\n\n        case AchievementType.categorySpecific:\n          final categoryCompletions = _getCategoryCompletions(\n            habits, completions, achievement.categoryFilter!);\n          earned = categoryCompletions >= achievement.requirement;\n          break;\n\n        case AchievementType.timeSpecific:\n          final timeCompletions = _getTimeSpecificCompletions(\n            completions, achievement.timeFilter!);\n          earned = timeCompletions >= achievement.requirement;\n          break;\n\n        case AchievementType.comeback:\n          earned = _hasComeback(habits, completions);\n          break;\n      }\n\n      if (earned) {\n        newAchievements.add(achievement);\n        await _unlockAchievement(achievement);\n      }\n    }\n\n    return newAchievements;\n  }\n\n  /// Get user's current level based on XP\n  static Future<int> getCurrentLevel() async {\n    final prefs = await SharedPreferences.getInstance();\n    final xp = prefs.getInt(_xpKey) ?? 0;\n    return _calculateLevel(xp);\n  }\n\n  /// Get user's current XP\n  static Future<int> getCurrentXP() async {\n    final prefs = await SharedPreferences.getInstance();\n    return prefs.getInt(_xpKey) ?? 0;\n  }\n\n  /// Get XP needed for next level\n  static Future<int> getXPForNextLevel() async {\n    final currentLevel = await getCurrentLevel();\n    return _getXPRequiredForLevel(currentLevel + 1);\n  }\n\n  /// Get XP progress for current level (0.0 to 1.0)\n  static Future<double> getLevelProgress() async {\n    final currentXP = await getCurrentXP();\n    final currentLevel = await getCurrentLevel();\n    final currentLevelXP = _getXPRequiredForLevel(currentLevel);\n    final nextLevelXP = _getXPRequiredForLevel(currentLevel + 1);\n    \n    final progressXP = currentXP - currentLevelXP;\n    final totalXPForLevel = nextLevelXP - currentLevelXP;\n    \n    return progressXP / totalXPForLevel;\n  }\n\n  /// Award XP for completing a habit\n  static Future<bool> awardXP(int xp, {String? reason}) async {\n    try {\n      final prefs = await SharedPreferences.getInstance();\n      final currentXP = prefs.getInt(_xpKey) ?? 0;\n      final oldLevel = _calculateLevel(currentXP);\n      \n      final newXP = currentXP + xp;\n      await prefs.setInt(_xpKey, newXP);\n      \n      final newLevel = _calculateLevel(newXP);\n      \n      AppLogger.info('Awarded $xp XP${reason != null ? ' for $reason' : ''}. Total: $newXP');\n      \n      // Check for level up\n      if (newLevel > oldLevel) {\n        await _handleLevelUp(oldLevel, newLevel);\n        return true; // Level up occurred\n      }\n      \n      return false; // No level up\n    } catch (e) {\n      AppLogger.error('Error awarding XP', e);\n      return false;\n    }\n  }\n\n  /// Get all unlocked achievements\n  static Future<List<Achievement>> getUnlockedAchievements() async {\n    try {\n      final prefs = await SharedPreferences.getInstance();\n      final achievementIds = prefs.getStringList(_achievementsKey) ?? [];\n      \n      final allAchievements = getAllAchievements();\n      return allAchievements.where((a) => achievementIds.contains(a.id)).toList();\n    } catch (e) {\n      AppLogger.error('Error getting unlocked achievements', e);\n      return [];\n    }\n  }\n\n  /// Get achievement progress for all achievements\n  static Future<Map<String, double>> getAchievementProgress({\n    required List<Map<String, dynamic>> habits,\n    required List<Map<String, dynamic>> completions,\n  }) async {\n    final progress = <String, double>{};\n    \n    for (final achievement in getAllAchievements()) {\n      double currentProgress = 0;\n\n      switch (achievement.type) {\n        case AchievementType.streak:\n          currentProgress = _getMaxStreak(habits).toDouble();\n          break;\n        case AchievementType.perfectDays:\n          currentProgress = _getPerfectDaysStreak(habits, completions).toDouble();\n          break;\n        case AchievementType.habitCount:\n          currentProgress = habits.length.toDouble();\n          break;\n        case AchievementType.totalCompletions:\n          currentProgress = completions.length.toDouble();\n          break;\n        case AchievementType.categorySpecific:\n          currentProgress = _getCategoryCompletions(\n            habits, completions, achievement.categoryFilter!).toDouble();\n          break;\n        case AchievementType.timeSpecific:\n          currentProgress = _getTimeSpecificCompletions(\n            completions, achievement.timeFilter!).toDouble();\n          break;\n        case AchievementType.comeback:\n          currentProgress = _hasComeback(habits, completions) ? 1.0 : 0.0;\n          break;\n      }\n\n      progress[achievement.id] = (currentProgress / achievement.requirement).clamp(0.0, 1.0);\n    }\n\n    return progress;\n  }\n\n  /// Generate gamification stats\n  static Future<Map<String, dynamic>> getGamificationStats({\n    required List<Map<String, dynamic>> habits,\n    required List<Map<String, dynamic>> completions,\n  }) async {\n    final unlockedAchievements = await getUnlockedAchievements();\n    final currentLevel = await getCurrentLevel();\n    final currentXP = await getCurrentXP();\n    final nextLevelXP = await getXPForNextLevel();\n    final levelProgress = await getLevelProgress();\n\n    return {\n      'level': currentLevel,\n      'xp': currentXP,\n      'nextLevelXP': nextLevelXP,\n      'levelProgress': levelProgress,\n      'achievementsUnlocked': unlockedAchievements.length,\n      'totalAchievements': getAllAchievements().length,\n      'completionRate': _calculateOverallCompletionRate(habits, completions),\n      'totalStreak': _getTotalStreak(habits),\n      'maxStreak': _getMaxStreak(habits),\n      'perfectDays': _getPerfectDaysStreak(habits, completions),\n      'rank': _calculateRank(currentLevel, unlockedAchievements.length),\n    };\n  }\n\n  // Private helper methods\n\n  static Future<void> _unlockAchievement(Achievement achievement) async {\n    try {\n      final prefs = await SharedPreferences.getInstance();\n      final currentAchievements = prefs.getStringList(_achievementsKey) ?? [];\n      \n      if (!currentAchievements.contains(achievement.id)) {\n        currentAchievements.add(achievement.id);\n        await prefs.setStringList(_achievementsKey, currentAchievements);\n        \n        // Award XP for the achievement\n        await awardXP(achievement.xpReward, reason: achievement.title);\n        \n        AppLogger.info('Achievement unlocked: ${achievement.title}');\n      }\n    } catch (e) {\n      AppLogger.error('Error unlocking achievement', e);\n    }\n  }\n\n  static int _calculateLevel(int xp) {\n    // Level formula: level = floor(sqrt(xp / 100))\n    return (sqrt(xp / 100)).floor() + 1;\n  }\n\n  static int _getXPRequiredForLevel(int level) {\n    // XP formula: xp = (level - 1)^2 * 100\n    return pow(level - 1, 2).toInt() * 100;\n  }\n\n  static Future<void> _handleLevelUp(int oldLevel, int newLevel) async {\n    AppLogger.info('Level up! $oldLevel -> $newLevel');\n    // Additional level up rewards could be implemented here\n  }\n\n  static int _getMaxStreak(List<Map<String, dynamic>> habits) {\n    return habits.fold<int>(0, (max, habit) {\n      final streak = habit['currentStreak'] ?? 0;\n      return streak > max ? streak as int : max;\n    });\n  }\n\n  static int _getTotalStreak(List<Map<String, dynamic>> habits) {\n    return habits.fold<int>(0, (total, habit) {\n      final streak = habit['currentStreak'] ?? 0;\n      return total + (streak as int);\n    });\n  }\n\n  static int _getPerfectDaysStreak(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n  ) {\n    // This would need more complex logic to calculate perfect days\n    // For now, return a simple calculation\n    if (habits.isEmpty) return 0;\n    \n    final avgCompletionRate = habits.fold<double>(0.0, (sum, habit) {\n      return sum + (habit['completionRate'] ?? 0.0);\n    }) / habits.length;\n    \n    return (avgCompletionRate * 30).round(); // Approximate perfect days\n  }\n\n  static int _getCategoryCompletions(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n    String category,\n  ) {\n    final categoryHabitIds = habits\n        .where((habit) => habit['category'] == category)\n        .map((habit) => habit['id'])\n        .toSet();\n    \n    return completions\n        .where((completion) => categoryHabitIds.contains(completion['habitId']))\n        .length;\n  }\n\n  static int _getTimeSpecificCompletions(\n    List<Map<String, dynamic>> completions,\n    int targetHour,\n  ) {\n    return completions.where((completion) {\n      final completedAt = completion['completedAt'];\n      if (completedAt is DateTime) {\n        if (targetHour < 12) {\n          return completedAt.hour < targetHour; // Before target hour\n        } else {\n          return completedAt.hour >= targetHour; // After target hour\n        }\n      }\n      return false;\n    }).length;\n  }\n\n  static bool _hasComeback(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n  ) {\n    // This would need more complex logic to detect comebacks\n    // For now, return false as a placeholder\n    return habits.any((habit) => (habit['currentStreak'] ?? 0) > 0);\n  }\n\n  static double _calculateOverallCompletionRate(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n  ) {\n    if (habits.isEmpty) return 0.0;\n    \n    return habits.fold<double>(0.0, (sum, habit) {\n      return sum + (habit['completionRate'] ?? 0.0);\n    }) / habits.length;\n  }\n\n  static String _calculateRank(int level, int achievementsCount) {\n    if (level >= 20 && achievementsCount >= 10) return 'Grandmaster';\n    if (level >= 15 && achievementsCount >= 8) return 'Master';\n    if (level >= 10 && achievementsCount >= 6) return 'Expert';\n    if (level >= 7 && achievementsCount >= 4) return 'Advanced';\n    if (level >= 5 && achievementsCount >= 2) return 'Intermediate';\n    if (level >= 3) return 'Beginner';\n    return 'Novice';\n  }\n}\n\nenum AchievementCategory {\n  streak,\n  consistency,\n  variety,\n  dedication,\n  health,\n  mentalHealth,\n  special,\n}\n\nenum AchievementType {\n  streak,\n  perfectDays,\n  habitCount,\n  totalCompletions,\n  categorySpecific,\n  timeSpecific,\n  comeback,\n}\n\nclass Achievement {\n  final String id;\n  final String title;\n  final String description;\n  final String icon;\n  final AchievementCategory category;\n  final int requirement;\n  final int xpReward;\n  final AchievementType type;\n  final String? categoryFilter;\n  final int? timeFilter;\n\n  Achievement({\n    required this.id,\n    required this.title,\n    required this.description,\n    required this.icon,\n    required this.category,\n    required this.requirement,\n    required this.xpReward,\n    required this.type,\n    this.categoryFilter,\n    this.timeFilter,\n  });\n\n  Map<String, dynamic> toMap() {\n    return {\n      'id': id,\n      'title': title,\n      'description': description,\n      'icon': icon,\n      'category': category.toString(),\n      'requirement': requirement,\n      'xpReward': xpReward,\n      'type': type.toString(),\n      'categoryFilter': categoryFilter,\n      'timeFilter': timeFilter,\n    };\n  }\n}\n","baseTimestamp":1754438854588,"deltas":[{"timestamp":1754439615362,"changes":[{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":279,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":289,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":292,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":294,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":296,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":315,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":330,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":402,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":405,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":453,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":466,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":503,"content":"","oldContent":"    "}]},{"timestamp":1754439652918,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":279,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":289,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":292,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":294,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":296,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":302,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":315,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":330,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":398,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":402,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":405,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":449,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":453,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":466,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":503,"content":"    ","oldContent":""}]},{"timestamp":1754439673849,"changes":[{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":279,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":289,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":292,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":294,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":296,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":315,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":330,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":402,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":405,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":453,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":466,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":503,"content":"","oldContent":"    "}]},{"timestamp":1754440759602,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":279,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":289,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":292,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":294,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":296,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":302,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":315,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":330,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":398,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":402,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":405,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":449,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":453,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":466,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":503,"content":"    ","oldContent":""}]},{"timestamp":1754442310613,"changes":[{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":279,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":289,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":292,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":294,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":296,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":315,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":330,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":402,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":405,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":453,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":466,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":503,"content":"","oldContent":"    "}]},{"timestamp":1754442593295,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":279,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":289,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":292,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":294,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":296,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":302,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":315,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":330,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":398,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":402,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":405,"content":"        ","oldContent":""},{"type":"MODIFY","lineNumber":449,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":453,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":466,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":503,"content":"    ","oldContent":""}]},{"timestamp":1754442636690,"changes":[{"type":"MODIFY","lineNumber":276,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":279,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":289,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":292,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":294,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":296,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":315,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":330,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":402,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":405,"content":"","oldContent":"        "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":453,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":466,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":503,"content":"","oldContent":"    "}]},{"timestamp":1754442953005,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"  static const String _badgesKey = 'user_badges';"},{"type":"DELETE","lineNumber":7,"oldContent":"  static const String _levelKey = 'user_level';"}]}]},"H:/New/HabitV8/lib/services/trend_analysis_service.dart":{"filePath":"H:/New/HabitV8/lib/services/trend_analysis_service.dart","baseContent":"import 'dart:math';\nimport 'logging_service.dart';\n\nclass TrendAnalysisService {\n  static const int _minimumDaysForTrend = 7; // Require a full week of data\n  static const int _minimumDataPointsForReliableTrend = 14; // 2 weeks for better accuracy\n\n  /// Analyze habit trends only if sufficient data exists\n  static Future<Map<String, dynamic>> analyzeHabitTrends({\n    required List<Map<String, dynamic>> habits,\n    required List<Map<String, dynamic>> completions,\n    DateTime? startDate,\n    DateTime? endDate,\n  }) async {\n    final analysisEndDate = endDate ?? DateTime.now();\n    final analysisStartDate = startDate ?? analysisEndDate.subtract(const Duration(days: 30));\n    \n    // Check if we have at least a week of data\n    final daysDifference = analysisEndDate.difference(analysisStartDate).inDays;\n    \n    if (daysDifference < _minimumDaysForTrend) {\n      return {\n        'hasEnoughData': false,\n        'message': 'Trends will be available after ${_minimumDaysForTrend} days of habit tracking',\n        'daysUntilTrends': _minimumDaysForTrend - daysDifference,\n        'minimumDays': _minimumDaysForTrend,\n      };\n    }\n\n    final Map<String, dynamic> trends = {\n      'hasEnoughData': true,\n      'analysisStartDate': analysisStartDate,\n      'analysisEndDate': analysisEndDate,\n      'totalDaysAnalyzed': daysDifference,\n      'habitTrends': <String, Map<String, dynamic>>{},\n      'overallTrends': <String, dynamic>{},\n      'weeklyPatterns': <String, dynamic>{},\n      'monthlyPatterns': <String, dynamic>{},\n      'insights': <String>[],\n      'recommendations': <String>[],\n    };\n\n    try {\n      // Analyze individual habit trends\n      for (final habit in habits) {\n        final habitId = habit['id']?.toString();\n        if (habitId == null) continue;\n\n        final habitCompletions = completions\n            .where((c) => c['habitId'] == habitId)\n            .where((c) => _isDateInRange(c['completedAt'], analysisStartDate, analysisEndDate))\n            .toList();\n\n        if (habitCompletions.length >= _minimumDaysForTrend) {\n          trends['habitTrends'][habitId] = _analyzeIndividualHabitTrend(\n            habit, habitCompletions, analysisStartDate, analysisEndDate);\n        }\n      }\n\n      // Analyze overall trends\n      trends['overallTrends'] = _analyzeOverallTrends(habits, completions, analysisStartDate, analysisEndDate);\n      \n      // Analyze weekly patterns\n      trends['weeklyPatterns'] = _analyzeWeeklyPatterns(completions, analysisStartDate, analysisEndDate);\n      \n      // Analyze monthly patterns (if we have enough data)\n      if (daysDifference >= 30) {\n        trends['monthlyPatterns'] = _analyzeMonthlyPatterns(completions, analysisStartDate, analysisEndDate);\n      }\n\n      // Generate insights and recommendations\n      final insights = _generateInsights(trends);\n      trends['insights'] = insights['insights'];\n      trends['recommendations'] = insights['recommendations'];\n\n      AppLogger.info('Trend analysis completed for ${habits.length} habits over $daysDifference days');\n      \n    } catch (e) {\n      AppLogger.error('Error during trend analysis', e);\n      trends['error'] = 'Failed to analyze trends: ${e.toString()}';\n    }\n\n    return trends;\n  }\n\n  /// Check if user has enough data for trend analysis\n  static bool hasEnoughDataForTrends(List<Map<String, dynamic>> completions) {\n    if (completions.isEmpty) return false;\n\n    final sortedCompletions = completions\n        .where((c) => c['completedAt'] != null)\n        .map((c) => c['completedAt'] as DateTime)\n        .toList()\n      ..sort();\n\n    if (sortedCompletions.isEmpty) return false;\n\n    final daysDifference = sortedCompletions.last.difference(sortedCompletions.first).inDays;\n    return daysDifference >= _minimumDaysForTrend;\n  }\n\n  /// Get the minimum date when trends will be available\n  static DateTime? getMinimumDateForTrends(List<Map<String, dynamic>> completions) {\n    if (completions.isEmpty) return null;\n\n    final sortedCompletions = completions\n        .where((c) => c['completedAt'] != null)\n        .map((c) => c['completedAt'] as DateTime)\n        .toList()\n      ..sort();\n\n    if (sortedCompletions.isEmpty) return null;\n\n    return sortedCompletions.first.add(Duration(days: _minimumDaysForTrend));\n  }\n\n  /// Analyze individual habit trend\n  static Map<String, dynamic> _analyzeIndividualHabitTrend(\n    Map<String, dynamic> habit,\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final habitName = habit['name']?.toString() ?? 'Unknown Habit';\n    final dailyCompletions = _groupCompletionsByDay(completions);\n    \n    // Calculate daily completion rates\n    final completionRates = <double>[];\n    final currentDate = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n    \n    DateTime date = currentDate;\n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final completionCount = dailyCompletions[dateKey] ?? 0;\n      completionRates.add(completionCount > 0 ? 1.0 : 0.0);\n      date = date.add(const Duration(days: 1));\n    }\n\n    if (completionRates.length < 2) {\n      return {\n        'habitName': habitName,\n        'trend': 'insufficient_data',\n        'direction': 'neutral',\n        'strength': 0.0,\n        'message': 'Not enough data for trend analysis',\n      };\n    }\n\n    // Calculate trend using linear regression\n    final trendData = _calculateLinearTrend(completionRates);\n    final weeklyAverage = _calculateWeeklyAverages(completionRates);\n    \n    return {\n      'habitName': habitName,\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'strength': trendData['strength'],\n      'slope': trendData['slope'],\n      'currentStreak': habit['currentStreak'] ?? 0,\n      'weeklyAverages': weeklyAverage,\n      'totalCompletions': completions.length,\n      'completionRate': completionRates.where((r) => r > 0).length / completionRates.length,\n      'message': _generateTrendMessage(trendData, habitName),\n    };\n  }\n\n  /// Analyze overall trends across all habits\n  static Map<String, dynamic> _analyzeOverallTrends(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final dailyCompletions = _groupCompletionsByDay(completions);\n    final dailyTotals = <double>[];\n    \n    DateTime date = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n    \n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final totalCompletions = dailyCompletions[dateKey] ?? 0;\n      dailyTotals.add(totalCompletions.toDouble());\n      date = date.add(const Duration(days: 1));\n    }\n\n    final trendData = _calculateLinearTrend(dailyTotals);\n    final weeklyAverages = _calculateWeeklyAverages(dailyTotals);\n    \n    return {\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'strength': trendData['strength'],\n      'slope': trendData['slope'],\n      'weeklyAverages': weeklyAverages,\n      'averageDailyCompletions': dailyTotals.isNotEmpty \n          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length \n          : 0.0,\n      'peakDay': _findPeakDay(dailyCompletions),\n      'message': _generateOverallTrendMessage(trendData),\n    };\n  }\n\n  /// Analyze weekly patterns\n  static Map<String, dynamic> _analyzeWeeklyPatterns(\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final weekdayCompletions = <int, List<int>>{\n      1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [] // Monday to Sunday\n    };\n\n    final dailyCompletions = _groupCompletionsByDay(completions);\n    \n    DateTime date = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n    \n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final completionCount = dailyCompletions[dateKey] ?? 0;\n      weekdayCompletions[date.weekday]!.add(completionCount);\n      date = date.add(const Duration(days: 1));\n    }\n\n    final weekdayAverages = <String, double>{};\n    final weekdayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    \n    for (int i = 1; i <= 7; i++) {\n      final completions = weekdayCompletions[i]!;\n      if (completions.isNotEmpty) {\n        weekdayAverages[weekdayNames[i - 1]] = \n            completions.reduce((a, b) => a + b) / completions.length;\n      } else {\n        weekdayAverages[weekdayNames[i - 1]] = 0.0;\n      }\n    }\n\n    final bestDay = weekdayAverages.entries\n        .reduce((a, b) => a.value > b.value ? a : b);\n    final worstDay = weekdayAverages.entries\n        .reduce((a, b) => a.value < b.value ? a : b);\n\n    return {\n      'weekdayAverages': weekdayAverages,\n      'bestDay': bestDay.key,\n      'bestDayAverage': bestDay.value,\n      'worstDay': worstDay.key,\n      'worstDayAverage': worstDay.value,\n      'weekendVsWeekday': _calculateWeekendVsWeekdayRatio(weekdayAverages),\n    };\n  }\n\n  /// Analyze monthly patterns\n  static Map<String, dynamic> _analyzeMonthlyPatterns(\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final monthlyData = <String, int>{};\n    \n    for (final completion in completions) {\n      final completedAt = completion['completedAt'];\n      if (completedAt is DateTime && \n          _isDateInRange(completedAt, startDate, endDate)) {\n        final monthKey = '${completedAt.year}-${completedAt.month.toString().padLeft(2, '0')}';\n        monthlyData[monthKey] = (monthlyData[monthKey] ?? 0) + 1;\n      }\n    }\n\n    if (monthlyData.length < 2) {\n      return {\n        'hasEnoughData': false,\n        'message': 'Need at least 2 months of data for monthly analysis',\n      };\n    }\n\n    final monthlyTotals = monthlyData.values.toList().map((v) => v.toDouble()).toList();\n    final trendData = _calculateLinearTrend(monthlyTotals);\n\n    return {\n      'hasEnoughData': true,\n      'monthlyTotals': monthlyData,\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'averageMonthlyCompletions': monthlyTotals.reduce((a, b) => a + b) / monthlyTotals.length,\n      'bestMonth': monthlyData.entries.reduce((a, b) => a.value > b.value ? a : b),\n      'worstMonth': monthlyData.entries.reduce((a, b) => a.value < b.value ? a : b),\n    };\n  }\n\n  // Helper methods\n\n  static bool _isDateInRange(dynamic date, DateTime startDate, DateTime endDate) {\n    if (date is! DateTime) return false;\n    return date.isAfter(startDate.subtract(const Duration(days: 1))) && \n           date.isBefore(endDate.add(const Duration(days: 1)));\n  }\n\n  static Map<String, int> _groupCompletionsByDay(List<Map<String, dynamic>> completions) {\n    final dailyCompletions = <String, int>{};\n    \n    for (final completion in completions) {\n      final completedAt = completion['completedAt'];\n      if (completedAt is DateTime) {\n        final dateKey = '${completedAt.year}-${completedAt.month.toString().padLeft(2, '0')}-${completedAt.day.toString().padLeft(2, '0')}';\n        dailyCompletions[dateKey] = (dailyCompletions[dateKey] ?? 0) + 1;\n      }\n    }\n    \n    return dailyCompletions;\n  }\n\n  static Map<String, dynamic> _calculateLinearTrend(List<double> values) {\n    if (values.length < 2) {\n      return {\n        'trend': 'insufficient_data',\n        'direction': 'neutral',\n        'strength': 0.0,\n        'slope': 0.0,\n      };\n    }\n\n    final n = values.length;\n    final x = List.generate(n, (i) => i.toDouble());\n    \n    final xMean = x.reduce((a, b) => a + b) / n;\n    final yMean = values.reduce((a, b) => a + b) / n;\n    \n    double numerator = 0.0;\n    double denominator = 0.0;\n    \n    for (int i = 0; i < n; i++) {\n      numerator += (x[i] - xMean) * (values[i] - yMean);\n      denominator += pow(x[i] - xMean, 2);\n    }\n    \n    final slope = denominator != 0 ? numerator / denominator : 0.0;\n    final strength = slope.abs();\n    \n    String trend;\n    String direction;\n    \n    if (strength < 0.01) {\n      trend = 'stable';\n      direction = 'neutral';\n    } else if (slope > 0) {\n      trend = strength > 0.05 ? 'strong_improving' : 'improving';\n      direction = 'upward';\n    } else {\n      trend = strength > 0.05 ? 'strong_declining' : 'declining';\n      direction = 'downward';\n    }\n    \n    return {\n      'trend': trend,\n      'direction': direction,\n      'strength': strength,\n      'slope': slope,\n    };\n  }\n\n  static List<double> _calculateWeeklyAverages(List<double> dailyValues) {\n    final weeklyAverages = <double>[];\n    \n    for (int i = 0; i < dailyValues.length; i += 7) {\n      final weekEnd = min(i + 7, dailyValues.length);\n      final weekData = dailyValues.sublist(i, weekEnd);\n      final average = weekData.reduce((a, b) => a + b) / weekData.length;\n      weeklyAverages.add(average);\n    }\n    \n    return weeklyAverages;\n  }\n\n  static String _findPeakDay(Map<String, int> dailyCompletions) {\n    if (dailyCompletions.isEmpty) return 'No data';\n    \n    final peak = dailyCompletions.entries.reduce((a, b) => a.value > b.value ? a : b);\n    return peak.key;\n  }\n\n  static double _calculateWeekendVsWeekdayRatio(Map<String, double> weekdayAverages) {\n    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! + \n                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! + \n                        weekdayAverages['Friday']!;\n    final weekendTotal = weekdayAverages['Saturday']! + weekdayAverages['Sunday']!;\n    \n    final weekdayAvg = weekdayTotal / 5;\n    final weekendAvg = weekendTotal / 2;\n    \n    return weekdayAvg != 0 ? weekendAvg / weekdayAvg : 0.0;\n  }\n\n  static String _generateTrendMessage(Map<String, dynamic> trendData, String habitName) {\n    final trend = trendData['trend'];\n    final strength = trendData['strength'] as double;\n    \n    switch (trend) {\n      case 'strong_improving':\n        return '$habitName is showing strong improvement! Keep up the excellent work.';\n      case 'improving':\n        return '$habitName is gradually improving. You\\'re on the right track!';\n      case 'stable':\n        return '$habitName has been consistent. Consider strategies to boost performance.';\n      case 'declining':\n        return '$habitName is showing a slight decline. Time to refocus your efforts.';\n      case 'strong_declining':\n        return '$habitName needs attention. Consider reviewing your approach or obstacles.';\n      default:\n        return 'Not enough data to determine trend for $habitName.';\n    }\n  }\n\n  static String _generateOverallTrendMessage(Map<String, dynamic> trendData) {\n    final trend = trendData['trend'];\n    \n    switch (trend) {\n      case 'strong_improving':\n        return 'Your overall habit performance is improving significantly!';\n      case 'improving':\n        return 'Your habit consistency is gradually improving.';\n      case 'stable':\n        return 'Your habits are consistently maintained.';\n      case 'declining':\n        return 'Your overall habit performance is declining slightly.';\n      case 'strong_declining':\n        return 'Your habit performance needs attention across multiple areas.';\n      default:\n        return 'Building baseline data for trend analysis.';\n    }\n  }\n\n  static Map<String, List<String>> _generateInsights(Map<String, dynamic> trends) {\n    final insights = <String>[];\n    final recommendations = <String>[];\n    \n    final overallTrends = trends['overallTrends'] as Map<String, dynamic>;\n    final weeklyPatterns = trends['weeklyPatterns'] as Map<String, dynamic>;\n    \n    // Overall trend insights\n    final overallTrend = overallTrends['trend'];\n    if (overallTrend == 'improving' || overallTrend == 'strong_improving') {\n      insights.add('Your habit consistency is improving over time!');\n    } else if (overallTrend == 'declining' || overallTrend == 'strong_declining') {\n      insights.add('Your habit performance has been declining recently.');\n      recommendations.add('Consider reviewing your habit schedule and removing obstacles.');\n    }\n    \n    // Weekly pattern insights\n    final bestDay = weeklyPatterns['bestDay'];\n    final worstDay = weeklyPatterns['worstDay'];\n    final weekendRatio = weeklyPatterns['weekendVsWeekday'] as double;\n    \n    insights.add('Your most productive day is $bestDay.');\n    insights.add('Your least productive day is $worstDay.');\n    \n    if (weekendRatio < 0.7) {\n      insights.add('You\\'re less consistent on weekends.');\n      recommendations.add('Plan simpler habits for weekends to maintain consistency.');\n    } else if (weekendRatio > 1.3) {\n      insights.add('You\\'re more active on weekends!');\n      recommendations.add('Try to maintain weekend momentum during weekdays.');\n    }\n    \n    return {\n      'insights': insights,\n      'recommendations': recommendations,\n    };\n  }\n}\n","baseTimestamp":1754438928680,"deltas":[{"timestamp":1754439615379,"changes":[{"type":"MODIFY","lineNumber":16,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":19,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":64,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":76,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":125,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":130,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":152,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":176,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":179,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":189,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":196,"oldContent":"      'averageDailyCompletions': dailyTotals.isNotEmpty "},{"type":"DELETE","lineNumber":197,"oldContent":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length "},{"type":"INSERT","lineNumber":196,"content":"      'averageDailyCompletions': dailyTotals.isNotEmpty"},{"type":"INSERT","lineNumber":197,"content":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length"},{"type":"MODIFY","lineNumber":215,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":218,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":228,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":232,"content":"        weekdayAverages[weekdayNames[i - 1]] =","oldContent":"        weekdayAverages[weekdayNames[i - 1]] = "},{"type":"MODIFY","lineNumber":261,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":264,"content":"      if (completedAt is DateTime &&","oldContent":"      if (completedAt is DateTime && "},{"type":"MODIFY","lineNumber":296,"content":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) &&","oldContent":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) && "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":310,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":326,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":329,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":332,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":337,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":340,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":343,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":354,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":365,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":372,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":378,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":384,"oldContent":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! + "},{"type":"MODIFY","lineNumber":384,"content":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! +","oldContent":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! + "},{"type":"INSERT","lineNumber":385,"content":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! +"},{"type":"MODIFY","lineNumber":388,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":391,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":417,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":437,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":440,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":454,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":457,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":465,"content":"","oldContent":"    "}]},{"timestamp":1754439653116,"changes":[{"type":"MODIFY","lineNumber":16,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":19,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":61,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":64,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":76,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":125,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":130,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":152,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":176,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":179,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":189,"content":"    ","oldContent":""},{"type":"DELETE","lineNumber":196,"oldContent":"      'averageDailyCompletions': dailyTotals.isNotEmpty"},{"type":"DELETE","lineNumber":197,"oldContent":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length"},{"type":"INSERT","lineNumber":196,"content":"      'averageDailyCompletions': dailyTotals.isNotEmpty "},{"type":"INSERT","lineNumber":197,"content":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length "},{"type":"MODIFY","lineNumber":215,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":218,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":228,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":232,"content":"        weekdayAverages[weekdayNames[i - 1]] = ","oldContent":"        weekdayAverages[weekdayNames[i - 1]] ="},{"type":"MODIFY","lineNumber":261,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":264,"content":"      if (completedAt is DateTime && ","oldContent":"      if (completedAt is DateTime &&"},{"type":"MODIFY","lineNumber":296,"content":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) && ","oldContent":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) &&"},{"type":"MODIFY","lineNumber":302,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":310,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":326,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":329,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":332,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":337,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":340,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":343,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":354,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":365,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":372,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":378,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":384,"content":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! + ","oldContent":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! +"},{"type":"MODIFY","lineNumber":388,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":391,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":398,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":417,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":437,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":440,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":449,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":454,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":457,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":465,"content":"    ","oldContent":""}]},{"timestamp":1754439673882,"changes":[{"type":"MODIFY","lineNumber":16,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":19,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":64,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":76,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":125,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":130,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":152,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":176,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":179,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":189,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":196,"oldContent":"      'averageDailyCompletions': dailyTotals.isNotEmpty "},{"type":"DELETE","lineNumber":197,"oldContent":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length "},{"type":"INSERT","lineNumber":196,"content":"      'averageDailyCompletions': dailyTotals.isNotEmpty"},{"type":"INSERT","lineNumber":197,"content":"          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length"},{"type":"MODIFY","lineNumber":215,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":218,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":228,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":232,"content":"        weekdayAverages[weekdayNames[i - 1]] =","oldContent":"        weekdayAverages[weekdayNames[i - 1]] = "},{"type":"MODIFY","lineNumber":261,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":264,"content":"      if (completedAt is DateTime &&","oldContent":"      if (completedAt is DateTime && "},{"type":"MODIFY","lineNumber":296,"content":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) &&","oldContent":"    return date.isAfter(startDate.subtract(const Duration(days: 1))) && "},{"type":"MODIFY","lineNumber":302,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":310,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":326,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":329,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":332,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":337,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":340,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":343,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":354,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":365,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":372,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":378,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":384,"oldContent":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! + "},{"type":"MODIFY","lineNumber":384,"content":"    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! +","oldContent":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! + "},{"type":"INSERT","lineNumber":385,"content":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! +"},{"type":"MODIFY","lineNumber":388,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":391,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":398,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":417,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":437,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":440,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":449,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":454,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":457,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":465,"content":"","oldContent":"    "}]},{"timestamp":1754439733552,"changes":[{"type":"MODIFY","lineNumber":23,"content":"        'message': 'Trends will be available after $_minimumDaysForTrend days of habit tracking',","oldContent":"        'message': 'Trends will be available after ${_minimumDaysForTrend} days of habit tracking',"},{"type":"MODIFY","lineNumber":385,"content":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! +","oldContent":"                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! + "}]},{"timestamp":1754444155759,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"  static const int _minimumDataPointsForReliableTrend = 14; // 2 weeks for better accuracy"}]},{"timestamp":1754444178015,"changes":[{"type":"DELETE","lineNumber":396,"oldContent":"    final strength = trendData['strength'] as double;"}]}]},"H:/New/HabitV8/lib/domain/model/habit.dart":{"filePath":"H:/New/HabitV8/lib/domain/model/habit.dart","baseContent":"import 'package:hive/hive.dart';\n\npart 'habit.g.dart';\n\n@HiveType(typeId: 0)\nclass Habit extends HiveObject {\n  @HiveField(0)\n  late String id;\n\n  @HiveField(1)\n  late String name;\n\n  @HiveField(2)\n  String? description;\n\n  @HiveField(3)\n  late String category;\n\n  @HiveField(4)\n  late int colorValue;\n\n  @HiveField(5)\n  late DateTime createdAt;\n\n  @HiveField(6)\n  DateTime? nextDueDate;\n\n  @HiveField(7)\n  late HabitFrequency frequency;\n\n  @HiveField(8)\n  late int targetCount;\n\n  @HiveField(9)\n  List<DateTime> completions = [];\n\n  @HiveField(10)\n  int currentStreak = 0;\n\n  @HiveField(11)\n  int longestStreak = 0;\n\n  @HiveField(12)\n  bool isActive = true;\n\n  @HiveField(13)\n  bool notificationsEnabled = true;\n\n  @HiveField(14)\n  DateTime? notificationTime;\n\n  @HiveField(15)\n  List<int> weeklySchedule = [];\n\n  @HiveField(16)\n  List<int> monthlySchedule = [];\n\n  @HiveField(17)\n  DateTime? reminderTime;\n\n  @HiveField(18)\n  HabitDifficulty difficulty = HabitDifficulty.medium;\n\n  Habit();\n\n  Habit.create({\n    required this.name,\n    this.description,\n    required this.category,\n    required this.colorValue,\n    required this.frequency,\n    this.targetCount = 1,\n    this.notificationsEnabled = true,\n    this.notificationTime,\n    this.reminderTime,\n    this.weeklySchedule = const [],\n    this.monthlySchedule = const [],\n    this.difficulty = HabitDifficulty.medium,\n  }) {\n    id = DateTime.now().millisecondsSinceEpoch.toString();\n    createdAt = DateTime.now();\n    isActive = true;\n    currentStreak = 0;\n    longestStreak = 0;\n    completions = [];\n  }\n\n  // Calculate completion rate based on the last 30 days\n  double get completionRate {\n    if (completions.isEmpty) return 0.0;\n\n    final now = DateTime.now();\n    final thirtyDaysAgo = now.subtract(const Duration(days: 30));\n\n    final recentCompletions = completions.where((completion) =>\n        completion.isAfter(thirtyDaysAgo) &&\n        completion.isBefore(now.add(const Duration(days: 1)))).length;\n\n    // Expected completions based on frequency\n    int expectedCompletions;\n    switch (frequency) {\n      case HabitFrequency.daily:\n        expectedCompletions = 30;\n        break;\n      case HabitFrequency.weekly:\n        expectedCompletions = 4;\n        break;\n      case HabitFrequency.monthly:\n        expectedCompletions = 1;\n        break;\n      default:\n        expectedCompletions = 30; // Default to daily\n    }\n\n    return (recentCompletions / expectedCompletions).clamp(0.0, 1.0);\n  }\n}\n\n@HiveType(typeId: 1)\nenum HabitFrequency {\n  @HiveField(0)\n  hourly,\n  @HiveField(1)\n  daily,\n  @HiveField(2)\n  weekly,\n  @HiveField(3)\n  monthly,\n  @HiveField(4)\n  yearly,\n}\n\n@HiveType(typeId: 2)\nenum HabitDifficulty {\n  @HiveField(0)\n  easy,\n  @HiveField(1)\n  medium,\n  @HiveField(2)\n  hard,\n}\n","baseTimestamp":1754439785652,"deltas":[{"timestamp":1754440877637,"changes":[{"type":"MODIFY","lineNumber":63,"content":"  Habit() {","oldContent":"  Habit();"},{"type":"INSERT","lineNumber":64,"content":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"INSERT","lineNumber":65,"content":"  }"}]},{"timestamp":1754442592945,"changes":[{"type":"MODIFY","lineNumber":66,"content":"","oldContent":""}]}]},"H:/New/HabitV8/lib/services/permission_service.dart":{"filePath":"H:/New/HabitV8/lib/services/permission_service.dart","baseContent":"import 'package:permission_handler/permission_handler.dart';\nimport 'package:health/health.dart';\nimport '../services/notification_service.dart';\n\nclass PermissionService {\n  static final PermissionService _instance = PermissionService._internal();\n  factory PermissionService() => _instance;\n  PermissionService._internal();\n\n  /// Request all necessary permissions for the app\n  static Future<bool> requestAllPermissions() async {\n    final permissions = <Permission>[\n      Permission.notification,\n      Permission.calendarFullAccess,\n      Permission.activityRecognition,\n      Permission.sensors,\n      Permission.location,\n      Permission.storage,\n    ];\n\n    Map<Permission, PermissionStatus> statuses = await permissions.request();\n\n    // Request health permissions separately\n    final bool healthPermissionsGranted = await _requestHealthPermissions();\n\n    // Check if all permissions are granted\n    bool allGranted = statuses.values.every((status) =>\n        status == PermissionStatus.granted || status == PermissionStatus.limited);\n\n    return allGranted && healthPermissionsGranted;\n  }\n\n  /// Request health-specific permissions\n  static Future<bool> _requestHealthPermissions() async {\n    final types = [\n      HealthDataType.STEPS,\n      HealthDataType.HEART_RATE,\n      HealthDataType.ACTIVE_ENERGY_BURNED,\n      HealthDataType.DISTANCE_DELTA,\n      HealthDataType.WORKOUT,\n      HealthDataType.SLEEP_IN_BED,\n    ];\n\n    // Create permissions list that matches the length of types\n    final permissions = types.map((type) => HealthDataAccess.READ).toList();\n\n    try {\n      bool requested = await Health().requestAuthorization(\n        types,\n        permissions: permissions,\n      );\n      return requested;\n    } catch (e) {\n      print('Error requesting health permissions: $e');\n      return false;\n    }\n  }\n\n  /// Check notification permission status\n  Future<bool> isNotificationPermissionGranted() async {\n    return await Permission.notification.isGranted;\n  }\n\n  /// Check calendar permission status\n  Future<bool> isCalendarPermissionGranted() async {\n    return await Permission.calendarFullAccess.isGranted;\n  }\n\n  /// Check health permission status\n  Future<bool> isHealthPermissionGranted() async {\n    final types = [HealthDataType.STEPS, HealthDataType.HEART_RATE];\n    try {\n      return await Health().hasPermissions(types) ?? false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /// Request specific permission\n  Future<bool> requestPermission(Permission permission) async {\n    final status = await permission.request();\n    return status == PermissionStatus.granted;\n  }\n\n  /// Open app settings for manual permission management\n  Future<void> openSettings() async {\n    await openAppSettings();\n  }\n\n  /// Test notification permissions and send a test notification\n  Future<void> testNotifications() async {\n    // Check if notifications are enabled\n    final isEnabled = await isNotificationPermissionGranted();\n    \n    if (isEnabled) {\n      // Send a test notification using static method\n      await NotificationService.showTestNotification();\n    } else {\n      // Request permission first\n      final granted = await requestPermission(Permission.notification);\n      if (granted) {\n        await NotificationService.showTestNotification();\n      }\n    }\n  }\n}\n","baseTimestamp":1754444065399,"deltas":[{"timestamp":1754444072984,"changes":[{"type":"INSERT","lineNumber":3,"content":"import '../utils/app_logger.dart';"},{"type":"MODIFY","lineNumber":54,"content":"      AppLogger.error('Error requesting health permissions', e);","oldContent":"      print('Error requesting health permissions: $e');"}]},{"timestamp":1754444079799,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import 'logging_service.dart';","oldContent":"import '../utils/app_logger.dart';"},{"type":"DELETE","lineNumber":54,"oldContent":"      print('Error requesting health permissions: $e');"},{"type":"INSERT","lineNumber":55,"content":"      return false;"}]},{"timestamp":1754444606233,"changes":[{"type":"MODIFY","lineNumber":55,"content":"      return false;","oldContent":"      return false;"}]}]},"H:/New/HabitV8/android/app/proguard-rules.pro":{"filePath":"H:/New/HabitV8/android/app/proguard-rules.pro","baseContent":"# Add project specific ProGuard rules here.\n# You can control the set of applied configuration files using the\n# proguardFiles setting in build.gradle.\n#\n# For more details, see\n#   http://developer.android.com/guide/developing/tools/proguard.html\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# Uncomment this to preserve the line number information for\n# debugging stack traces.\n#-keepattributes SourceFile,LineNumberTable\n\n# If you keep the line number information, uncomment this to\n# hide the original source file name.\n#-renamesourcefileattribute SourceFile\n\n# Keep TensorFlow Lite classes\n-keep class org.tensorflow.lite.** { *; }\n-keep class org.tensorflow.lite.gpu.** { *; }\n-dontwarn org.tensorflow.lite.gpu.GpuDelegateFactory$Options\n\n# Keep Flutter and Dart related classes\n-keep class io.flutter.** { *; }\n-keep class io.flutter.plugins.** { *; }\n\n# Keep notification related classes\n-keep class com.dexterous.** { *; }\n-keep class androidx.work.** { *; }\n\n# Keep health plugin classes\n-keep class cachet.plugins.health.** { *; }\n\n# Keep permission handler classes\n-keep class com.baseflow.permissionhandler.** { *; }\n\n# Keep device info classes\n-keep class dev.fluttercommunity.plus.device_info.** { *; }\n\n# Keep path provider classes\n-keep class io.flutter.plugins.pathprovider.** { *; }\n\n# Keep shared preferences classes\n-keep class io.flutter.plugins.sharedpreferences.** { *; }\n\n# Keep calendar plugin classes\n-keep class com.builttoroam.devicecalendar.** { *; }\n","baseTimestamp":1754452238056,"deltas":[{"timestamp":1754452294162,"changes":[{"type":"INSERT","lineNumber":27,"content":"# Google Play Core - Split Install warnings"},{"type":"INSERT","lineNumber":28,"content":"-dontwarn com.google.android.play.core.splitcompat.SplitCompatApplication"},{"type":"INSERT","lineNumber":29,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallException"},{"type":"INSERT","lineNumber":30,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallManager"},{"type":"INSERT","lineNumber":31,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallManagerFactory"},{"type":"INSERT","lineNumber":32,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallRequest$Builder"},{"type":"INSERT","lineNumber":33,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallRequest"},{"type":"INSERT","lineNumber":34,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallSessionState"},{"type":"INSERT","lineNumber":35,"content":"-dontwarn com.google.android.play.core.splitinstall.SplitInstallStateUpdatedListener"},{"type":"INSERT","lineNumber":36,"content":"-dontwarn com.google.android.play.core.tasks.OnFailureListener"},{"type":"INSERT","lineNumber":37,"content":"-dontwarn com.google.android.play.core.tasks.OnSuccessListener"},{"type":"INSERT","lineNumber":38,"content":"-dontwarn com.google.android.play.core.tasks.Task"},{"type":"INSERT","lineNumber":39,"content":""}]},{"timestamp":1754454417558,"changes":[{"type":"DELETE","lineNumber":28,"oldContent":"# Keep Flutter and Dart related classes"},{"type":"DELETE","lineNumber":30,"oldContent":"-keep class io.flutter.** { *; }"},{"type":"DELETE","lineNumber":32,"oldContent":"-keep class io.flutter.plugins.** { *; }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"# Keep notification related classes"},{"type":"DELETE","lineNumber":38,"oldContent":"-keep class com.dexterous.** { *; }"},{"type":"DELETE","lineNumber":40,"oldContent":"-keep class androidx.work.** { *; }"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"# Keep health plugin classes"},{"type":"DELETE","lineNumber":46,"oldContent":"-keep class cachet.plugins.health.** { *; }"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"# Keep permission handler classes"},{"type":"INSERT","lineNumber":40,"content":"# Keep Flutter and Dart related classes"},{"type":"INSERT","lineNumber":41,"content":"-keep class io.flutter.** { *; }"},{"type":"INSERT","lineNumber":42,"content":"-keep class io.flutter.plugins.** { *; }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"# Flutter Local Notifications - Prevent obfuscation of classes used by Gson"},{"type":"INSERT","lineNumber":45,"content":"-keep class com.dexterous.** { *; }"},{"type":"INSERT","lineNumber":46,"content":"-keep class com.dexterous.flutterlocalnotifications.** { *; }"},{"type":"INSERT","lineNumber":47,"content":"-keepattributes Signature"},{"type":"INSERT","lineNumber":48,"content":"-keepattributes *Annotation*"},{"type":"INSERT","lineNumber":49,"content":"-keepattributes EnclosingMethod"},{"type":"INSERT","lineNumber":50,"content":"-keepattributes InnerClasses"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"# Gson specific rules for flutter_local_notifications"},{"type":"INSERT","lineNumber":53,"content":"-keep class com.google.gson.reflect.TypeToken { *; }"},{"type":"INSERT","lineNumber":54,"content":"-keep class * extends com.google.gson.reflect.TypeToken"},{"type":"INSERT","lineNumber":55,"content":"-keep public class * implements java.lang.reflect.Type"},{"type":"INSERT","lineNumber":56,"content":"-keep class com.google.gson.** { *; }"},{"type":"INSERT","lineNumber":57,"content":"-keep class * implements com.google.gson.TypeAdapterFactory"},{"type":"INSERT","lineNumber":58,"content":"-keep class * implements com.google.gson.JsonSerializer"},{"type":"INSERT","lineNumber":59,"content":"-keep class * implements com.google.gson.JsonDeserializer"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"# Keep notification model classes that might be serialized"},{"type":"INSERT","lineNumber":62,"content":"-keep class com.dexterous.flutterlocalnotifications.models.** { *; }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"# Keep notification related classes"},{"type":"INSERT","lineNumber":65,"content":"-keep class com.dexterous.** { *; }"},{"type":"INSERT","lineNumber":66,"content":"-keep class androidx.work.** { *; }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"# Keep health plugin classes"},{"type":"INSERT","lineNumber":69,"content":"-keep class cachet.plugins.health.** { *; }"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"# Keep permission handler classes"}]}]},"H:/New/HabitV8/android/app/build.gradle.kts":{"filePath":"H:/New/HabitV8/android/app/build.gradle.kts","baseContent":"plugins {\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.\n    id(\"dev.flutter.flutter-gradle-plugin\")\n}\n\nandroid {\n    namespace = \"com.example.habitv8\"\n    compileSdk = 35\n    ndkVersion = \"27.2.12479018\"\n\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n        isCoreLibraryDesugaringEnabled = true\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_11.toString()\n    }\n\n    defaultConfig {\n        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\n        applicationId = \"com.example.habitv8\"\n        // You can update the following values to match your application needs.\n        // For more information, see: https://flutter.dev/to/review-gradle-config.\n        minSdk = 27\n        targetSdk = 35\n        versionCode = flutter.versionCode\n        versionName = flutter.versionName\n    }\n\n    buildTypes {\n        release {\n            // TODO: Add your own signing config for the release build.\n            // Signing with the debug keys for now, so `flutter run --release` works.\n            signingConfig = signingConfigs.getByName(\"debug\")\n            isMinifyEnabled = true\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n}\n\nflutter {\n    source = \"../..\"\n}\n\ndependencies {\n    coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:2.0.4\")\n}\n","baseTimestamp":1754452249346},"C:/HabitV8/ios/Runner/Info.plist":{"filePath":"C:/HabitV8/ios/Runner/Info.plist","baseContent":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>$(DEVELOPMENT_LANGUAGE)</string>\n\t<key>CFBundleDisplayName</key>\n\t<string>Habitv8</string>\n\t<key>CFBundleExecutable</key>\n\t<string>$(EXECUTABLE_NAME)</string>\n\t<key>CFBundleIdentifier</key>\n\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>habitv8</string>\n\t<key>CFBundlePackageType</key>\n\t<string>APPL</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>$(FLUTTER_BUILD_NAME)</string>\n\t<key>CFBundleSignature</key>\n\t<string>????</string>\n\t<key>CFBundleVersion</key>\n\t<string>$(FLUTTER_BUILD_NUMBER)</string>\n\t<key>LSRequiresIPhoneOS</key>\n\t<true/>\n\t<key>UILaunchStoryboardName</key>\n\t<string>LaunchScreen</string>\n\t<key>UIMainStoryboardFile</key>\n\t<string>Main</string>\n\t<key>UISupportedInterfaceOrientations</key>\n\t<array>\n\t\t<string>UIInterfaceOrientationPortrait</string>\n\t\t<string>UIInterfaceOrientationLandscapeLeft</string>\n\t\t<string>UIInterfaceOrientationLandscapeRight</string>\n\t</array>\n\t<key>UISupportedInterfaceOrientations~ipad</key>\n\t<array>\n\t\t<string>UIInterfaceOrientationPortrait</string>\n\t\t<string>UIInterfaceOrientationPortraitUpsideDown</string>\n\t\t<string>UIInterfaceOrientationLandscapeLeft</string>\n\t\t<string>UIInterfaceOrientationLandscapeRight</string>\n\t</array>\n\t<key>CADisableMinimumFrameDurationOnPhone</key>\n\t<true/>\n\t<key>UIApplicationSupportsIndirectInputEvents</key>\n\t<true/>\n\t\n\t<!-- Health permissions -->\n\t<key>NSHealthShareUsageDescription</key>\n\t<string>This app needs access to read your health data to track fitness habits and provide personalized insights.</string>\n\t<key>NSHealthUpdateUsageDescription</key>\n\t<string>This app needs access to update your health data to record habit completion and fitness activities.</string>\n\t\n\t<!-- Calendar permissions -->\n\t<key>NSCalendarsUsageDescription</key>\n\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>\n\t\n\t<!-- Motion and fitness permissions -->\n\t<key>NSMotionUsageDescription</key>\n\t<string>This app uses motion data to track your physical activity and movement patterns for habit tracking.</string>\n\t\n\t<!-- Location permissions for fitness tracking -->\n\t<key>NSLocationWhenInUseUsageDescription</key>\n\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>\n\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>\n\t\n\t<!-- Notification permissions -->\n\t<key>NSUserNotificationUsageDescription</key>\n\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>\n\t\n\t<!-- Camera and photo library for habit progress photos -->\n\t<key>NSCameraUsageDescription</key>\n\t<string>This app needs camera access to let you take progress photos for your habits.</string>\n\t<key>NSPhotoLibraryUsageDescription</key>\n\t<string>This app needs photo library access to save and view your habit progress photos.</string>\n</dict>\n</plist>\n","baseTimestamp":1754456244041,"deltas":[{"timestamp":1754456250122,"changes":[{"type":"MODIFY","lineNumber":47,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":53,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":57,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":67,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":71,"content":"","oldContent":"\t"}]},{"timestamp":1754456804417,"changes":[{"type":"MODIFY","lineNumber":47,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":53,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":57,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":61,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":67,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":71,"content":"\t","oldContent":""}]},{"timestamp":1754456827835,"changes":[{"type":"MODIFY","lineNumber":47,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":53,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":57,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":67,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":71,"content":"","oldContent":"\t"}]},{"timestamp":1754456845823,"changes":[{"type":"DELETE","lineNumber":48,"oldContent":"\t<!-- Health permissions -->"},{"type":"DELETE","lineNumber":49,"oldContent":"\t<key>NSHealthShareUsageDescription</key>"},{"type":"DELETE","lineNumber":50,"oldContent":"\t<string>This app needs access to read your health data to track fitness habits and provide personalized insights.</string>"},{"type":"DELETE","lineNumber":51,"oldContent":"\t<key>NSHealthUpdateUsageDescription</key>"},{"type":"DELETE","lineNumber":52,"oldContent":"\t<string>This app needs access to update your health data to record habit completion and fitness activities.</string>"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"\t<!-- Calendar permissions -->"},{"type":"DELETE","lineNumber":55,"oldContent":"\t<key>NSCalendarsUsageDescription</key>"},{"type":"DELETE","lineNumber":56,"oldContent":"\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"\t<!-- Motion and fitness permissions -->"},{"type":"DELETE","lineNumber":59,"oldContent":"\t<key>NSMotionUsageDescription</key>"},{"type":"DELETE","lineNumber":60,"oldContent":"\t<string>This app uses motion data to track your physical activity and movement patterns for habit tracking.</string>"},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"\t<!-- Location permissions for fitness tracking -->"},{"type":"DELETE","lineNumber":63,"oldContent":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"DELETE","lineNumber":64,"oldContent":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"DELETE","lineNumber":65,"oldContent":"\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>"},{"type":"DELETE","lineNumber":66,"oldContent":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"DELETE","lineNumber":67,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":"\t<!-- Notification permissions -->"},{"type":"DELETE","lineNumber":69,"oldContent":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"DELETE","lineNumber":70,"oldContent":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"\t<!-- Camera and photo library for habit progress photos -->"},{"type":"DELETE","lineNumber":73,"oldContent":"\t<key>NSCameraUsageDescription</key>"},{"type":"DELETE","lineNumber":74,"oldContent":"\t<string>This app needs camera access to let you take progress photos for your habits.</string>"},{"type":"DELETE","lineNumber":75,"oldContent":"\t<key>NSPhotoLibraryUsageDescription</key>"},{"type":"DELETE","lineNumber":76,"oldContent":"\t<string>This app needs photo library access to save and view your habit progress photos.</string>"},{"type":"DELETE","lineNumber":77,"oldContent":"</dict>"},{"type":"DELETE","lineNumber":78,"oldContent":"</plist>"},{"type":"DELETE","lineNumber":79,"oldContent":""}]},{"timestamp":1754456851448,"changes":[{"type":"INSERT","lineNumber":47,"content":"\t"},{"type":"INSERT","lineNumber":48,"content":"\t<!-- Health permissions -->"},{"type":"INSERT","lineNumber":49,"content":"\t<key>NSHealthShareUsageDescription</key>"},{"type":"INSERT","lineNumber":50,"content":"\t<string>This app needs access to read your health data to track fitness habits and provide personalized insights.</string>"},{"type":"INSERT","lineNumber":51,"content":"\t<key>NSHealthUpdateUsageDescription</key>"},{"type":"INSERT","lineNumber":52,"content":"\t<string>This app needs access to update your health data to record habit completion and fitness activities.</string>"},{"type":"INSERT","lineNumber":53,"content":"\t"},{"type":"INSERT","lineNumber":54,"content":"\t<!-- Calendar permissions -->"},{"type":"INSERT","lineNumber":55,"content":"\t<key>NSCalendarsUsageDescription</key>"},{"type":"INSERT","lineNumber":56,"content":"\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>"},{"type":"INSERT","lineNumber":57,"content":"\t"},{"type":"INSERT","lineNumber":58,"content":"\t<!-- Motion and fitness permissions -->"},{"type":"INSERT","lineNumber":59,"content":"\t<key>NSMotionUsageDescription</key>"},{"type":"INSERT","lineNumber":60,"content":"\t<string>This app uses motion data to track your physical activity and movement patterns for habit tracking.</string>"},{"type":"INSERT","lineNumber":61,"content":"\t"},{"type":"INSERT","lineNumber":62,"content":"\t<!-- Location permissions for fitness tracking -->"},{"type":"INSERT","lineNumber":63,"content":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"INSERT","lineNumber":64,"content":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"INSERT","lineNumber":65,"content":"\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>"},{"type":"INSERT","lineNumber":66,"content":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"INSERT","lineNumber":67,"content":"\t"},{"type":"INSERT","lineNumber":68,"content":"\t<!-- Notification permissions -->"},{"type":"INSERT","lineNumber":69,"content":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"INSERT","lineNumber":70,"content":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"INSERT","lineNumber":71,"content":"\t"},{"type":"INSERT","lineNumber":72,"content":"\t<!-- Camera and photo library for habit progress photos -->"},{"type":"INSERT","lineNumber":73,"content":"\t<key>NSCameraUsageDescription</key>"},{"type":"INSERT","lineNumber":74,"content":"\t<string>This app needs camera access to let you take progress photos for your habits.</string>"},{"type":"INSERT","lineNumber":75,"content":"\t<key>NSPhotoLibraryUsageDescription</key>"},{"type":"INSERT","lineNumber":76,"content":"\t<string>This app needs photo library access to save and view your habit progress photos.</string>"},{"type":"INSERT","lineNumber":77,"content":"</dict>"},{"type":"INSERT","lineNumber":78,"content":"</plist>"}]},{"timestamp":1754457082344,"changes":[{"type":"DELETE","lineNumber":47,"oldContent":"\t"},{"type":"DELETE","lineNumber":50,"oldContent":"</plist>"},{"type":"DELETE","lineNumber":52,"oldContent":"</dict>"},{"type":"DELETE","lineNumber":54,"oldContent":"\t<string>This app needs photo library access to save and view your habit progress photos.</string>"},{"type":"DELETE","lineNumber":56,"oldContent":"\t<key>NSPhotoLibraryUsageDescription</key>"},{"type":"DELETE","lineNumber":58,"oldContent":"\t<string>This app needs camera access to let you take progress photos for your habits.</string>"},{"type":"DELETE","lineNumber":59,"oldContent":"\t"},{"type":"DELETE","lineNumber":60,"oldContent":"\t<key>NSCameraUsageDescription</key>"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"DELETE","lineNumber":62,"oldContent":"\t<!-- Camera and photo library for habit progress photos -->"},{"type":"DELETE","lineNumber":64,"oldContent":"\t"},{"type":"DELETE","lineNumber":66,"oldContent":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"DELETE","lineNumber":67,"oldContent":"\t"},{"type":"DELETE","lineNumber":68,"oldContent":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"DELETE","lineNumber":70,"oldContent":"\t<!-- Notification permissions -->"},{"type":"DELETE","lineNumber":72,"oldContent":"\t"},{"type":"INSERT","lineNumber":61,"content":""},{"type":"INSERT","lineNumber":62,"content":"\t<!-- Location permissions for fitness tracking -->"},{"type":"INSERT","lineNumber":63,"content":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"DELETE","lineNumber":75,"oldContent":"\t"},{"type":"DELETE","lineNumber":77,"oldContent":"\t<!-- Location permissions for fitness tracking -->"},{"type":"DELETE","lineNumber":79,"oldContent":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"\t<!-- Notification permissions -->"},{"type":"INSERT","lineNumber":69,"content":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"INSERT","lineNumber":70,"content":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"\t<!-- Camera and photo library for habit progress photos -->"},{"type":"INSERT","lineNumber":73,"content":"\t<key>NSCameraUsageDescription</key>"},{"type":"INSERT","lineNumber":74,"content":"\t<string>This app needs camera access to let you take progress photos for your habits.</string>"},{"type":"INSERT","lineNumber":75,"content":"\t<key>NSPhotoLibraryUsageDescription</key>"},{"type":"INSERT","lineNumber":76,"content":"\t<string>This app needs photo library access to save and view your habit progress photos.</string>"},{"type":"INSERT","lineNumber":77,"content":"</dict>"},{"type":"INSERT","lineNumber":78,"content":"</plist>"},{"type":"INSERT","lineNumber":79,"content":""}]},{"timestamp":1754457489147,"changes":[{"type":"MODIFY","lineNumber":47,"content":"\t","oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"INSERT","lineNumber":53,"content":"\t"},{"type":"DELETE","lineNumber":57,"oldContent":"\t<!-- Location permissions for fitness tracking -->"},{"type":"DELETE","lineNumber":58,"oldContent":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"INSERT","lineNumber":57,"content":"\t"},{"type":"INSERT","lineNumber":58,"content":"\t<!-- Motion and fitness permissions -->"},{"type":"INSERT","lineNumber":59,"content":"\t<key>NSMotionUsageDescription</key>"},{"type":"INSERT","lineNumber":60,"content":"\t<string>This app uses motion data to track your physical activity and movement patterns for habit tracking.</string>"},{"type":"INSERT","lineNumber":61,"content":"\t"},{"type":"INSERT","lineNumber":62,"content":"\t<!-- Location permissions for fitness tracking -->"},{"type":"INSERT","lineNumber":63,"content":"\t<key>NSLocationWhenInUseUsageDescription</key>"},{"type":"INSERT","lineNumber":64,"content":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"INSERT","lineNumber":65,"content":"\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>"},{"type":"INSERT","lineNumber":66,"content":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"INSERT","lineNumber":67,"content":"\t"},{"type":"DELETE","lineNumber":64,"oldContent":"\t<!-- Motion and fitness permissions -->"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"\t<key>NSMotionUsageDescription</key>"},{"type":"INSERT","lineNumber":71,"content":"\t"},{"type":"DELETE","lineNumber":70,"oldContent":"\t<string>This app uses motion data to track your physical activity and movement patterns for habit tracking.</string>"},{"type":"DELETE","lineNumber":72,"oldContent":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"DELETE","lineNumber":75,"oldContent":"\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>"},{"type":"DELETE","lineNumber":78,"oldContent":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"}]},{"timestamp":1754459029413,"changes":[{"type":"MODIFY","lineNumber":53,"content":"\t","oldContent":"\t"},{"type":"INSERT","lineNumber":55,"content":"\t<key>NSCalendarsUsageDescription</key>"},{"type":"INSERT","lineNumber":56,"content":"\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>"},{"type":"DELETE","lineNumber":58,"oldContent":"\t<key>NSCalendarsUsageDescription</key>"},{"type":"DELETE","lineNumber":60,"oldContent":"\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>"},{"type":"DELETE","lineNumber":63,"oldContent":"\t<!-- Notification permissions -->"},{"type":"DELETE","lineNumber":65,"oldContent":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"MODIFY","lineNumber":68,"content":"\t<!-- Notification permissions -->","oldContent":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"INSERT","lineNumber":69,"content":"\t<key>NSUserNotificationUsageDescription</key>"},{"type":"INSERT","lineNumber":70,"content":"\t<string>This app sends notifications to remind you about your habits and celebrate your achievements.</string>"},{"type":"INSERT","lineNumber":71,"content":"\t"},{"type":"DELETE","lineNumber":73,"oldContent":"\t"}]},{"timestamp":1754459114573,"changes":[{"type":"MODIFY","lineNumber":47,"content":"","oldContent":"\t"},{"type":"DELETE","lineNumber":52,"oldContent":"\t"},{"type":"DELETE","lineNumber":53,"oldContent":"\t"},{"type":"INSERT","lineNumber":52,"content":"\t<string>This app needs access to update your health data to record habit completion and fitness activities.</string>"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"MODIFY","lineNumber":57,"content":"","oldContent":"\t"},{"type":"MODIFY","lineNumber":61,"content":"","oldContent":"\t"},{"type":"INSERT","lineNumber":66,"content":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"DELETE","lineNumber":68,"oldContent":"\t<string>This app needs location access to track outdoor activities and provide location-based habit reminders.</string>"},{"type":"DELETE","lineNumber":70,"oldContent":"\t"},{"type":"MODIFY","lineNumber":71,"content":"","oldContent":"\t"}]},{"timestamp":1754459270387,"changes":[{"type":"MODIFY","lineNumber":47,"content":"\t","oldContent":""},{"type":"MODIFY","lineNumber":53,"content":"\t","oldContent":""},{"type":"INSERT","lineNumber":56,"content":"\t<string>This app needs access to your calendar to create reminders and schedule habit tracking events.</string>"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"MODIFY","lineNumber":61,"content":"\t","oldContent":""},{"type":"INSERT","lineNumber":67,"content":"\t"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"MODIFY","lineNumber":71,"content":"\t","oldContent":""}]}]},"C:/HabitV8/lib/services/health_service.dart":{"filePath":"C:/HabitV8/lib/services/health_service.dart","baseContent":"import 'package:health/health.dart';\nimport 'dart:io';\nimport 'logging_service.dart';\n\nclass HealthService {\n  static bool _isInitialized = false;\n\n  /// List of health data types we want to access\n  static final List<HealthDataType> _healthDataTypes = [\n    HealthDataType.STEPS,\n    HealthDataType.HEART_RATE,\n    HealthDataType.SLEEP_IN_BED,\n    HealthDataType.SLEEP_ASLEEP,\n    HealthDataType.ACTIVE_ENERGY_BURNED,\n    HealthDataType.EXERCISE_TIME,\n    HealthDataType.WORKOUT,\n    if (Platform.isIOS) ...[\n      HealthDataType.MINDFULNESS,\n      HealthDataType.WATER,\n    ],\n    if (Platform.isAndroid) ...[\n      HealthDataType.WATER,\n      HealthDataType.WEIGHT,\n    ],\n  ];\n\n  /// Initialize health service\n  static Future<bool> initialize() async {\n    if (_isInitialized) return true;\n\n    try {\n      // Check if health data is available on this platform\n      final bool isAvailable = await Health().hasPermissions(_healthDataTypes) ?? false;\n\n      _isInitialized = true;\n      AppLogger.info('Health service initialized. Available: $isAvailable');\n\n      return true;\n    } catch (e) {\n      AppLogger.error('Failed to initialize health service', e);\n      return false;\n    }\n  }\n\n  /// Request health data permissions\n  static Future<bool> requestPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      // Request permissions for read access\n      final List<HealthDataAccess> permissions = _healthDataTypes\n          .map((type) => HealthDataAccess.READ)\n          .toList();\n\n      final bool granted = await Health().requestAuthorization(\n        _healthDataTypes,\n        permissions: permissions,\n      );\n\n      AppLogger.info('Health permissions granted: $granted');\n      return granted;\n    } catch (e) {\n      AppLogger.error('Failed to request health permissions', e);\n      return false;\n    }\n  }\n\n  /// Check if health permissions are granted\n  static Future<bool> hasPermissions() async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final bool? hasPerms = await Health().hasPermissions(_healthDataTypes);\n      return hasPerms ?? false;\n    } catch (e) {\n      AppLogger.error('Error checking health permissions', e);\n      return false;\n    }\n  }\n\n  /// Get steps data for a date range\n  static Future<List<HealthDataPoint>> getStepsData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        types: [HealthDataType.STEPS],\n        startTime: startDate,\n        endTime: endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} steps data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get steps data', e);\n      return [];\n    }\n  }\n\n  /// Get heart rate data for a date range\n  static Future<List<HealthDataPoint>> getHeartRateData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        types: [HealthDataType.HEART_RATE],\n        startTime: startDate,\n        endTime: endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} heart rate data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get heart rate data', e);\n      return [];\n    }\n  }\n\n  /// Get sleep data for a date range\n  static Future<List<HealthDataPoint>> getSleepData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],\n        startTime: startDate,\n        endTime: endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} sleep data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get sleep data', e);\n      return [];\n    }\n  }\n\n  /// Get exercise/workout data for a date range\n  static Future<List<HealthDataPoint>> getExerciseData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],\n        startTime: startDate,\n        endTime: endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} exercise data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get exercise data', e);\n      return [];\n    }\n  }\n\n  /// Get water intake data for a date range\n  static Future<List<HealthDataPoint>> getWaterData({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes(\n        types: [HealthDataType.WATER],\n        startTime: startDate,\n        endTime: endDate,\n      );\n\n      AppLogger.info('Retrieved ${healthData.length} water data points');\n      return healthData;\n    } catch (e) {\n      AppLogger.error('Failed to get water data', e);\n      return [];\n    }\n  }\n\n  /// Get comprehensive health summary for today\n  static Future<Map<String, dynamic>> getTodayHealthSummary() async {\n    final DateTime today = DateTime.now();\n    final DateTime startOfDay = DateTime(today.year, today.month, today.day);\n    final DateTime endOfDay = startOfDay.add(const Duration(days: 1));\n\n    final Map<String, dynamic> summary = {};\n\n    try {\n      // Get steps\n      final stepsData = await getStepsData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      int totalSteps = 0;\n      for (var point in stepsData) {\n        if (point.value is NumericHealthValue) {\n          totalSteps += (point.value as NumericHealthValue).numericValue.toInt();\n        }\n      }\n      summary['steps'] = totalSteps;\n\n      // Get exercise time\n      final exerciseData = await getExerciseData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      double totalExerciseMinutes = 0;\n      for (var point in exerciseData) {\n        if (point.value is NumericHealthValue) {\n          totalExerciseMinutes += (point.value as NumericHealthValue).numericValue;\n        }\n      }\n      summary['exerciseMinutes'] = totalExerciseMinutes.round();\n\n      // Get water intake\n      final waterData = await getWaterData(\n        startDate: startOfDay,\n        endDate: endOfDay,\n      );\n      double totalWater = 0;\n      for (var point in waterData) {\n        if (point.value is NumericHealthValue) {\n          totalWater += (point.value as NumericHealthValue).numericValue;\n        }\n      }\n      summary['waterIntake'] = totalWater;\n\n      AppLogger.info('Health summary generated: $summary');\n    } catch (e) {\n      AppLogger.error('Failed to generate health summary', e);\n    }\n\n    return summary;\n  }\n\n  /// Get health insights for habit correlation\n  static Future<Map<String, dynamic>> getHealthInsights({\n    required DateTime startDate,\n    required DateTime endDate,\n  }) async {\n    final Map<String, dynamic> insights = {};\n\n    try {\n      // Get average daily steps\n      final stepsData = await getStepsData(startDate: startDate, endDate: endDate);\n      final Map<String, int> dailySteps = {};\n\n      for (var point in stepsData) {\n        if (point.value is NumericHealthValue) {\n          final date = '${point.dateFrom.year}-${point.dateFrom.month.toString().padLeft(2, '0')}-${point.dateFrom.day.toString().padLeft(2, '0')}';\n          dailySteps[date] = (dailySteps[date] ?? 0) + (point.value as NumericHealthValue).numericValue.toInt();\n        }\n      }\n\n      if (dailySteps.isNotEmpty) {\n        final avgSteps = dailySteps.values.reduce((a, b) => a + b) / dailySteps.length;\n        insights['averageDailySteps'] = avgSteps.round();\n        insights['totalDaysWithSteps'] = dailySteps.length;\n      }\n\n      // Get sleep patterns\n      final sleepData = await getSleepData(startDate: startDate, endDate: endDate);\n      final List<double> sleepDurations = [];\n\n      for (var point in sleepData) {\n        if (point.type == HealthDataType.SLEEP_ASLEEP && point.value is NumericHealthValue) {\n          final hours = (point.value as NumericHealthValue).numericValue.toDouble();\n          sleepDurations.add(hours);\n        }\n      }\n\n      if (sleepDurations.isNotEmpty) {\n        final avgSleep = sleepDurations.reduce((a, b) => a + b) / sleepDurations.length;\n        insights['averageSleepHours'] = (avgSleep * 100).round() / 100; // Round to 2 decimal places\n      }\n\n      AppLogger.info('Health insights generated: $insights');\n    } catch (e) {\n      AppLogger.error('Failed to generate health insights', e);\n    }\n\n    return insights;\n  }\n\n  /// Check if health data is available on this device\n  static Future<bool> isHealthDataAvailable() async {\n    try {\n      return await Health().hasPermissions([HealthDataType.STEPS]) ?? false;\n    } catch (e) {\n      AppLogger.error('Error checking health data availability', e);\n      return false;\n    }\n  }\n\n  /// Write health data (for habits that contribute to health metrics)\n  static Future<bool> writeHealthData({\n    required HealthDataType type,\n    required double value,\n    required DateTime dateTime,\n    String? unit,\n  }) async {\n    if (!_isInitialized) {\n      await initialize();\n    }\n\n    try {\n      final bool success = await Health().writeHealthData(\n        value: value,\n        type: type,\n        startTime: dateTime,\n        endTime: dateTime,\n        unit: unit != null ? HealthDataUnit.values.firstWhere(\n          (u) => u.name.toLowerCase() == unit.toLowerCase(),\n          orElse: () => HealthDataUnit.NO_UNIT,\n        ) : HealthDataUnit.NO_UNIT,\n      );\n\n      AppLogger.info('Health data write success: $success');\n      return success;\n    } catch (e) {\n      AppLogger.error('Failed to write health data', e);\n      return false;\n    }\n  }\n}\n","baseTimestamp":1754456245027,"deltas":[{"timestamp":1754456845843,"changes":[{"type":"INSERT","lineNumber":5,"content":"  static Health? _health;"},{"type":"INSERT","lineNumber":6,"content":"  static Health? _health;"},{"type":"INSERT","lineNumber":32,"content":"      _health = Health();"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":35,"content":"      _health = Health();"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"    try {"},{"type":"DELETE","lineNumber":94,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":95,"oldContent":"        types: [HealthDataType.STEPS],"},{"type":"DELETE","lineNumber":96,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":97,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":98,"content":"        [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":99,"content":"        startDate,"},{"type":"INSERT","lineNumber":100,"content":"        endDate,"},{"type":"INSERT","lineNumber":101,"content":"        [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":102,"content":"        startDate,"},{"type":"INSERT","lineNumber":103,"content":"        endDate,"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    try {"},{"type":"DELETE","lineNumber":118,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":119,"oldContent":"        types: [HealthDataType.HEART_RATE],"},{"type":"DELETE","lineNumber":120,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":121,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":122,"content":"        [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":123,"content":"        startDate,"},{"type":"INSERT","lineNumber":124,"content":"        endDate,"},{"type":"INSERT","lineNumber":125,"content":"        [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":126,"content":"        startDate,"},{"type":"INSERT","lineNumber":127,"content":"        endDate,"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"    try {"},{"type":"DELETE","lineNumber":142,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":143,"oldContent":"        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"DELETE","lineNumber":144,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":145,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":146,"content":"        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":147,"content":"        startDate,"},{"type":"INSERT","lineNumber":148,"content":"        endDate,"},{"type":"INSERT","lineNumber":149,"content":"        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":150,"content":"        startDate,"},{"type":"INSERT","lineNumber":151,"content":"        endDate,"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"    try {"},{"type":"DELETE","lineNumber":166,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":167,"oldContent":"        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"DELETE","lineNumber":168,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":169,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":170,"content":"        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":171,"content":"        startDate,"},{"type":"INSERT","lineNumber":172,"content":"        endDate,"},{"type":"INSERT","lineNumber":173,"content":"        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":174,"content":"        startDate,"},{"type":"INSERT","lineNumber":175,"content":"        endDate,"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"    try {"},{"type":"DELETE","lineNumber":190,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":191,"oldContent":"        types: [HealthDataType.WATER],"},{"type":"DELETE","lineNumber":192,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":193,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":194,"content":"        [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":195,"content":"        startDate,"},{"type":"INSERT","lineNumber":196,"content":"        endDate,"},{"type":"INSERT","lineNumber":197,"content":"        [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":198,"content":"        startDate,"},{"type":"INSERT","lineNumber":199,"content":"        endDate,"},{"type":"DELETE","lineNumber":288,"oldContent":""},{"type":"INSERT","lineNumber":294,"content":"          final hours = (point.value as NumericHealthValue).numericValue;"},{"type":"DELETE","lineNumber":291,"oldContent":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"INSERT","lineNumber":297,"content":"          final hours = (point.value as NumericHealthValue).numericValue;"},{"type":"DELETE","lineNumber":328,"oldContent":"    }"},{"type":"INSERT","lineNumber":334,"content":"      final HealthValue healthValue = NumericHealthValue(numericValue: value);"},{"type":"INSERT","lineNumber":336,"content":"    }"},{"type":"INSERT","lineNumber":337,"content":"        value: healthValue,"},{"type":"INSERT","lineNumber":339,"content":"      final HealthValue healthValue = NumericHealthValue(numericValue: value);"},{"type":"INSERT","lineNumber":340,"content":""},{"type":"DELETE","lineNumber":332,"oldContent":"        value: value,"},{"type":"INSERT","lineNumber":342,"content":"        value: healthValue,"}]},{"timestamp":1754456851551,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"  static Health? _health;"},{"type":"DELETE","lineNumber":7,"oldContent":"  static Health? _health;"},{"type":"DELETE","lineNumber":34,"oldContent":"      _health = Health();"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"      _health = Health();"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"        [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"    try {"},{"type":"INSERT","lineNumber":94,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":95,"content":"        types: [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":96,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":97,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":100,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":102,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":104,"oldContent":"        [HealthDataType.STEPS],"},{"type":"DELETE","lineNumber":106,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":108,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":122,"oldContent":"        [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"    try {"},{"type":"INSERT","lineNumber":118,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":119,"content":"        types: [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":120,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":121,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":124,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":126,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":128,"oldContent":"        [HealthDataType.HEART_RATE],"},{"type":"DELETE","lineNumber":130,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":132,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":146,"oldContent":"        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"    try {"},{"type":"INSERT","lineNumber":142,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":143,"content":"        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":144,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":145,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":148,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":150,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":152,"oldContent":"        [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"DELETE","lineNumber":154,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":156,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":170,"oldContent":"        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"    try {"},{"type":"INSERT","lineNumber":166,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":167,"content":"        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":168,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":169,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":172,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":174,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":176,"oldContent":"        [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"DELETE","lineNumber":178,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":180,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":194,"oldContent":"        [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":188,"content":""},{"type":"INSERT","lineNumber":189,"content":"    try {"},{"type":"INSERT","lineNumber":190,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":191,"content":"        types: [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":192,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":193,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":196,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":198,"oldContent":"        endDate,"},{"type":"DELETE","lineNumber":200,"oldContent":"        [HealthDataType.WATER],"},{"type":"DELETE","lineNumber":202,"oldContent":"        startDate,"},{"type":"DELETE","lineNumber":204,"oldContent":"        endDate,"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":291,"content":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"DELETE","lineNumber":298,"oldContent":"          final hours = (point.value as NumericHealthValue).numericValue;"},{"type":"DELETE","lineNumber":302,"oldContent":"          final hours = (point.value as NumericHealthValue).numericValue;"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"INSERT","lineNumber":332,"content":"        value: value,"},{"type":"DELETE","lineNumber":338,"oldContent":"      final HealthValue healthValue = NumericHealthValue(numericValue: value);"},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"DELETE","lineNumber":343,"oldContent":"        value: healthValue,"},{"type":"DELETE","lineNumber":346,"oldContent":"      final HealthValue healthValue = NumericHealthValue(numericValue: value);"},{"type":"DELETE","lineNumber":348,"oldContent":""},{"type":"DELETE","lineNumber":351,"oldContent":"        value: healthValue,"}]},{"timestamp":1754457489385,"changes":[{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"    try {"},{"type":"DELETE","lineNumber":90,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":92,"oldContent":"        types: [HealthDataType.STEPS],"},{"type":"DELETE","lineNumber":94,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":96,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"    try {"},{"type":"INSERT","lineNumber":94,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":95,"content":"        types: [HealthDataType.STEPS],"},{"type":"INSERT","lineNumber":96,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":97,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"    try {"},{"type":"DELETE","lineNumber":114,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":116,"oldContent":"        types: [HealthDataType.HEART_RATE],"},{"type":"DELETE","lineNumber":118,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":120,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"    try {"},{"type":"INSERT","lineNumber":118,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":119,"content":"        types: [HealthDataType.HEART_RATE],"},{"type":"INSERT","lineNumber":120,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":121,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"    try {"},{"type":"DELETE","lineNumber":138,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":140,"oldContent":"        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"DELETE","lineNumber":142,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":144,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"    try {"},{"type":"INSERT","lineNumber":142,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":143,"content":"        types: [HealthDataType.SLEEP_IN_BED, HealthDataType.SLEEP_ASLEEP],"},{"type":"INSERT","lineNumber":144,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":145,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":158,"oldContent":""},{"type":"DELETE","lineNumber":160,"oldContent":"    try {"},{"type":"DELETE","lineNumber":162,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":164,"oldContent":"        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"DELETE","lineNumber":166,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":168,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"    try {"},{"type":"INSERT","lineNumber":166,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":167,"content":"        types: [HealthDataType.EXERCISE_TIME, HealthDataType.WORKOUT],"},{"type":"INSERT","lineNumber":168,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":169,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":"    try {"},{"type":"DELETE","lineNumber":186,"oldContent":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"DELETE","lineNumber":188,"oldContent":"        types: [HealthDataType.WATER],"},{"type":"DELETE","lineNumber":190,"oldContent":"        startTime: startDate,"},{"type":"DELETE","lineNumber":192,"oldContent":"        endTime: endDate,"},{"type":"INSERT","lineNumber":188,"content":""},{"type":"INSERT","lineNumber":189,"content":"    try {"},{"type":"INSERT","lineNumber":190,"content":"      final List<HealthDataPoint> healthData = await Health().getHealthDataFromTypes("},{"type":"INSERT","lineNumber":191,"content":"        types: [HealthDataType.WATER],"},{"type":"INSERT","lineNumber":192,"content":"        startTime: startDate,"},{"type":"INSERT","lineNumber":193,"content":"        endTime: endDate,"},{"type":"DELETE","lineNumber":282,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":291,"content":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"DELETE","lineNumber":322,"oldContent":"    }"},{"type":"DELETE","lineNumber":327,"oldContent":"        value: value,"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"INSERT","lineNumber":332,"content":"        value: value,"}]},{"timestamp":1754459030294,"changes":[{"type":"INSERT","lineNumber":89,"content":"    if (!_isInitialized) {"},{"type":"INSERT","lineNumber":90,"content":"      await initialize();"},{"type":"INSERT","lineNumber":91,"content":"    }"},{"type":"DELETE","lineNumber":91,"oldContent":"    if (!_isInitialized) {"},{"type":"DELETE","lineNumber":94,"oldContent":"      await initialize();"},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"INSERT","lineNumber":113,"content":"    if (!_isInitialized) {"},{"type":"INSERT","lineNumber":114,"content":"      await initialize();"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"DELETE","lineNumber":115,"oldContent":"    if (!_isInitialized) {"},{"type":"DELETE","lineNumber":118,"oldContent":"      await initialize();"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"INSERT","lineNumber":137,"content":"    if (!_isInitialized) {"},{"type":"INSERT","lineNumber":138,"content":"      await initialize();"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"DELETE","lineNumber":139,"oldContent":"    if (!_isInitialized) {"},{"type":"DELETE","lineNumber":142,"oldContent":"      await initialize();"},{"type":"DELETE","lineNumber":145,"oldContent":"    }"},{"type":"INSERT","lineNumber":161,"content":"    if (!_isInitialized) {"},{"type":"INSERT","lineNumber":162,"content":"      await initialize();"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"DELETE","lineNumber":163,"oldContent":"    if (!_isInitialized) {"},{"type":"DELETE","lineNumber":166,"oldContent":"      await initialize();"},{"type":"DELETE","lineNumber":169,"oldContent":"    }"},{"type":"INSERT","lineNumber":185,"content":"    if (!_isInitialized) {"},{"type":"INSERT","lineNumber":186,"content":"      await initialize();"},{"type":"INSERT","lineNumber":187,"content":"    }"},{"type":"DELETE","lineNumber":187,"oldContent":"    if (!_isInitialized) {"},{"type":"DELETE","lineNumber":190,"oldContent":"      await initialize();"},{"type":"DELETE","lineNumber":193,"oldContent":"    }"},{"type":"DELETE","lineNumber":286,"oldContent":""},{"type":"INSERT","lineNumber":288,"content":""},{"type":"MODIFY","lineNumber":291,"content":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();","oldContent":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"DELETE","lineNumber":326,"oldContent":"    }"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"MODIFY","lineNumber":332,"content":"        value: value,","oldContent":"        value: value,"}]},{"timestamp":1754459270849,"changes":[{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":"    try {"},{"type":"INSERT","lineNumber":93,"content":"    try {"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"MODIFY","lineNumber":116,"content":"","oldContent":"    try {"},{"type":"INSERT","lineNumber":117,"content":"    try {"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"MODIFY","lineNumber":140,"content":"","oldContent":"    try {"},{"type":"INSERT","lineNumber":141,"content":"    try {"},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"MODIFY","lineNumber":164,"content":"","oldContent":"    try {"},{"type":"INSERT","lineNumber":165,"content":"    try {"},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"MODIFY","lineNumber":188,"content":"","oldContent":"    try {"},{"type":"INSERT","lineNumber":189,"content":"    try {"},{"type":"MODIFY","lineNumber":288,"content":"","oldContent":""},{"type":"INSERT","lineNumber":290,"content":"        if (point.type == HealthDataType.SLEEP_ASLEEP && point.value is NumericHealthValue) {"},{"type":"DELETE","lineNumber":291,"oldContent":"          final hours = (point.value as NumericHealthValue).numericValue.toDouble();"},{"type":"MODIFY","lineNumber":328,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":331,"content":"      final bool success = await Health().writeHealthData("},{"type":"DELETE","lineNumber":332,"oldContent":"        value: value,"}]},{"timestamp":1754459318171,"changes":[{"type":"INSERT","lineNumber":91,"content":"    }"},{"type":"DELETE","lineNumber":93,"oldContent":"    }"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"DELETE","lineNumber":117,"oldContent":"    }"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"DELETE","lineNumber":141,"oldContent":"    }"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"DELETE","lineNumber":165,"oldContent":"    }"},{"type":"INSERT","lineNumber":187,"content":"    }"},{"type":"DELETE","lineNumber":189,"oldContent":"    }"},{"type":"INSERT","lineNumber":287,"content":"      final List<double> sleepDurations = [];"},{"type":"DELETE","lineNumber":288,"oldContent":""},{"type":"INSERT","lineNumber":327,"content":"      await initialize();"},{"type":"DELETE","lineNumber":328,"oldContent":"    }"}]}]},"C:/HabitV8/lib/services/smart_recommendations_service.dart":{"filePath":"C:/HabitV8/lib/services/smart_recommendations_service.dart","baseContent":"import 'logging_service.dart';\n\nclass SmartRecommendationsService {\n  /// Generate smart habit recommendations based on user data\n  static Future<List<HabitRecommendation>> generateRecommendations({\n    required List<Map<String, dynamic>> existingHabits,\n    required Map<String, dynamic> userPreferences,\n    Map<String, dynamic>? healthData,\n  }) async {\n    final List<HabitRecommendation> recommendations = [];\n\n    try {\n      // Analyze existing habits\n      final habitAnalysis = _analyzeExistingHabits(existingHabits);\n\n      // Get health-based recommendations\n      if (healthData != null) {\n        recommendations.addAll(_getHealthBasedRecommendations(healthData, habitAnalysis));\n      }\n\n      // Get time-based recommendations\n      recommendations.addAll(_getTimeBasedRecommendations(habitAnalysis, userPreferences));\n\n      // Get category-based recommendations\n      recommendations.addAll(_getCategoryBasedRecommendations(habitAnalysis));\n\n      // Get difficulty progression recommendations\n      recommendations.addAll(_getDifficultyProgressionRecommendations(habitAnalysis));\n\n      // Sort by priority and remove duplicates\n      recommendations.sort((a, b) => b.priority.compareTo(a.priority));\n\n      // Limit to top 10 recommendations\n      final uniqueRecommendations = <String, HabitRecommendation>{};\n      for (final rec in recommendations) {\n        if (!uniqueRecommendations.containsKey(rec.title) && uniqueRecommendations.length < 10) {\n          uniqueRecommendations[rec.title] = rec;\n        }\n      }\n\n      AppLogger.info('Generated ${uniqueRecommendations.length} smart recommendations');\n      return uniqueRecommendations.values.toList();\n\n    } catch (e) {\n      AppLogger.error('Failed to generate smart recommendations', e);\n      return [];\n    }\n  }\n\n  /// Analyze user's existing habits to find patterns\n  static Map<String, dynamic> _analyzeExistingHabits(List<Map<String, dynamic>> habits) {\n    final analysis = <String, dynamic>{\n      'categories': <String, int>{},\n      'timeSlots': <String, int>{},\n      'difficulty': <String, int>{},\n      'totalHabits': habits.length,\n      'averageStreaks': 0,\n      'completionRates': <double>[],\n    };\n\n    int totalStreaks = 0;\n\n    for (final habit in habits) {\n      // Category analysis\n      final category = habit['category']?.toString() ?? 'Other';\n      analysis['categories'][category] = (analysis['categories'][category] ?? 0) + 1;\n\n      // Time slot analysis\n      final reminderTime = habit['reminderTime']?.toString() ?? '';\n      if (reminderTime.isNotEmpty) {\n        final hour = int.tryParse(reminderTime.split(':')[0]) ?? 12;\n        String timeSlot;\n        if (hour < 6) {\n          timeSlot = 'Late Night';\n        } else if (hour < 12) {\n          timeSlot = 'Morning';\n        } else if (hour < 18) {\n          timeSlot = 'Afternoon';\n        } else {\n          timeSlot = 'Evening';\n        }\n\n        analysis['timeSlots'][timeSlot] = (analysis['timeSlots'][timeSlot] ?? 0) + 1;\n      }\n\n      // Difficulty analysis\n      final difficulty = habit['difficulty']?.toString() ?? 'Medium';\n      analysis['difficulty'][difficulty] = (analysis['difficulty'][difficulty] ?? 0) + 1;\n\n      // Streak analysis\n      final streak = habit['currentStreak'] ?? 0;\n      totalStreaks += streak as int;\n\n      // Completion rate analysis\n      final completionRate = habit['completionRate'] ?? 0.0;\n      (analysis['completionRates'] as List<double>).add(completionRate as double);\n    }\n\n    if (habits.isNotEmpty) {\n      analysis['averageStreaks'] = totalStreaks / habits.length;\n    }\n\n    return analysis;\n  }\n\n  /// Get health-based recommendations\n  static List<HabitRecommendation> _getHealthBasedRecommendations(\n    Map<String, dynamic> healthData,\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n\n    // Steps-based recommendations\n    final steps = healthData['steps'] ?? 0;\n    if (steps < 8000) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Walk',\n        description: 'Take a 30-minute walk to reach 10,000 steps',\n        category: 'Fitness',\n        difficulty: 'Easy',\n        reason: 'Your daily steps ($steps) are below the recommended 10,000',\n        priority: 9,\n        estimatedDuration: 30,\n        suggestedTime: '07:00',\n      ));\n    }\n\n    // Sleep-based recommendations\n    final sleepHours = healthData['averageSleepHours'] ?? 8.0;\n    if (sleepHours < 7.0) {\n      recommendations.add(HabitRecommendation(\n        title: 'Earlier Bedtime',\n        description: 'Go to bed 30 minutes earlier for better sleep',\n        category: 'Health',\n        difficulty: 'Medium',\n        reason: 'Your average sleep (${sleepHours.toStringAsFixed(1)} hours) is below optimal',\n        priority: 8,\n        estimatedDuration: 10,\n        suggestedTime: '22:00',\n      ));\n    }\n\n    // Exercise-based recommendations\n    final exerciseMinutes = healthData['exerciseMinutes'] ?? 0;\n    if (exerciseMinutes < 30) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Exercise',\n        description: 'Add 20 minutes of physical activity',\n        category: 'Fitness',\n        difficulty: 'Medium',\n        reason: 'You need more daily exercise (current: $exerciseMinutes min)',\n        priority: 7,\n        estimatedDuration: 20,\n        suggestedTime: '18:00',\n      ));\n    }\n\n    return recommendations;\n  }\n\n  /// Get time-based recommendations\n  static List<HabitRecommendation> _getTimeBasedRecommendations(\n    Map<String, dynamic> habitAnalysis,\n    Map<String, dynamic> userPreferences,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final timeSlots = habitAnalysis['timeSlots'] as Map<String, int>;\n\n    // Find underutilized time slots\n    final totalHabits = habitAnalysis['totalHabits'] as int;\n    if (totalHabits > 0) {\n      // Morning recommendations if morning is underutilized\n      final morningHabits = timeSlots['Morning'] ?? 0;\n      if (morningHabits < totalHabits * 0.3) {\n        recommendations.add(HabitRecommendation(\n          title: 'Morning Meditation',\n          description: 'Start your day with 10 minutes of mindfulness',\n          category: 'Mental Health',\n          difficulty: 'Easy',\n          reason: 'Your morning routine could benefit from a mindful start',\n          priority: 6,\n          estimatedDuration: 10,\n          suggestedTime: '06:30',\n        ));\n      }\n\n      // Evening recommendations if evening is underutilized\n      final eveningHabits = timeSlots['Evening'] ?? 0;\n      if (eveningHabits < totalHabits * 0.2) {\n        recommendations.add(HabitRecommendation(\n          title: 'Evening Reflection',\n          description: 'Reflect on your day and plan tomorrow',\n          category: 'Personal Development',\n          difficulty: 'Easy',\n          reason: 'Evening reflection can improve planning and gratitude',\n          priority: 5,\n          estimatedDuration: 15,\n          suggestedTime: '20:00',\n        ));\n      }\n    }\n\n    return recommendations;\n  }\n\n  /// Get category-based recommendations\n  static List<HabitRecommendation> _getCategoryBasedRecommendations(\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final categories = habitAnalysis['categories'] as Map<String, int>;\n\n    // Suggest missing important categories\n    if (!categories.containsKey('Health') || categories['Health']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Drink Water',\n        description: 'Drink 8 glasses of water daily',\n        category: 'Health',\n        difficulty: 'Easy',\n        reason: 'Hydration is essential for health and energy',\n        priority: 8,\n        estimatedDuration: 2,\n        suggestedTime: '08:00',\n      ));\n    }\n\n    if (!categories.containsKey('Learning') || categories['Learning']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Daily Reading',\n        description: 'Read for 20 minutes to expand knowledge',\n        category: 'Learning',\n        difficulty: 'Easy',\n        reason: 'Continuous learning improves cognitive function',\n        priority: 6,\n        estimatedDuration: 20,\n        suggestedTime: '19:00',\n      ));\n    }\n\n    if (!categories.containsKey('Social') || categories['Social']! < 1) {\n      recommendations.add(HabitRecommendation(\n        title: 'Connect with Friends',\n        description: 'Reach out to a friend or family member',\n        category: 'Social',\n        difficulty: 'Easy',\n        reason: 'Social connections are vital for mental health',\n        priority: 5,\n        estimatedDuration: 15,\n        suggestedTime: '17:00',\n      ));\n    }\n\n    return recommendations;\n  }\n\n  /// Get difficulty progression recommendations\n  static List<HabitRecommendation> _getDifficultyProgressionRecommendations(\n    Map<String, dynamic> habitAnalysis,\n  ) {\n    final recommendations = <HabitRecommendation>[];\n    final averageStreaks = habitAnalysis['averageStreaks'] as num;\n    final completionRates = habitAnalysis['completionRates'] as List<double>;\n\n    if (completionRates.isNotEmpty) {\n      final avgCompletionRate = completionRates.reduce((a, b) => a + b) / completionRates.length;\n\n      // If user is doing well, suggest more challenging habits\n      if (avgCompletionRate > 0.8 && averageStreaks > 14) {\n        recommendations.add(HabitRecommendation(\n          title: 'Challenge Workout',\n          description: 'Try a more intensive 45-minute workout',\n          category: 'Fitness',\n          difficulty: 'Hard',\n          reason: 'You\\'re ready for more challenging habits!',\n          priority: 7,\n          estimatedDuration: 45,\n          suggestedTime: '06:00',\n        ));\n      }\n\n      // If user is struggling, suggest easier habits\n      else if (avgCompletionRate < 0.5 || averageStreaks < 7) {\n        recommendations.add(HabitRecommendation(\n          title: 'One Push-up',\n          description: 'Start small with just one push-up daily',\n          category: 'Fitness',\n          difficulty: 'Very Easy',\n          reason: 'Starting small builds consistency',\n          priority: 9,\n          estimatedDuration: 1,\n          suggestedTime: '07:00',\n        ));\n      }\n    }\n\n    return recommendations;\n  }\n\n  /// Get habit suggestions based on current time and context\n  static List<HabitRecommendation> getContextualSuggestions({\n    required DateTime currentTime,\n    required List<Map<String, dynamic>> existingHabits,\n    Map<String, dynamic>? recentActivity,\n  }) {\n    final suggestions = <HabitRecommendation>[];\n    final hour = currentTime.hour;\n\n    // Morning suggestions (6-10 AM)\n    if (hour >= 6 && hour < 10) {\n      suggestions.add(HabitRecommendation(\n        title: 'Morning Stretch',\n        description: 'Wake up your body with gentle stretches',\n        category: 'Health',\n        difficulty: 'Easy',\n        reason: 'Perfect time to energize your body',\n        priority: 8,\n        estimatedDuration: 10,\n        suggestedTime: currentTime.add(const Duration(minutes: 5)).toString().substring(11, 16),\n      ));\n    }\n\n    // Lunch break suggestions (11 AM - 2 PM)\n    else if (hour >= 11 && hour < 14) {\n      suggestions.add(HabitRecommendation(\n        title: 'Midday Walk',\n        description: 'Take a refreshing walk during lunch break',\n        category: 'Fitness',\n        difficulty: 'Easy',\n        reason: 'Break up your day with movement',\n        priority: 7,\n        estimatedDuration: 15,\n        suggestedTime: currentTime.add(const Duration(minutes: 10)).toString().substring(11, 16),\n      ));\n    }\n\n    // Evening suggestions (6-9 PM)\n    else if (hour >= 18 && hour < 21) {\n      suggestions.add(HabitRecommendation(\n        title: 'Gratitude Journal',\n        description: 'Write down 3 things you\\'re grateful for',\n        category: 'Mental Health',\n        difficulty: 'Easy',\n        reason: 'End your day on a positive note',\n        priority: 6,\n        estimatedDuration: 5,\n        suggestedTime: currentTime.add(const Duration(minutes: 30)).toString().substring(11, 16),\n      ));\n    }\n\n    return suggestions;\n  }\n\n  /// Generate habit insights and optimization suggestions\n  static Future<Map<String, dynamic>> generateHabitInsights(\n    List<Map<String, dynamic>> habits,\n  ) async {\n    final insights = <String, dynamic>{\n      'totalHabits': habits.length,\n      'insights': <String>[],\n      'optimizations': <String>[],\n      'achievements': <String>[],\n    };\n\n    // Analyze habit patterns\n    final categories = <String, int>{};\n    double totalCompletionRate = 0;\n    int totalStreaks = 0;\n\n    for (final habit in habits) {\n      final category = habit['category']?.toString() ?? 'Other';\n      categories[category] = (categories[category] ?? 0) + 1;\n\n      final completionRate = habit['completionRate'] ?? 0.0;\n      totalCompletionRate += completionRate as double;\n\n      final streak = habit['currentStreak'] ?? 0;\n      totalStreaks += streak as int;\n    }\n\n    if (habits.isNotEmpty) {\n      final avgCompletionRate = totalCompletionRate / habits.length;\n      final avgStreak = totalStreaks / habits.length;\n\n      // Generate insights\n      (insights['insights'] as List<String>).add(\n        'Your average completion rate is ${(avgCompletionRate * 100).toStringAsFixed(1)}%'\n      );\n\n      (insights['insights'] as List<String>).add(\n        'Your average streak is ${avgStreak.toStringAsFixed(1)} days'\n      );\n\n      // Most popular category\n      if (categories.isNotEmpty) {\n        final topCategory = categories.entries.reduce((a, b) => a.value > b.value ? a : b);\n        (insights['insights'] as List<String>).add(\n          'Your most focused area is ${topCategory.key} with ${topCategory.value} habits'\n        );\n      }\n\n      // Generate optimizations\n      if (avgCompletionRate < 0.7) {\n        (insights['optimizations'] as List<String>).add(\n          'Consider reducing habit difficulty or frequency to improve consistency'\n        );\n      }\n\n      if (habits.length > 5) {\n        (insights['optimizations'] as List<String>).add(\n          'You might be overwhelming yourself. Consider focusing on fewer habits'\n        );\n      }\n\n      // Generate achievements\n      if (avgCompletionRate > 0.8) {\n        (insights['achievements'] as List<String>).add('High Achiever: 80%+ completion rate!');\n      }\n\n      if (avgStreak > 21) {\n        (insights['achievements'] as List<String>).add('Streak Master: 21+ day average streak!');\n      }\n    }\n\n    AppLogger.info('Generated habit insights for ${habits.length} habits');\n    return insights;\n  }\n}\n\nclass HabitRecommendation {\n  final String title;\n  final String description;\n  final String category;\n  final String difficulty;\n  final String reason;\n  final int priority;\n  final int estimatedDuration; // in minutes\n  final String suggestedTime;\n\n  HabitRecommendation({\n    required this.title,\n    required this.description,\n    required this.category,\n    required this.difficulty,\n    required this.reason,\n    required this.priority,\n    required this.estimatedDuration,\n    required this.suggestedTime,\n  });\n\n  Map<String, dynamic> toMap() {\n    return {\n      'title': title,\n      'description': description,\n      'category': category,\n      'difficulty': difficulty,\n      'reason': reason,\n      'priority': priority,\n      'estimatedDuration': estimatedDuration,\n      'suggestedTime': suggestedTime,\n    };\n  }\n}\n","baseTimestamp":1754456245479,"deltas":[{"timestamp":1754456845849,"changes":[{"type":"INSERT","lineNumber":365,"content":"    final timeSlots = <String, int>{};"},{"type":"INSERT","lineNumber":366,"content":"    final timeSlots = <String, int>{};"}]},{"timestamp":1754456851608,"changes":[{"type":"DELETE","lineNumber":365,"oldContent":"    final timeSlots = <String, int>{};"},{"type":"DELETE","lineNumber":367,"oldContent":"    final timeSlots = <String, int>{};"}]}]},"C:/HabitV8/lib/services/trend_analysis_service.dart":{"filePath":"C:/HabitV8/lib/services/trend_analysis_service.dart","baseContent":"import 'dart:math';\nimport 'logging_service.dart';\n\nclass TrendAnalysisService {\n  static const int _minimumDaysForTrend = 7; // Require a full week of data\n\n  /// Analyze habit trends only if sufficient data exists\n  static Future<Map<String, dynamic>> analyzeHabitTrends({\n    required List<Map<String, dynamic>> habits,\n    required List<Map<String, dynamic>> completions,\n    DateTime? startDate,\n    DateTime? endDate,\n  }) async {\n    final analysisEndDate = endDate ?? DateTime.now();\n    final analysisStartDate = startDate ?? analysisEndDate.subtract(const Duration(days: 30));\n\n    // Check if we have at least a week of data\n    final daysDifference = analysisEndDate.difference(analysisStartDate).inDays;\n\n    if (daysDifference < _minimumDaysForTrend) {\n      return {\n        'hasEnoughData': false,\n        'message': 'Trends will be available after $_minimumDaysForTrend days of habit tracking',\n        'daysUntilTrends': _minimumDaysForTrend - daysDifference,\n        'minimumDays': _minimumDaysForTrend,\n      };\n    }\n\n    final Map<String, dynamic> trends = {\n      'hasEnoughData': true,\n      'analysisStartDate': analysisStartDate,\n      'analysisEndDate': analysisEndDate,\n      'totalDaysAnalyzed': daysDifference,\n      'habitTrends': <String, Map<String, dynamic>>{},\n      'overallTrends': <String, dynamic>{},\n      'weeklyPatterns': <String, dynamic>{},\n      'monthlyPatterns': <String, dynamic>{},\n      'insights': <String>[],\n      'recommendations': <String>[],\n    };\n\n    try {\n      // Analyze individual habit trends\n      for (final habit in habits) {\n        final habitId = habit['id']?.toString();\n        if (habitId == null) continue;\n\n        final habitCompletions = completions\n            .where((c) => c['habitId'] == habitId)\n            .where((c) => _isDateInRange(c['completedAt'], analysisStartDate, analysisEndDate))\n            .toList();\n\n        if (habitCompletions.length >= _minimumDaysForTrend) {\n          trends['habitTrends'][habitId] = _analyzeIndividualHabitTrend(\n            habit, habitCompletions, analysisStartDate, analysisEndDate);\n        }\n      }\n\n      // Analyze overall trends\n      trends['overallTrends'] = _analyzeOverallTrends(habits, completions, analysisStartDate, analysisEndDate);\n\n      // Analyze weekly patterns\n      trends['weeklyPatterns'] = _analyzeWeeklyPatterns(completions, analysisStartDate, analysisEndDate);\n\n      // Analyze monthly patterns (if we have enough data)\n      if (daysDifference >= 30) {\n        trends['monthlyPatterns'] = _analyzeMonthlyPatterns(completions, analysisStartDate, analysisEndDate);\n      }\n\n      // Generate insights and recommendations\n      final insights = _generateInsights(trends);\n      trends['insights'] = insights['insights'];\n      trends['recommendations'] = insights['recommendations'];\n\n      AppLogger.info('Trend analysis completed for ${habits.length} habits over $daysDifference days');\n\n    } catch (e) {\n      AppLogger.error('Error during trend analysis', e);\n      trends['error'] = 'Failed to analyze trends: ${e.toString()}';\n    }\n\n    return trends;\n  }\n\n  /// Check if user has enough data for trend analysis\n  static bool hasEnoughDataForTrends(List<Map<String, dynamic>> completions) {\n    if (completions.isEmpty) return false;\n\n    final sortedCompletions = completions\n        .where((c) => c['completedAt'] != null)\n        .map((c) => c['completedAt'] as DateTime)\n        .toList()\n      ..sort();\n\n    if (sortedCompletions.isEmpty) return false;\n\n    final daysDifference = sortedCompletions.last.difference(sortedCompletions.first).inDays;\n    return daysDifference >= _minimumDaysForTrend;\n  }\n\n  /// Get the minimum date when trends will be available\n  static DateTime? getMinimumDateForTrends(List<Map<String, dynamic>> completions) {\n    if (completions.isEmpty) return null;\n\n    final sortedCompletions = completions\n        .where((c) => c['completedAt'] != null)\n        .map((c) => c['completedAt'] as DateTime)\n        .toList()\n      ..sort();\n\n    if (sortedCompletions.isEmpty) return null;\n\n    return sortedCompletions.first.add(Duration(days: _minimumDaysForTrend));\n  }\n\n  /// Analyze individual habit trend\n  static Map<String, dynamic> _analyzeIndividualHabitTrend(\n    Map<String, dynamic> habit,\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final habitName = habit['name']?.toString() ?? 'Unknown Habit';\n    final dailyCompletions = _groupCompletionsByDay(completions);\n\n    // Calculate daily completion rates\n    final completionRates = <double>[];\n    final currentDate = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n\n    DateTime date = currentDate;\n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final completionCount = dailyCompletions[dateKey] ?? 0;\n      completionRates.add(completionCount > 0 ? 1.0 : 0.0);\n      date = date.add(const Duration(days: 1));\n    }\n\n    if (completionRates.length < 2) {\n      return {\n        'habitName': habitName,\n        'trend': 'insufficient_data',\n        'direction': 'neutral',\n        'strength': 0.0,\n        'message': 'Not enough data for trend analysis',\n      };\n    }\n\n    // Calculate trend using linear regression\n    final trendData = _calculateLinearTrend(completionRates);\n    final weeklyAverage = _calculateWeeklyAverages(completionRates);\n\n    return {\n      'habitName': habitName,\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'strength': trendData['strength'],\n      'slope': trendData['slope'],\n      'currentStreak': habit['currentStreak'] ?? 0,\n      'weeklyAverages': weeklyAverage,\n      'totalCompletions': completions.length,\n      'completionRate': completionRates.where((r) => r > 0).length / completionRates.length,\n      'message': _generateTrendMessage(trendData, habitName),\n    };\n  }\n\n  /// Analyze overall trends across all habits\n  static Map<String, dynamic> _analyzeOverallTrends(\n    List<Map<String, dynamic>> habits,\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final dailyCompletions = _groupCompletionsByDay(completions);\n    final dailyTotals = <double>[];\n\n    DateTime date = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n\n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final totalCompletions = dailyCompletions[dateKey] ?? 0;\n      dailyTotals.add(totalCompletions.toDouble());\n      date = date.add(const Duration(days: 1));\n    }\n\n    final trendData = _calculateLinearTrend(dailyTotals);\n    final weeklyAverages = _calculateWeeklyAverages(dailyTotals);\n\n    return {\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'strength': trendData['strength'],\n      'slope': trendData['slope'],\n      'weeklyAverages': weeklyAverages,\n      'averageDailyCompletions': dailyTotals.isNotEmpty\n          ? dailyTotals.reduce((a, b) => a + b) / dailyTotals.length\n          : 0.0,\n      'peakDay': _findPeakDay(dailyCompletions),\n      'message': _generateOverallTrendMessage(trendData),\n    };\n  }\n\n  /// Analyze weekly patterns\n  static Map<String, dynamic> _analyzeWeeklyPatterns(\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final weekdayCompletions = <int, List<int>>{\n      1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [] // Monday to Sunday\n    };\n\n    final dailyCompletions = _groupCompletionsByDay(completions);\n\n    DateTime date = DateTime(startDate.year, startDate.month, startDate.day);\n    final analysisEndDate = DateTime(endDate.year, endDate.month, endDate.day);\n\n    while (date.isBefore(analysisEndDate) || date.isAtSameMomentAs(analysisEndDate)) {\n      final dateKey = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';\n      final completionCount = dailyCompletions[dateKey] ?? 0;\n      weekdayCompletions[date.weekday]!.add(completionCount);\n      date = date.add(const Duration(days: 1));\n    }\n\n    final weekdayAverages = <String, double>{};\n    final weekdayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    for (int i = 1; i <= 7; i++) {\n      final completions = weekdayCompletions[i]!;\n      if (completions.isNotEmpty) {\n        weekdayAverages[weekdayNames[i - 1]] =\n            completions.reduce((a, b) => a + b) / completions.length;\n      } else {\n        weekdayAverages[weekdayNames[i - 1]] = 0.0;\n      }\n    }\n\n    final bestDay = weekdayAverages.entries\n        .reduce((a, b) => a.value > b.value ? a : b);\n    final worstDay = weekdayAverages.entries\n        .reduce((a, b) => a.value < b.value ? a : b);\n\n    return {\n      'weekdayAverages': weekdayAverages,\n      'bestDay': bestDay.key,\n      'bestDayAverage': bestDay.value,\n      'worstDay': worstDay.key,\n      'worstDayAverage': worstDay.value,\n      'weekendVsWeekday': _calculateWeekendVsWeekdayRatio(weekdayAverages),\n    };\n  }\n\n  /// Analyze monthly patterns\n  static Map<String, dynamic> _analyzeMonthlyPatterns(\n    List<Map<String, dynamic>> completions,\n    DateTime startDate,\n    DateTime endDate,\n  ) {\n    final monthlyData = <String, int>{};\n\n    for (final completion in completions) {\n      final completedAt = completion['completedAt'];\n      if (completedAt is DateTime &&\n          _isDateInRange(completedAt, startDate, endDate)) {\n        final monthKey = '${completedAt.year}-${completedAt.month.toString().padLeft(2, '0')}';\n        monthlyData[monthKey] = (monthlyData[monthKey] ?? 0) + 1;\n      }\n    }\n\n    if (monthlyData.length < 2) {\n      return {\n        'hasEnoughData': false,\n        'message': 'Need at least 2 months of data for monthly analysis',\n      };\n    }\n\n    final monthlyTotals = monthlyData.values.toList().map((v) => v.toDouble()).toList();\n    final trendData = _calculateLinearTrend(monthlyTotals);\n\n    return {\n      'hasEnoughData': true,\n      'monthlyTotals': monthlyData,\n      'trend': trendData['trend'],\n      'direction': trendData['direction'],\n      'averageMonthlyCompletions': monthlyTotals.reduce((a, b) => a + b) / monthlyTotals.length,\n      'bestMonth': monthlyData.entries.reduce((a, b) => a.value > b.value ? a : b),\n      'worstMonth': monthlyData.entries.reduce((a, b) => a.value < b.value ? a : b),\n    };\n  }\n\n  // Helper methods\n\n  static bool _isDateInRange(dynamic date, DateTime startDate, DateTime endDate) {\n    if (date is! DateTime) return false;\n    return date.isAfter(startDate.subtract(const Duration(days: 1))) &&\n           date.isBefore(endDate.add(const Duration(days: 1)));\n  }\n\n  static Map<String, int> _groupCompletionsByDay(List<Map<String, dynamic>> completions) {\n    final dailyCompletions = <String, int>{};\n\n    for (final completion in completions) {\n      final completedAt = completion['completedAt'];\n      if (completedAt is DateTime) {\n        final dateKey = '${completedAt.year}-${completedAt.month.toString().padLeft(2, '0')}-${completedAt.day.toString().padLeft(2, '0')}';\n        dailyCompletions[dateKey] = (dailyCompletions[dateKey] ?? 0) + 1;\n      }\n    }\n\n    return dailyCompletions;\n  }\n\n  static Map<String, dynamic> _calculateLinearTrend(List<double> values) {\n    if (values.length < 2) {\n      return {\n        'trend': 'insufficient_data',\n        'direction': 'neutral',\n        'strength': 0.0,\n        'slope': 0.0,\n      };\n    }\n\n    final n = values.length;\n    final x = List.generate(n, (i) => i.toDouble());\n\n    final xMean = x.reduce((a, b) => a + b) / n;\n    final yMean = values.reduce((a, b) => a + b) / n;\n\n    double numerator = 0.0;\n    double denominator = 0.0;\n\n    for (int i = 0; i < n; i++) {\n      numerator += (x[i] - xMean) * (values[i] - yMean);\n      denominator += pow(x[i] - xMean, 2);\n    }\n\n    final slope = denominator != 0 ? numerator / denominator : 0.0;\n    final strength = slope.abs();\n\n    String trend;\n    String direction;\n\n    if (strength < 0.01) {\n      trend = 'stable';\n      direction = 'neutral';\n    } else if (slope > 0) {\n      trend = strength > 0.05 ? 'strong_improving' : 'improving';\n      direction = 'upward';\n    } else {\n      trend = strength > 0.05 ? 'strong_declining' : 'declining';\n      direction = 'downward';\n    }\n\n    return {\n      'trend': trend,\n      'direction': direction,\n      'strength': strength,\n      'slope': slope,\n    };\n  }\n\n  static List<double> _calculateWeeklyAverages(List<double> dailyValues) {\n    final weeklyAverages = <double>[];\n\n    for (int i = 0; i < dailyValues.length; i += 7) {\n      final weekEnd = min(i + 7, dailyValues.length);\n      final weekData = dailyValues.sublist(i, weekEnd);\n      final average = weekData.reduce((a, b) => a + b) / weekData.length;\n      weeklyAverages.add(average);\n    }\n\n    return weeklyAverages;\n  }\n\n  static String _findPeakDay(Map<String, int> dailyCompletions) {\n    if (dailyCompletions.isEmpty) return 'No data';\n\n    final peak = dailyCompletions.entries.reduce((a, b) => a.value > b.value ? a : b);\n    return peak.key;\n  }\n\n  static double _calculateWeekendVsWeekdayRatio(Map<String, double> weekdayAverages) {\n    final weekdayTotal = weekdayAverages['Monday']! + weekdayAverages['Tuesday']! +\n                        weekdayAverages['Wednesday']! + weekdayAverages['Thursday']! +\n                        weekdayAverages['Friday']!;\n    final weekendTotal = weekdayAverages['Saturday']! + weekdayAverages['Sunday']!;\n\n    final weekdayAvg = weekdayTotal / 5;\n    final weekendAvg = weekendTotal / 2;\n\n    return weekdayAvg != 0 ? weekendAvg / weekdayAvg : 0.0;\n  }\n\n  static String _generateTrendMessage(Map<String, dynamic> trendData, String habitName) {\n    final trend = trendData['trend'];\n\n    switch (trend) {\n      case 'strong_improving':\n        return '$habitName is showing strong improvement! Keep up the excellent work.';\n      case 'improving':\n        return '$habitName is gradually improving. You\\'re on the right track!';\n      case 'stable':\n        return '$habitName has been consistent. Consider strategies to boost performance.';\n      case 'declining':\n        return '$habitName is showing a slight decline. Time to refocus your efforts.';\n      case 'strong_declining':\n        return '$habitName needs attention. Consider reviewing your approach or obstacles.';\n      default:\n        return 'Not enough data to determine trend for $habitName.';\n    }\n  }\n\n  static String _generateOverallTrendMessage(Map<String, dynamic> trendData) {\n    final trend = trendData['trend'];\n\n    switch (trend) {\n      case 'strong_improving':\n        return 'Your overall habit performance is improving significantly!';\n      case 'improving':\n        return 'Your habit consistency is gradually improving.';\n      case 'stable':\n        return 'Your habits are consistently maintained.';\n      case 'declining':\n        return 'Your overall habit performance is declining slightly.';\n      case 'strong_declining':\n        return 'Your habit performance needs attention across multiple areas.';\n      default:\n        return 'Building baseline data for trend analysis.';\n    }\n  }\n\n  static Map<String, List<String>> _generateInsights(Map<String, dynamic> trends) {\n    final insights = <String>[];\n    final recommendations = <String>[];\n\n    final overallTrends = trends['overallTrends'] as Map<String, dynamic>;\n    final weeklyPatterns = trends['weeklyPatterns'] as Map<String, dynamic>;\n\n    // Overall trend insights\n    final overallTrend = overallTrends['trend'];\n    if (overallTrend == 'improving' || overallTrend == 'strong_improving') {\n      insights.add('Your habit consistency is improving over time!');\n    } else if (overallTrend == 'declining' || overallTrend == 'strong_declining') {\n      insights.add('Your habit performance has been declining recently.');\n      recommendations.add('Consider reviewing your habit schedule and removing obstacles.');\n    }\n\n    // Weekly pattern insights\n    final bestDay = weeklyPatterns['bestDay'];\n    final worstDay = weeklyPatterns['worstDay'];\n    final weekendRatio = weeklyPatterns['weekendVsWeekday'] as double;\n\n    insights.add('Your most productive day is $bestDay.');\n    insights.add('Your least productive day is $worstDay.');\n\n    if (weekendRatio < 0.7) {\n      insights.add('You\\'re less consistent on weekends.');\n      recommendations.add('Plan simpler habits for weekends to maintain consistency.');\n    } else if (weekendRatio > 1.3) {\n      insights.add('You\\'re more active on weekends!');\n      recommendations.add('Try to maintain weekend momentum during weekdays.');\n    }\n\n    return {\n      'insights': insights,\n      'recommendations': recommendations,\n    };\n  }\n}\n","baseTimestamp":1754456246367},"C:/HabitV8/error.md":{"filePath":"C:/HabitV8/error.md","baseContent":"warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.\n3 warnings\ne: Daemon compilation failed: null\njava.lang.Exception\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)\nat org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)\nat org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)\nat org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\nat org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)\nat org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)\nat org.gradle.internal.Factories$1.create(Factories.java:31)\nat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)\nat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\nat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\nat java.base/java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)\nat org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)\nat kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)\nat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)\nat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)\n... 3 more\nCaused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)\n... 22 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)\n... 23 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\n\ne: Daemon compilation failed: null\njava.lang.Exception\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)\nat org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)\nat org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)\nat org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\nat org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)\nat org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)\nat org.gradle.internal.Factories$1.create(Factories.java:31)\nat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)\nat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\nat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\nat java.base/java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)\nat org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)\nat kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)\nat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)\nat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)\n... 3 more\nCaused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)\n... 22 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)\n... 23 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\n\ne: Daemon compilation failed: null\njava.lang.Exception\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)\nat org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)\nat org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)\nat org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\nat org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)\nat org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)\nat org.gradle.internal.Factories$1.create(Factories.java:31)\nat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)\nat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\nat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\nat java.base/java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)\nat org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)\nat kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)\nat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)\nat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)\n... 3 more\nCaused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)\n... 22 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)\n... 23 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)\nat org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 25 more\nSuppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab\n... 25 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\n\ne: Daemon compilation failed: null\njava.lang.Exception\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)\nat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)\nat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)\nat org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)\nat org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)\nat org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)\nat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\nat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\nat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\nat org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)\nat org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)\nat org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)\nat org.gradle.internal.Factories$1.create(Factories.java:31)\nat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)\nat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)\nat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)\nat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\nat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\nat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\nat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\nat java.base/java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)\nat org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)\nat kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)\nat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)\nat org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)\nat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)\nat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)\nat java.base/java.security.AccessController.doPrivileged(Unknown Source)\nat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)\n... 3 more\nCaused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)\n... 22 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)\nat org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)\nat org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)\nat org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)\n... 24 more\nSuppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android.\nat kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)\nat kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)\nat org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)\nat org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)\nat org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)\nat org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)\nat org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)\nat org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)\nat org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)\nat org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)\n                  ","baseTimestamp":1754456422302,"deltas":[{"timestamp":1754456424792,"changes":[{"type":"DELETE","lineNumber":656,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":657,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":658,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":659,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":660,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":661,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":662,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":663,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":664,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":665,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":666,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":667,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":668,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":669,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":670,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":671,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":672,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":673,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":674,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":675,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":676,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":677,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":678,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":679,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":680,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":681,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":682,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":683,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":684,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":685,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":686,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":687,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":688,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":689,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":690,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":691,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":692,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":693,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":694,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":695,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":696,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":697,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":698,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\health-13.1.1\\android\\src\\main\\kotlin\\cachet\\plugins\\health\\HealthConstants.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":699,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":700,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":701,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":702,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":703,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":704,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"DELETE","lineNumber":705,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"DELETE","lineNumber":706,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":707,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":708,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":709,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":710,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":711,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":712,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":713,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":714,"oldContent":"                  "},{"type":"INSERT","lineNumber":656,"content":""}]},{"timestamp":1754456433071,"changes":[{"type":"DELETE","lineNumber":476,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":477,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":478,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":479,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":480,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":481,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":482,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":483,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":484,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":485,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":486,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":487,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":488,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":489,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":490,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":491,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":492,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":493,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":494,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":495,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":496,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":497,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":498,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":499,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":500,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":501,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":502,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":503,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":504,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":505,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":506,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":507,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":508,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"DELETE","lineNumber":509,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"DELETE","lineNumber":510,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":511,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":512,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":513,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":514,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":515,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":516,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":517,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":518,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":519,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":520,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":521,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":522,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":523,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":524,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":525,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":526,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":527,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":528,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":529,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":530,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":531,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"DELETE","lineNumber":532,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"DELETE","lineNumber":533,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":534,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":535,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":536,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":537,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":538,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":539,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":540,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":541,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":542,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":543,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":544,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":545,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":546,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":547,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":548,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":549,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":550,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":551,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":552,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":553,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":554,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":555,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":556,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":557,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":558,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":559,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":560,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":561,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":562,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":563,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":564,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":565,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":566,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":567,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":568,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":569,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":570,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":571,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":572,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":573,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":574,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":575,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":576,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":577,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":578,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":579,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":580,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":581,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":582,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":583,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":584,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":585,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":586,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":587,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":588,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":590,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":591,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":592,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":593,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":594,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":595,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":596,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":597,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":598,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":599,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":600,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":601,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":602,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":603,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":604,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":605,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":606,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":607,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":608,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":609,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":610,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":611,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":612,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":613,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":614,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":615,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":616,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":617,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":618,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":619,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":620,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":621,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":622,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":623,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":624,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":625,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":626,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":627,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":628,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":629,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":630,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":631,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":632,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":633,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":634,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":635,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":636,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":637,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":638,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":639,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":640,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":641,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":642,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":643,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":644,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":645,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":646,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":647,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":648,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":649,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":650,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":651,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":652,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":653,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":654,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":655,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":656,"oldContent":""}]},{"timestamp":1754456439659,"changes":[{"type":"DELETE","lineNumber":310,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":311,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":312,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"DELETE","lineNumber":313,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"DELETE","lineNumber":314,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":315,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":316,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":317,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":318,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":319,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":320,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":321,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":322,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":323,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":324,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":325,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":326,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":327,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":328,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":329,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":330,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":331,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":332,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":333,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":334,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":335,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"DELETE","lineNumber":336,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"DELETE","lineNumber":337,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":338,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":339,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":340,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":341,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":342,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":343,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":344,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":345,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":346,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":347,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":348,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":349,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":350,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":351,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":352,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":353,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":354,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":355,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":356,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":357,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":358,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":359,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":360,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":361,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":362,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":363,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":364,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":365,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":366,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":367,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":368,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":369,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":370,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":371,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":372,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":373,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":374,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":375,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":376,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":377,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":378,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":379,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":380,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":381,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":382,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":383,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":384,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":385,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":386,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":387,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":388,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":389,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":390,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":391,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":392,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":394,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":395,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":396,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":397,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":398,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":399,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":400,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":401,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":402,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":403,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":404,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":405,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":406,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":407,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":408,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":409,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":410,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":411,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":412,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":413,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":414,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":415,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":416,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":417,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":418,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":419,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":420,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":421,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":422,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":423,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":424,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":425,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":426,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":427,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":428,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":429,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":430,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":431,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":432,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":433,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":434,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":435,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":436,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":437,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":438,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":439,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":440,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":441,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":442,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":443,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":444,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":445,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":446,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":447,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":448,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":449,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":450,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":451,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":452,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":453,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":454,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":455,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":456,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":457,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":458,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":459,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":460,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":461,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":462,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":463,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.4.10\\android\\src\\main\\kotlin\\io\\flutter\\plugins\\sharedpreferences\\MessagesAsync.g.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":464,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":465,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":466,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":467,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":468,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":469,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":470,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":471,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"DELETE","lineNumber":472,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":473,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":474,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":475,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":476,"oldContent":""}]},{"timestamp":1754456455404,"changes":[{"type":"INSERT","lineNumber":0,"content":"warning: [options] source value 8 is obsolete and will be removed in a future release"},{"type":"INSERT","lineNumber":1,"content":"warning: [options] target value 8 is obsolete and will be removed in a future release"},{"type":"DELETE","lineNumber":1,"oldContent":"3 warnings"},{"type":"DELETE","lineNumber":71,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":72,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":73,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":74,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":75,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":76,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":77,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":78,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":79,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":72,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":73,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":74,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":75,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":76,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":77,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":78,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":79,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":80,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":81,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":82,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":83,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":84,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":85,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":88,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":89,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":90,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":91,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":92,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":93,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":94,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":95,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":96,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":97,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":98,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":99,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":100,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":94,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":95,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":96,"content":"... 43 more"},{"type":"INSERT","lineNumber":97,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"INSERT","lineNumber":98,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":99,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":100,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":101,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":102,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":103,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":104,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":105,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":106,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":107,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":108,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":109,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":110,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":110,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":111,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":112,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":113,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":114,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":115,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":116,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:151)"},{"type":"DELETE","lineNumber":117,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableCollectionExternalizer.save(LazyStorage.kt:142)"},{"type":"DELETE","lineNumber":118,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":119,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"MODIFY","lineNumber":120,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace","oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":121,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":122,"content":"... 44 more"},{"type":"INSERT","lineNumber":123,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":124,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":125,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":126,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":127,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":128,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":129,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":130,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":131,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":132,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":133,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":134,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":135,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":136,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":146,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":147,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":148,"content":"... 44 more"},{"type":"DELETE","lineNumber":135,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":136,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":137,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":138,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":139,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:51)"},{"type":"DELETE","lineNumber":140,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LegacyFileExternalizer.save(IdToFileMap.kt:48)"},{"type":"DELETE","lineNumber":141,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":142,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":143,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":154,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"INSERT","lineNumber":155,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":156,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":157,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":158,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":159,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":160,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":161,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":162,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":163,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":164,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":165,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":166,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":167,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":152,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":153,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":154,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":155,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":156,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":157,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":158,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":159,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":160,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":161,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":162,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":163,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":164,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":176,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"INSERT","lineNumber":177,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":178,"content":"... 44 more"},{"type":"INSERT","lineNumber":179,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"INSERT","lineNumber":180,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":181,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":182,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":183,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":184,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":185,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":186,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":187,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":188,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":189,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":190,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":191,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":192,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":201,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"INSERT","lineNumber":202,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":203,"content":"... 44 more"},{"type":"DELETE","lineNumber":175,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_info_plus-11.5.0\\android\\src\\main\\kotlin\\dev\\fluttercommunity\\plus\\device_info\\DeviceInfoPlusPlugin.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":176,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":177,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":178,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":179,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":180,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":181,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":182,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":183,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":184,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":185,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":186,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":187,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":206,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"INSERT","lineNumber":207,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":208,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":209,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":210,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":211,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":212,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":213,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":214,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":215,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":216,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":217,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":218,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":219,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":229,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"INSERT","lineNumber":230,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":231,"content":"... 44 more"},{"type":"INSERT","lineNumber":233,"content":"3 warnings"},{"type":"DELETE","lineNumber":267,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":268,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":269,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":270,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":271,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:33)"},{"type":"DELETE","lineNumber":272,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.save(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":273,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:443)"},{"type":"DELETE","lineNumber":274,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":275,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":303,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":304,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":305,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":306,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":307,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":308,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":309,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":310,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":311,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":312,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":313,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":314,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":315,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":316,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":284,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":285,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":286,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":287,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"DELETE","lineNumber":288,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:50)"},{"type":"DELETE","lineNumber":289,"oldContent":"at org.jetbrains.kotlin.incremental.storage.FileDescriptor.getHashCode(FileToPathConverter.kt:30)"},{"type":"DELETE","lineNumber":290,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.hashKey(LinkedCustomHashMap.java:109)"},{"type":"DELETE","lineNumber":291,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.LinkedCustomHashMap.remove(LinkedCustomHashMap.java:153)"},{"type":"DELETE","lineNumber":292,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.containers.SLRUMap.remove(SLRUMap.java:89)"},{"type":"DELETE","lineNumber":293,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.flushAppendCache(PersistentMapImpl.java:999)"},{"type":"DELETE","lineNumber":294,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.doPut(PersistentMapImpl.java:451)"},{"type":"DELETE","lineNumber":295,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.put(PersistentMapImpl.java:422)"},{"type":"DELETE","lineNumber":296,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.put(PersistentHashMap.java:105)"},{"type":"INSERT","lineNumber":325,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":326,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":327,"content":"... 43 more"},{"type":"INSERT","lineNumber":328,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"INSERT","lineNumber":329,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":330,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":331,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":332,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":333,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":334,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":335,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":336,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":337,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":338,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":339,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":340,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":341,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":306,"oldContent":"Suppressed: java.lang.IllegalArgumentException: this and base files have different roots: C:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\AvailabilitySerializer.kt and H:\\New\\HabitV8\\android."},{"type":"DELETE","lineNumber":307,"oldContent":"at kotlin.io.FilesKt__UtilsKt.toRelativeString(Utils.kt:117)"},{"type":"DELETE","lineNumber":308,"oldContent":"at kotlin.io.FilesKt__UtilsKt.relativeTo(Utils.kt:128)"},{"type":"DELETE","lineNumber":309,"oldContent":"at org.jetbrains.kotlin.incremental.storage.RelocatableFileToPathConverter.toPath(RelocatableFileToPathConverter.kt:24)"},{"type":"INSERT","lineNumber":351,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"INSERT","lineNumber":352,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":353,"content":"... 44 more"},{"type":"INSERT","lineNumber":354,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":355,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":356,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":357,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":358,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":359,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":360,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":361,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":362,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":363,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":364,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":365,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":366,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":367,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":368,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":369,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":370,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":371,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":372,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":373,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":374,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":375,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":376,"content":"... 24 more"},{"type":"INSERT","lineNumber":377,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":378,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":379,"content":"... 44 more"},{"type":"INSERT","lineNumber":380,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":381,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":382,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":383,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":384,"content":"... 23 more"},{"type":"INSERT","lineNumber":385,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"INSERT","lineNumber":386,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":387,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":388,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":389,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":390,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":391,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":392,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":393,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":394,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":395,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":396,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":397,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":398,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":399,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":400,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":401,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":402,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":403,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":404,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":405,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":406,"content":"... 25 more"},{"type":"INSERT","lineNumber":407,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"INSERT","lineNumber":408,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":409,"content":"... 44 more"},{"type":"INSERT","lineNumber":410,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"INSERT","lineNumber":411,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":412,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":413,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":414,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":415,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":416,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":417,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":418,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":419,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":420,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":421,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":422,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":423,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":424,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":425,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":426,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":427,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":428,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":429,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":430,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":431,"content":"... 25 more"},{"type":"INSERT","lineNumber":432,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"INSERT","lineNumber":433,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":434,"content":"... 44 more"},{"type":"INSERT","lineNumber":435,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":436,"content":"... 25 more"},{"type":"INSERT","lineNumber":437,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"INSERT","lineNumber":438,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":439,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":440,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":441,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":442,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":443,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":444,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":445,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":446,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":447,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":448,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":449,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":450,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":451,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":452,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":453,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":454,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":455,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":456,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":457,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":458,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":459,"content":"... 24 more"},{"type":"INSERT","lineNumber":460,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"INSERT","lineNumber":461,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":462,"content":"... 44 more"},{"type":"INSERT","lineNumber":464,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":465,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":466,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":467,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":468,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":469,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":470,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":471,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":472,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":473,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":474,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":475,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":476,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":477,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":478,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":479,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":480,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":481,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":482,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":483,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":484,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":485,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":486,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":487,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":488,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":489,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":490,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":491,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":492,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":493,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":494,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":495,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":496,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":497,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":498,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":499,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":500,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":501,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":502,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":503,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":504,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":505,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":506,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":507,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":508,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":509,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":510,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":511,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":512,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":513,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":514,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":515,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":516,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":517,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":518,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":519,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":520,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":521,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":522,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":523,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":524,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":525,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":526,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":527,"content":"... 3 more"},{"type":"INSERT","lineNumber":528,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":529,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":530,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":531,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":532,"content":"... 22 more"},{"type":"INSERT","lineNumber":533,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":534,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":535,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":536,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":537,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":538,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":539,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":540,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":541,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":542,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":543,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":544,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":545,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":546,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":547,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":548,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":549,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":550,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":551,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":552,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":553,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":554,"content":"... 24 more"},{"type":"INSERT","lineNumber":555,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":556,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":557,"content":"... 43 more"},{"type":"INSERT","lineNumber":558,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"INSERT","lineNumber":559,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":560,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":561,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":562,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":563,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":564,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":565,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":566,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":567,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":568,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":569,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":570,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":571,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":572,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":573,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":574,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":575,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":576,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":577,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":578,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":579,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":580,"content":"... 24 more"},{"type":"INSERT","lineNumber":581,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"INSERT","lineNumber":582,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":583,"content":"... 44 more"},{"type":"INSERT","lineNumber":584,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":585,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":586,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":587,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":588,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":589,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":590,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":591,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":592,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":593,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":594,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":595,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":596,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":597,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":598,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":599,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":600,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":601,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":602,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":603,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":604,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":605,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":606,"content":"... 24 more"},{"type":"INSERT","lineNumber":607,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":608,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":609,"content":"... 44 more"},{"type":"INSERT","lineNumber":610,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":611,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":612,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":613,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":614,"content":"... 23 more"},{"type":"INSERT","lineNumber":615,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"INSERT","lineNumber":616,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":617,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":618,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":619,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":620,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":621,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":622,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":623,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":624,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":625,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":626,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":627,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":628,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":629,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":630,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":631,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":632,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":633,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":634,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":635,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":636,"content":"... 25 more"},{"type":"INSERT","lineNumber":637,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"INSERT","lineNumber":638,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":639,"content":"... 44 more"},{"type":"INSERT","lineNumber":640,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"INSERT","lineNumber":641,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":642,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":643,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":644,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":645,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":646,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":647,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":648,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":649,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":650,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":651,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":652,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":653,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":654,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":655,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":656,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":657,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":658,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":659,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":660,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":661,"content":"... 25 more"},{"type":"INSERT","lineNumber":662,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"INSERT","lineNumber":663,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":664,"content":"... 44 more"},{"type":"INSERT","lineNumber":665,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":666,"content":"... 25 more"},{"type":"INSERT","lineNumber":667,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"INSERT","lineNumber":668,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":669,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":670,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":671,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":672,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":673,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":674,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":675,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":676,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":677,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":678,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":679,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":680,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":681,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":682,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":683,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":684,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":685,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":686,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":687,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":688,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":689,"content":"... 24 more"},{"type":"INSERT","lineNumber":690,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"INSERT","lineNumber":691,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":692,"content":"... 44 more"},{"type":"INSERT","lineNumber":693,"content":""},{"type":"INSERT","lineNumber":694,"content":"e: Daemon compilation failed: null"},{"type":"INSERT","lineNumber":695,"content":"java.lang.Exception"},{"type":"INSERT","lineNumber":696,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"INSERT","lineNumber":697,"content":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"INSERT","lineNumber":698,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"INSERT","lineNumber":699,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"INSERT","lineNumber":700,"content":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"INSERT","lineNumber":701,"content":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"INSERT","lineNumber":702,"content":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"INSERT","lineNumber":703,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"INSERT","lineNumber":704,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":705,"content":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"INSERT","lineNumber":706,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"INSERT","lineNumber":707,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"INSERT","lineNumber":708,"content":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":709,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"INSERT","lineNumber":710,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"INSERT","lineNumber":711,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"INSERT","lineNumber":712,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":713,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"INSERT","lineNumber":714,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"INSERT","lineNumber":715,"content":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"INSERT","lineNumber":716,"content":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"INSERT","lineNumber":717,"content":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"INSERT","lineNumber":718,"content":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"INSERT","lineNumber":719,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":720,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"INSERT","lineNumber":721,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"INSERT","lineNumber":722,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"INSERT","lineNumber":723,"content":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"INSERT","lineNumber":724,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"INSERT","lineNumber":725,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"INSERT","lineNumber":726,"content":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"INSERT","lineNumber":727,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"INSERT","lineNumber":728,"content":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"INSERT","lineNumber":729,"content":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"INSERT","lineNumber":730,"content":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"INSERT","lineNumber":731,"content":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"INSERT","lineNumber":732,"content":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"INSERT","lineNumber":733,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"INSERT","lineNumber":734,"content":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"INSERT","lineNumber":735,"content":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"INSERT","lineNumber":736,"content":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":737,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"INSERT","lineNumber":738,"content":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"INSERT","lineNumber":739,"content":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"INSERT","lineNumber":740,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"INSERT","lineNumber":741,"content":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"INSERT","lineNumber":742,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"INSERT","lineNumber":743,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"INSERT","lineNumber":744,"content":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"INSERT","lineNumber":745,"content":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":746,"content":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"INSERT","lineNumber":747,"content":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"INSERT","lineNumber":748,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":749,"content":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"INSERT","lineNumber":750,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":751,"content":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"INSERT","lineNumber":752,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"INSERT","lineNumber":753,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"INSERT","lineNumber":754,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"INSERT","lineNumber":755,"content":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"INSERT","lineNumber":756,"content":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"INSERT","lineNumber":757,"content":"... 3 more"},{"type":"INSERT","lineNumber":758,"content":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"INSERT","lineNumber":759,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":760,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":761,"content":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"INSERT","lineNumber":762,"content":"... 22 more"},{"type":"INSERT","lineNumber":763,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":764,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":765,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":766,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":767,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":768,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":769,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":770,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":771,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":772,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":773,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":774,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":775,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":776,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":777,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":778,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":779,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":780,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":781,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":782,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":783,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":784,"content":"... 24 more"},{"type":"INSERT","lineNumber":785,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":786,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":787,"content":"... 43 more"},{"type":"INSERT","lineNumber":788,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"INSERT","lineNumber":789,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":790,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":791,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":792,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":793,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":794,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":795,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":796,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":797,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":798,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":799,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":800,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":801,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":802,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":803,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":804,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":805,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":806,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":807,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":808,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":809,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":810,"content":"... 24 more"},{"type":"INSERT","lineNumber":811,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"INSERT","lineNumber":812,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":813,"content":"... 44 more"},{"type":"INSERT","lineNumber":814,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"INSERT","lineNumber":815,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":816,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":817,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":818,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":819,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":820,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":821,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":822,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":823,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":824,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":825,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":826,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":827,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":828,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":829,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":830,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":831,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":832,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":833,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":834,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":835,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":836,"content":"... 24 more"},{"type":"INSERT","lineNumber":837,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"INSERT","lineNumber":838,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":839,"content":"... 44 more"},{"type":"INSERT","lineNumber":840,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"INSERT","lineNumber":841,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"INSERT","lineNumber":842,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":843,"content":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"INSERT","lineNumber":844,"content":"... 23 more"},{"type":"INSERT","lineNumber":845,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"INSERT","lineNumber":846,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":847,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":848,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":849,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":850,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":851,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":852,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":853,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":854,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":855,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":856,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":857,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":858,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":859,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":860,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":861,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":862,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":863,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":864,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":865,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":866,"content":"... 25 more"},{"type":"INSERT","lineNumber":867,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"INSERT","lineNumber":868,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":869,"content":"... 44 more"},{"type":"INSERT","lineNumber":870,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"INSERT","lineNumber":871,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":872,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":873,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":874,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":875,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":876,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":877,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":878,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":879,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":880,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":881,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":882,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":883,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":884,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":885,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":886,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":887,"content":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"INSERT","lineNumber":888,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":889,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":890,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":891,"content":"... 25 more"},{"type":"INSERT","lineNumber":892,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"INSERT","lineNumber":893,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":894,"content":"... 44 more"},{"type":"INSERT","lineNumber":895,"content":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"INSERT","lineNumber":896,"content":"... 25 more"},{"type":"INSERT","lineNumber":897,"content":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"INSERT","lineNumber":898,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"INSERT","lineNumber":899,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"INSERT","lineNumber":900,"content":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"INSERT","lineNumber":901,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"INSERT","lineNumber":902,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"INSERT","lineNumber":903,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"INSERT","lineNumber":904,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":905,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":906,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"INSERT","lineNumber":907,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"INSERT","lineNumber":908,"content":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"INSERT","lineNumber":909,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"INSERT","lineNumber":910,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"INSERT","lineNumber":911,"content":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"INSERT","lineNumber":912,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"INSERT","lineNumber":913,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"INSERT","lineNumber":914,"content":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"INSERT","lineNumber":915,"content":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"INSERT","lineNumber":916,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":917,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"INSERT","lineNumber":918,"content":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":919,"content":"... 24 more"},{"type":"INSERT","lineNumber":920,"content":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"INSERT","lineNumber":921,"content":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"INSERT","lineNumber":922,"content":"... 44 more"},{"type":"INSERT","lineNumber":923,"content":""},{"type":"INSERT","lineNumber":924,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:349:13: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":925,"content":"exception:             GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":926,"content":"exception:             ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":927,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:404:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":928,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":929,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":930,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:409:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":931,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":932,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":933,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:637:143: warning: 'static field YEAR_IN_MILLIS: Long' is deprecated. Deprecated in Java."},{"type":"INSERT","lineNumber":934,"content":"exception:                                 val cursor = CalendarContract.Instances.query(contentResolver, EVENT_INSTANCE_DELETION, startDate - DateUtils.YEAR_IN_MILLIS, startDate - 1)"},{"type":"INSERT","lineNumber":935,"content":"exception:                           "}]},{"timestamp":1754456729933,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"warning: [options] source value 8 is obsolete and will be removed in a future release"},{"type":"DELETE","lineNumber":1,"oldContent":"warning: [options] To suppress warnings about obsolete options, use -Xlint:-options."},{"type":"DELETE","lineNumber":2,"oldContent":"warning: [options] target value 8 is obsolete and will be removed in a future release"},{"type":"DELETE","lineNumber":3,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":4,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":5,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":6,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":7,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":8,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":9,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":10,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":11,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":12,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":13,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":14,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":15,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":16,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":17,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":18,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":19,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":20,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":21,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":22,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":23,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":24,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":25,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":26,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":27,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":28,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":29,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":30,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":31,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":32,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":33,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":34,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":35,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":36,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":37,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":38,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":39,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":40,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":41,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":42,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":43,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":44,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":45,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":46,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":47,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":48,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":49,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":50,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":51,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":52,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":53,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":54,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":55,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":56,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":57,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":58,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":59,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":60,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":61,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":62,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":63,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":64,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":65,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":66,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":67,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":68,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":69,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":70,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":71,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":72,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":73,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":74,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":75,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":76,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":77,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":78,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":79,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":80,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":81,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":82,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":83,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":84,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":85,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":86,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":87,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":88,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":89,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":90,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":91,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":92,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":93,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":94,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":95,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":96,"oldContent":"... 43 more"},{"type":"DELETE","lineNumber":97,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"DELETE","lineNumber":98,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":99,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":100,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":101,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":102,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":103,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":104,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":105,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":106,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":107,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":108,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":109,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":110,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":111,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":112,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":113,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":114,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":115,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":116,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":117,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":118,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":119,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":120,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"DELETE","lineNumber":121,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":122,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":123,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":124,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":125,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":126,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":127,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":128,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":129,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":130,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":131,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":132,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":133,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":134,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":135,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":136,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":137,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":138,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":139,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":140,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":141,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":142,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":143,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":144,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":145,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":146,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":147,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":148,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":149,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":150,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":151,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":152,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":153,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":154,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":155,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":156,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":157,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":158,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":159,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":160,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":161,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":162,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"DELETE","lineNumber":163,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":164,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":165,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":166,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":167,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":168,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":169,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":170,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":171,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":172,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":173,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":174,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":175,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":176,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":177,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":178,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":179,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":180,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":181,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":182,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":183,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":184,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":185,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":186,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"DELETE","lineNumber":187,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":188,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":189,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"DELETE","lineNumber":190,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":191,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":192,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":193,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":194,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":195,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":196,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":197,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":198,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":199,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":200,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":201,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":202,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":203,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":204,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":205,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":206,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":207,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":208,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":209,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":210,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":211,"oldContent":"... 24 more"},{"type":"INSERT","lineNumber":0,"content":"# Build Issues - RESOLVED"},{"type":"DELETE","lineNumber":213,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":214,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":215,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":216,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"DELETE","lineNumber":217,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":218,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":219,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":220,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":221,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":222,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":223,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":224,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"DELETE","lineNumber":225,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":226,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":227,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":228,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":229,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":230,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":231,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":232,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":233,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":234,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":235,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":236,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":237,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":238,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":239,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":240,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":241,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":242,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":243,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":244,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":245,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":246,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":247,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":248,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":249,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":250,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":251,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":252,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":253,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":254,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":255,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":256,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":257,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":258,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":259,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":260,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":261,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_info_plus\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"DELETE","lineNumber":262,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":263,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":264,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":265,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":266,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":267,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":268,"oldContent":"3 warnings"},{"type":"DELETE","lineNumber":269,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":270,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":271,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":272,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":273,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":274,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":275,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":276,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":277,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":278,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":279,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":280,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":281,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":282,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":283,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":284,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":285,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":286,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":287,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":288,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":289,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":290,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":291,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":292,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":293,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":294,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":295,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":296,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":297,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":298,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":299,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":300,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":301,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":302,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":303,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":304,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":305,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":306,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":307,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":308,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":309,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":310,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":311,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":312,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":313,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":314,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":315,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":316,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":317,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":318,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":319,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":320,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":321,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":322,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":323,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":324,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":325,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":326,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":327,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"INSERT","lineNumber":2,"content":"## Issues Found and Fixed:"},{"type":"DELETE","lineNumber":329,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":330,"oldContent":"exception:                           "},{"type":"DELETE","lineNumber":331,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":332,"oldContent":"exception:                                 val cursor = CalendarContract.Instances.query(contentResolver, EVENT_INSTANCE_DELETION, startDate - DateUtils.YEAR_IN_MILLIS, startDate - 1)"},{"type":"DELETE","lineNumber":333,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":334,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:637:143: warning: 'static field YEAR_IN_MILLIS: Long' is deprecated. Deprecated in Java."},{"type":"DELETE","lineNumber":335,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":336,"oldContent":"exception:                       ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":337,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":338,"oldContent":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":339,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":340,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:409:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"DELETE","lineNumber":341,"oldContent":"exception:                       ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":342,"oldContent":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":343,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:404:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"DELETE","lineNumber":344,"oldContent":"exception:             ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":345,"oldContent":"exception:             GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":346,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:349:13: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":4,"content":"### 1. Kotlin Compilation Storage Registration Conflicts ✅ FIXED"},{"type":"INSERT","lineNumber":5,"content":"**Problem:** Multiple \"Storage for [...] is already registered\" errors during Kotlin compilation"},{"type":"INSERT","lineNumber":6,"content":"**Solution:** Ran `flutter clean` to clear corrupted build cache"},{"type":"INSERT","lineNumber":7,"content":"**Status:** Resolved - Build now completes successfully"},{"type":"DELETE","lineNumber":348,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":349,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":350,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":351,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":352,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"DELETE","lineNumber":353,"oldContent":"... 43 more"},{"type":"DELETE","lineNumber":354,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":355,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"DELETE","lineNumber":356,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":357,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":358,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":359,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":360,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":361,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":362,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":363,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":364,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":365,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":366,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":367,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":368,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":369,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":370,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":371,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":372,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":373,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":374,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":375,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":376,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":377,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":378,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":379,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":380,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":381,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":382,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":383,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":384,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":385,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":386,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":387,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":388,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":389,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":390,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"DELETE","lineNumber":391,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":392,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"DELETE","lineNumber":393,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":394,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":395,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":396,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":397,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":398,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":399,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"DELETE","lineNumber":400,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":401,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":402,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":403,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":404,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":405,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":406,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":407,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":408,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":409,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":410,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":411,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":412,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":413,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":414,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":415,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":416,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":417,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":418,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":419,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":420,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":421,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":422,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":423,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":424,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":425,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":426,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":427,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":428,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":429,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":430,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":431,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":432,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":433,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":434,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":435,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":436,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":437,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":438,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":439,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":440,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":441,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":442,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":443,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"DELETE","lineNumber":444,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":445,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":446,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":447,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":448,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":449,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"DELETE","lineNumber":450,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":451,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":452,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":453,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":454,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":455,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":456,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":457,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":458,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":459,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":460,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"DELETE","lineNumber":461,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":462,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":463,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":464,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":465,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":466,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":467,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":468,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":469,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":470,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":471,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":472,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":473,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":474,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":475,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":476,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":477,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":478,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":479,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":480,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":481,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":482,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":483,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":484,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":485,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":486,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":487,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":488,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":489,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":490,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":491,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":492,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":493,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"DELETE","lineNumber":494,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":495,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":496,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":497,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":498,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":499,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":500,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":501,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":502,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":503,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":504,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"DELETE","lineNumber":505,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":506,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":507,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":508,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":509,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":510,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"DELETE","lineNumber":511,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":512,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":513,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":514,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":515,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":516,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":517,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":518,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":519,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":520,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":521,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":522,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":523,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":524,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":525,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":526,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":527,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":528,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":529,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":530,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":531,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":532,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":533,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":534,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":535,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":536,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":537,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":538,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":539,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":540,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":541,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":542,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":543,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":544,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":545,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":546,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":547,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":548,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":549,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":550,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":551,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":552,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":553,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":554,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"DELETE","lineNumber":555,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":556,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":557,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":558,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":559,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":560,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":561,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"DELETE","lineNumber":562,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":563,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":564,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"DELETE","lineNumber":565,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":566,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":567,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":568,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":569,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":570,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":571,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":572,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":573,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":574,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":575,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":576,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":577,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":578,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":579,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":580,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":581,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":582,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":583,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":584,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":585,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":586,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":587,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":588,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":589,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":590,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":591,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":592,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":593,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":594,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":595,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":596,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":597,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":598,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":599,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":600,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":601,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":602,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":603,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":604,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":605,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":606,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":607,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"DELETE","lineNumber":608,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":609,"oldContent":"... 43 more"},{"type":"DELETE","lineNumber":610,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\device_calendar\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"DELETE","lineNumber":611,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":612,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":613,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":614,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":615,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":616,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":617,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":618,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":619,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":620,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":621,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":622,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":623,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":624,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":625,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":626,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":627,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":628,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":629,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":630,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":631,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":632,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":633,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":634,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":635,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":636,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":637,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":638,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":639,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":640,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":641,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":642,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":643,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":644,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":645,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":646,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":647,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":648,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":649,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":650,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":651,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":652,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":653,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":654,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":655,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":656,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":657,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":658,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":659,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":660,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":661,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":662,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":663,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":664,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":665,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":666,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":667,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":668,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":669,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":670,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":671,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":672,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":673,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":674,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":675,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":676,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":677,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":678,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":679,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":680,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":681,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":682,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":683,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":684,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":685,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":686,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":687,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":688,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":689,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":690,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":691,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":692,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":693,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":694,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":695,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":696,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":697,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":698,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":699,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":700,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":701,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":702,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":703,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":704,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":705,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":706,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCachesManager.close(IncrementalCachesManager.kt:55)"},{"type":"DELETE","lineNumber":707,"oldContent":"at kotlin.io.CloseableKt.closeFinally(Closeable.kt:56)"},{"type":"DELETE","lineNumber":708,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:236)"},{"type":"DELETE","lineNumber":709,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:293)"},{"type":"DELETE","lineNumber":710,"oldContent":"Caused by: java.lang.AssertionError: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\health\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":711,"oldContent":"at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)"},{"type":"DELETE","lineNumber":712,"oldContent":"at java.base/java.lang.Thread.run(Unknown Source)"},{"type":"DELETE","lineNumber":713,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)"},{"type":"DELETE","lineNumber":714,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)"},{"type":"DELETE","lineNumber":715,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)"},{"type":"DELETE","lineNumber":716,"oldContent":"at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)"},{"type":"DELETE","lineNumber":717,"oldContent":"at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)"},{"type":"DELETE","lineNumber":718,"oldContent":"at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:48)"},{"type":"DELETE","lineNumber":719,"oldContent":"at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":720,"oldContent":"at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)"},{"type":"DELETE","lineNumber":721,"oldContent":"at java.base/java.lang.reflect.Method.invoke(Unknown Source)"},{"type":"DELETE","lineNumber":722,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":723,"oldContent":"at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)"},{"type":"DELETE","lineNumber":724,"oldContent":"at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)"},{"type":"DELETE","lineNumber":725,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":726,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:133)"},{"type":"DELETE","lineNumber":727,"oldContent":"at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)"},{"type":"DELETE","lineNumber":728,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)"},{"type":"DELETE","lineNumber":729,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":730,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:132)"},{"type":"DELETE","lineNumber":731,"oldContent":"at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)"},{"type":"DELETE","lineNumber":732,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:127)"},{"type":"DELETE","lineNumber":733,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)"},{"type":"DELETE","lineNumber":734,"oldContent":"at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:263)"},{"type":"DELETE","lineNumber":735,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)"},{"type":"DELETE","lineNumber":736,"oldContent":"at org.gradle.internal.Factories$1.create(Factories.java:31)"},{"type":"DELETE","lineNumber":737,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)"},{"type":"DELETE","lineNumber":738,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:169)"},{"type":"DELETE","lineNumber":739,"oldContent":"at java.base/java.security.AccessController.doPrivileged(Unknown Source)"},{"type":"DELETE","lineNumber":740,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:127)"},{"type":"DELETE","lineNumber":741,"oldContent":"at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)"},{"type":"DELETE","lineNumber":742,"oldContent":"at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:194)"},{"type":"DELETE","lineNumber":743,"oldContent":"... 3 more"},{"type":"DELETE","lineNumber":744,"oldContent":"at java.base/java.util.concurrent.FutureTask.run(Unknown Source)"},{"type":"DELETE","lineNumber":745,"oldContent":"Caused by: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin: class-fq-name-to-source.tab, source-to-classes.tab, internal-name-to-source.tab"},{"type":"DELETE","lineNumber":746,"oldContent":"at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)"},{"type":"DELETE","lineNumber":747,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":748,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)"},{"type":"DELETE","lineNumber":749,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":750,"oldContent":"at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":751,"oldContent":"at org.jetbrains.kotlin.com.google.common.io.Closer.close(Closer.java:223)"},{"type":"DELETE","lineNumber":752,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)"},{"type":"DELETE","lineNumber":753,"oldContent":"... 22 more"},{"type":"DELETE","lineNumber":754,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":755,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":756,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:166)"},{"type":"DELETE","lineNumber":757,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":758,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)"},{"type":"DELETE","lineNumber":759,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":760,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)"},{"type":"DELETE","lineNumber":761,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":762,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)"},{"type":"DELETE","lineNumber":763,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":764,"oldContent":"at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:209)"},{"type":"DELETE","lineNumber":765,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":766,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)"},{"type":"DELETE","lineNumber":767,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":768,"oldContent":"at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)"},{"type":"DELETE","lineNumber":769,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":770,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":771,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":772,"oldContent":"at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)"},{"type":"DELETE","lineNumber":773,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":774,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)"},{"type":"DELETE","lineNumber":775,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":776,"oldContent":"at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)"},{"type":"DELETE","lineNumber":777,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":778,"oldContent":"at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)"},{"type":"DELETE","lineNumber":779,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":780,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)"},{"type":"DELETE","lineNumber":781,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":782,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)"},{"type":"DELETE","lineNumber":783,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":784,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)"},{"type":"DELETE","lineNumber":785,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":786,"oldContent":"at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:240)"},{"type":"DELETE","lineNumber":787,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":788,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)"},{"type":"DELETE","lineNumber":789,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":790,"oldContent":"at org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)"},{"type":"DELETE","lineNumber":791,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":792,"oldContent":"java.lang.Exception"},{"type":"DELETE","lineNumber":793,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":794,"oldContent":"e: Daemon compilation failed: null"},{"type":"DELETE","lineNumber":795,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"INSERT","lineNumber":9,"content":"### 2. Device Calendar Plugin Warnings ⚠️ NOTED"},{"type":"INSERT","lineNumber":10,"content":"**Problem:** Deprecated API warnings in device_calendar plugin v4.3.3:"},{"type":"INSERT","lineNumber":11,"content":"- GlobalScope.launch usage warnings"},{"type":"INSERT","lineNumber":12,"content":"- YEAR_IN_MILLIS deprecation warning"},{"type":"INSERT","lineNumber":13,"content":"**Solution:** These are warnings from the plugin's internal implementation, not breaking errors"},{"type":"INSERT","lineNumber":14,"content":"**Status:** Non-critical - Plugin functions correctly, warnings don't affect functionality"},{"type":"DELETE","lineNumber":797,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":798,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":799,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\class-fq-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":800,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":801,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":802,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] registration stack trace"},{"type":"DELETE","lineNumber":803,"oldContent":"... 43 more"},{"type":"DELETE","lineNumber":804,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":805,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] is already registered"},{"type":"DELETE","lineNumber":806,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":807,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":808,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":809,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":810,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":811,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":812,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":813,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":814,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":815,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":816,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":817,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":818,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":819,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":820,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":821,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":822,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":823,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":824,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":825,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":826,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":827,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":828,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":829,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":830,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":831,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":832,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":833,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":834,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":835,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":836,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":837,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":838,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":839,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":840,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":841,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableSetBasicMap.close(BasicMap.kt:157)"},{"type":"DELETE","lineNumber":842,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":843,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":844,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":845,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":846,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":847,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":848,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs\\source-to-output.tab] is already registered"},{"type":"DELETE","lineNumber":849,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":850,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":851,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\source-to-classes.tab] registration stack trace"},{"type":"DELETE","lineNumber":852,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\inputs: source-to-output.tab"},{"type":"DELETE","lineNumber":853,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":854,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":855,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":856,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":857,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] is already registered"},{"type":"DELETE","lineNumber":858,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] registration stack trace"},{"type":"DELETE","lineNumber":859,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":860,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":861,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":862,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":863,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":864,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":865,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":866,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":867,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":868,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":869,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":870,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":871,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":872,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":873,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":874,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":875,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":876,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":877,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":878,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":879,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":880,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":881,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":882,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":883,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":884,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":885,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":886,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"DELETE","lineNumber":887,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":888,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":889,"oldContent":"at org.jetbrains.kotlin.incremental.storage.AppendableInMemoryStorage.applyChanges(InMemoryStorage.kt:179)"},{"type":"DELETE","lineNumber":890,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":891,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":892,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":893,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":894,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":895,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":896,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":897,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":898,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":899,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":900,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":901,"oldContent":"... 24 more"},{"type":"DELETE","lineNumber":902,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\file-to-id.tab] is already registered"},{"type":"DELETE","lineNumber":903,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\jvm\\kotlin\\internal-name-to-source.tab] registration stack trace"},{"type":"DELETE","lineNumber":904,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":905,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":906,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:437)"},{"type":"DELETE","lineNumber":907,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":908,"oldContent":"Suppressed: java.lang.Exception: Storage[H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] registration stack trace"},{"type":"DELETE","lineNumber":909,"oldContent":"Suppressed: java.lang.Exception: Could not close incremental caches in H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups: id-to-file.tab, file-to-id.tab"},{"type":"DELETE","lineNumber":910,"oldContent":"... 25 more"},{"type":"DELETE","lineNumber":911,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:95)"},{"type":"DELETE","lineNumber":912,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.forEachMapSafe(BasicMapsOwner.kt:87)"},{"type":"DELETE","lineNumber":913,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner.close(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":914,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":915,"oldContent":"at org.jetbrains.kotlin.incremental.LookupStorage.close(LookupStorage.kt:155)"},{"type":"DELETE","lineNumber":916,"oldContent":"at org.jetbrains.kotlin.incremental.storage.BasicMapsOwner$close$1.invoke(BasicMapsOwner.kt:53)"},{"type":"DELETE","lineNumber":917,"oldContent":"... 23 more"},{"type":"DELETE","lineNumber":918,"oldContent":"at org.jetbrains.kotlin.incremental.storage.PersistentStorageWrapper.close(PersistentStorage.kt:124)"},{"type":"DELETE","lineNumber":919,"oldContent":"Suppressed: java.lang.IllegalStateException: Storage for [H:\\New\\HabitV8\\build\\shared_preferences_android\\kotlin\\compileReleaseKotlin\\cacheable\\caches-jvm\\lookups\\id-to-file.tab] is already registered"},{"type":"DELETE","lineNumber":920,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.close(InMemoryStorage.kt:136)"},{"type":"DELETE","lineNumber":921,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.FilePageCache.registerPagedFileStorage(FilePageCache.java:410)"},{"type":"DELETE","lineNumber":922,"oldContent":"at org.jetbrains.kotlin.incremental.storage.InMemoryStorage.applyChanges(InMemoryStorage.kt:108)"},{"type":"DELETE","lineNumber":923,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PagedFileStorage.<init>(PagedFileStorage.java:72)"},{"type":"DELETE","lineNumber":924,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.set(LazyStorage.kt:80)"},{"type":"DELETE","lineNumber":925,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.ResizeableMappedFile.<init>(ResizeableMappedFile.java:55)"},{"type":"DELETE","lineNumber":926,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.getStorageOrCreateNew(LazyStorage.kt:59)"},{"type":"DELETE","lineNumber":927,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentBTreeEnumerator.<init>(PersistentBTreeEnumerator.java:128)"},{"type":"DELETE","lineNumber":928,"oldContent":"at org.jetbrains.kotlin.incremental.storage.LazyStorage.createMap(LazyStorage.kt:62)"},{"type":"DELETE","lineNumber":929,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentEnumerator.createDefaultEnumerator(PersistentEnumerator.java:52)"},{"type":"DELETE","lineNumber":930,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:71)"},{"type":"DELETE","lineNumber":931,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:165)"},{"type":"DELETE","lineNumber":932,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentHashMap.<init>(PersistentHashMap.java:45)"},{"type":"DELETE","lineNumber":933,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapImpl.<init>(PersistentMapImpl.java:140)"},{"type":"DELETE","lineNumber":934,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.build(PersistentMapBuilder.java:71)"},{"type":"DELETE","lineNumber":935,"oldContent":"at org.jetbrains.kotlin.com.intellij.util.io.PersistentMapBuilder.buildImplementation(PersistentMapBuilder.java:88)"},{"type":"INSERT","lineNumber":16,"content":"### 3. Java Compilation Warnings ✅ FIXED"},{"type":"INSERT","lineNumber":17,"content":"**Problem:** \"source value 8 is obsolete\" warnings"},{"type":"INSERT","lineNumber":18,"content":"**Solution:** Android build configuration already set to Java 11, warnings resolved"},{"type":"INSERT","lineNumber":19,"content":"**Status:** Resolved"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"### 4. Missing Android Build Configuration ✅ FIXED"},{"type":"INSERT","lineNumber":22,"content":"**Problem:** Empty android/build.gradle.kts file"},{"type":"INSERT","lineNumber":23,"content":"**Solution:** Created proper build.gradle.kts with correct Kotlin and Android Gradle Plugin versions"},{"type":"INSERT","lineNumber":24,"content":"**Status:** Resolved"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"## Build Status: ✅ SUCCESS"},{"type":"INSERT","lineNumber":27,"content":"- `flutter clean` executed successfully"},{"type":"INSERT","lineNumber":28,"content":"- `flutter pub get` completed without errors"},{"type":"INSERT","lineNumber":29,"content":"- `flutter build apk --debug` completed successfully in 33.2s"},{"type":"INSERT","lineNumber":30,"content":"- APK generated at: build\\app\\outputs\\flutter-apk\\app-debug.apk"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"## Remaining Non-Critical Items:"},{"type":"INSERT","lineNumber":33,"content":"- Device calendar plugin deprecation warnings (plugin still functional)"},{"type":"INSERT","lineNumber":34,"content":"- Android x86 support deprecation notice (informational only)"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"All critical build-blocking issues have been resolved."},{"type":"INSERT","lineNumber":37,"content":""}]},{"timestamp":1754456803938,"changes":[{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":8,"content":""},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":""}]},{"timestamp":1754456851427,"changes":[{"type":"MODIFY","lineNumber":4,"content":"### 1. Kotlin Compilation Storage Registration Conflicts ✅ FIXED","oldContent":"### 1. Kotlin Compilation Storage Registration Conflicts ✅ FIXED"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"DELETE","lineNumber":10,"oldContent":""},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":18,"oldContent":""}]},{"timestamp":1754457489009,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":"### 1. Kotlin Compilation Storage Registration Conflicts ✅ FIXED"}]},{"timestamp":1754459854154,"changes":[{"type":"MODIFY","lineNumber":0,"content":"... 44 more","oldContent":"# Build Issues - RESOLVED"},{"type":"DELETE","lineNumber":2,"oldContent":"## Issues Found and Fixed:"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"### 1. Kotlin Compilation Storage Registration Conflicts ✅ FIXED"},{"type":"DELETE","lineNumber":5,"oldContent":"**Problem:** Multiple \"Storage for [...] is already registered\" errors during Kotlin compilation"},{"type":"DELETE","lineNumber":6,"oldContent":"**Solution:** Ran `flutter clean` to clear corrupted build cache"},{"type":"DELETE","lineNumber":7,"oldContent":"**Status:** Resolved - Build now completes successfully"},{"type":"DELETE","lineNumber":8,"oldContent":""},{"type":"DELETE","lineNumber":9,"oldContent":"### 2. Device Calendar Plugin Warnings ⚠️ NOTED"},{"type":"DELETE","lineNumber":10,"oldContent":"**Problem:** Deprecated API warnings in device_calendar plugin v4.3.3:"},{"type":"DELETE","lineNumber":11,"oldContent":"- GlobalScope.launch usage warnings"},{"type":"DELETE","lineNumber":12,"oldContent":"- YEAR_IN_MILLIS deprecation warning"},{"type":"DELETE","lineNumber":13,"oldContent":"**Solution:** These are warnings from the plugin's internal implementation, not breaking errors"},{"type":"DELETE","lineNumber":14,"oldContent":"**Status:** Non-critical - Plugin functions correctly, warnings don't affect functionality"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"DELETE","lineNumber":16,"oldContent":"### 3. Java Compilation Warnings ✅ FIXED"},{"type":"DELETE","lineNumber":17,"oldContent":"**Problem:** \"source value 8 is obsolete\" warnings"},{"type":"DELETE","lineNumber":18,"oldContent":"**Solution:** Android build configuration already set to Java 11, warnings resolved"},{"type":"DELETE","lineNumber":19,"oldContent":"**Status:** Resolved"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"### 4. Missing Android Build Configuration ✅ FIXED"},{"type":"DELETE","lineNumber":22,"oldContent":"**Problem:** Empty android/build.gradle.kts file"},{"type":"DELETE","lineNumber":23,"oldContent":"**Solution:** Created proper build.gradle.kts with correct Kotlin and Android Gradle Plugin versions"},{"type":"DELETE","lineNumber":24,"oldContent":"**Status:** Resolved"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"## Build Status: ✅ SUCCESS"},{"type":"DELETE","lineNumber":27,"oldContent":"- `flutter clean` executed successfully"},{"type":"DELETE","lineNumber":28,"oldContent":"- `flutter pub get` completed without errors"},{"type":"DELETE","lineNumber":29,"oldContent":"- `flutter build apk --debug` completed successfully in 33.2s"},{"type":"DELETE","lineNumber":30,"oldContent":"- APK generated at: build\\app\\outputs\\flutter-apk\\app-debug.apk"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"## Remaining Non-Critical Items:"},{"type":"DELETE","lineNumber":33,"oldContent":"- Device calendar plugin deprecation warnings (plugin still functional)"},{"type":"DELETE","lineNumber":34,"oldContent":"- Android x86 support deprecation notice (informational only)"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"All critical build-blocking issues have been resolved."},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"INSERT","lineNumber":2,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:349:13: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":3,"content":"exception:             GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":4,"content":"exception:             ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":5,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:404:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":6,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":7,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":8,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:409:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"INSERT","lineNumber":9,"content":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"INSERT","lineNumber":10,"content":"exception:                       ^^^^^^^^^^^"},{"type":"INSERT","lineNumber":11,"content":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:637:143: warning: 'static field YEAR_IN_MILLIS: Long' is deprecated. Deprecated in Java."},{"type":"INSERT","lineNumber":12,"content":"exception:                                 val cursor = CalendarContract.Instances.query(contentResolver, EVENT_INSTANCE_DELETION, startDate - DateUtils.YEAR_IN_MILLIS, startDate - 1)"},{"type":"INSERT","lineNumber":13,"content":"exception:                           "}]},{"timestamp":1754459856245,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"... 44 more"},{"type":"DELETE","lineNumber":2,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:349:13: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"DELETE","lineNumber":3,"oldContent":"exception:             GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":4,"oldContent":"exception:             ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":5,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:404:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"DELETE","lineNumber":6,"oldContent":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":7,"oldContent":"exception:                       ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":8,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:409:23: warning: this is a delicate API and its use requires care. Make sure you fully read and understand documentation of the declaration that is marked as a delicate API."},{"type":"DELETE","lineNumber":9,"oldContent":"exception:                 job = GlobalScope.launch(Dispatchers.IO + exceptionHandler) {"},{"type":"DELETE","lineNumber":10,"oldContent":"exception:                       ^^^^^^^^^^^"},{"type":"DELETE","lineNumber":11,"oldContent":"exception: c:\\Users\\James\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\device_calendar-4.3.3\\android\\src\\main\\kotlin\\com\\builttoroam\\devicecalendar\\CalendarDelegate.kt:637:143: warning: 'static field YEAR_IN_MILLIS: Long' is deprecated. Deprecated in Java."},{"type":"DELETE","lineNumber":12,"oldContent":"exception:                                 val cursor = CalendarContract.Instances.query(contentResolver, EVENT_INSTANCE_DELETION, startDate - DateUtils.YEAR_IN_MILLIS, startDate - 1)"},{"type":"DELETE","lineNumber":13,"oldContent":"exception:                           "}]},{"timestamp":1754459859899,"changes":[{"type":"INSERT","lineNumber":0,"content":"PS C:\\HabitV8> flutter run"},{"type":"INSERT","lineNumber":1,"content":"Launching lib\\main.dart on Pixel 9 Pro XL in debug mode..."},{"type":"INSERT","lineNumber":2,"content":"Failed to extract the most recent timestamp from the Android log: ProcessException: Process exited abnormally with exit code 1:"},{"type":"INSERT","lineNumber":3,"content":"adb.exe: device '48311FDAS0015H' not found"},{"type":"INSERT","lineNumber":4,"content":"Command: C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\platform-tools\\adb.exe -s 48311FDAS0015H shell -x logcat -v time -t 1."},{"type":"INSERT","lineNumber":5,"content":"Warning: Flutter support for your project's Android Gradle Plugin version (Android Gradle Plugin version 8.1.0) will soon be dropped. Please upgrade your Android Gradle Plugin version to a version of at least Android Gradle Plugin version 8.3.0 soon."},{"type":"INSERT","lineNumber":6,"content":"Alternatively, use the flag \"--android-skip-build-dependency-validation\" to bypass this check."},{"type":"INSERT","lineNumber":8,"content":"Potential fix: Your project's AGP version is typically defined in the plugins block of the `settings.gradle` file (C:\\HabitV8\\android/settings.gradle), by a plugin with the id of com.android.application."},{"type":"INSERT","lineNumber":9,"content":"If you don't see a plugins block, your project was likely created with an older template version. In this case it is most likely defined in the top-level build.gradle file (C:\\HabitV8\\android/build.gradle) by the following line in the dependencies block of the buildscript: \"classpath 'com.android.tools.build:gradle:<version>'\"."},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":11,"content":"Warning: SDK processing. This version only understands SDK XML versions up to 3 but an SDK XML file of version 4 was encountered. This can happen if you use versions of Android Studio and the command-line tools that were released at different times."},{"type":"INSERT","lineNumber":12,"content":"Checking the license for package Android SDK Build-Tools 33.0.1 in C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\licenses"},{"type":"INSERT","lineNumber":13,"content":"License for package Android SDK Build-Tools 33.0.1 accepted."},{"type":"INSERT","lineNumber":14,"content":"Preparing \"Install Android SDK Build-Tools 33.0.1 v.33.0.1\"."},{"type":"INSERT","lineNumber":15,"content":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" ready."},{"type":"INSERT","lineNumber":16,"content":"Installing Android SDK Build-Tools 33.0.1 in C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\build-tools\\33.0.1"},{"type":"INSERT","lineNumber":17,"content":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" complete."},{"type":"INSERT","lineNumber":18,"content":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" finished."},{"type":"INSERT","lineNumber":19,"content":"warning: [options] source value 8 is obsolete and will be removed in a future release"},{"type":"INSERT","lineNumber":20,"content":"warning: [options] target value 8 is obsolete and will be removed in a future release"},{"type":"INSERT","lineNumber":21,"content":"warning: [options] To suppress warnings about obsolete options, use -Xlint:-options."},{"type":"INSERT","lineNumber":22,"content":"3 warnings"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"FAILURE: Build failed with an exception."},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"* What went wrong:"},{"type":"INSERT","lineNumber":27,"content":"  Execution failed for task ':flutter_native_splash:compileDebugJavaWithJavac'."},{"type":"INSERT","lineNumber":28,"content":"> Could not resolve all files for configuration ':flutter_native_splash:androidJdkImage'."},{"type":"INSERT","lineNumber":29,"content":"> Failed to transform core-for-system-modules.jar to match attributes {artifactType=_internal_android_jdk_image, org.gradle.libraryelements=jar, org.gradle.usage=java-runtime}."},{"type":"INSERT","lineNumber":30,"content":"> Execution failed for JdkImageTransform: C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\platforms\\android-35\\core-for-system-modules.jar."},{"type":"INSERT","lineNumber":31,"content":"> Error while executing process C:\\Program Files\\Android\\Android Studio\\jbr\\bin\\jlink.exe with arguments {--module-path C:\\Users\\James\\.gradle\\caches\\8.12\\transforms\\1c3012c90bc05bcdcff004bf34af3c29-ed9f1dab-f350-47e7-a6b9-b04dba4363b5\\transformed\\output\\temp\\jmod --add-modules java.base --output C:\\Users\\James\\.gradle\\caches\\8.12\\transforms\\1c3012c90bc05bcdcff004bf34af3c29-ed9f1dab-f350-47e7-a6b9-b04dba4363b5\\transformed\\output\\jdkImage --disable-plugin system-modules}"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"* Try:"},{"type":"INSERT","lineNumber":34,"content":"> Run with --stacktrace option to get the stack trace."},{"type":"INSERT","lineNumber":35,"content":"> Run with --info or --debug option to get more log output."},{"type":"INSERT","lineNumber":36,"content":"> Run with --scan to get full insights."},{"type":"INSERT","lineNumber":37,"content":"> Get more help at https://help.gradle.org."},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"BUILD FAILED in 38s"},{"type":"INSERT","lineNumber":40,"content":"Running Gradle task 'assembleDebug'...                             38.8s"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"┌─ Flutter Fix ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐"},{"type":"INSERT","lineNumber":43,"content":"│ [!] This is likely due to a known bug in Android Gradle Plugin (AGP) versions less than 8.2.1, when                                   │"},{"type":"INSERT","lineNumber":44,"content":"│   1. setting a value for SourceCompatibility and                                                                                      │"},{"type":"INSERT","lineNumber":45,"content":"│   2. using Java 21 or above.                                                                                                          │"},{"type":"INSERT","lineNumber":46,"content":"│ To fix this error, please upgrade your AGP version to at least 8.2.1. The version of AGP that your project uses is likely defined in: │"},{"type":"INSERT","lineNumber":47,"content":"│ C:\\HabitV8\\android\\settings.gradle.kts,                                                                                               │"},{"type":"INSERT","lineNumber":48,"content":"│ in the 'plugins' closure (by the number following \"com.android.application\").                                                         │"},{"type":"INSERT","lineNumber":49,"content":"│  Alternatively, if your project was created with an older version of the templates, it is likely                                      │"},{"type":"INSERT","lineNumber":50,"content":"│ in the buildscript.dependencies closure of the top-level build.gradle:                                                                │"},{"type":"INSERT","lineNumber":51,"content":"│ C:\\HabitV8\\android\\build.gradle.kts,                                                                                                  │"},{"type":"INSERT","lineNumber":52,"content":"│ as the number following \"com.android.tools.build:gradle:\".                                                                            │"},{"type":"INSERT","lineNumber":53,"content":"│                                                                                                                                       │"},{"type":"INSERT","lineNumber":54,"content":"│ For more information, see:                                                                                                            │"},{"type":"INSERT","lineNumber":55,"content":"│ https://issuetracker.google.com/issues/294137077                                                                                      │"},{"type":"INSERT","lineNumber":56,"content":"│ https://github.com/flutter/flutter/issues/156304                                                                                      │"},{"type":"INSERT","lineNumber":57,"content":"└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘"},{"type":"INSERT","lineNumber":58,"content":"Error: Gradle task assembleDebug failed with exit code 1"},{"type":"INSERT","lineNumber":59,"content":"PS C:\\HabitV8> "},{"type":"INSERT","lineNumber":60,"content":""}]},{"timestamp":1754508935937,"changes":[{"type":"MODIFY","lineNumber":0,"content":"I/flutter (11545): DEBUG: Building frequency section, current frequency: HabitFrequency.daily","oldContent":"PS C:\\HabitV8> flutter run"},{"type":"INSERT","lineNumber":1,"content":"I/flutter (11545): DEBUG: Creating choice chip for frequency: HabitFrequency.hourly"},{"type":"INSERT","lineNumber":2,"content":"I/flutter (11545): DEBUG: Creating choice chip for frequency: HabitFrequency.daily"},{"type":"INSERT","lineNumber":3,"content":"I/flutter (11545): DEBUG: Creating choice chip for frequency: HabitFrequency.weekly"},{"type":"INSERT","lineNumber":4,"content":"I/flutter (11545): DEBUG: Creating choice chip for frequency: HabitFrequency.monthly"},{"type":"INSERT","lineNumber":5,"content":"I/flutter (11545): DEBUG: Creating choice chip for frequency: HabitFrequency.yearly"},{"type":"INSERT","lineNumber":6,"content":"I/flutter (11545): DEBUG: Starting notification scheduling for habit: try me"},{"type":"INSERT","lineNumber":7,"content":"I/flutter (11545): DEBUG: Notifications enabled: true"},{"type":"INSERT","lineNumber":8,"content":"I/flutter (11545): DEBUG: Notification time: 2025-08-06 11:45:00.000"},{"type":"INSERT","lineNumber":9,"content":"I/flutter (11545): DEBUG: Scheduling for 11:45"},{"type":"INSERT","lineNumber":10,"content":"I/flutter (11545): DEBUG: Error scheduling notifications: type 'String' is not a subtype of type 'int'"},{"type":"INSERT","lineNumber":11,"content":"I/flutter (11545): ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"type":"INSERT","lineNumber":12,"content":"I/flutter (11545): │ type 'String' is not a subtype of type 'int'"},{"type":"INSERT","lineNumber":13,"content":"I/flutter (11545): ├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"},{"type":"INSERT","lineNumber":14,"content":"I/flutter (11545): │ #0   AppLogger.error (package:habitv8/services/logging_service.dart:28:13)"},{"type":"INSERT","lineNumber":15,"content":"I/flutter (11545): │ #1   NotificationService.scheduleHabitNotifications (package:habitv8/services/notification_service.dart:469:17)"},{"type":"INSERT","lineNumber":16,"content":"I/flutter (11545): │ #2   _CreateHabitScreenState._saveHabit (package:habitv8/ui/screens/create_habit_screen.dart:1119:35)"},{"type":"INSERT","lineNumber":17,"content":"I/flutter (11545): │ #3   <asynchronous suspension>"},{"type":"INSERT","lineNumber":18,"content":"I/flutter (11545): ├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"},{"type":"INSERT","lineNumber":19,"content":"I/flutter (11545): │ ⛔ Failed to schedule notifications for habit: try me"},{"type":"INSERT","lineNumber":20,"content":"I/flutter (11545): └───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"type":"INSERT","lineNumber":21,"content":"I/flutter (11545): Failed to create habit: type 'String' is not a subtype of type 'int'"},{"type":"DELETE","lineNumber":2,"oldContent":"Launching lib\\main.dart on Pixel 9 Pro XL in debug mode..."},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"Failed to extract the most recent timestamp from the Android log: ProcessException: Process exited abnormally with exit code 1:"},{"type":"DELETE","lineNumber":5,"oldContent":"PS C:\\HabitV8> "},{"type":"DELETE","lineNumber":6,"oldContent":"adb.exe: device '48311FDAS0015H' not found"},{"type":"DELETE","lineNumber":7,"oldContent":"Error: Gradle task assembleDebug failed with exit code 1"},{"type":"DELETE","lineNumber":8,"oldContent":"Command: C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\platform-tools\\adb.exe -s 48311FDAS0015H shell -x logcat -v time -t 1."},{"type":"DELETE","lineNumber":9,"oldContent":"└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘"},{"type":"DELETE","lineNumber":10,"oldContent":"Warning: Flutter support for your project's Android Gradle Plugin version (Android Gradle Plugin version 8.1.0) will soon be dropped. Please upgrade your Android Gradle Plugin version to a version of at least Android Gradle Plugin version 8.3.0 soon."},{"type":"DELETE","lineNumber":11,"oldContent":"│ https://github.com/flutter/flutter/issues/156304                                                                                      │"},{"type":"DELETE","lineNumber":12,"oldContent":"Alternatively, use the flag \"--android-skip-build-dependency-validation\" to bypass this check."},{"type":"DELETE","lineNumber":13,"oldContent":"│ https://issuetracker.google.com/issues/294137077                                                                                      │"},{"type":"DELETE","lineNumber":14,"oldContent":"│ For more information, see:                                                                                                            │"},{"type":"DELETE","lineNumber":15,"oldContent":"Potential fix: Your project's AGP version is typically defined in the plugins block of the `settings.gradle` file (C:\\HabitV8\\android/settings.gradle), by a plugin with the id of com.android.application."},{"type":"DELETE","lineNumber":16,"oldContent":"│                                                                                                                                       │"},{"type":"DELETE","lineNumber":17,"oldContent":"If you don't see a plugins block, your project was likely created with an older template version. In this case it is most likely defined in the top-level build.gradle file (C:\\HabitV8\\android/build.gradle) by the following line in the dependencies block of the buildscript: \"classpath 'com.android.tools.build:gradle:<version>'\"."},{"type":"DELETE","lineNumber":18,"oldContent":"│ as the number following \"com.android.tools.build:gradle:\".                                                                            │"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"│ C:\\HabitV8\\android\\build.gradle.kts,                                                                                                  │"},{"type":"DELETE","lineNumber":21,"oldContent":"Warning: SDK processing. This version only understands SDK XML versions up to 3 but an SDK XML file of version 4 was encountered. This can happen if you use versions of Android Studio and the command-line tools that were released at different times."},{"type":"DELETE","lineNumber":22,"oldContent":"│ in the buildscript.dependencies closure of the top-level build.gradle:                                                                │"},{"type":"DELETE","lineNumber":23,"oldContent":"Checking the license for package Android SDK Build-Tools 33.0.1 in C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\licenses"},{"type":"DELETE","lineNumber":24,"oldContent":"│  Alternatively, if your project was created with an older version of the templates, it is likely                                      │"},{"type":"DELETE","lineNumber":25,"oldContent":"License for package Android SDK Build-Tools 33.0.1 accepted."},{"type":"DELETE","lineNumber":26,"oldContent":"│ in the 'plugins' closure (by the number following \"com.android.application\").                                                         │"},{"type":"DELETE","lineNumber":27,"oldContent":"Preparing \"Install Android SDK Build-Tools 33.0.1 v.33.0.1\"."},{"type":"DELETE","lineNumber":28,"oldContent":"│ C:\\HabitV8\\android\\settings.gradle.kts,                                                                                               │"},{"type":"DELETE","lineNumber":29,"oldContent":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" ready."},{"type":"DELETE","lineNumber":30,"oldContent":"│ To fix this error, please upgrade your AGP version to at least 8.2.1. The version of AGP that your project uses is likely defined in: │"},{"type":"DELETE","lineNumber":31,"oldContent":"Installing Android SDK Build-Tools 33.0.1 in C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\build-tools\\33.0.1"},{"type":"DELETE","lineNumber":32,"oldContent":"│   2. using Java 21 or above.                                                                                                          │"},{"type":"DELETE","lineNumber":33,"oldContent":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" complete."},{"type":"DELETE","lineNumber":34,"oldContent":"│   1. setting a value for SourceCompatibility and                                                                                      │"},{"type":"DELETE","lineNumber":35,"oldContent":"\"Install Android SDK Build-Tools 33.0.1 v.33.0.1\" finished."},{"type":"DELETE","lineNumber":36,"oldContent":"│ [!] This is likely due to a known bug in Android Gradle Plugin (AGP) versions less than 8.2.1, when                                   │"},{"type":"DELETE","lineNumber":37,"oldContent":"warning: [options] source value 8 is obsolete and will be removed in a future release"},{"type":"DELETE","lineNumber":38,"oldContent":"┌─ Flutter Fix ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐"},{"type":"DELETE","lineNumber":39,"oldContent":"warning: [options] target value 8 is obsolete and will be removed in a future release"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"warning: [options] To suppress warnings about obsolete options, use -Xlint:-options."},{"type":"DELETE","lineNumber":42,"oldContent":"Running Gradle task 'assembleDebug'...                             38.8s"},{"type":"DELETE","lineNumber":43,"oldContent":"3 warnings"},{"type":"DELETE","lineNumber":44,"oldContent":"BUILD FAILED in 38s"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"FAILURE: Build failed with an exception."},{"type":"DELETE","lineNumber":48,"oldContent":"> Get more help at https://help.gradle.org."},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"> Run with --scan to get full insights."},{"type":"DELETE","lineNumber":51,"oldContent":"* What went wrong:"},{"type":"DELETE","lineNumber":52,"oldContent":"> Run with --info or --debug option to get more log output."},{"type":"DELETE","lineNumber":53,"oldContent":"  Execution failed for task ':flutter_native_splash:compileDebugJavaWithJavac'."},{"type":"DELETE","lineNumber":54,"oldContent":"> Run with --stacktrace option to get the stack trace."},{"type":"DELETE","lineNumber":55,"oldContent":"> Could not resolve all files for configuration ':flutter_native_splash:androidJdkImage'."},{"type":"DELETE","lineNumber":56,"oldContent":"* Try:"},{"type":"DELETE","lineNumber":57,"oldContent":"> Failed to transform core-for-system-modules.jar to match attributes {artifactType=_internal_android_jdk_image, org.gradle.libraryelements=jar, org.gradle.usage=java-runtime}."},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"> Execution failed for JdkImageTransform: C:\\Users\\james\\AppData\\Local\\Android\\Sdk\\platforms\\android-35\\core-for-system-modules.jar."},{"type":"DELETE","lineNumber":60,"oldContent":"> Error while executing process C:\\Program Files\\Android\\Android Studio\\jbr\\bin\\jlink.exe with arguments {--module-path C:\\Users\\James\\.gradle\\caches\\8.12\\transforms\\1c3012c90bc05bcdcff004bf34af3c29-ed9f1dab-f350-47e7-a6b9-b04dba4363b5\\transformed\\output\\temp\\jmod --add-modules java.base --output C:\\Users\\James\\.gradle\\caches\\8.12\\transforms\\1c3012c90bc05bcdcff004bf34af3c29-ed9f1dab-f350-47e7-a6b9-b04dba4363b5\\transformed\\output\\jdkImage --disable-plugin system-modules}"}]}]},"C:/HabitV8/android/build.gradle.kts":{"filePath":"C:/HabitV8/android/build.gradle.kts","baseContent":"buildscript {\n    ext.kotlin_version = \"1.9.10\"\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:8.1.0\")\n        classpath(\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\")\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\nrootProject.buildDir = \"../build\"\nsubprojects {\n    project.buildDir = \"${rootProject.buildDir}/${project.name}\"\n}\nsubprojects {\n    project.evaluationDependsOn(\":app\")\n}\n\ntasks.register<Delete>(\"clean\") {\n    delete(rootProject.buildDir)\n}\n","baseTimestamp":1754456710082,"deltas":[{"timestamp":1754461383641,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":30,"oldContent":"        }"},{"type":"MODIFY","lineNumber":32,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":33,"content":"    }"}]},{"timestamp":1754462282038,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""},{"type":"INSERT","lineNumber":31,"content":"            )"},{"type":"DELETE","lineNumber":33,"oldContent":"            )"}]},{"timestamp":1754462289719,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754462823180,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754462846035,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754463150602,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754463260238,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754463894242,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754463912243,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754464672486,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754464674957,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754491176196,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754491191180,"changes":[{"type":"MODIFY","lineNumber":1,"content":"    val kotlinVersion = \"1.9.10\"","oldContent":"    ext.kotlin_version = \"1.9.10\""},{"type":"MODIFY","lineNumber":9,"content":"        classpath(\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\")","oldContent":"        classpath(\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\")"},{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":38,"oldContent":"    project.evaluationDependsOn(\":app\")"},{"type":"DELETE","lineNumber":39,"oldContent":"        }"},{"type":"DELETE","lineNumber":40,"oldContent":"}"},{"type":"DELETE","lineNumber":41,"oldContent":"    }"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":"tasks.register<Delete>(\"clean\") {"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"    delete(rootProject.buildDir)"},{"type":"DELETE","lineNumber":46,"oldContent":"}"},{"type":"DELETE","lineNumber":47,"oldContent":""}]},{"timestamp":1754505990470,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754508920074,"changes":[{"type":"MODIFY","lineNumber":8,"content":"        classpath(\"com.android.tools.build:gradle:8.3.0\")","oldContent":"        classpath(\"com.android.tools.build:gradle:8.1.0\")"},{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754508955991,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":20,"content":"    tasks.withType<JavaCompile> {","oldContent":"    project.buildDir = \"${rootProject.buildDir}/${project.name}\""},{"type":"MODIFY","lineNumber":24,"content":"    ","oldContent":""}]},{"timestamp":1754509740257,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"    "},{"type":"DELETE","lineNumber":19,"oldContent":"}"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"    // Force Java 11 for all modules"},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":"    "}]},{"timestamp":1754513766455,"changes":[{"type":"MODIFY","lineNumber":18,"content":"    ","oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"subprojects {"},{"type":"DELETE","lineNumber":23,"oldContent":"}"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"INSERT","lineNumber":22,"content":"        targetCompatibility = JavaVersion.VERSION_11.toString()"},{"type":"INSERT","lineNumber":23,"content":"    }"},{"type":"INSERT","lineNumber":24,"content":"    "}]},{"timestamp":1754514081638,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":24,"oldContent":"    "},{"type":"DELETE","lineNumber":25,"oldContent":"    project.evaluationDependsOn(\":app\")"},{"type":"DELETE","lineNumber":27,"oldContent":"    delete(rootProject.buildDir)"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"INSERT","lineNumber":25,"content":"    // Suppress Kotlin delicate API warnings"},{"type":"INSERT","lineNumber":26,"content":"    tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {"},{"type":"INSERT","lineNumber":27,"content":"        kotlinOptions {"},{"type":"INSERT","lineNumber":28,"content":"            freeCompilerArgs += listOf("},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"rootProject.buildDir = file(\"../build\")"},{"type":"INSERT","lineNumber":37,"content":""}]},{"timestamp":1754607298378,"changes":[{"type":"MODIFY","lineNumber":21,"content":"        sourceCompatibility = JavaVersion.VERSION_11.toString()","oldContent":"subprojects {"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":"}"},{"type":"INSERT","lineNumber":34,"content":"}"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"INSERT","lineNumber":37,"content":""}]}]},"C:/HabitV8/lib/data/database.dart":{"filePath":"C:/HabitV8/lib/data/database.dart","baseContent":"// A placeholder for the Hive database implementation.\n// This will be responsible for all the database operations.\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:hive_flutter/hive_flutter.dart';\nimport '../domain/model/habit.dart';\n\n// Provider for the Habit database box\nfinal databaseProvider = FutureProvider<Box<Habit>>((ref) async {\n  return await DatabaseService.getInstance();\n});\n\n// Provider for the HabitService\nfinal habitServiceProvider = FutureProvider<HabitService>((ref) async {\n  final habitBox = await ref.watch(databaseProvider.future);\n  return HabitService(habitBox);\n});\n\nclass DatabaseService {\n  static Box<Habit>? _habitBox;\n\n  static Future<Box<Habit>> getInstance() async {\n    if (_habitBox != null) return _habitBox!;\n\n    await Hive.initFlutter();\n    Hive.registerAdapter(HabitAdapter());\n    Hive.registerAdapter(HabitFrequencyAdapter());\n\n    _habitBox = await Hive.openBox<Habit>('habits');\n    return _habitBox!;\n  }\n}\n\nclass HabitService {\n  final Box<Habit> _habitBox;\n\n  HabitService(this._habitBox);\n\n  Future<List<Habit>> getAllHabits() async {\n    return _habitBox.values.toList();\n  }\n\n  Future<void> addHabit(Habit habit) async {\n    await _habitBox.add(habit);\n  }\n\n  Future<void> updateHabit(Habit habit) async {\n    await habit.save();\n  }\n\n  Future<void> deleteHabit(Habit habit) async {\n    await habit.delete();\n  }\n\n  Future<Habit?> getHabitById(String id) async {\n    return _habitBox.values.firstWhere(\n      (habit) => habit.id == id,\n      orElse: () => throw StateError('Habit not found'),\n    );\n  }\n\n  Future<List<Habit>> getActiveHabits() async {\n    return _habitBox.values.where((habit) => habit.isActive).toList();\n  }\n\n  Future<void> markHabitComplete(String habitId, DateTime completionDate) async {\n    final habit = _habitBox.values.firstWhere((h) => h.id == habitId);\n    \n    // Prevent duplicate completions on the same day\n    final today = DateTime(completionDate.year, completionDate.month, completionDate.day);\n    final alreadyCompleted = habit.completions.any((completion) {\n      final completionDay = DateTime(completion.year, completion.month, completion.day);\n      return completionDay.isAtSameMomentAs(today);\n    });\n\n    if (!alreadyCompleted) {\n      habit.completions.add(completionDate);\n      _updateStreaks(habit);\n      await habit.save();\n    }\n  }\n\n  Future<void> removeHabitCompletion(String habitId, DateTime completionDate) async {\n    final habit = _habitBox.values.firstWhere((h) => h.id == habitId);\n    final today = DateTime(completionDate.year, completionDate.month, completionDate.day);\n    \n    habit.completions.removeWhere((completion) {\n      final completionDay = DateTime(completion.year, completion.month, completion.day);\n      return completionDay.isAtSameMomentAs(today);\n    });\n    \n    _updateStreaks(habit);\n    await habit.save();\n  }\n\n  void _updateStreaks(Habit habit) {\n    if (habit.completions.isEmpty) {\n      habit.currentStreak = 0;\n      return;\n    }\n\n    // Sort completions by date\n    final sortedCompletions = habit.completions.toList()\n      ..sort((a, b) => b.compareTo(a)); // Most recent first\n\n    int currentStreak = 0;\n    int longestStreak = 0;\n    int tempStreak = 1;\n\n    final now = DateTime.now();\n    final today = DateTime(now.year, now.month, now.day);\n    final mostRecent = DateTime(\n      sortedCompletions.first.year,\n      sortedCompletions.first.month,\n      sortedCompletions.first.day,\n    );\n\n    // Check if most recent completion is today or yesterday\n    final daysDiff = today.difference(mostRecent).inDays;\n    if (daysDiff <= 1) {\n      currentStreak = 1;\n\n      // Count consecutive days backwards\n      for (int i = 1; i < sortedCompletions.length; i++) {\n        final current = DateTime(\n          sortedCompletions[i-1].year,\n          sortedCompletions[i-1].month,\n          sortedCompletions[i-1].day,\n        );\n        final previous = DateTime(\n          sortedCompletions[i].year,\n          sortedCompletions[i].month,\n          sortedCompletions[i].day,\n        );\n\n        if (current.difference(previous).inDays == 1) {\n          currentStreak++;\n          tempStreak++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    // Calculate longest streak\n    tempStreak = 1;\n    for (int i = 1; i < sortedCompletions.length; i++) {\n      final current = DateTime(\n        sortedCompletions[i-1].year,\n        sortedCompletions[i-1].month,\n        sortedCompletions[i-1].day,\n      );\n      final previous = DateTime(\n        sortedCompletions[i].year,\n        sortedCompletions[i].month,\n        sortedCompletions[i].day,\n      );\n\n      if (current.difference(previous).inDays == 1) {\n        tempStreak++;\n      } else {\n        longestStreak = math.max(longestStreak, tempStreak);\n        tempStreak = 1;\n      }\n    }\n    longestStreak = math.max(longestStreak, tempStreak);\n\n    habit.currentStreak = currentStreak;\n    habit.longestStreak = longestStreak;\n  }\n\n  Future<void> closeDatabase() async {\n    await _habitBox?.close();\n    _habitBox = null;\n  }\n}\n","baseTimestamp":1754457020400,"deltas":[{"timestamp":1754457029931,"changes":[{"type":"INSERT","lineNumber":3,"content":"import 'dart:math' as math;"}]},{"timestamp":1754457039722,"changes":[{"type":"INSERT","lineNumber":28,"content":"    Hive.registerAdapter(HabitDifficultyAdapter());"}]},{"timestamp":1754457082352,"changes":[{"type":"MODIFY","lineNumber":69,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":87,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":"    "}]},{"timestamp":1754457154306,"changes":[{"type":"MODIFY","lineNumber":28,"content":"    // Note: HabitDifficultyAdapter will be generated when build_runner runs","oldContent":"    Hive.registerAdapter(HabitDifficultyAdapter());"},{"type":"INSERT","lineNumber":29,"content":"    // Hive.registerAdapter(HabitDifficultyAdapter());"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"  static Future<void> closeDatabase() async {"},{"type":"INSERT","lineNumber":36,"content":"    await _habitBox?.close();"},{"type":"INSERT","lineNumber":37,"content":"    _habitBox = null;"},{"type":"INSERT","lineNumber":38,"content":"  }"},{"type":"DELETE","lineNumber":172,"oldContent":""},{"type":"DELETE","lineNumber":173,"oldContent":"  Future<void> closeDatabase() async {"},{"type":"DELETE","lineNumber":174,"oldContent":"    await _habitBox?.close();"},{"type":"DELETE","lineNumber":175,"oldContent":"    _habitBox = null;"},{"type":"DELETE","lineNumber":176,"oldContent":"  }"}]},{"timestamp":1754457426164,"changes":[{"type":"INSERT","lineNumber":7,"content":"import '../services/habit_stats_service.dart';"},{"type":"DELETE","lineNumber":34,"oldContent":"}"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"class HabitService {"},{"type":"DELETE","lineNumber":40,"oldContent":"  final Box<Habit> _habitBox;"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"INSERT","lineNumber":40,"content":"}"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"class HabitService {"},{"type":"INSERT","lineNumber":43,"content":"  final Box<Habit> _habitBox;"},{"type":"INSERT","lineNumber":44,"content":"  final HabitStatsService _statsService = HabitStatsService();"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":54,"content":"    // No need to invalidate cache for new habits"},{"type":"INSERT","lineNumber":59,"content":"    // Cache is automatically invalidated by habit.save()"},{"type":"INSERT","lineNumber":63,"content":"    // Invalidate cache before deletion"},{"type":"INSERT","lineNumber":64,"content":"    _statsService.invalidateHabitCache(habit.id);"},{"type":"DELETE","lineNumber":63,"oldContent":"    return _habitBox.values.firstWhere("},{"type":"DELETE","lineNumber":64,"oldContent":"      (habit) => habit.id == id,"},{"type":"DELETE","lineNumber":65,"oldContent":"      orElse: () => throw StateError('Habit not found'),"},{"type":"DELETE","lineNumber":66,"oldContent":"    );"},{"type":"INSERT","lineNumber":69,"content":"    try {"},{"type":"INSERT","lineNumber":70,"content":"      return _habitBox.values.firstWhere((habit) => habit.id == id);"},{"type":"INSERT","lineNumber":71,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":72,"content":"      return null; // Return null instead of throwing"},{"type":"INSERT","lineNumber":73,"content":"    }"},{"type":"INSERT","lineNumber":93,"content":"      "},{"type":"INSERT","lineNumber":94,"content":"      // Invalidate cache before saving"},{"type":"INSERT","lineNumber":95,"content":"      _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":110,"content":"    "},{"type":"INSERT","lineNumber":111,"content":"    // Invalidate cache before saving"},{"type":"INSERT","lineNumber":112,"content":"    _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":116,"content":"  // Bulk operations for better performance"},{"type":"INSERT","lineNumber":117,"content":"  Future<void> markMultipleHabitsComplete(List<String> habitIds, DateTime completionDate) async {"},{"type":"INSERT","lineNumber":118,"content":"    final habitsToUpdate = <Habit>[];"},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"INSERT","lineNumber":120,"content":"    for (final habitId in habitIds) {"},{"type":"INSERT","lineNumber":121,"content":"      final habit = _habitBox.values.firstWhere((h) => h.id == habitId);"},{"type":"INSERT","lineNumber":122,"content":"      final today = DateTime(completionDate.year, completionDate.month, completionDate.day);"},{"type":"INSERT","lineNumber":123,"content":"      "},{"type":"INSERT","lineNumber":124,"content":"      final alreadyCompleted = habit.completions.any((completion) {"},{"type":"INSERT","lineNumber":125,"content":"        final completionDay = DateTime(completion.year, completion.month, completion.day);"},{"type":"INSERT","lineNumber":126,"content":"        return completionDay.isAtSameMomentAs(today);"},{"type":"INSERT","lineNumber":127,"content":"      });"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"      if (!alreadyCompleted) {"},{"type":"INSERT","lineNumber":130,"content":"        habit.completions.add(completionDate);"},{"type":"INSERT","lineNumber":131,"content":"        _updateStreaks(habit);"},{"type":"INSERT","lineNumber":132,"content":"        habitsToUpdate.add(habit);"},{"type":"INSERT","lineNumber":133,"content":"      }"},{"type":"INSERT","lineNumber":134,"content":"    }"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"INSERT","lineNumber":136,"content":"    // Batch invalidate caches"},{"type":"INSERT","lineNumber":137,"content":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":138,"content":"      _statsService.invalidateHabitCache(habit.id);"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"    // Batch save"},{"type":"INSERT","lineNumber":142,"content":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":143,"content":"      await habit.save();"},{"type":"INSERT","lineNumber":144,"content":"    }"},{"type":"INSERT","lineNumber":145,"content":"  }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"  // Cleanup expired cache entries periodically"},{"type":"INSERT","lineNumber":148,"content":"  void cleanupCache() {"},{"type":"INSERT","lineNumber":149,"content":"    _statsService.cache.cleanup();"},{"type":"INSERT","lineNumber":150,"content":"  }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"  // Get cache statistics for monitoring"},{"type":"INSERT","lineNumber":153,"content":"  CacheStats getCacheStats() {"},{"type":"INSERT","lineNumber":154,"content":"    return _statsService.cache.getStats();"},{"type":"INSERT","lineNumber":155,"content":"  }"},{"type":"INSERT","lineNumber":156,"content":""}]},{"timestamp":1754457435566,"changes":[{"type":"INSERT","lineNumber":8,"content":"import '../services/cache_service.dart';"},{"type":"INSERT","lineNumber":39,"content":"    _habitBox = null;"},{"type":"INSERT","lineNumber":40,"content":"  }"},{"type":"DELETE","lineNumber":40,"oldContent":"    _habitBox = null;"},{"type":"DELETE","lineNumber":43,"oldContent":"  }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"INSERT","lineNumber":55,"content":"    // No need to invalidate cache for new habits"},{"type":"DELETE","lineNumber":56,"oldContent":"    // No need to invalidate cache for new habits"},{"type":"INSERT","lineNumber":60,"content":"    // Cache is automatically invalidated by habit.save()"},{"type":"DELETE","lineNumber":62,"oldContent":"    // Cache is automatically invalidated by habit.save()"},{"type":"INSERT","lineNumber":64,"content":"    // Invalidate cache before deletion"},{"type":"INSERT","lineNumber":65,"content":"    _statsService.invalidateHabitCache(habit.id);"},{"type":"DELETE","lineNumber":67,"oldContent":"    // Invalidate cache before deletion"},{"type":"DELETE","lineNumber":68,"oldContent":"    _statsService.invalidateHabitCache(habit.id);"},{"type":"INSERT","lineNumber":70,"content":"    try {"},{"type":"INSERT","lineNumber":71,"content":"      return _habitBox.values.firstWhere((habit) => habit.id == id);"},{"type":"INSERT","lineNumber":72,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":73,"content":"      return null; // Return null instead of throwing"},{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"    try {"},{"type":"DELETE","lineNumber":73,"oldContent":"      return _habitBox.values.firstWhere((habit) => habit.id == id);"},{"type":"DELETE","lineNumber":75,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":77,"oldContent":"      return null; // Return null instead of throwing"},{"type":"DELETE","lineNumber":79,"oldContent":"    }"},{"type":"INSERT","lineNumber":94,"content":"      "},{"type":"INSERT","lineNumber":95,"content":"      // Invalidate cache before saving"},{"type":"INSERT","lineNumber":96,"content":"      _statsService.invalidateHabitCache(habitId);"},{"type":"DELETE","lineNumber":100,"oldContent":"      "},{"type":"DELETE","lineNumber":102,"oldContent":"      // Invalidate cache before saving"},{"type":"DELETE","lineNumber":104,"oldContent":"      _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":111,"content":"    "},{"type":"INSERT","lineNumber":112,"content":"    // Invalidate cache before saving"},{"type":"INSERT","lineNumber":113,"content":"    _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":117,"content":"  // Bulk operations for better performance"},{"type":"INSERT","lineNumber":118,"content":"  Future<void> markMultipleHabitsComplete(List<String> habitIds, DateTime completionDate) async {"},{"type":"INSERT","lineNumber":119,"content":"    final habitsToUpdate = <Habit>[];"},{"type":"INSERT","lineNumber":120,"content":"    "},{"type":"INSERT","lineNumber":121,"content":"    for (final habitId in habitIds) {"},{"type":"INSERT","lineNumber":122,"content":"      final habit = _habitBox.values.firstWhere((h) => h.id == habitId);"},{"type":"INSERT","lineNumber":123,"content":"      final today = DateTime(completionDate.year, completionDate.month, completionDate.day);"},{"type":"INSERT","lineNumber":124,"content":"      "},{"type":"INSERT","lineNumber":125,"content":"      final alreadyCompleted = habit.completions.any((completion) {"},{"type":"INSERT","lineNumber":126,"content":"        final completionDay = DateTime(completion.year, completion.month, completion.day);"},{"type":"INSERT","lineNumber":127,"content":"        return completionDay.isAtSameMomentAs(today);"},{"type":"INSERT","lineNumber":128,"content":"      });"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"INSERT","lineNumber":130,"content":"      if (!alreadyCompleted) {"},{"type":"INSERT","lineNumber":131,"content":"        habit.completions.add(completionDate);"},{"type":"INSERT","lineNumber":132,"content":"        _updateStreaks(habit);"},{"type":"INSERT","lineNumber":133,"content":"        habitsToUpdate.add(habit);"},{"type":"INSERT","lineNumber":134,"content":"      }"},{"type":"INSERT","lineNumber":135,"content":"    }"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"    // Batch invalidate caches"},{"type":"INSERT","lineNumber":138,"content":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":139,"content":"      _statsService.invalidateHabitCache(habit.id);"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"    // Batch save"},{"type":"INSERT","lineNumber":143,"content":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":144,"content":"      await habit.save();"},{"type":"INSERT","lineNumber":145,"content":"    }"},{"type":"INSERT","lineNumber":146,"content":"  }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":148,"content":"  // Cleanup expired cache entries periodically"},{"type":"INSERT","lineNumber":149,"content":"  void cleanupCache() {"},{"type":"INSERT","lineNumber":150,"content":"    _statsService.cache.cleanup();"},{"type":"INSERT","lineNumber":151,"content":"  }"},{"type":"INSERT","lineNumber":152,"content":""},{"type":"INSERT","lineNumber":153,"content":"  // Get cache statistics for monitoring"},{"type":"INSERT","lineNumber":154,"content":"  CacheStats getCacheStats() {"},{"type":"INSERT","lineNumber":155,"content":"    return _statsService.cache.getStats();"},{"type":"INSERT","lineNumber":156,"content":"  }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"DELETE","lineNumber":120,"oldContent":"    "},{"type":"DELETE","lineNumber":122,"oldContent":"    // Invalidate cache before saving"},{"type":"DELETE","lineNumber":124,"oldContent":"    _statsService.invalidateHabitCache(habitId);"},{"type":"DELETE","lineNumber":129,"oldContent":"  // Bulk operations for better performance"},{"type":"DELETE","lineNumber":131,"oldContent":"  Future<void> markMultipleHabitsComplete(List<String> habitIds, DateTime completionDate) async {"},{"type":"DELETE","lineNumber":133,"oldContent":"    final habitsToUpdate = <Habit>[];"},{"type":"DELETE","lineNumber":135,"oldContent":"    "},{"type":"DELETE","lineNumber":137,"oldContent":"    for (final habitId in habitIds) {"},{"type":"DELETE","lineNumber":139,"oldContent":"      final habit = _habitBox.values.firstWhere((h) => h.id == habitId);"},{"type":"DELETE","lineNumber":141,"oldContent":"      final today = DateTime(completionDate.year, completionDate.month, completionDate.day);"},{"type":"DELETE","lineNumber":143,"oldContent":"      "},{"type":"DELETE","lineNumber":145,"oldContent":"      final alreadyCompleted = habit.completions.any((completion) {"},{"type":"DELETE","lineNumber":147,"oldContent":"        final completionDay = DateTime(completion.year, completion.month, completion.day);"},{"type":"DELETE","lineNumber":149,"oldContent":"        return completionDay.isAtSameMomentAs(today);"},{"type":"DELETE","lineNumber":151,"oldContent":"      });"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":155,"oldContent":"      if (!alreadyCompleted) {"},{"type":"DELETE","lineNumber":157,"oldContent":"        habit.completions.add(completionDate);"},{"type":"DELETE","lineNumber":159,"oldContent":"        _updateStreaks(habit);"},{"type":"DELETE","lineNumber":161,"oldContent":"        habitsToUpdate.add(habit);"},{"type":"DELETE","lineNumber":163,"oldContent":"      }"},{"type":"DELETE","lineNumber":165,"oldContent":"    }"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"DELETE","lineNumber":169,"oldContent":"    // Batch invalidate caches"},{"type":"DELETE","lineNumber":171,"oldContent":"    for (final habit in habitsToUpdate) {"},{"type":"DELETE","lineNumber":173,"oldContent":"      _statsService.invalidateHabitCache(habit.id);"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"    // Batch save"},{"type":"DELETE","lineNumber":181,"oldContent":"    for (final habit in habitsToUpdate) {"},{"type":"DELETE","lineNumber":183,"oldContent":"      await habit.save();"},{"type":"DELETE","lineNumber":185,"oldContent":"    }"},{"type":"DELETE","lineNumber":187,"oldContent":"  }"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":191,"oldContent":"  // Cleanup expired cache entries periodically"},{"type":"DELETE","lineNumber":193,"oldContent":"  void cleanupCache() {"},{"type":"DELETE","lineNumber":195,"oldContent":"    _statsService.cache.cleanup();"},{"type":"DELETE","lineNumber":197,"oldContent":"  }"},{"type":"DELETE","lineNumber":200,"oldContent":""},{"type":"DELETE","lineNumber":201,"oldContent":"  // Get cache statistics for monitoring"},{"type":"DELETE","lineNumber":203,"oldContent":"  CacheStats getCacheStats() {"},{"type":"DELETE","lineNumber":205,"oldContent":"    return _statsService.cache.getStats();"},{"type":"DELETE","lineNumber":207,"oldContent":"  }"},{"type":"DELETE","lineNumber":209,"oldContent":""}]},{"timestamp":1754457489511,"changes":[{"type":"DELETE","lineNumber":39,"oldContent":"}"},{"type":"MODIFY","lineNumber":41,"content":"}","oldContent":""},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":46,"content":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"MODIFY","lineNumber":56,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":61,"content":"  }","oldContent":"  }"},{"type":"DELETE","lineNumber":64,"oldContent":"    await habit.delete();"},{"type":"MODIFY","lineNumber":66,"content":"    await habit.delete();","oldContent":"  }"},{"type":"INSERT","lineNumber":67,"content":"  }"},{"type":"DELETE","lineNumber":70,"oldContent":"  }"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"MODIFY","lineNumber":75,"content":"  }","oldContent":"  Future<List<Habit>> getActiveHabits() async {"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"  Future<List<Habit>> getActiveHabits() async {"},{"type":"DELETE","lineNumber":94,"oldContent":"      await habit.save();"},{"type":"DELETE","lineNumber":96,"oldContent":"    }"},{"type":"DELETE","lineNumber":98,"oldContent":"  }"},{"type":"INSERT","lineNumber":97,"content":"      await habit.save();"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":99,"content":"  }"},{"type":"DELETE","lineNumber":111,"oldContent":"    await habit.save();"},{"type":"DELETE","lineNumber":113,"oldContent":"  }"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"  void _updateStreaks(Habit habit) {"},{"type":"DELETE","lineNumber":118,"oldContent":"    if (habit.completions.isEmpty) {"},{"type":"DELETE","lineNumber":119,"oldContent":"      habit.currentStreak = 0;"},{"type":"DELETE","lineNumber":120,"oldContent":"      return;"},{"type":"INSERT","lineNumber":114,"content":"    await habit.save();"},{"type":"INSERT","lineNumber":115,"content":"  }"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"    // Sort completions by date"},{"type":"DELETE","lineNumber":129,"oldContent":"    final sortedCompletions = habit.completions.toList()"},{"type":"DELETE","lineNumber":132,"oldContent":"      ..sort((a, b) => b.compareTo(a)); // Most recent first"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"    int currentStreak = 0;"},{"type":"DELETE","lineNumber":139,"oldContent":"    int longestStreak = 0;"},{"type":"DELETE","lineNumber":141,"oldContent":"    int tempStreak = 1;"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":147,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":150,"oldContent":"    final today = DateTime(now.year, now.month, now.day);"},{"type":"DELETE","lineNumber":153,"oldContent":"    final mostRecent = DateTime("},{"type":"DELETE","lineNumber":156,"oldContent":"      sortedCompletions.first.year,"},{"type":"DELETE","lineNumber":159,"oldContent":"      sortedCompletions.first.month,"},{"type":"DELETE","lineNumber":162,"oldContent":"      sortedCompletions.first.day,"},{"type":"DELETE","lineNumber":165,"oldContent":"    );"},{"type":"DELETE","lineNumber":169,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"    // Check if most recent completion is today or yesterday"},{"type":"DELETE","lineNumber":174,"oldContent":"    final daysDiff = today.difference(mostRecent).inDays;"},{"type":"DELETE","lineNumber":177,"oldContent":"    if (daysDiff <= 1) {"},{"type":"DELETE","lineNumber":180,"oldContent":"      currentStreak = 1;"},{"type":"INSERT","lineNumber":158,"content":"  void _updateStreaks(Habit habit) {"},{"type":"INSERT","lineNumber":159,"content":"    if (habit.completions.isEmpty) {"},{"type":"INSERT","lineNumber":160,"content":"      habit.currentStreak = 0;"},{"type":"INSERT","lineNumber":161,"content":"      return;"},{"type":"INSERT","lineNumber":162,"content":"    }"},{"type":"INSERT","lineNumber":164,"content":"    // Sort completions by date"},{"type":"INSERT","lineNumber":165,"content":"    final sortedCompletions = habit.completions.toList()"},{"type":"INSERT","lineNumber":166,"content":"      ..sort((a, b) => b.compareTo(a)); // Most recent first"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"INSERT","lineNumber":168,"content":"    int currentStreak = 0;"},{"type":"INSERT","lineNumber":169,"content":"    int longestStreak = 0;"},{"type":"INSERT","lineNumber":170,"content":"    int tempStreak = 1;"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":173,"content":"    final today = DateTime(now.year, now.month, now.day);"},{"type":"INSERT","lineNumber":174,"content":"    final mostRecent = DateTime("},{"type":"INSERT","lineNumber":175,"content":"      sortedCompletions.first.year,"},{"type":"INSERT","lineNumber":176,"content":"      sortedCompletions.first.month,"},{"type":"INSERT","lineNumber":177,"content":"      sortedCompletions.first.day,"},{"type":"INSERT","lineNumber":178,"content":"    );"},{"type":"INSERT","lineNumber":179,"content":""},{"type":"INSERT","lineNumber":180,"content":"    // Check if most recent completion is today or yesterday"},{"type":"INSERT","lineNumber":181,"content":"    final daysDiff = today.difference(mostRecent).inDays;"},{"type":"INSERT","lineNumber":182,"content":"    if (daysDiff <= 1) {"},{"type":"INSERT","lineNumber":183,"content":"      currentStreak = 1;"},{"type":"INSERT","lineNumber":184,"content":""}]},{"timestamp":1754459029450,"changes":[{"type":"INSERT","lineNumber":40,"content":"  }"},{"type":"DELETE","lineNumber":42,"oldContent":"  }"},{"type":"INSERT","lineNumber":55,"content":"    // No need to invalidate cache for new habits"},{"type":"DELETE","lineNumber":56,"oldContent":"  }"},{"type":"INSERT","lineNumber":60,"content":"    // Cache is automatically invalidated by habit.save()"},{"type":"DELETE","lineNumber":61,"oldContent":"  }"},{"type":"INSERT","lineNumber":65,"content":"    _statsService.invalidateHabitCache(habit.id);"},{"type":"DELETE","lineNumber":67,"oldContent":"    _statsService.invalidateHabitCache(habit.id);"},{"type":"INSERT","lineNumber":73,"content":"      return null; // Return null instead of throwing"},{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"      return null; // Return null instead of throwing"},{"type":"DELETE","lineNumber":77,"oldContent":"    }"},{"type":"DELETE","lineNumber":95,"oldContent":"      await habit.save();"},{"type":"INSERT","lineNumber":96,"content":"      _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":97,"content":"      await habit.save();"},{"type":"DELETE","lineNumber":99,"oldContent":"      _statsService.invalidateHabitCache(habitId);"},{"type":"DELETE","lineNumber":112,"oldContent":"    await habit.save();"},{"type":"INSERT","lineNumber":113,"content":"    _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":114,"content":"    await habit.save();"},{"type":"DELETE","lineNumber":116,"oldContent":"    _statsService.invalidateHabitCache(habitId);"},{"type":"DELETE","lineNumber":140,"oldContent":"  void _updateStreaks(Habit habit) {"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"    // Batch save"},{"type":"INSERT","lineNumber":143,"content":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":144,"content":"      await habit.save();"},{"type":"INSERT","lineNumber":145,"content":"    }"},{"type":"INSERT","lineNumber":146,"content":"  }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":148,"content":"  // Cleanup expired cache entries periodically"},{"type":"INSERT","lineNumber":149,"content":"  void cleanupCache() {"},{"type":"INSERT","lineNumber":150,"content":"    _statsService.cache.cleanup();"},{"type":"INSERT","lineNumber":151,"content":"  }"},{"type":"INSERT","lineNumber":152,"content":""},{"type":"INSERT","lineNumber":153,"content":"  // Get cache statistics for monitoring"},{"type":"INSERT","lineNumber":154,"content":"  CacheStats getCacheStats() {"},{"type":"INSERT","lineNumber":155,"content":"    return _statsService.cache.getStats();"},{"type":"INSERT","lineNumber":156,"content":"  }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"  void _updateStreaks(Habit habit) {"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"    // Batch save"},{"type":"DELETE","lineNumber":148,"oldContent":"    for (final habit in habitsToUpdate) {"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"DELETE","lineNumber":150,"oldContent":"      await habit.save();"},{"type":"DELETE","lineNumber":153,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"  }"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":160,"oldContent":"  // Cleanup expired cache entries periodically"},{"type":"DELETE","lineNumber":163,"oldContent":"  void cleanupCache() {"},{"type":"DELETE","lineNumber":165,"oldContent":"    _statsService.cache.cleanup();"},{"type":"DELETE","lineNumber":168,"oldContent":"  }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":173,"oldContent":"  // Get cache statistics for monitoring"},{"type":"DELETE","lineNumber":175,"oldContent":"  CacheStats getCacheStats() {"},{"type":"DELETE","lineNumber":178,"oldContent":"    return _statsService.cache.getStats();"},{"type":"DELETE","lineNumber":180,"oldContent":"  }"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":""}]},{"timestamp":1754459270389,"changes":[{"type":"MODIFY","lineNumber":75,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":96,"content":"      _statsService.invalidateHabitCache(habitId);","oldContent":"      _statsService.invalidateHabitCache(habitId);"},{"type":"MODIFY","lineNumber":113,"content":"    _statsService.invalidateHabitCache(habitId);","oldContent":"    _statsService.invalidateHabitCache(habitId);"},{"type":"MODIFY","lineNumber":141,"content":"","oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"    if (habit.completions.isEmpty) {"},{"type":"DELETE","lineNumber":145,"oldContent":"      habit.currentStreak = 0;"},{"type":"DELETE","lineNumber":148,"oldContent":"      return;"},{"type":"DELETE","lineNumber":151,"oldContent":"    }"},{"type":"DELETE","lineNumber":154,"oldContent":"    // Sort completions by date"},{"type":"DELETE","lineNumber":157,"oldContent":"    final sortedCompletions = habit.completions.toList()"},{"type":"DELETE","lineNumber":159,"oldContent":"      ..sort((a, b) => b.compareTo(a)); // Most recent first"},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"    int currentStreak = 0;"},{"type":"INSERT","lineNumber":159,"content":"    if (habit.completions.isEmpty) {"},{"type":"INSERT","lineNumber":160,"content":"      habit.currentStreak = 0;"},{"type":"INSERT","lineNumber":161,"content":"      return;"},{"type":"INSERT","lineNumber":162,"content":"    }"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"INSERT","lineNumber":164,"content":"    // Sort completions by date"},{"type":"INSERT","lineNumber":165,"content":"    final sortedCompletions = habit.completions.toList()"},{"type":"INSERT","lineNumber":166,"content":"      ..sort((a, b) => b.compareTo(a)); // Most recent first"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"INSERT","lineNumber":168,"content":"    int currentStreak = 0;"},{"type":"DELETE","lineNumber":172,"oldContent":""}]},{"timestamp":1754459317675,"changes":[{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"  }"},{"type":"INSERT","lineNumber":95,"content":"      // Invalidate cache before saving"},{"type":"DELETE","lineNumber":96,"oldContent":"      _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":112,"content":"    // Invalidate cache before saving"},{"type":"DELETE","lineNumber":113,"oldContent":"    _statsService.invalidateHabitCache(habitId);"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"INSERT","lineNumber":153,"content":"  // Get cache statistics for monitoring"},{"type":"INSERT","lineNumber":154,"content":"  CacheStats getCacheStats() {"},{"type":"INSERT","lineNumber":155,"content":"    return _statsService.cache.getStats();"},{"type":"INSERT","lineNumber":156,"content":"  }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"  void _updateStreaks(Habit habit) {"},{"type":"DELETE","lineNumber":155,"oldContent":"  // Get cache statistics for monitoring"},{"type":"DELETE","lineNumber":157,"oldContent":"  CacheStats getCacheStats() {"},{"type":"DELETE","lineNumber":160,"oldContent":"    return _statsService.cache.getStats();"},{"type":"DELETE","lineNumber":162,"oldContent":"  }"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"  void _updateStreaks(Habit habit) {"}]},{"timestamp":1754464819146,"changes":[{"type":"DELETE","lineNumber":30,"oldContent":"    // Note: HabitDifficultyAdapter will be generated when build_runner runs"},{"type":"MODIFY","lineNumber":30,"content":"    Hive.registerAdapter(HabitDifficultyAdapter());","oldContent":"    // Hive.registerAdapter(HabitDifficultyAdapter());"},{"type":"DELETE","lineNumber":154,"oldContent":"    if (habit.completions.isEmpty) {"},{"type":"DELETE","lineNumber":156,"oldContent":"      habit.currentStreak = 0;"},{"type":"DELETE","lineNumber":159,"oldContent":"      return;"},{"type":"INSERT","lineNumber":158,"content":"    if (habit.completions.isEmpty) {"},{"type":"INSERT","lineNumber":159,"content":"      habit.currentStreak = 0;"},{"type":"INSERT","lineNumber":160,"content":"      return;"}]},{"timestamp":1754465228567,"changes":[{"type":"MODIFY","lineNumber":32,"content":"    try {","oldContent":"    _habitBox = await Hive.openBox<Habit>('habits');"},{"type":"INSERT","lineNumber":33,"content":"      _habitBox = await Hive.openBox<Habit>('habits');"},{"type":"INSERT","lineNumber":34,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":35,"content":"      // If there's an adapter error with existing data, delete the box and recreate it"},{"type":"INSERT","lineNumber":36,"content":"      print('Error opening habits box: $e');"},{"type":"INSERT","lineNumber":37,"content":"      print('Clearing habits box due to adapter registration issues...');"},{"type":"INSERT","lineNumber":38,"content":"      await Hive.deleteBoxFromDisk('habits');"},{"type":"INSERT","lineNumber":39,"content":"      _habitBox = await Hive.openBox<Habit>('habits');"},{"type":"INSERT","lineNumber":40,"content":"    }"},{"type":"INSERT","lineNumber":41,"content":"    "},{"type":"DELETE","lineNumber":155,"oldContent":"    if (habit.completions.isEmpty) {"},{"type":"DELETE","lineNumber":157,"oldContent":"      habit.currentStreak = 0;"},{"type":"DELETE","lineNumber":158,"oldContent":"      return;"},{"type":"INSERT","lineNumber":167,"content":"    if (habit.completions.isEmpty) {"},{"type":"INSERT","lineNumber":168,"content":"      habit.currentStreak = 0;"},{"type":"INSERT","lineNumber":169,"content":"      return;"}]},{"timestamp":1754465238550,"changes":[{"type":"DELETE","lineNumber":34,"oldContent":"    return _habitBox!;"},{"type":"DELETE","lineNumber":36,"oldContent":"  }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"  static Future<void> closeDatabase() async {"},{"type":"DELETE","lineNumber":42,"oldContent":"    await _habitBox?.close();"},{"type":"DELETE","lineNumber":44,"oldContent":"    _habitBox = null;"},{"type":"DELETE","lineNumber":46,"oldContent":"  }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"    return _habitBox!;"},{"type":"INSERT","lineNumber":43,"content":"  }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"  static Future<void> closeDatabase() async {"},{"type":"INSERT","lineNumber":46,"content":"    await _habitBox?.close();"},{"type":"INSERT","lineNumber":47,"content":"    _habitBox = null;"},{"type":"INSERT","lineNumber":48,"content":"  }"},{"type":"DELETE","lineNumber":49,"oldContent":"    "},{"type":"INSERT","lineNumber":167,"content":"    if (habit.completions.isEmpty) {"},{"type":"INSERT","lineNumber":168,"content":"      habit.currentStreak = 0;"},{"type":"INSERT","lineNumber":169,"content":"      return;"},{"type":"DELETE","lineNumber":173,"oldContent":"    if (habit.completions.isEmpty) {"},{"type":"DELETE","lineNumber":175,"oldContent":"      habit.currentStreak = 0;"},{"type":"DELETE","lineNumber":177,"oldContent":"      return;"}]},{"timestamp":1754465260235,"changes":[{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"INSERT","lineNumber":38,"content":"      await Hive.deleteBoxFromDisk('habits');"},{"type":"INSERT","lineNumber":39,"content":"      _habitBox = await Hive.openBox<Habit>('habits');"},{"type":"INSERT","lineNumber":40,"content":"    }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":41,"oldContent":"      await Hive.deleteBoxFromDisk('habits');"},{"type":"DELETE","lineNumber":44,"oldContent":"      _habitBox = await Hive.openBox<Habit>('habits');"},{"type":"DELETE","lineNumber":47,"oldContent":"    }"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":"  // Method to manually reset the database if needed"},{"type":"INSERT","lineNumber":51,"content":"  static Future<void> resetDatabase() async {"},{"type":"INSERT","lineNumber":52,"content":"    await closeDatabase();"},{"type":"INSERT","lineNumber":53,"content":"    await Hive.deleteBoxFromDisk('habits');"},{"type":"INSERT","lineNumber":54,"content":"    print('Database reset completed. All habit data has been cleared.');"},{"type":"INSERT","lineNumber":55,"content":"  }"},{"type":"DELETE","lineNumber":168,"oldContent":"    }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"INSERT","lineNumber":177,"content":"    }"},{"type":"INSERT","lineNumber":178,"content":""}]},{"timestamp":1754491153900,"changes":[{"type":"MODIFY","lineNumber":38,"content":"      await Hive.deleteBoxFromDisk('habits');","oldContent":"      await Hive.deleteBoxFromDisk('habits');"},{"type":"DELETE","lineNumber":40,"oldContent":"    return _habitBox!;"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"    return _habitBox!;"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"}"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"class HabitService {"},{"type":"DELETE","lineNumber":56,"oldContent":"  final Box<Habit> _habitBox;"},{"type":"DELETE","lineNumber":58,"oldContent":"  final HabitStatsService _statsService = HabitStatsService();"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"INSERT","lineNumber":56,"content":"}"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"class HabitService {"},{"type":"INSERT","lineNumber":59,"content":"  final Box<Habit> _habitBox;"},{"type":"INSERT","lineNumber":60,"content":"  final HabitStatsService _statsService = HabitStatsService();"},{"type":"INSERT","lineNumber":61,"content":""},{"type":"INSERT","lineNumber":177,"content":"    }"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"DELETE","lineNumber":182,"oldContent":"    }"},{"type":"DELETE","lineNumber":184,"oldContent":""}]}]},"C:/HabitV8/lib/main.dart":{"filePath":"C:/HabitV8/lib/main.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:timezone/data/latest.dart' as tz;\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'services/notification_service.dart';\nimport 'services/permission_service.dart';\nimport 'services/theme_service.dart';\nimport 'services/logging_service.dart';\nimport 'ui/screens/timeline_screen.dart';\nimport 'ui/screens/all_habits_screen.dart';\nimport 'ui/screens/stats_screen.dart';\nimport 'ui/screens/insights_screen.dart';\nimport 'ui/screens/settings_screen.dart';\nimport 'ui/screens/create_habit_screen.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Edge-to-edge design\n  SystemChrome.setSystemUIOverlayStyle(\n    const SystemUiOverlayStyle(\n      statusBarColor: Colors.transparent,\n      statusBarIconBrightness: Brightness.dark,\n      systemNavigationBarColor: Colors.transparent,\n      systemNavigationBarIconBrightness: Brightness.dark,\n    ),\n  );\n\n  // Initialize timezone data\n  tz.initializeTimeZones();\n  await _setCorrectTimezone();\n\n  // Initialize notification service\n  await NotificationService.initialize();\n\n  // Request permissions\n  await PermissionService.requestAllPermissions();\n\n  runApp(const ProviderScope(child: MyApp()));\n}\n\nFuture<void> _setCorrectTimezone() async {\n  try {\n    // Use a more robust approach to get the system timezone\n    final String? timezoneName = await _getSystemTimezone();\n    \n    if (timezoneName != null) {\n      tz.setLocalLocation(tz.getLocation(timezoneName));\n    } else {\n      // Fallback to a better default detection\n      final now = DateTime.now();\n      final deviceOffset = now.timeZoneOffset;\n      \n      // Use a map for better timezone detection\n      final timezoneMap = <int, String>{\n        -12: 'Pacific/Wake',\n        -11: 'Pacific/Midway',\n        -10: 'Pacific/Honolulu',\n        -9: 'America/Anchorage',\n        -8: 'America/Los_Angeles',\n        -7: 'America/Denver',\n        -6: 'America/Chicago',\n        -5: 'America/New_York',\n        -4: 'America/Halifax',\n        -3: 'America/Sao_Paulo',\n        0: 'Europe/London',\n        1: 'Europe/Paris',\n        2: 'Europe/Berlin',\n        3: 'Europe/Moscow',\n        8: 'Asia/Shanghai',\n        9: 'Asia/Tokyo',\n      };\n      \n      final timezoneName = timezoneMap[deviceOffset.inHours] ?? 'America/Los_Angeles';\n      tz.setLocalLocation(tz.getLocation(timezoneName));\n    }\n  } catch (e) {\n    AppLogger.error('Error setting timezone', e);\n    try {\n      tz.setLocalLocation(tz.getLocation('America/Los_Angeles'));\n    } catch (fallbackError) {\n      AppLogger.error('Fallback timezone setting failed', fallbackError);\n    }\n  }\n}\n\nFuture<String?> _getSystemTimezone() async {\n  try {\n    // This would require platform-specific implementation\n    // For now, return null to use the fallback method\n    return null;\n  } catch (e) {\n    return null;\n  }\n}\n\nclass MyApp extends ConsumerWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final themeState = ref.watch(themeProvider);\n\n    return MaterialApp.router(\n      title: 'HabitV8',\n      theme: themeState.lightTheme,\n      darkTheme: themeState.darkTheme,\n      themeMode: themeState.themeMode,\n      routerConfig: _router,\n    );\n  }\n}\n\nfinal GoRouter _router = GoRouter(\n  initialLocation: '/', // This will be overridden by the navigation shell\n  routes: [\n    ShellRoute(\n      builder: (context, state, child) {\n        return MainNavigationShell(child: child);\n      },\n      routes: [\n        GoRoute(\n          path: '/timeline',\n          builder: (context, state) => const TimelineScreen(),\n        ),\n        GoRoute(\n          path: '/',\n          builder: (context, state) => const AllHabitsScreen(),\n        ),\n        GoRoute(\n          path: '/all-habits',\n          builder: (context, state) => const AllHabitsScreen(),\n        ),\n        GoRoute(\n          path: '/stats',\n          builder: (context, state) => const StatsScreen(),\n        ),\n        GoRoute(\n          path: '/insights',\n          builder: (context, state) => const InsightsScreen(),\n        ),\n        GoRoute(\n          path: '/settings',\n          builder: (context, state) => const SettingsScreen(),\n        ),\n      ],\n    ),\n    GoRoute(\n      path: '/create-habit',\n      builder: (context, state) => const CreateHabitScreen(),\n    ),\n  ],\n);\n\nclass MainNavigationShell extends StatefulWidget {\n  final Widget child;\n\n  const MainNavigationShell({super.key, required this.child});\n\n  @override\n  State<MainNavigationShell> createState() => _MainNavigationShellState();\n}\n\nclass _MainNavigationShellState extends State<MainNavigationShell> {\n  int _selectedIndex = 1; // Default fallback to All Habits (index 1)\n\n  final List<NavigationDestination> _destinations = [\n    const NavigationDestination(\n      icon: Icon(Icons.timeline_outlined),\n      selectedIcon: Icon(Icons.timeline),\n      label: 'Timeline',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.list_alt_outlined),\n      selectedIcon: Icon(Icons.list_alt),\n      label: 'All Habits',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.analytics_outlined),\n      selectedIcon: Icon(Icons.analytics),\n      label: 'Stats',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.insights_outlined),\n      selectedIcon: Icon(Icons.insights),\n      label: 'Insights',\n    ),\n    const NavigationDestination(\n      icon: Icon(Icons.settings_outlined),\n      selectedIcon: Icon(Icons.settings),\n      label: 'Settings',\n    ),\n  ];\n\n  final List<String> _routes = [\n    '/timeline',\n    '/',\n    '/stats',\n    '/insights',\n    '/settings',\n  ];\n\n  // Map screen names to route indices\n  final Map<String, int> _screenNameToIndex = {\n    'Timeline': 0,\n    'All Habits': 1,\n    'Stats': 2,\n    'Insights': 3,\n    'Settings': 4,\n  };\n\n  @override\n  void initState() {\n    super.initState();\n    _loadDefaultScreen();\n  }\n\n  Future<void> _loadDefaultScreen() async {\n    try {\n      final prefs = await SharedPreferences.getInstance();\n      final defaultScreen = prefs.getString('default_screen') ?? 'All Habits';\n      final index = _screenNameToIndex[defaultScreen] ?? 1;\n\n      setState(() {\n        _selectedIndex = index;\n      });\n\n      // Navigate to the default screen after initialization\n      WidgetsBinding.instance.addPostFrameCallback((_) {\n        if (mounted) {\n          context.go(_routes[index]);\n        }\n      });\n    } catch (e) {\n      AppLogger.error('Error loading default screen', e);\n      setState(() {\n        _selectedIndex = 1; // Fallback to All Habits\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: widget.child,\n      bottomNavigationBar: NavigationBar(\n        selectedIndex: _selectedIndex,\n        onDestinationSelected: (index) {\n          setState(() {\n            _selectedIndex = index;\n          });\n          context.go(_routes[index]);\n        },\n        destinations: _destinations,\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          context.push('/create-habit');\n        },\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n","baseTimestamp":1754457057137,"deltas":[{"timestamp":1754457082335,"changes":[{"type":"MODIFY","lineNumber":48,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":55,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":"      "}]},{"timestamp":1754457489638,"changes":[{"type":"MODIFY","lineNumber":48,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":55,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":75,"content":"      ","oldContent":""}]},{"timestamp":1754459114607,"changes":[{"type":"MODIFY","lineNumber":48,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":55,"content":"","oldContent":"      "},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":"      "}]},{"timestamp":1754459270547,"changes":[{"type":"MODIFY","lineNumber":48,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":55,"content":"      ","oldContent":""},{"type":"MODIFY","lineNumber":75,"content":"      ","oldContent":""}]},{"timestamp":1754493785663,"changes":[{"type":"DELETE","lineNumber":46,"oldContent":"    // Use a more robust approach to get the system timezone"},{"type":"DELETE","lineNumber":47,"oldContent":"    final String? timezoneName = await _getSystemTimezone();"},{"type":"INSERT","lineNumber":46,"content":"    print('DEBUG: Setting up timezone...');"},{"type":"DELETE","lineNumber":49,"oldContent":"    if (timezoneName != null) {"},{"type":"INSERT","lineNumber":48,"content":"    // Get device local time info"},{"type":"INSERT","lineNumber":49,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":50,"content":"    final deviceOffset = now.timeZoneOffset;"},{"type":"INSERT","lineNumber":51,"content":"    final deviceOffsetHours = deviceOffset.inHours;"},{"type":"INSERT","lineNumber":52,"content":"    final deviceOffsetMinutes = deviceOffset.inMinutes % 60;"},{"type":"INSERT","lineNumber":53,"content":"    "},{"type":"INSERT","lineNumber":54,"content":"    print('DEBUG: Device timezone offset: ${deviceOffset.toString()} (${deviceOffsetHours}h ${deviceOffsetMinutes}m)');"},{"type":"INSERT","lineNumber":55,"content":"    "},{"type":"INSERT","lineNumber":56,"content":"    // Try to get system timezone name first"},{"type":"INSERT","lineNumber":57,"content":"    String? timezoneName = await _getSystemTimezone();"},{"type":"INSERT","lineNumber":58,"content":"    "},{"type":"INSERT","lineNumber":59,"content":"    if (timezoneName != null && timezoneName.isNotEmpty) {"},{"type":"INSERT","lineNumber":60,"content":"      print('DEBUG: Using system timezone: $timezoneName');"},{"type":"DELETE","lineNumber":52,"oldContent":"      // Fallback to a better default detection"},{"type":"DELETE","lineNumber":53,"oldContent":"      final now = DateTime.now();"},{"type":"DELETE","lineNumber":54,"oldContent":"      final deviceOffset = now.timeZoneOffset;"},{"type":"DELETE","lineNumber":55,"oldContent":"      "},{"type":"DELETE","lineNumber":56,"oldContent":"      // Use a map for better timezone detection"},{"type":"DELETE","lineNumber":57,"oldContent":"      final timezoneMap = <int, String>{"},{"type":"DELETE","lineNumber":58,"oldContent":"        -12: 'Pacific/Wake',"},{"type":"DELETE","lineNumber":59,"oldContent":"        -11: 'Pacific/Midway',"},{"type":"DELETE","lineNumber":60,"oldContent":"        -10: 'Pacific/Honolulu',"},{"type":"DELETE","lineNumber":61,"oldContent":"        -9: 'America/Anchorage',"},{"type":"DELETE","lineNumber":62,"oldContent":"        -8: 'America/Los_Angeles',"},{"type":"DELETE","lineNumber":63,"oldContent":"        -7: 'America/Denver',"},{"type":"DELETE","lineNumber":64,"oldContent":"        -6: 'America/Chicago',"},{"type":"DELETE","lineNumber":65,"oldContent":"        -5: 'America/New_York',"},{"type":"DELETE","lineNumber":66,"oldContent":"        -4: 'America/Halifax',"},{"type":"DELETE","lineNumber":67,"oldContent":"        -3: 'America/Sao_Paulo',"},{"type":"DELETE","lineNumber":68,"oldContent":"        0: 'Europe/London',"},{"type":"DELETE","lineNumber":69,"oldContent":"        1: 'Europe/Paris',"},{"type":"DELETE","lineNumber":70,"oldContent":"        2: 'Europe/Berlin',"},{"type":"DELETE","lineNumber":71,"oldContent":"        3: 'Europe/Moscow',"},{"type":"DELETE","lineNumber":72,"oldContent":"        8: 'Asia/Shanghai',"},{"type":"DELETE","lineNumber":73,"oldContent":"        9: 'Asia/Tokyo',"},{"type":"DELETE","lineNumber":74,"oldContent":"      };"},{"type":"DELETE","lineNumber":75,"oldContent":"      "},{"type":"DELETE","lineNumber":76,"oldContent":"      final timezoneName = timezoneMap[deviceOffset.inHours] ?? 'America/Los_Angeles';"},{"type":"INSERT","lineNumber":63,"content":"      // Better fallback using more comprehensive timezone detection"},{"type":"INSERT","lineNumber":64,"content":"      timezoneName = _detectTimezoneFromOffset(deviceOffsetHours, deviceOffsetMinutes);"},{"type":"INSERT","lineNumber":65,"content":"      print('DEBUG: Using detected timezone: $timezoneName');"},{"type":"INSERT","lineNumber":68,"content":"    "},{"type":"INSERT","lineNumber":69,"content":"    // Verify the timezone was set correctly"},{"type":"INSERT","lineNumber":70,"content":"    final tzLocal = tz.local;"},{"type":"INSERT","lineNumber":71,"content":"    final tzNow = tz.TZDateTime.now(tzLocal);"},{"type":"INSERT","lineNumber":72,"content":"    print('DEBUG: Timezone set to: ${tzLocal.name}');"},{"type":"INSERT","lineNumber":73,"content":"    print('DEBUG: Current TZ time: $tzNow');"},{"type":"INSERT","lineNumber":74,"content":"    print('DEBUG: Current device time: $now');"},{"type":"INSERT","lineNumber":75,"content":"    print('DEBUG: TZ offset matches device: ${tzNow.timeZoneOffset == deviceOffset}');"},{"type":"INSERT","lineNumber":76,"content":"    "},{"type":"INSERT","lineNumber":78,"content":"    print('DEBUG: Error setting timezone: $e');"},{"type":"DELETE","lineNumber":82,"oldContent":"      tz.setLocalLocation(tz.getLocation('America/Los_Angeles'));"},{"type":"INSERT","lineNumber":81,"content":"      // Use UTC as ultimate fallback"},{"type":"INSERT","lineNumber":82,"content":"      tz.setLocalLocation(tz.UTC);"},{"type":"INSERT","lineNumber":83,"content":"      print('DEBUG: Fallback to UTC timezone');"},{"type":"INSERT","lineNumber":85,"content":"      print('DEBUG: Critical timezone error: $fallbackError');"},{"type":"DELETE","lineNumber":89,"oldContent":"Future<String?> _getSystemTimezone() async {"},{"type":"DELETE","lineNumber":90,"oldContent":"  try {"},{"type":"DELETE","lineNumber":91,"oldContent":"    // This would require platform-specific implementation"},{"type":"DELETE","lineNumber":92,"oldContent":"    // For now, return null to use the fallback method"},{"type":"DELETE","lineNumber":93,"oldContent":"    return null;"},{"type":"DELETE","lineNumber":94,"oldContent":"  } catch (e) {"},{"type":"DELETE","lineNumber":95,"oldContent":"    return null;"},{"type":"INSERT","lineNumber":91,"content":"String _detectTimezoneFromOffset(int hours, int minutes) {"},{"type":"INSERT","lineNumber":92,"content":"  // More comprehensive timezone detection"},{"type":"INSERT","lineNumber":93,"content":"  final totalMinutes = hours * 60 + minutes;"},{"type":"INSERT","lineNumber":94,"content":"  "},{"type":"INSERT","lineNumber":95,"content":"  // Common timezone mappings with better accuracy"},{"type":"INSERT","lineNumber":96,"content":"  switch (totalMinutes) {"},{"type":"INSERT","lineNumber":97,"content":"    case -720: return 'Pacific/Wake'; // UTC-12"},{"type":"INSERT","lineNumber":98,"content":"    case -660: return 'Pacific/Midway'; // UTC-11"},{"type":"INSERT","lineNumber":99,"content":"    case -600: return 'Pacific/Honolulu'; // UTC-10"},{"type":"INSERT","lineNumber":100,"content":"    case -540: return 'America/Anchorage'; // UTC-9"},{"type":"INSERT","lineNumber":101,"content":"    case -480: return 'America/Los_Angeles'; // UTC-8"},{"type":"INSERT","lineNumber":102,"content":"    case -420: return 'America/Denver'; // UTC-7"},{"type":"INSERT","lineNumber":103,"content":"    case -360: return 'America/Chicago'; // UTC-6"},{"type":"INSERT","lineNumber":104,"content":"    case -300: return 'America/New_York'; // UTC-5"},{"type":"INSERT","lineNumber":105,"content":"    case -240: return 'America/Halifax'; // UTC-4"},{"type":"INSERT","lineNumber":106,"content":"    case -180: return 'America/Sao_Paulo'; // UTC-3"},{"type":"INSERT","lineNumber":107,"content":"    case -120: return 'America/Noronha'; // UTC-2"},{"type":"INSERT","lineNumber":108,"content":"    case -60: return 'Atlantic/Azores'; // UTC-1"},{"type":"INSERT","lineNumber":109,"content":"    case 0: return 'Europe/London'; // UTC+0"},{"type":"INSERT","lineNumber":110,"content":"    case 60: return 'Europe/Paris'; // UTC+1"},{"type":"INSERT","lineNumber":111,"content":"    case 120: return 'Europe/Berlin'; // UTC+2"},{"type":"INSERT","lineNumber":112,"content":"    case 180: return 'Europe/Moscow'; // UTC+3"},{"type":"INSERT","lineNumber":113,"content":"    case 240: return 'Asia/Dubai'; // UTC+4"},{"type":"INSERT","lineNumber":114,"content":"    case 300: return 'Asia/Karachi'; // UTC+5"},{"type":"INSERT","lineNumber":115,"content":"    case 330: return 'Asia/Kolkata'; // UTC+5:30"},{"type":"INSERT","lineNumber":116,"content":"    case 360: return 'Asia/Dhaka'; // UTC+6"},{"type":"INSERT","lineNumber":117,"content":"    case 420: return 'Asia/Bangkok'; // UTC+7"},{"type":"INSERT","lineNumber":118,"content":"    case 480: return 'Asia/Shanghai'; // UTC+8"},{"type":"INSERT","lineNumber":119,"content":"    case 540: return 'Asia/Tokyo'; // UTC+9"},{"type":"INSERT","lineNumber":120,"content":"    case 570: return 'Australia/Adelaide'; // UTC+9:30"},{"type":"INSERT","lineNumber":121,"content":"    case 600: return 'Australia/Sydney'; // UTC+10"},{"type":"INSERT","lineNumber":122,"content":"    case 660: return 'Pacific/Guadalcanal'; // UTC+11"},{"type":"INSERT","lineNumber":123,"content":"    case 720: return 'Pacific/Fiji'; // UTC+12"},{"type":"INSERT","lineNumber":124,"content":"    default:"},{"type":"INSERT","lineNumber":125,"content":"      // For unusual offsets, try to find closest match"},{"type":"INSERT","lineNumber":126,"content":"      if (totalMinutes < -720) return 'Pacific/Wake';"},{"type":"INSERT","lineNumber":127,"content":"      if (totalMinutes > 720) return 'Pacific/Fiji';"},{"type":"INSERT","lineNumber":128,"content":"      "},{"type":"INSERT","lineNumber":129,"content":"      // Find closest standard timezone"},{"type":"INSERT","lineNumber":130,"content":"      final standardOffsets = [-720, -660, -600, -540, -480, -420, -360, -300, -240, -180, -120, -60, 0, 60, 120, 180, 240, 300, 330, 360, 420, 480, 540, 570, 600, 660, 720];"},{"type":"INSERT","lineNumber":131,"content":"      int closest = standardOffsets.first;"},{"type":"INSERT","lineNumber":132,"content":"      int minDiff = (totalMinutes - closest).abs();"},{"type":"INSERT","lineNumber":133,"content":"      "},{"type":"INSERT","lineNumber":134,"content":"      for (int offset in standardOffsets) {"},{"type":"INSERT","lineNumber":135,"content":"        int diff = (totalMinutes - offset).abs();"},{"type":"INSERT","lineNumber":136,"content":"        if (diff < minDiff) {"},{"type":"INSERT","lineNumber":137,"content":"          minDiff = diff;"},{"type":"INSERT","lineNumber":138,"content":"          closest = offset;"},{"type":"INSERT","lineNumber":139,"content":"        }"},{"type":"INSERT","lineNumber":140,"content":"      }"},{"type":"INSERT","lineNumber":141,"content":"      "},{"type":"INSERT","lineNumber":142,"content":"      return _detectTimezoneFromOffset(closest ~/ 60, closest % 60);"}]},{"timestamp":1754494059786,"changes":[{"type":"MODIFY","lineNumber":48,"content":"    // Get device local time info","oldContent":"    // Get device local time info"},{"type":"DELETE","lineNumber":51,"oldContent":"      tz.setLocalLocation(tz.getLocation(timezoneName));"},{"type":"DELETE","lineNumber":53,"oldContent":"    } else {"},{"type":"INSERT","lineNumber":61,"content":"      tz.setLocalLocation(tz.getLocation(timezoneName));"},{"type":"INSERT","lineNumber":62,"content":"    } else {"},{"type":"INSERT","lineNumber":66,"content":"      tz.setLocalLocation(tz.getLocation(timezoneName));"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"      tz.setLocalLocation(tz.getLocation(timezoneName));"},{"type":"DELETE","lineNumber":76,"oldContent":"    print('DEBUG: Error setting timezone: $e');"},{"type":"DELETE","lineNumber":77,"oldContent":"    }"},{"type":"INSERT","lineNumber":78,"content":"    print('DEBUG: Error setting timezone: $e');"},{"type":"MODIFY","lineNumber":81,"content":"      // Use UTC as ultimate fallback","oldContent":"      // Use UTC as ultimate fallback"},{"type":"MODIFY","lineNumber":86,"content":"      AppLogger.error('Fallback timezone setting failed', fallbackError);","oldContent":"      AppLogger.error('Fallback timezone setting failed', fallbackError);"},{"type":"INSERT","lineNumber":91,"content":"Future<String?> _getSystemTimezone() async {"},{"type":"INSERT","lineNumber":92,"content":"  try {"},{"type":"INSERT","lineNumber":93,"content":"    // This would require platform-specific implementation"},{"type":"INSERT","lineNumber":94,"content":"    // For now, return null to use the fallback method"},{"type":"INSERT","lineNumber":95,"content":"    return null;"},{"type":"INSERT","lineNumber":96,"content":"  } catch (e) {"},{"type":"INSERT","lineNumber":97,"content":"    return null;"},{"type":"INSERT","lineNumber":98,"content":"  }"},{"type":"INSERT","lineNumber":99,"content":"}"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"DELETE","lineNumber":97,"oldContent":"  }"},{"type":"DELETE","lineNumber":99,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"class MyApp extends ConsumerWidget {"},{"type":"DELETE","lineNumber":105,"oldContent":"  const MyApp({super.key});"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"  @override"},{"type":"DELETE","lineNumber":111,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"DELETE","lineNumber":113,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    return MaterialApp.router("},{"type":"DELETE","lineNumber":119,"oldContent":"      title: 'HabitV8',"},{"type":"DELETE","lineNumber":121,"oldContent":"      theme: themeState.lightTheme,"},{"type":"DELETE","lineNumber":123,"oldContent":"      darkTheme: themeState.darkTheme,"},{"type":"DELETE","lineNumber":125,"oldContent":"      themeMode: themeState.themeMode,"},{"type":"DELETE","lineNumber":127,"oldContent":"      routerConfig: _router,"},{"type":"DELETE","lineNumber":129,"oldContent":"    );"},{"type":"DELETE","lineNumber":131,"oldContent":"  }"},{"type":"DELETE","lineNumber":133,"oldContent":"}"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"final GoRouter _router = GoRouter("},{"type":"DELETE","lineNumber":139,"oldContent":"  initialLocation: '/', // This will be overridden by the navigation shell"},{"type":"DELETE","lineNumber":141,"oldContent":"  routes: ["},{"type":"DELETE","lineNumber":143,"oldContent":"    ShellRoute("},{"type":"DELETE","lineNumber":145,"oldContent":"      builder: (context, state, child) {"},{"type":"DELETE","lineNumber":147,"oldContent":"        return MainNavigationShell(child: child);"},{"type":"DELETE","lineNumber":149,"oldContent":"      },"},{"type":"DELETE","lineNumber":151,"oldContent":"      routes: ["},{"type":"DELETE","lineNumber":153,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":155,"oldContent":"          path: '/timeline',"},{"type":"DELETE","lineNumber":157,"oldContent":"          builder: (context, state) => const TimelineScreen(),"},{"type":"DELETE","lineNumber":159,"oldContent":"        ),"},{"type":"DELETE","lineNumber":161,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":163,"oldContent":"          path: '/',"},{"type":"DELETE","lineNumber":165,"oldContent":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"DELETE","lineNumber":167,"oldContent":"        ),"},{"type":"DELETE","lineNumber":169,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":171,"oldContent":"          path: '/all-habits',"},{"type":"DELETE","lineNumber":173,"oldContent":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"DELETE","lineNumber":175,"oldContent":"        ),"},{"type":"DELETE","lineNumber":177,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":179,"oldContent":"          path: '/stats',"},{"type":"DELETE","lineNumber":181,"oldContent":"          builder: (context, state) => const StatsScreen(),"},{"type":"DELETE","lineNumber":183,"oldContent":"        ),"},{"type":"DELETE","lineNumber":185,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":187,"oldContent":"          path: '/insights',"},{"type":"INSERT","lineNumber":153,"content":"  }"},{"type":"INSERT","lineNumber":154,"content":"}"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"class MyApp extends ConsumerWidget {"},{"type":"INSERT","lineNumber":157,"content":"  const MyApp({super.key});"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"  @override"},{"type":"INSERT","lineNumber":160,"content":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":161,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":163,"content":"    return MaterialApp.router("},{"type":"INSERT","lineNumber":164,"content":"      title: 'HabitV8',"},{"type":"INSERT","lineNumber":165,"content":"      theme: themeState.lightTheme,"},{"type":"INSERT","lineNumber":166,"content":"      darkTheme: themeState.darkTheme,"},{"type":"INSERT","lineNumber":167,"content":"      themeMode: themeState.themeMode,"},{"type":"INSERT","lineNumber":168,"content":"      routerConfig: _router,"},{"type":"INSERT","lineNumber":169,"content":"    );"},{"type":"INSERT","lineNumber":170,"content":"  }"},{"type":"INSERT","lineNumber":171,"content":"}"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"final GoRouter _router = GoRouter("},{"type":"INSERT","lineNumber":174,"content":"  initialLocation: '/', // This will be overridden by the navigation shell"},{"type":"INSERT","lineNumber":175,"content":"  routes: ["},{"type":"INSERT","lineNumber":176,"content":"    ShellRoute("},{"type":"INSERT","lineNumber":177,"content":"      builder: (context, state, child) {"},{"type":"INSERT","lineNumber":178,"content":"        return MainNavigationShell(child: child);"},{"type":"INSERT","lineNumber":179,"content":"      },"},{"type":"INSERT","lineNumber":180,"content":"      routes: ["},{"type":"INSERT","lineNumber":181,"content":"        GoRoute("},{"type":"INSERT","lineNumber":182,"content":"          path: '/timeline',"},{"type":"INSERT","lineNumber":183,"content":"          builder: (context, state) => const TimelineScreen(),"},{"type":"INSERT","lineNumber":184,"content":"        ),"},{"type":"INSERT","lineNumber":185,"content":"        GoRoute("},{"type":"INSERT","lineNumber":186,"content":"          path: '/',"},{"type":"INSERT","lineNumber":187,"content":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"INSERT","lineNumber":188,"content":"        ),"},{"type":"INSERT","lineNumber":189,"content":"        GoRoute("},{"type":"INSERT","lineNumber":190,"content":"          path: '/all-habits',"},{"type":"INSERT","lineNumber":191,"content":"          builder: (context, state) => const AllHabitsScreen(),"},{"type":"INSERT","lineNumber":192,"content":"        ),"},{"type":"INSERT","lineNumber":193,"content":"        GoRoute("},{"type":"INSERT","lineNumber":194,"content":"          path: '/stats',"},{"type":"INSERT","lineNumber":195,"content":"          builder: (context, state) => const StatsScreen(),"},{"type":"INSERT","lineNumber":196,"content":"        ),"},{"type":"INSERT","lineNumber":197,"content":"        GoRoute("},{"type":"INSERT","lineNumber":198,"content":"          path: '/insights',"}]},{"timestamp":1754494119499,"changes":[{"type":"INSERT","lineNumber":47,"content":""},{"type":"DELETE","lineNumber":48,"oldContent":"    // Get device local time info"},{"type":"MODIFY","lineNumber":53,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":55,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":58,"oldContent":"    "},{"type":"DELETE","lineNumber":59,"oldContent":"      tz.setLocalLocation(tz.getLocation(timezoneName));"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"MODIFY","lineNumber":61,"content":"      tz.setLocalLocation(tz.getLocation(timezoneName));","oldContent":"    } else {"},{"type":"INSERT","lineNumber":62,"content":"    } else {"},{"type":"MODIFY","lineNumber":68,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":76,"oldContent":"    "},{"type":"DELETE","lineNumber":77,"oldContent":"    print('DEBUG: Error setting timezone: $e');"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":78,"content":"    print('DEBUG: Error setting timezone: $e');"},{"type":"INSERT","lineNumber":80,"content":"    try {"},{"type":"DELETE","lineNumber":81,"oldContent":"      // Use UTC as ultimate fallback"},{"type":"INSERT","lineNumber":85,"content":"      print('DEBUG: Critical timezone error: $fallbackError');"},{"type":"DELETE","lineNumber":86,"oldContent":"      AppLogger.error('Fallback timezone setting failed', fallbackError);"},{"type":"DELETE","lineNumber":92,"oldContent":"String _detectTimezoneFromOffset(int hours, int minutes) {"},{"type":"DELETE","lineNumber":94,"oldContent":"  // More comprehensive timezone detection"},{"type":"DELETE","lineNumber":96,"oldContent":"  final totalMinutes = hours * 60 + minutes;"},{"type":"DELETE","lineNumber":98,"oldContent":"  "},{"type":"DELETE","lineNumber":100,"oldContent":"  // Common timezone mappings with better accuracy"},{"type":"DELETE","lineNumber":102,"oldContent":"  switch (totalMinutes) {"},{"type":"DELETE","lineNumber":105,"oldContent":"    case -720: return 'Pacific/Wake'; // UTC-12"},{"type":"INSERT","lineNumber":101,"content":"String _detectTimezoneFromOffset(int hours, int minutes) {"},{"type":"INSERT","lineNumber":102,"content":"  // More comprehensive timezone detection"},{"type":"INSERT","lineNumber":103,"content":"  final totalMinutes = hours * 60 + minutes;"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"  // Common timezone mappings with better accuracy"},{"type":"INSERT","lineNumber":106,"content":"  switch (totalMinutes) {"},{"type":"INSERT","lineNumber":107,"content":"    case -720: return 'Pacific/Wake'; // UTC-12"},{"type":"INSERT","lineNumber":135,"content":"      // For unusual offsets, try to find closest match"},{"type":"INSERT","lineNumber":136,"content":"      if (totalMinutes < -720) return 'Pacific/Wake';"},{"type":"INSERT","lineNumber":137,"content":"      if (totalMinutes > 720) return 'Pacific/Fiji';"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"      // Find closest standard timezone"},{"type":"INSERT","lineNumber":140,"content":"      final standardOffsets = [-720, -660, -600, -540, -480, -420, -360, -300, -240, -180, -120, -60, 0, 60, 120, 180, 240, 300, 330, 360, 420, 480, 540, 570, 600, 660, 720];"},{"type":"INSERT","lineNumber":141,"content":"      int closest = standardOffsets.first;"},{"type":"INSERT","lineNumber":142,"content":"      int minDiff = (totalMinutes - closest).abs();"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"      for (int offset in standardOffsets) {"},{"type":"INSERT","lineNumber":145,"content":"        int diff = (totalMinutes - offset).abs();"},{"type":"INSERT","lineNumber":146,"content":"        if (diff < minDiff) {"},{"type":"INSERT","lineNumber":147,"content":"          minDiff = diff;"},{"type":"INSERT","lineNumber":148,"content":"          closest = offset;"},{"type":"INSERT","lineNumber":149,"content":"        }"},{"type":"INSERT","lineNumber":150,"content":"      }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"      return _detectTimezoneFromOffset(closest ~/ 60, closest % 60);"},{"type":"DELETE","lineNumber":137,"oldContent":"      // For unusual offsets, try to find closest match"},{"type":"DELETE","lineNumber":140,"oldContent":"      if (totalMinutes < -720) return 'Pacific/Wake';"},{"type":"DELETE","lineNumber":143,"oldContent":"      if (totalMinutes > 720) return 'Pacific/Fiji';"},{"type":"DELETE","lineNumber":146,"oldContent":"      "},{"type":"DELETE","lineNumber":149,"oldContent":"      // Find closest standard timezone"},{"type":"DELETE","lineNumber":152,"oldContent":"      final standardOffsets = [-720, -660, -600, -540, -480, -420, -360, -300, -240, -180, -120, -60, 0, 60, 120, 180, 240, 300, 330, 360, 420, 480, 540, 570, 600, 660, 720];"},{"type":"DELETE","lineNumber":155,"oldContent":"      int closest = standardOffsets.first;"},{"type":"DELETE","lineNumber":158,"oldContent":"      int minDiff = (totalMinutes - closest).abs();"},{"type":"DELETE","lineNumber":161,"oldContent":"      "},{"type":"DELETE","lineNumber":164,"oldContent":"      for (int offset in standardOffsets) {"},{"type":"DELETE","lineNumber":167,"oldContent":"        int diff = (totalMinutes - offset).abs();"},{"type":"DELETE","lineNumber":170,"oldContent":"        if (diff < minDiff) {"},{"type":"DELETE","lineNumber":173,"oldContent":"          minDiff = diff;"},{"type":"DELETE","lineNumber":176,"oldContent":"          closest = offset;"},{"type":"DELETE","lineNumber":179,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":"      }"},{"type":"DELETE","lineNumber":185,"oldContent":"      "},{"type":"DELETE","lineNumber":188,"oldContent":"      return _detectTimezoneFromOffset(closest ~/ 60, closest % 60);"},{"type":"DELETE","lineNumber":190,"oldContent":"          builder: (context, state) => const InsightsScreen(),"},{"type":"MODIFY","lineNumber":192,"content":"        ),","oldContent":"        ),"},{"type":"INSERT","lineNumber":194,"content":"          path: '/stats',"},{"type":"INSERT","lineNumber":195,"content":"          builder: (context, state) => const StatsScreen(),"},{"type":"DELETE","lineNumber":196,"oldContent":"          path: '/settings',"},{"type":"INSERT","lineNumber":198,"content":"          path: '/insights',"},{"type":"INSERT","lineNumber":199,"content":"          builder: (context, state) => const InsightsScreen(),"},{"type":"INSERT","lineNumber":200,"content":"        ),"},{"type":"INSERT","lineNumber":201,"content":"        GoRoute("},{"type":"INSERT","lineNumber":202,"content":"          path: '/settings',"},{"type":"DELETE","lineNumber":199,"oldContent":"          path: '/stats',"},{"type":"DELETE","lineNumber":201,"oldContent":"          builder: (context, state) => const StatsScreen(),"},{"type":"DELETE","lineNumber":203,"oldContent":"        ),"},{"type":"DELETE","lineNumber":205,"oldContent":"        GoRoute("},{"type":"DELETE","lineNumber":207,"oldContent":"          path: '/insights',"}]},{"timestamp":1754505990855,"changes":[{"type":"MODIFY","lineNumber":47,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":53,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":55,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":58,"content":"    ","oldContent":""},{"type":"INSERT","lineNumber":60,"content":"      print('DEBUG: Using system timezone: $timezoneName');"},{"type":"DELETE","lineNumber":62,"oldContent":"      print('DEBUG: Using system timezone: $timezoneName');"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":77,"oldContent":"    print('DEBUG: Error setting timezone: $e');"},{"type":"INSERT","lineNumber":76,"content":"    "},{"type":"INSERT","lineNumber":78,"content":"    print('DEBUG: Error setting timezone: $e');"},{"type":"DELETE","lineNumber":96,"oldContent":"String _detectTimezoneFromOffset(int hours, int minutes) {"},{"type":"DELETE","lineNumber":98,"oldContent":"  // More comprehensive timezone detection"},{"type":"DELETE","lineNumber":99,"oldContent":"  final totalMinutes = hours * 60 + minutes;"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"INSERT","lineNumber":99,"content":"}"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"String _detectTimezoneFromOffset(int hours, int minutes) {"},{"type":"INSERT","lineNumber":102,"content":"  // More comprehensive timezone detection"},{"type":"INSERT","lineNumber":103,"content":"  final totalMinutes = hours * 60 + minutes;"},{"type":"INSERT","lineNumber":104,"content":"  "},{"type":"DELETE","lineNumber":105,"oldContent":"}"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"  }"},{"type":"DELETE","lineNumber":138,"oldContent":"}"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"INSERT","lineNumber":138,"content":"      "},{"type":"DELETE","lineNumber":143,"oldContent":"class MyApp extends ConsumerWidget {"},{"type":"DELETE","lineNumber":146,"oldContent":"  const MyApp({super.key});"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"INSERT","lineNumber":143,"content":"      "},{"type":"DELETE","lineNumber":151,"oldContent":"  @override"},{"type":"DELETE","lineNumber":153,"oldContent":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"DELETE","lineNumber":156,"oldContent":"    final themeState = ref.watch(themeProvider);"},{"type":"DELETE","lineNumber":158,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":"    return MaterialApp.router("},{"type":"INSERT","lineNumber":151,"content":"      "},{"type":"INSERT","lineNumber":152,"content":"      return _detectTimezoneFromOffset(closest ~/ 60, closest % 60);"},{"type":"INSERT","lineNumber":153,"content":"  }"},{"type":"INSERT","lineNumber":154,"content":"}"},{"type":"INSERT","lineNumber":156,"content":"class MyApp extends ConsumerWidget {"},{"type":"INSERT","lineNumber":157,"content":"  const MyApp({super.key});"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"  @override"},{"type":"INSERT","lineNumber":160,"content":"  Widget build(BuildContext context, WidgetRef ref) {"},{"type":"INSERT","lineNumber":161,"content":"    final themeState = ref.watch(themeProvider);"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":163,"content":"    return MaterialApp.router("},{"type":"DELETE","lineNumber":164,"oldContent":"      return _detectTimezoneFromOffset(closest ~/ 60, closest % 60);"},{"type":"DELETE","lineNumber":191,"oldContent":"        ),"},{"type":"DELETE","lineNumber":193,"oldContent":"          path: '/stats',"},{"type":"INSERT","lineNumber":192,"content":"        ),"},{"type":"INSERT","lineNumber":194,"content":"          path: '/stats',"},{"type":"DELETE","lineNumber":199,"oldContent":"          builder: (context, state) => const SettingsScreen(),"},{"type":"DELETE","lineNumber":202,"oldContent":"        ),"},{"type":"INSERT","lineNumber":203,"content":"          builder: (context, state) => const SettingsScreen(),"},{"type":"INSERT","lineNumber":204,"content":"        ),"}]}]},"C:/HabitV8/lib/services/cache_service.dart":{"filePath":"C:/HabitV8/lib/services/cache_service.dart","baseContent":"import 'dart:collection';\n\n/// A smart caching service for computed values with automatic invalidation\nclass CacheService {\n  static final CacheService _instance = CacheService._internal();\n  factory CacheService() => _instance;\n  CacheService._internal();\n\n  // Cache storage with expiration times\n  final Map<String, _CacheEntry> _cache = {};\n  \n  // Dependencies tracking - which cache keys depend on which data sources\n  final Map<String, Set<String>> _dependencies = {};\n  \n  // Data version tracking to detect changes\n  final Map<String, int> _dataVersions = {};\n\n  /// Get a cached value or compute it if not cached/expired\n  T getOrCompute<T>(\n    String key,\n    T Function() computeFunction, {\n    Duration? ttl,\n    List<String>? dependsOn,\n  }) {\n    final now = DateTime.now();\n    final entry = _cache[key];\n\n    // Check if cache is valid\n    if (entry != null && \n        (entry.expiresAt == null || entry.expiresAt!.isAfter(now)) &&\n        _areDependenciesValid(key)) {\n      return entry.value as T;\n    }\n\n    // Compute new value\n    final value = computeFunction();\n    \n    // Store in cache\n    _cache[key] = _CacheEntry(\n      value: value,\n      createdAt: now,\n      expiresAt: ttl != null ? now.add(ttl) : null,\n    );\n\n    // Track dependencies\n    if (dependsOn != null) {\n      _dependencies[key] = dependsOn.toSet();\n    }\n\n    return value;\n  }\n\n  /// Invalidate cache entries that depend on the given data source\n  void invalidateDependents(String dataSource) {\n    final keysToRemove = <String>[];\n    \n    _dependencies.forEach((key, dependencies) {\n      if (dependencies.contains(dataSource)) {\n        keysToRemove.add(key);\n      }\n    });\n\n    for (final key in keysToRemove) {\n      _cache.remove(key);\n      _dependencies.remove(key);\n    }\n\n    // Update data version to track changes\n    _dataVersions[dataSource] = (_dataVersions[dataSource] ?? 0) + 1;\n  }\n\n  /// Clear specific cache entry\n  void invalidate(String key) {\n    _cache.remove(key);\n    _dependencies.remove(key);\n  }\n\n  /// Clear all cache entries\n  void clearAll() {\n    _cache.clear();\n    _dependencies.clear();\n    _dataVersions.clear();\n  }\n\n  /// Check if dependencies are still valid\n  bool _areDependenciesValid(String key) {\n    final dependencies = _dependencies[key];\n    if (dependencies == null) return true;\n\n    final entry = _cache[key];\n    if (entry == null) return false;\n\n    // Check if any dependency has been updated since cache entry was created\n    for (final dep in dependencies) {\n      final depVersion = _dataVersions[dep] ?? 0;\n      final entryCreationVersion = entry.dependencyVersions[dep] ?? 0;\n      if (depVersion > entryCreationVersion) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /// Get cache statistics for monitoring\n  CacheStats getStats() {\n    final now = DateTime.now();\n    var validEntries = 0;\n    var expiredEntries = 0;\n\n    _cache.forEach((key, entry) {\n      if (entry.expiresAt == null || entry.expiresAt!.isAfter(now)) {\n        validEntries++;\n      } else {\n        expiredEntries++;\n      }\n    });\n\n    return CacheStats(\n      totalEntries: _cache.length,\n      validEntries: validEntries,\n      expiredEntries: expiredEntries,\n      dependencies: _dependencies.length,\n    );\n  }\n\n  /// Clear expired entries to free memory\n  void cleanup() {\n    final now = DateTime.now();\n    final keysToRemove = <String>[];\n\n    _cache.forEach((key, entry) {\n      if (entry.expiresAt != null && entry.expiresAt!.isBefore(now)) {\n        keysToRemove.add(key);\n      }\n    });\n\n    for (final key in keysToRemove) {\n      _cache.remove(key);\n      _dependencies.remove(key);\n    }\n  }\n}\n\nclass _CacheEntry {\n  final dynamic value;\n  final DateTime createdAt;\n  final DateTime? expiresAt;\n  final Map<String, int> dependencyVersions;\n\n  _CacheEntry({\n    required this.value,\n    required this.createdAt,\n    this.expiresAt,\n  }) : dependencyVersions = Map.from(CacheService()._dataVersions);\n}\n\nclass CacheStats {\n  final int totalEntries;\n  final int validEntries;\n  final int expiredEntries;\n  final int dependencies;\n\n  CacheStats({\n    required this.totalEntries,\n    required this.validEntries,\n    required this.expiredEntries,\n    required this.dependencies,\n  });\n\n  double get hitRate {\n    final total = totalEntries;\n    return total > 0 ? validEntries / total : 0.0;\n  }\n}\n","baseTimestamp":1754457283107},"C:/HabitV8/lib/services/habit_stats_service.dart":{"filePath":"C:/HabitV8/lib/services/habit_stats_service.dart","baseContent":"import 'dart:math' as math;\nimport '../domain/model/habit.dart';\nimport 'cache_service.dart';\n\n/// Service for computing and caching habit statistics\nclass HabitStatsService {\n  static final HabitStatsService _instance = HabitStatsService._internal();\n  factory HabitStatsService() => _instance;\n  HabitStatsService._internal();\n\n  final CacheService _cache = CacheService();\n\n  /// Get cached completion rate for a habit\n  double getCompletionRate(Habit habit, {int days = 30}) {\n    final cacheKey = 'completion_rate_${habit.id}_${days}d';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateCompletionRate(habit, days),\n      ttl: const Duration(hours: 1), // Cache for 1 hour\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Get cached streak information for a habit\n  StreakInfo getStreakInfo(Habit habit) {\n    final cacheKey = 'streak_info_${habit.id}';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateStreakInfo(habit),\n      ttl: const Duration(hours: 1),\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Get cached weekly completion pattern\n  List<double> getWeeklyPattern(Habit habit, {int weeks = 4}) {\n    final cacheKey = 'weekly_pattern_${habit.id}_${weeks}w';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateWeeklyPattern(habit, weeks),\n      ttl: const Duration(hours: 6), // Cache for 6 hours\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Get cached monthly statistics\n  MonthlyStats getMonthlyStats(Habit habit) {\n    final cacheKey = 'monthly_stats_${habit.id}';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateMonthlyStats(habit),\n      ttl: const Duration(hours: 12), // Cache for 12 hours\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Get cached consistency score (0-100)\n  double getConsistencyScore(Habit habit) {\n    final cacheKey = 'consistency_score_${habit.id}';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateConsistencyScore(habit),\n      ttl: const Duration(hours: 2),\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Get cached habit momentum (trend indicator)\n  double getMomentum(Habit habit) {\n    final cacheKey = 'momentum_${habit.id}';\n    \n    return _cache.getOrCompute(\n      cacheKey,\n      () => _calculateMomentum(habit),\n      ttl: const Duration(hours: 1),\n      dependsOn: ['habit_completions_${habit.id}'],\n    );\n  }\n\n  /// Invalidate all cached data for a specific habit\n  void invalidateHabitCache(String habitId) {\n    _cache.invalidateDependents('habit_completions_$habitId');\n  }\n\n  /// Invalidate all cached statistics\n  void invalidateAllStats() {\n    _cache.clearAll();\n  }\n\n  /// Calculate completion rate (expensive operation)\n  double _calculateCompletionRate(Habit habit, int days) {\n    if (habit.completions.isEmpty) return 0.0;\n\n    final now = DateTime.now();\n    final startDate = now.subtract(Duration(days: days));\n\n    final recentCompletions = habit.completions.where((completion) =>\n        completion.isAfter(startDate) &&\n        completion.isBefore(now.add(const Duration(days: 1)))).length;\n\n    // Expected completions based on frequency\n    int expectedCompletions;\n    switch (habit.frequency) {\n      case HabitFrequency.hourly:\n        expectedCompletions = days * 24; // Assuming 24 opportunities per day\n        break;\n      case HabitFrequency.daily:\n        expectedCompletions = days;\n        break;\n      case HabitFrequency.weekly:\n        expectedCompletions = (days / 7).ceil();\n        break;\n      case HabitFrequency.monthly:\n        expectedCompletions = (days / 30).ceil();\n        break;\n      case HabitFrequency.yearly:\n        expectedCompletions = (days / 365).ceil();\n        break;\n    }\n\n    return (recentCompletions / math.max(expectedCompletions, 1)).clamp(0.0, 1.0);\n  }\n\n  /// Calculate streak information (expensive operation)\n  StreakInfo _calculateStreakInfo(Habit habit) {\n    if (habit.completions.isEmpty) {\n      return StreakInfo(current: 0, longest: 0, lastCompletion: null);\n    }\n\n    final sortedCompletions = habit.completions.toList()\n      ..sort((a, b) => b.compareTo(a)); // Most recent first\n\n    int currentStreak = 0;\n    int longestStreak = 0;\n    int tempStreak = 1;\n\n    final now = DateTime.now();\n    final today = DateTime(now.year, now.month, now.day);\n    final mostRecent = DateTime(\n      sortedCompletions.first.year,\n      sortedCompletions.first.month,\n      sortedCompletions.first.day,\n    );\n\n    // Calculate current streak\n    final daysDiff = today.difference(mostRecent).inDays;\n    if (daysDiff <= 1) {\n      currentStreak = 1;\n\n      for (int i = 1; i < sortedCompletions.length; i++) {\n        final current = DateTime(\n          sortedCompletions[i-1].year,\n          sortedCompletions[i-1].month,\n          sortedCompletions[i-1].day,\n        );\n        final previous = DateTime(\n          sortedCompletions[i].year,\n          sortedCompletions[i].month,\n          sortedCompletions[i].day,\n        );\n\n        if (current.difference(previous).inDays == 1) {\n          currentStreak++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    // Calculate longest streak\n    tempStreak = 1;\n    for (int i = 1; i < sortedCompletions.length; i++) {\n      final current = DateTime(\n        sortedCompletions[i-1].year,\n        sortedCompletions[i-1].month,\n        sortedCompletions[i-1].day,\n      );\n      final previous = DateTime(\n        sortedCompletions[i].year,\n        sortedCompletions[i].month,\n        sortedCompletions[i].day,\n      );\n\n      if (current.difference(previous).inDays == 1) {\n        tempStreak++;\n      } else {\n        longestStreak = math.max(longestStreak, tempStreak);\n        tempStreak = 1;\n      }\n    }\n    longestStreak = math.max(longestStreak, tempStreak);\n\n    return StreakInfo(\n      current: currentStreak,\n      longest: longestStreak,\n      lastCompletion: sortedCompletions.first,\n    );\n  }\n\n  /// Calculate weekly completion pattern\n  List<double> _calculateWeeklyPattern(Habit habit, int weeks) {\n    final pattern = List<double>.filled(7, 0.0); // Monday to Sunday\n    final now = DateTime.now();\n    final startDate = now.subtract(Duration(days: weeks * 7));\n\n    final recentCompletions = habit.completions.where((completion) =>\n        completion.isAfter(startDate)).toList();\n\n    final dayCount = List<int>.filled(7, 0);\n    final totalDays = List<int>.filled(7, 0);\n\n    // Count total possible days for each weekday\n    for (int i = 0; i < weeks * 7; i++) {\n      final date = startDate.add(Duration(days: i));\n      totalDays[date.weekday - 1]++;\n    }\n\n    // Count completions for each weekday\n    for (final completion in recentCompletions) {\n      dayCount[completion.weekday - 1]++;\n    }\n\n    // Calculate completion rate for each weekday\n    for (int i = 0; i < 7; i++) {\n      if (totalDays[i] > 0) {\n        pattern[i] = dayCount[i] / totalDays[i];\n      }\n    }\n\n    return pattern;\n  }\n\n  /// Calculate monthly statistics\n  MonthlyStats _calculateMonthlyStats(Habit habit) {\n    final now = DateTime.now();\n    final thisMonth = DateTime(now.year, now.month);\n    final lastMonth = DateTime(now.year, now.month - 1);\n\n    final thisMonthCompletions = habit.completions.where((c) =>\n        c.year == now.year && c.month == now.month).length;\n    \n    final lastMonthCompletions = habit.completions.where((c) =>\n        c.year == lastMonth.year && c.month == lastMonth.month).length;\n\n    final avgCompletions = habit.completions.isEmpty ? 0.0 :\n        habit.completions.length / _getMonthsSinceCreation(habit);\n\n    return MonthlyStats(\n      thisMonth: thisMonthCompletions,\n      lastMonth: lastMonthCompletions,\n      average: avgCompletions,\n      trend: thisMonthCompletions - lastMonthCompletions,\n    );\n  }\n\n  /// Calculate consistency score\n  double _calculateConsistencyScore(Habit habit) {\n    if (habit.completions.length < 7) return 0.0;\n\n    final now = DateTime.now();\n    final last30Days = now.subtract(const Duration(days: 30));\n    \n    final recentCompletions = habit.completions.where((c) =>\n        c.isAfter(last30Days)).toList()..sort();\n\n    if (recentCompletions.isEmpty) return 0.0;\n\n    // Calculate variance in completion intervals\n    final intervals = <int>[];\n    for (int i = 1; i < recentCompletions.length; i++) {\n      final interval = recentCompletions[i].difference(recentCompletions[i-1]).inDays;\n      intervals.add(interval);\n    }\n\n    if (intervals.isEmpty) return 100.0;\n\n    final mean = intervals.reduce((a, b) => a + b) / intervals.length;\n    final variance = intervals.map((i) => math.pow(i - mean, 2)).reduce((a, b) => a + b) / intervals.length;\n    final standardDeviation = math.sqrt(variance);\n\n    // Lower standard deviation = higher consistency\n    final maxDeviation = 7.0; // Days\n    final consistencyScore = ((maxDeviation - math.min(standardDeviation, maxDeviation)) / maxDeviation) * 100;\n\n    return consistencyScore.clamp(0.0, 100.0);\n  }\n\n  /// Calculate momentum (trend indicator)\n  double _calculateMomentum(Habit habit) {\n    if (habit.completions.length < 14) return 0.0;\n\n    final now = DateTime.now();\n    final last7Days = habit.completions.where((c) =>\n        c.isAfter(now.subtract(const Duration(days: 7)))).length;\n    \n    final previous7Days = habit.completions.where((c) =>\n        c.isAfter(now.subtract(const Duration(days: 14))) &&\n        c.isBefore(now.subtract(const Duration(days: 7)))).length;\n\n    if (previous7Days == 0) return last7Days > 0 ? 1.0 : 0.0;\n\n    return (last7Days - previous7Days) / previous7Days;\n  }\n\n  int _getMonthsSinceCreation(Habit habit) {\n    final now = DateTime.now();\n    final created = habit.createdAt;\n    return ((now.year - created.year) * 12 + (now.month - created.month)).abs();\n  }\n}\n\nclass StreakInfo {\n  final int current;\n  final int longest;\n  final DateTime? lastCompletion;\n\n  StreakInfo({\n    required this.current,\n    required this.longest,\n    this.lastCompletion,\n  });\n}\n\nclass MonthlyStats {\n  final int thisMonth;\n  final int lastMonth;\n  final double average;\n  final int trend;\n\n  MonthlyStats({\n    required this.thisMonth,\n    required this.lastMonth,\n    required this.average,\n    required this.trend,\n  });\n}\n","baseTimestamp":1754457327751,"deltas":[{"timestamp":1754457384964,"changes":[{"type":"INSERT","lineNumber":11,"content":"  "},{"type":"INSERT","lineNumber":12,"content":"  // Expose cache service publicly for habit model access"},{"type":"INSERT","lineNumber":13,"content":"  CacheService get cache => _cache;"}]},{"timestamp":1754457489861,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":""},{"type":"MODIFY","lineNumber":14,"content":"","oldContent":"  /// Get cached completion rate for a habit"},{"type":"INSERT","lineNumber":15,"content":"  /// Get cached completion rate for a habit"}]},{"timestamp":1754459029839,"changes":[{"type":"INSERT","lineNumber":13,"content":"  CacheService get cache => _cache;"},{"type":"DELETE","lineNumber":15,"oldContent":"  CacheService get cache => _cache;"}]},{"timestamp":1754459114529,"changes":[{"type":"MODIFY","lineNumber":11,"content":"","oldContent":"  "}]},{"timestamp":1754459270577,"changes":[{"type":"MODIFY","lineNumber":11,"content":"  ","oldContent":""}]}]},"C:/HabitV8/lib/domain/model/habit.dart":{"filePath":"C:/HabitV8/lib/domain/model/habit.dart","baseContent":"import 'package:hive/hive.dart';\nimport '../services/habit_stats_service.dart';\n\npart 'habit.g.dart';\n\n@HiveType(typeId: 0)\nclass Habit extends HiveObject {\n  @HiveField(0)\n  late String id;\n\n  @HiveField(1)\n  late String name;\n\n  @HiveField(2)\n  String? description;\n\n  @HiveField(3)\n  late String category;\n\n  @HiveField(4)\n  late int colorValue;\n\n  @HiveField(5)\n  late DateTime createdAt;\n\n  @HiveField(6)\n  DateTime? nextDueDate;\n\n  @HiveField(7)\n  late HabitFrequency frequency;\n\n  @HiveField(8)\n  late int targetCount;\n\n  @HiveField(9)\n  List<DateTime> completions = [];\n\n  @HiveField(10)\n  int currentStreak = 0;\n\n  @HiveField(11)\n  int longestStreak = 0;\n\n  @HiveField(12)\n  bool isActive = true;\n\n  @HiveField(13)\n  bool notificationsEnabled = true;\n\n  @HiveField(14)\n  DateTime? notificationTime;\n\n  @HiveField(15)\n  List<int> weeklySchedule = [];\n\n  @HiveField(16)\n  List<int> monthlySchedule = [];\n\n  @HiveField(17)\n  DateTime? reminderTime;\n\n  @HiveField(18)\n  HabitDifficulty difficulty = HabitDifficulty.medium;\n\n  Habit() {\n    id = DateTime.now().millisecondsSinceEpoch.toString();\n  }\n\n  Habit.create({\n    required this.name,\n    this.description,\n    required this.category,\n    required this.colorValue,\n    required this.frequency,\n    this.targetCount = 1,\n    this.notificationsEnabled = true,\n    this.notificationTime,\n    this.reminderTime,\n    this.weeklySchedule = const [],\n    this.monthlySchedule = const [],\n    this.difficulty = HabitDifficulty.medium,\n  }) {\n    id = DateTime.now().millisecondsSinceEpoch.toString();\n    createdAt = DateTime.now();\n    isActive = true;\n    currentStreak = 0;\n    longestStreak = 0;\n    completions = [];\n  }\n\n  // Private cache reference for efficient access\n  static final HabitStatsService _statsService = HabitStatsService();\n\n  // Calculate completion rate based on the last 30 days (now cached)\n  double get completionRate => _statsService.getCompletionRate(this);\n\n  // Get completion rate for specific number of days\n  double getCompletionRate({int days = 30}) =>\n      _statsService.getCompletionRate(this, days: days);\n\n  // Get cached streak information\n  StreakInfo get streakInfo => _statsService.getStreakInfo(this);\n\n  // Override current and longest streak to use cached values\n  int get currentStreakCached => streakInfo.current;\n  int get longestStreakCached => streakInfo.longest;\n\n  // Get weekly completion pattern\n  List<double> get weeklyPattern => _statsService.getWeeklyPattern(this);\n\n  // Get monthly statistics\n  MonthlyStats get monthlyStats => _statsService.getMonthlyStats(this);\n\n  // Get consistency score (0-100)\n  double get consistencyScore => _statsService.getConsistencyScore(this);\n\n  // Get habit momentum\n  double get momentum => _statsService.getMomentum(this);\n\n  // Check if habit was completed today (cached)\n  bool get isCompletedToday {\n    final today = DateTime.now();\n    final todayKey = '${today.year}-${today.month}-${today.day}';\n\n    return HabitStatsService()._cache.getOrCompute(\n      'completed_today_${id}_$todayKey',\n      () => _checkCompletedToday(),\n      ttl: const Duration(hours: 1),\n      dependsOn: ['habit_completions_$id'],\n    );\n  }\n\n  bool _checkCompletedToday() {\n    final now = DateTime.now();\n    final today = DateTime(now.year, now.month, now.day);\n\n    return completions.any((completion) {\n      final completionDay = DateTime(\n        completion.year,\n        completion.month,\n        completion.day,\n      );\n      return completionDay.isAtSameMomentAs(today);\n    });\n  }\n\n  // Get days since last completion (cached)\n  int get daysSinceLastCompletion {\n    return HabitStatsService()._cache.getOrCompute(\n      'days_since_last_${id}',\n      () => _calculateDaysSinceLastCompletion(),\n      ttl: const Duration(hours: 1),\n      dependsOn: ['habit_completions_$id'],\n    );\n  }\n\n  int _calculateDaysSinceLastCompletion() {\n    if (completions.isEmpty) return -1;\n\n    final now = DateTime.now();\n    final lastCompletion = completions.reduce((a, b) => a.isAfter(b) ? a : b);\n    return now.difference(lastCompletion).inDays;\n  }\n\n  // Get next expected completion date (cached)\n  DateTime? get nextExpectedCompletion {\n    return HabitStatsService()._cache.getOrCompute(\n      'next_expected_${id}',\n      () => _calculateNextExpectedCompletion(),\n      ttl: const Duration(hours: 6),\n      dependsOn: ['habit_completions_$id', 'habit_frequency_$id'],\n    );\n  }\n\n  DateTime? _calculateNextExpectedCompletion() {\n    if (completions.isEmpty) return DateTime.now();\n\n    final lastCompletion = completions.reduce((a, b) => a.isAfter(b) ? a : b);\n\n    switch (frequency) {\n      case HabitFrequency.hourly:\n        return lastCompletion.add(const Duration(hours: 1));\n      case HabitFrequency.daily:\n        return lastCompletion.add(const Duration(days: 1));\n      case HabitFrequency.weekly:\n        return lastCompletion.add(const Duration(days: 7));\n      case HabitFrequency.monthly:\n        return DateTime(lastCompletion.year, lastCompletion.month + 1, lastCompletion.day);\n      case HabitFrequency.yearly:\n        return DateTime(lastCompletion.year + 1, lastCompletion.month, lastCompletion.day);\n    }\n  }\n\n  // Check if habit is overdue (cached)\n  bool get isOverdue {\n    return HabitStatsService()._cache.getOrCompute(\n      'is_overdue_${id}',\n      () => _checkIsOverdue(),\n      ttl: const Duration(hours: 1),\n      dependsOn: ['habit_completions_$id', 'habit_frequency_$id'],\n    );\n  }\n\n  bool _checkIsOverdue() {\n    final nextExpected = nextExpectedCompletion;\n    if (nextExpected == null) return false;\n\n    return DateTime.now().isAfter(nextExpected);\n  }\n\n  // Invalidate all cached values for this habit when data changes\n  void invalidateCache() {\n    _statsService.invalidateHabitCache(id);\n  }\n\n  // Override save method to invalidate cache\n  @override\n  Future<void> save() async {\n    await super.save();\n    invalidateCache();\n  }\n\n  // Override delete method to invalidate cache\n  @override\n  Future<void> delete() async {\n    invalidateCache();\n    await super.delete();\n  }\n}\n\n@HiveType(typeId: 1)\nenum HabitFrequency {\n  @HiveField(0)\n  hourly,\n  @HiveField(1)\n  daily,\n  @HiveField(2)\n  weekly,\n  @HiveField(3)\n  monthly,\n  @HiveField(4)\n  yearly,\n}\n\n@HiveType(typeId: 2)\nenum HabitDifficulty {\n  @HiveField(0)\n  easy,\n  @HiveField(1)\n  medium,\n  @HiveField(2)\n  hard,\n}\n","baseTimestamp":1754457357437,"deltas":[{"timestamp":1754457370772,"changes":[{"type":"MODIFY","lineNumber":124,"content":"    return _statsService._cache.getOrCompute(","oldContent":"    return HabitStatsService()._cache.getOrCompute("},{"type":"MODIFY","lineNumber":148,"content":"    return _statsService._cache.getOrCompute(","oldContent":"    return HabitStatsService()._cache.getOrCompute("},{"type":"MODIFY","lineNumber":166,"content":"    return _statsService._cache.getOrCompute(","oldContent":"    return HabitStatsService()._cache.getOrCompute("},{"type":"MODIFY","lineNumber":195,"content":"    return _statsService._cache.getOrCompute(","oldContent":"    return HabitStatsService()._cache.getOrCompute("}]},{"timestamp":1754457400181,"changes":[{"type":"MODIFY","lineNumber":124,"content":"    return _statsService.cache.getOrCompute(","oldContent":"    return _statsService._cache.getOrCompute("},{"type":"MODIFY","lineNumber":148,"content":"    return _statsService.cache.getOrCompute(","oldContent":"    return _statsService._cache.getOrCompute("},{"type":"MODIFY","lineNumber":166,"content":"    return _statsService.cache.getOrCompute(","oldContent":"    return _statsService._cache.getOrCompute("},{"type":"MODIFY","lineNumber":195,"content":"    return _statsService.cache.getOrCompute(","oldContent":"    return _statsService._cache.getOrCompute("}]},{"timestamp":1754458183324,"changes":[{"type":"MODIFY","lineNumber":1,"content":"import '../../services/habit_stats_service.dart';","oldContent":"import '../services/habit_stats_service.dart';"},{"type":"MODIFY","lineNumber":149,"content":"      'days_since_last_$id',","oldContent":"      'days_since_last_${id}',"},{"type":"MODIFY","lineNumber":167,"content":"      'next_expected_$id',","oldContent":"      'next_expected_${id}',"},{"type":"MODIFY","lineNumber":196,"content":"      'is_overdue_$id',","oldContent":"      'is_overdue_${id}',"}]},{"timestamp":1754491420142,"changes":[{"type":"INSERT","lineNumber":64,"content":"  // Add new fields for frequency-specific data"},{"type":"INSERT","lineNumber":65,"content":"  @HiveField(19)"},{"type":"INSERT","lineNumber":66,"content":"  List<int> selectedWeekdays = [];"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"  @HiveField(20)"},{"type":"INSERT","lineNumber":69,"content":"  List<int> selectedMonthDays = [];"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"  @HiveField(21)"},{"type":"INSERT","lineNumber":72,"content":"  List<String> hourlyTimes = []; // Store as string format \"HH:mm\""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"  @HiveField(22)"},{"type":"INSERT","lineNumber":75,"content":"  List<String> selectedYearlyDates = []; // Store as string format \"yyyy-MM-dd\""},{"type":"INSERT","lineNumber":76,"content":""}]},{"timestamp":1754491433839,"changes":[{"type":"DELETE","lineNumber":65,"oldContent":"  Habit() {"},{"type":"DELETE","lineNumber":67,"oldContent":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"DELETE","lineNumber":69,"oldContent":"  }"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"  Habit.create({"},{"type":"DELETE","lineNumber":75,"oldContent":"    required this.name,"},{"type":"DELETE","lineNumber":77,"oldContent":"    this.description,"},{"type":"DELETE","lineNumber":79,"oldContent":"    required this.category,"},{"type":"DELETE","lineNumber":81,"oldContent":"    required this.colorValue,"},{"type":"DELETE","lineNumber":83,"oldContent":"    required this.frequency,"},{"type":"DELETE","lineNumber":85,"oldContent":"    this.targetCount = 1,"},{"type":"DELETE","lineNumber":87,"oldContent":"    this.notificationsEnabled = true,"},{"type":"INSERT","lineNumber":77,"content":"  Habit() {"},{"type":"INSERT","lineNumber":78,"content":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"INSERT","lineNumber":79,"content":"  }"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"  Habit.create({"},{"type":"INSERT","lineNumber":82,"content":"    required this.name,"},{"type":"INSERT","lineNumber":83,"content":"    this.description,"},{"type":"INSERT","lineNumber":84,"content":"    required this.category,"},{"type":"INSERT","lineNumber":85,"content":"    required this.colorValue,"},{"type":"INSERT","lineNumber":86,"content":"    required this.frequency,"},{"type":"INSERT","lineNumber":87,"content":"    this.targetCount = 1,"},{"type":"INSERT","lineNumber":88,"content":"    this.notificationsEnabled = true,"},{"type":"INSERT","lineNumber":94,"content":"    this.selectedWeekdays = const [],"},{"type":"INSERT","lineNumber":95,"content":"    this.selectedMonthDays = const [],"},{"type":"INSERT","lineNumber":96,"content":"    this.hourlyTimes = const [],"},{"type":"INSERT","lineNumber":97,"content":"    this.selectedYearlyDates = const [],"}]},{"timestamp":1754493134361,"changes":[{"type":"INSERT","lineNumber":71,"content":"  @HiveField(21)"},{"type":"INSERT","lineNumber":72,"content":"  List<String> hourlyTimes = []; // Store as string format \"HH:mm\""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"  @HiveField(22)"},{"type":"INSERT","lineNumber":75,"content":"  List<String> selectedYearlyDates = []; // Store as string format \"yyyy-MM-dd\""},{"type":"INSERT","lineNumber":76,"content":""},{"type":"DELETE","lineNumber":73,"oldContent":"  @HiveField(21)"},{"type":"DELETE","lineNumber":76,"oldContent":"  List<String> hourlyTimes = []; // Store as string format \"HH:mm\""},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":"  @HiveField(22)"},{"type":"DELETE","lineNumber":85,"oldContent":"  List<String> selectedYearlyDates = []; // Store as string format \"yyyy-MM-dd\""},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"  }) {"},{"type":"DELETE","lineNumber":97,"oldContent":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"DELETE","lineNumber":99,"oldContent":"    createdAt = DateTime.now();"},{"type":"INSERT","lineNumber":98,"content":"  }) {"},{"type":"INSERT","lineNumber":99,"content":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"INSERT","lineNumber":100,"content":"    createdAt = DateTime.now();"}]},{"timestamp":1754505990517,"changes":[{"type":"DELETE","lineNumber":72,"oldContent":"  Habit() {"},{"type":"DELETE","lineNumber":74,"oldContent":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"MODIFY","lineNumber":77,"content":"  Habit() {","oldContent":"  }"},{"type":"INSERT","lineNumber":78,"content":"    id = DateTime.now().millisecondsSinceEpoch.toString();"},{"type":"INSERT","lineNumber":79,"content":"  }"},{"type":"DELETE","lineNumber":96,"oldContent":"  }) {"},{"type":"INSERT","lineNumber":97,"content":"    this.selectedYearlyDates = const [],"},{"type":"INSERT","lineNumber":98,"content":"  }) {"},{"type":"DELETE","lineNumber":100,"oldContent":"    this.selectedYearlyDates = const [],"}]},{"timestamp":1754508956023,"changes":[{"type":"INSERT","lineNumber":75,"content":"  List<String> selectedYearlyDates = []; // Store as string format \"yyyy-MM-dd\""},{"type":"INSERT","lineNumber":76,"content":""},{"type":"DELETE","lineNumber":77,"oldContent":"  List<String> selectedYearlyDates = []; // Store as string format \"yyyy-MM-dd\""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"MODIFY","lineNumber":97,"content":"    this.selectedYearlyDates = const [],","oldContent":"    this.selectedYearlyDates = const [],"}]},{"timestamp":1754513766563,"changes":[{"type":"MODIFY","lineNumber":77,"content":"  Habit() {","oldContent":"  Habit() {"},{"type":"INSERT","lineNumber":96,"content":"    this.hourlyTimes = const [],"},{"type":"DELETE","lineNumber":97,"oldContent":"    this.selectedYearlyDates = const [],"}]},{"timestamp":1754607296996,"changes":[{"type":"INSERT","lineNumber":76,"content":""},{"type":"DELETE","lineNumber":77,"oldContent":"  Habit() {"}]}]},"C:/HabitV8/lib/ui/screens/create_habit_screen.dart":{"filePath":"C:/HabitV8/lib/ui/screens/create_habit_screen.dart","baseContent":"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:table_calendar/table_calendar.dart';\nimport '../../data/database.dart';\nimport '../../domain/model/habit.dart';\nimport '../../services/notification_service.dart';\nimport '../../services/logging_service.dart';\n\nclass CreateHabitScreen extends ConsumerStatefulWidget {\n  const CreateHabitScreen({super.key});\n\n  @override\n  ConsumerState<CreateHabitScreen> createState() => _CreateHabitScreenState();\n}\n\nclass _CreateHabitScreenState extends ConsumerState<CreateHabitScreen> {\n  final _formKey = GlobalKey<FormState>();\n  final _nameController = TextEditingController();\n  final _descriptionController = TextEditingController();\n\n  HabitFrequency _selectedFrequency = HabitFrequency.daily;\n  String _selectedCategory = 'Health';\n  Color _selectedColor = Colors.blue;\n  bool _notificationsEnabled = true;\n  TimeOfDay? _notificationTime;\n  final List<int> _selectedWeekdays = [];\n  final List<int> _selectedMonthDays = [];\n  final List<TimeOfDay> _hourlyTimes = []; // New: Multiple times for hourly habits\n  final Set<DateTime> _selectedYearlyDates = {}; // New: Selected dates for yearly habits\n  DateTime _focusedMonth = DateTime.now(); // New: For calendar navigation\n  int _targetCount = 1;\n\n  final List<String> _categories = [\n    'Health',\n    'Fitness',\n    'Productivity',\n    'Learning',\n    'Personal',\n    'Social',\n    'Finance',\n    'Mindfulness',\n  ];\n\n  final List<Color> _colors = [\n    Colors.blue,\n    Colors.green,\n    Colors.orange,\n    Colors.purple,\n    Colors.red,\n    Colors.teal,\n    Colors.indigo,\n    Colors.pink,\n    Colors.amber,\n    Colors.cyan,\n  ];\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _descriptionController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Create Habit'),\n        actions: [\n          TextButton(\n            onPressed: _saveHabit,\n            child: const Text('Save'),\n          ),\n        ],\n      ),\n      body: Form(\n        key: _formKey,\n        child: ListView(\n          padding: const EdgeInsets.all(16),\n          children: [\n            _buildBasicInfoSection(),\n            const SizedBox(height: 24),\n            _buildFrequencySection(),\n            const SizedBox(height: 24),\n            _buildCustomizationSection(),\n            const SizedBox(height: 24),\n            _buildNotificationSection(),\n            const SizedBox(height: 32),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildBasicInfoSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Basic Information',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _nameController,\n              decoration: const InputDecoration(\n                labelText: 'Habit Name',\n                hintText: 'e.g., Drink 8 glasses of water',\n                border: OutlineInputBorder(),\n              ),\n              validator: (value) {\n                if (value == null || value.trim().isEmpty) {\n                  return 'Please enter a habit name';\n                }\n                return null;\n              },\n            ),\n            const SizedBox(height: 16),\n            TextFormField(\n              controller: _descriptionController,\n              decoration: const InputDecoration(\n                labelText: 'Description (Optional)',\n                hintText: 'Add more details about your habit',\n                border: OutlineInputBorder(),\n              ),\n              maxLines: 3,\n            ),\n            const SizedBox(height: 16),\n            DropdownButtonFormField<String>(\n              value: _selectedCategory,\n              decoration: const InputDecoration(\n                labelText: 'Category',\n                border: OutlineInputBorder(),\n              ),\n              items: _categories.map((category) {\n                return DropdownMenuItem(\n                  value: category,\n                  child: Text(category),\n                );\n              }).toList(),\n              onChanged: (value) {\n                setState(() {\n                  _selectedCategory = value!;\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildFrequencySection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Frequency',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: HabitFrequency.values.map((frequency) {\n                return ChoiceChip(\n                  label: Text(_getFrequencyDisplayName(frequency)),\n                  selected: _selectedFrequency == frequency,\n                  onSelected: (selected) {\n                    if (selected) {\n                      setState(() {\n                        _selectedFrequency = frequency;\n                        _selectedWeekdays.clear();\n                        _selectedMonthDays.clear();\n                      });\n                    }\n                  },\n                );\n              }).toList(),\n            ),\n            if (_selectedFrequency == HabitFrequency.weekly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select days of the week:',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w500,\n                    ),\n              ),\n              const SizedBox(height: 8),\n              _buildWeekdaySelector(),\n            ],\n            if (_selectedFrequency == HabitFrequency.monthly) ...[\n              const SizedBox(height: 16),\n              Text(\n                'Select days of the month:',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w500,\n                    ),\n              ),\n              const SizedBox(height: 8),\n              _buildMonthDaySelector(),\n            ],\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Text(\n                  'Target count per ${_getFrequencyDisplayName(_selectedFrequency).toLowerCase()}:',\n                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                        fontWeight: FontWeight.w500,\n                      ),\n                ),\n                const SizedBox(width: 16),\n                SizedBox(\n                  width: 80,\n                  child: TextFormField(\n                    initialValue: _targetCount.toString(),\n                    decoration: const InputDecoration(\n                      border: OutlineInputBorder(),\n                      contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),\n                    ),\n                    keyboardType: TextInputType.number,\n                    onChanged: (value) {\n                      final count = int.tryParse(value);\n                      if (count != null && count > 0) {\n                        _targetCount = count;\n                      }\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildWeekdaySelector() {\n    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    return Wrap(\n      spacing: 8,\n      runSpacing: 8,\n      children: List.generate(7, (index) {\n        final dayNumber = index + 1;\n        return FilterChip(\n          label: Text(weekdays[index]),\n          selected: _selectedWeekdays.contains(dayNumber),\n          onSelected: (selected) {\n            setState(() {\n              if (selected) {\n                _selectedWeekdays.add(dayNumber);\n              } else {\n                _selectedWeekdays.remove(dayNumber);\n              }\n            });\n          },\n        );\n      }),\n    );\n  }\n\n  Widget _buildMonthDaySelector() {\n    return Wrap(\n      spacing: 8,\n      runSpacing: 8,\n      children: List.generate(31, (index) {\n        final dayNumber = index + 1;\n        return FilterChip(\n          label: Text(dayNumber.toString()),\n          selected: _selectedMonthDays.contains(dayNumber),\n          onSelected: (selected) {\n            setState(() {\n              if (selected) {\n                _selectedMonthDays.add(dayNumber);\n              } else {\n                _selectedMonthDays.remove(dayNumber);\n              }\n            });\n          },\n        );\n      }),\n    );\n  }\n\n  Widget _buildCustomizationSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Customization',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            Text(\n              'Choose a color:',\n              style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                    fontWeight: FontWeight.w500,\n                  ),\n            ),\n            const SizedBox(height: 8),\n            Wrap(\n              spacing: 8,\n              runSpacing: 8,\n              children: _colors.map((color) {\n                return GestureDetector(\n                  onTap: () {\n                    setState(() {\n                      _selectedColor = color;\n                    });\n                  },\n                  child: Container(\n                    width: 40,\n                    height: 40,\n                    decoration: BoxDecoration(\n                      color: color,\n                      shape: BoxShape.circle,\n                      border: _selectedColor == color\n                          ? Border.all(color: Colors.black, width: 3)\n                          : null,\n                    ),\n                    child: _selectedColor == color\n                        ? const Icon(Icons.check, color: Colors.white)\n                        : null,\n                  ),\n                );\n              }).toList(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildNotificationSection() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'Notifications',\n              style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                    fontWeight: FontWeight.bold,\n                  ),\n            ),\n            const SizedBox(height: 16),\n            SwitchListTile(\n              title: const Text('Enable Notifications'),\n              subtitle: const Text('Get reminded to complete your habit'),\n              value: _notificationsEnabled,\n              onChanged: (value) {\n                setState(() {\n                  _notificationsEnabled = value;\n                  if (!value) {\n                    _notificationTime = null;\n                  }\n                });\n              },\n            ),\n            if (_notificationsEnabled) ...[\n              const SizedBox(height: 8),\n              ListTile(\n                title: const Text('Notification Time'),\n                subtitle: Text(\n                  _notificationTime != null\n                      ? _notificationTime!.format(context)\n                      : 'Not set',\n                ),\n                trailing: const Icon(Icons.access_time),\n                onTap: _selectNotificationTime,\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  String _getFrequencyDisplayName(HabitFrequency frequency) {\n    switch (frequency) {\n      case HabitFrequency.hourly:\n        return 'Hourly';\n      case HabitFrequency.daily:\n        return 'Daily';\n      case HabitFrequency.weekly:\n        return 'Weekly';\n      case HabitFrequency.monthly:\n        return 'Monthly';\n      case HabitFrequency.yearly:\n        return 'Yearly';\n    }\n  }\n\n  Future<void> _selectNotificationTime() async {\n    final TimeOfDay? picked = await showTimePicker(\n      context: context,\n      initialTime: _notificationTime ?? TimeOfDay.now(),\n    );\n    if (picked != null) {\n      setState(() {\n        _notificationTime = picked;\n      });\n    }\n  }\n\n  Future<void> _saveHabit() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    // Validate frequency-specific requirements\n    if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for weekly habits'),\n        ),\n      );\n      return;\n    }\n\n    if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Please select at least one day for monthly habits'),\n        ),\n      );\n      return;\n    }\n\n    try {\n      final habitServiceAsync = ref.read(habitServiceProvider);\n\n      habitServiceAsync.when(\n        data: (habitService) async {\n          final habit = Habit.create(\n            name: _nameController.text.trim(),\n            description: _descriptionController.text.trim().isEmpty\n                ? null\n                : _descriptionController.text.trim(),\n            category: _selectedCategory,\n            colorValue: _selectedColor.toARGB32(),\n            frequency: _selectedFrequency,\n            targetCount: _targetCount,\n            notificationsEnabled: _notificationsEnabled,\n            notificationTime: _notificationTime != null\n                ? DateTime(2024, 1, 1, _notificationTime!.hour, _notificationTime!.minute)\n                : null,\n            weeklySchedule: _selectedWeekdays,\n            monthlySchedule: _selectedMonthDays,\n          );\n\n          await habitService.addHabit(habit);\n\n          // Schedule notifications if enabled\n          if (_notificationsEnabled && _notificationTime != null) {\n            await _scheduleHabitNotifications(habit);\n          }\n\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text(_notificationsEnabled && _notificationTime != null\n                    ? 'Habit created with notifications scheduled!'\n                    : 'Habit created successfully!'),\n                backgroundColor: Colors.green,\n              ),\n            );\n            context.pop();\n          }\n        },\n        loading: () {\n          // Show loading indicator\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('Loading...')),\n            );\n          }\n        },\n        error: (error, stack) {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: Text('Error creating habit: $error'),\n                backgroundColor: Colors.red,\n              ),\n            );\n          }\n        },\n      );\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Error creating habit: $e'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  /// Schedule notifications for the created habit based on its frequency\n  Future<void> _scheduleHabitNotifications(Habit habit) async {\n    if (!habit.notificationsEnabled || habit.notificationTime == null) {\n      return;\n    }\n\n    final notificationTime = habit.notificationTime!;\n    final hour = notificationTime.hour;\n    final minute = notificationTime.minute;\n\n    try {\n      switch (habit.frequency) {\n        case HabitFrequency.daily:\n          // Schedule daily recurring notification\n          await NotificationService.scheduleDailyHabitReminder(\n            habitId: habit.id,\n            habitName: habit.name,\n            reminderTime: notificationTime,\n          );\n          AppLogger.info('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');\n          break;\n\n        case HabitFrequency.weekly:\n          // Schedule notifications for selected weekdays\n          for (int weekday in habit.weeklySchedule) {\n            final now = DateTime.now();\n            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);\n\n            // Find the next occurrence of this weekday\n            while (nextNotification.weekday != weekday) {\n              nextNotification = nextNotification.add(const Duration(days: 1));\n            }\n\n            // If the time has passed today, schedule for next week\n            if (nextNotification.isBefore(now)) {\n              nextNotification = nextNotification.add(const Duration(days: 7));\n            }\n\n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + weekday, // Unique ID for each weekday\n              title: '🎯 ${habit.name}',\n              body: 'Time to complete your habit! Don\\'t break your streak.',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_weekday_$weekday',\n            );\n            AppLogger.info('Scheduled weekly notification for \"${habit.name}\" on weekday $weekday at ${nextNotification.toString()}');\n          }\n          break;\n\n        case HabitFrequency.monthly:\n          // Schedule notifications for selected month days\n          for (int monthDay in habit.monthlySchedule) {\n            final now = DateTime.now();\n            DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);\n\n            // If the date has passed this month, schedule for next month\n            if (nextNotification.isBefore(now)) {\n              nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);\n            }\n\n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + monthDay + 1000, // Unique ID for each month day\n              title: '🎯 ${habit.name}',\n              body: 'Monthly habit reminder - keep up the great work!',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_monthday_$monthDay',\n            );\n            AppLogger.info('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');\n          }\n          break;\n\n        case HabitFrequency.hourly:\n          // For hourly habits, schedule next few occurrences\n          final now = DateTime.now();\n          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours\n            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);\n\n            await NotificationService.scheduleNotification(\n              id: habit.hashCode + i + 2000, // Unique ID for each hourly notification\n              title: '⏰ ${habit.name}',\n              body: 'Hourly reminder - time for your habit!',\n              scheduledTime: nextNotification,\n              payload: 'habit_${habit.hashCode}_hourly_$i',\n            );\n          }\n          AppLogger.info('Scheduled 24 hourly notifications for \"${habit.name}\"');\n          break;\n\n        case HabitFrequency.yearly:\n          // Schedule for next year at the same time\n          final now = DateTime.now();\n          final nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);\n\n          await NotificationService.scheduleNotification(\n            id: habit.hashCode + 3000, // Unique ID for yearly notification\n            title: '🎯 ${habit.name}',\n            body: 'Your yearly habit is due - make it count!',\n            scheduledTime: nextNotification,\n            payload: 'habit_${habit.hashCode}_yearly',\n          );\n          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');\n          break;\n      }\n\n    } catch (e) {\n      AppLogger.error('Error scheduling notifications for habit \"${habit.name}\"', e);\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Habit created but notifications failed to schedule: $e'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    }\n  }\n}\n","baseTimestamp":1754457604159,"deltas":[{"timestamp":1754463866555,"changes":[{"type":"DELETE","lineNumber":723,"oldContent":"              dialTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":728,"content":"              dialTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"DELETE","lineNumber":733,"oldContent":""},{"type":"DELETE","lineNumber":735,"oldContent":"    if (picked != null) {"},{"type":"DELETE","lineNumber":737,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":738,"oldContent":"        // Check if time is not already added"},{"type":"INSERT","lineNumber":737,"content":""},{"type":"INSERT","lineNumber":738,"content":"    if (picked != null) {"},{"type":"INSERT","lineNumber":739,"content":"      setState(() {"},{"type":"INSERT","lineNumber":740,"content":"        // Check if time is not already added"},{"type":"DELETE","lineNumber":761,"oldContent":"  Widget _buildWeekdaySelector() {"},{"type":"DELETE","lineNumber":763,"oldContent":"    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];"},{"type":"DELETE","lineNumber":765,"oldContent":"    return Wrap("},{"type":"INSERT","lineNumber":764,"content":"  Widget _buildWeekdaySelector() {"},{"type":"INSERT","lineNumber":765,"content":"    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];"},{"type":"INSERT","lineNumber":766,"content":"    return Wrap("},{"type":"MODIFY","lineNumber":887,"content":"","oldContent":""},{"type":"DELETE","lineNumber":920,"oldContent":"        _notificationTime = picked;"},{"type":"DELETE","lineNumber":922,"oldContent":"      });"},{"type":"DELETE","lineNumber":927,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"INSERT","lineNumber":926,"content":"        _notificationTime = picked;"},{"type":"INSERT","lineNumber":927,"content":"      });"},{"type":"MODIFY","lineNumber":931,"content":"  Future<void> _saveHabit() async {","oldContent":"    }"},{"type":"DELETE","lineNumber":934,"oldContent":"      // Validate frequency-specific requirements"},{"type":"DELETE","lineNumber":936,"oldContent":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":934,"content":"    }"},{"type":"INSERT","lineNumber":937,"content":"      // Validate frequency-specific requirements"},{"type":"INSERT","lineNumber":938,"content":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"DELETE","lineNumber":953,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":958,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":963,"oldContent":""},{"type":"INSERT","lineNumber":967,"content":""},{"type":"DELETE","lineNumber":971,"oldContent":"        return;"},{"type":"DELETE","lineNumber":975,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"DELETE","lineNumber":976,"oldContent":"      "},{"type":"INSERT","lineNumber":975,"content":"        return;"},{"type":"INSERT","lineNumber":978,"content":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":979,"content":""},{"type":"DELETE","lineNumber":982,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":987,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":991,"oldContent":""},{"type":"DELETE","lineNumber":996,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":998,"oldContent":"      }"},{"type":"INSERT","lineNumber":997,"content":""},{"type":"DELETE","lineNumber":1001,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":1003,"oldContent":""},{"type":"INSERT","lineNumber":1001,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1003,"content":"      }"},{"type":"INSERT","lineNumber":1005,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1007,"content":""},{"type":"DELETE","lineNumber":1013,"oldContent":""},{"type":"INSERT","lineNumber":1016,"content":""},{"type":"DELETE","lineNumber":1021,"oldContent":"      if (mounted) {"},{"type":"MODIFY","lineNumber":1022,"content":"","oldContent":"      "},{"type":"INSERT","lineNumber":1023,"content":"      if (mounted) {"},{"type":"MODIFY","lineNumber":1026,"content":"            content: Text('Failed to create habit: ${e.toString()}'),","oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"}]},{"timestamp":1754463894390,"changes":[{"type":"MODIFY","lineNumber":728,"content":"              dialTextColor: Theme.of(context).colorScheme.onSurface,","oldContent":"              dialTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":735,"content":"      },"},{"type":"INSERT","lineNumber":736,"content":"    );"},{"type":"DELETE","lineNumber":738,"oldContent":"      },"},{"type":"DELETE","lineNumber":740,"oldContent":"    );"},{"type":"DELETE","lineNumber":762,"oldContent":"  Widget _buildWeekdaySelector() {"},{"type":"INSERT","lineNumber":763,"content":""},{"type":"INSERT","lineNumber":764,"content":"  Widget _buildWeekdaySelector() {"},{"type":"DELETE","lineNumber":766,"oldContent":""},{"type":"INSERT","lineNumber":886,"content":"  }"},{"type":"DELETE","lineNumber":887,"oldContent":""},{"type":"DELETE","lineNumber":924,"oldContent":"        _notificationTime = picked;"},{"type":"MODIFY","lineNumber":926,"content":"        _notificationTime = picked;","oldContent":"      });"},{"type":"INSERT","lineNumber":927,"content":"      });"},{"type":"MODIFY","lineNumber":931,"content":"  Future<void> _saveHabit() async {","oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":933,"oldContent":"    }"},{"type":"DELETE","lineNumber":935,"oldContent":"      // Validate frequency-specific requirements"},{"type":"INSERT","lineNumber":934,"content":"    }"},{"type":"MODIFY","lineNumber":937,"content":"      // Validate frequency-specific requirements","oldContent":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":938,"content":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"MODIFY","lineNumber":958,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {","oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"MODIFY","lineNumber":967,"content":"","oldContent":""},{"type":"DELETE","lineNumber":974,"oldContent":"        return;"},{"type":"DELETE","lineNumber":976,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":975,"content":"        return;"},{"type":"DELETE","lineNumber":979,"oldContent":""},{"type":"INSERT","lineNumber":978,"content":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":979,"content":"      "},{"type":"MODIFY","lineNumber":987,"content":"        targetCount: 1, // Default to 1 since we removed the UI","oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":995,"oldContent":""},{"type":"INSERT","lineNumber":997,"content":""},{"type":"DELETE","lineNumber":999,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1001,"oldContent":"      }"},{"type":"DELETE","lineNumber":1003,"oldContent":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1001,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1003,"content":"      }"},{"type":"DELETE","lineNumber":1006,"oldContent":""},{"type":"INSERT","lineNumber":1005,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1007,"content":""},{"type":"MODIFY","lineNumber":1016,"content":"","oldContent":""},{"type":"DELETE","lineNumber":1021,"oldContent":""},{"type":"DELETE","lineNumber":1022,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1021,"content":"      LoggingService.logError('Failed to create habit', e);"},{"type":"INSERT","lineNumber":1023,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1025,"content":"          SnackBar("},{"type":"DELETE","lineNumber":1026,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"}]},{"timestamp":1754464078398,"changes":[{"type":"INSERT","lineNumber":727,"content":"              dialHandColor: Theme.of(context).colorScheme.primary,"},{"type":"DELETE","lineNumber":728,"oldContent":"              dialTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"MODIFY","lineNumber":737,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":763,"content":"","oldContent":""},{"type":"INSERT","lineNumber":925,"content":"      setState(() {"},{"type":"DELETE","lineNumber":927,"oldContent":"      setState(() {"},{"type":"INSERT","lineNumber":930,"content":""},{"type":"DELETE","lineNumber":931,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"MODIFY","lineNumber":934,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":936,"content":"    try {"},{"type":"DELETE","lineNumber":938,"oldContent":"    try {"},{"type":"INSERT","lineNumber":957,"content":""},{"type":"DELETE","lineNumber":958,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":966,"content":"      }"},{"type":"DELETE","lineNumber":967,"oldContent":""},{"type":"MODIFY","lineNumber":975,"content":"        return;","oldContent":"        return;"},{"type":"MODIFY","lineNumber":978,"content":"      final databaseAsync = ref.read(databaseProvider);","oldContent":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":979,"content":"      final database = databaseAsync.value;"},{"type":"DELETE","lineNumber":980,"oldContent":"      final habit = Habit("},{"type":"MODIFY","lineNumber":981,"content":"      if (database == null) {","oldContent":"        id: 0, // Will be auto-generated by the database"},{"type":"INSERT","lineNumber":982,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":983,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":984,"content":"            content: Text('Database not available'),"},{"type":"INSERT","lineNumber":985,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":986,"content":"          ),"},{"type":"INSERT","lineNumber":987,"content":"        );"},{"type":"INSERT","lineNumber":988,"content":"        return;"},{"type":"INSERT","lineNumber":989,"content":"      }"},{"type":"INSERT","lineNumber":990,"content":"      "},{"type":"INSERT","lineNumber":991,"content":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":985,"oldContent":"        color: _selectedColor.value,"},{"type":"INSERT","lineNumber":995,"content":"        colorValue: _selectedColor.value,"},{"type":"INSERT","lineNumber":996,"content":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":987,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":988,"oldContent":"        createdAt: DateTime.now(),"},{"type":"DELETE","lineNumber":989,"oldContent":"        isActive: true,"},{"type":"DELETE","lineNumber":990,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":991,"oldContent":"        selectedMonthDays: _selectedMonthDays,"},{"type":"DELETE","lineNumber":992,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.toList(),"},{"type":"DELETE","lineNumber":993,"oldContent":"        hourlyTimes: _hourlyTimes,"},{"type":"DELETE","lineNumber":996,"oldContent":""},{"type":"INSERT","lineNumber":1001,"content":""},{"type":"DELETE","lineNumber":1000,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1002,"oldContent":"      }"},{"type":"INSERT","lineNumber":1005,"content":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1004,"oldContent":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1007,"content":"      }"},{"type":"DELETE","lineNumber":1006,"oldContent":""},{"type":"INSERT","lineNumber":1009,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1011,"content":""},{"type":"INSERT","lineNumber":1019,"content":"        );"},{"type":"DELETE","lineNumber":1016,"oldContent":""},{"type":"DELETE","lineNumber":1022,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1027,"content":"      if (mounted) {"}]},{"timestamp":1754464098483,"changes":[{"type":"MODIFY","lineNumber":674,"content":"                      ? _selectedColor.withValues(alpha: 0.3)","oldContent":"                      ? _selectedColor.withOpacity(0.3)"},{"type":"INSERT","lineNumber":736,"content":"    );"},{"type":"DELETE","lineNumber":737,"oldContent":""},{"type":"INSERT","lineNumber":762,"content":"  }"},{"type":"DELETE","lineNumber":763,"oldContent":""},{"type":"INSERT","lineNumber":933,"content":"      return;"},{"type":"DELETE","lineNumber":934,"oldContent":"    }"},{"type":"INSERT","lineNumber":974,"content":"        );"},{"type":"DELETE","lineNumber":975,"oldContent":"        return;"},{"type":"MODIFY","lineNumber":977,"content":"","oldContent":"      final database = ref.read(databaseProvider);"},{"type":"DELETE","lineNumber":983,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":985,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":987,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":990,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":996,"oldContent":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":992,"content":"        name: _nameController.text.trim(),"},{"type":"INSERT","lineNumber":993,"content":"        description: _descriptionController.text.trim(),"},{"type":"INSERT","lineNumber":994,"content":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":998,"oldContent":"        notificationTime: _notificationTime,"},{"type":"INSERT","lineNumber":997,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":998,"content":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":999,"content":"        notificationTime: _notificationTime,"},{"type":"INSERT","lineNumber":1001,"content":""},{"type":"DELETE","lineNumber":1003,"oldContent":""},{"type":"DELETE","lineNumber":1005,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1007,"oldContent":""},{"type":"INSERT","lineNumber":1006,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1008,"content":""},{"type":"INSERT","lineNumber":1009,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1011,"content":""},{"type":"DELETE","lineNumber":1011,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":1014,"oldContent":""},{"type":"INSERT","lineNumber":1019,"content":"        );"},{"type":"DELETE","lineNumber":1022,"oldContent":"        );"},{"type":"INSERT","lineNumber":1027,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1030,"oldContent":"      if (mounted) {"}]},{"timestamp":1754464142460,"changes":[{"type":"DELETE","lineNumber":988,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":990,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":992,"oldContent":"        category: _selectedCategory,"},{"type":"INSERT","lineNumber":990,"content":""},{"type":"INSERT","lineNumber":991,"content":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":992,"content":"      DateTime? notificationDateTime;"},{"type":"INSERT","lineNumber":993,"content":"      if (_notificationTime != null) {"},{"type":"INSERT","lineNumber":994,"content":"        final now = DateTime.now();"},{"type":"INSERT","lineNumber":995,"content":"        notificationDateTime = DateTime("},{"type":"INSERT","lineNumber":996,"content":"          now.year,"},{"type":"INSERT","lineNumber":997,"content":"          now.month,"},{"type":"INSERT","lineNumber":998,"content":"          now.day,"},{"type":"INSERT","lineNumber":999,"content":"          _notificationTime!.hour,"},{"type":"INSERT","lineNumber":1000,"content":"          _notificationTime!.minute,"},{"type":"INSERT","lineNumber":1001,"content":"        );"},{"type":"INSERT","lineNumber":1002,"content":"      }"},{"type":"DELETE","lineNumber":995,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":1005,"content":"        name: _nameController.text.trim(),"},{"type":"INSERT","lineNumber":1006,"content":"        description: _descriptionController.text.trim(),"},{"type":"INSERT","lineNumber":1007,"content":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":997,"oldContent":"        notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":998,"oldContent":"        notificationTime: _notificationTime,"},{"type":"INSERT","lineNumber":1010,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":1011,"content":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":1012,"content":"        notificationTime: notificationDateTime,"},{"type":"DELETE","lineNumber":1002,"oldContent":"      await database.insertHabit(habit);"},{"type":"INSERT","lineNumber":1015,"content":"      // Get HabitService instead of direct database access"},{"type":"INSERT","lineNumber":1016,"content":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":1017,"content":"      final habitService = habitServiceAsync.value;"},{"type":"INSERT","lineNumber":1018,"content":"      "},{"type":"INSERT","lineNumber":1019,"content":"      if (habitService == null) {"},{"type":"INSERT","lineNumber":1020,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1021,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1022,"content":"            content: Text('Habit service not available'),"},{"type":"INSERT","lineNumber":1023,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1024,"content":"          ),"},{"type":"INSERT","lineNumber":1025,"content":"        );"},{"type":"INSERT","lineNumber":1026,"content":"        return;"},{"type":"INSERT","lineNumber":1027,"content":"      }"},{"type":"INSERT","lineNumber":1029,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1030,"content":""},{"type":"DELETE","lineNumber":1005,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1007,"oldContent":""},{"type":"INSERT","lineNumber":1033,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1035,"content":""},{"type":"DELETE","lineNumber":1010,"oldContent":"      LoggingService.logInfo('Habit created: ${habit.name}');"},{"type":"DELETE","lineNumber":1011,"oldContent":"      // Show success message"},{"type":"INSERT","lineNumber":1037,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1038,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1039,"content":"      }"},{"type":"INSERT","lineNumber":1041,"content":"      // Show success message"},{"type":"DELETE","lineNumber":1025,"oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"INSERT","lineNumber":1054,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1055,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1056,"content":"      }"}]},{"timestamp":1754464163164,"changes":[{"type":"MODIFY","lineNumber":83,"content":"            _buildNotificationSection(), // Moved notifications below frequency","oldContent":"            _buildCustomizationSection(),"},{"type":"MODIFY","lineNumber":85,"content":"            _buildCustomizationSection(), // Moved color picker to bottom","oldContent":"            _buildNotificationSection(),"},{"type":"INSERT","lineNumber":989,"content":"      }"},{"type":"DELETE","lineNumber":991,"oldContent":"      }"},{"type":"DELETE","lineNumber":994,"oldContent":"      "},{"type":"DELETE","lineNumber":996,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":999,"oldContent":"        colorValue: _selectedColor.value,"},{"type":"DELETE","lineNumber":1003,"oldContent":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":1005,"oldContent":"      );"},{"type":"DELETE","lineNumber":1007,"oldContent":""},{"type":"DELETE","lineNumber":1009,"oldContent":""},{"type":"DELETE","lineNumber":1010,"oldContent":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1003,"content":"      "},{"type":"INSERT","lineNumber":1004,"content":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1013,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1015,"oldContent":"      }"},{"type":"DELETE","lineNumber":1016,"oldContent":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1008,"content":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1012,"content":"      );"},{"type":"DELETE","lineNumber":1021,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1022,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1024,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1026,"oldContent":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"DELETE","lineNumber":1028,"oldContent":"            backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":1030,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1032,"oldContent":"        );"},{"type":"DELETE","lineNumber":1034,"oldContent":""},{"type":"DELETE","lineNumber":1036,"oldContent":"        // Navigate back"},{"type":"DELETE","lineNumber":1038,"oldContent":"        context.pop();"},{"type":"DELETE","lineNumber":1040,"oldContent":"      }"},{"type":"DELETE","lineNumber":1042,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":1045,"oldContent":"      "},{"type":"INSERT","lineNumber":1027,"content":""},{"type":"INSERT","lineNumber":1028,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1029,"content":""},{"type":"INSERT","lineNumber":1030,"content":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1031,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1032,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1033,"content":"      }"},{"type":"INSERT","lineNumber":1034,"content":""},{"type":"INSERT","lineNumber":1035,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1037,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1038,"content":"      }"},{"type":"INSERT","lineNumber":1039,"content":""},{"type":"INSERT","lineNumber":1040,"content":"      // Show success message"},{"type":"INSERT","lineNumber":1041,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1049,"oldContent":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1044,"content":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1045,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":1046,"content":"          ),"},{"type":"INSERT","lineNumber":1047,"content":"        );"},{"type":"INSERT","lineNumber":1049,"content":"        // Navigate back"},{"type":"INSERT","lineNumber":1050,"content":"        context.pop();"},{"type":"INSERT","lineNumber":1051,"content":"      }"},{"type":"INSERT","lineNumber":1052,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":1053,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1054,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1055,"content":"      }"},{"type":"INSERT","lineNumber":1056,"content":"      "},{"type":"INSERT","lineNumber":1057,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1058,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1059,"content":"          SnackBar("},{"type":"DELETE","lineNumber":1055,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1058,"oldContent":""},{"type":"DELETE","lineNumber":1061,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1063,"oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1065,"oldContent":"      }"},{"type":"DELETE","lineNumber":1066,"oldContent":"      }"},{"type":"DELETE","lineNumber":1067,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1068,"oldContent":"      // Show success message"},{"type":"DELETE","lineNumber":1069,"oldContent":"      if (mounted) {"}]},{"timestamp":1754464166337,"changes":[{"type":"INSERT","lineNumber":188,"content":"                      });"},{"type":"INSERT","lineNumber":190,"content":"                  },"},{"type":"DELETE","lineNumber":192,"oldContent":"            if (_selectedFrequency == HabitFrequency.weekly) ...["},{"type":"INSERT","lineNumber":194,"content":"            // Enhanced Hourly Habits - Multiple time picker"},{"type":"INSERT","lineNumber":195,"content":"            if (_selectedFrequency == HabitFrequency.hourly) ...["},{"type":"DELETE","lineNumber":194,"oldContent":"                style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"DELETE","lineNumber":195,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":196,"oldContent":"              const SizedBox(height: 8),"},{"type":"MODIFY","lineNumber":197,"content":"              Text(","oldContent":"            ],"},{"type":"MODIFY","lineNumber":213,"content":"              ),","oldContent":"              _buildMonthDaySelector(),"},{"type":"DELETE","lineNumber":220,"oldContent":"                  style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"DELETE","lineNumber":221,"oldContent":"                        fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":222,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":223,"oldContent":"                ),"},{"type":"DELETE","lineNumber":224,"oldContent":"                const SizedBox(width: 16),"},{"type":"DELETE","lineNumber":225,"oldContent":"                SizedBox("},{"type":"INSERT","lineNumber":220,"content":"              Text("},{"type":"INSERT","lineNumber":221,"content":"                'Select days of the month:',"},{"type":"INSERT","lineNumber":222,"content":"                style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":223,"content":"                      fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":224,"content":"                    ),"},{"type":"INSERT","lineNumber":225,"content":"              ),"},{"type":"MODIFY","lineNumber":228,"content":"            ],","oldContent":"                  child: TextFormField("},{"type":"INSERT","lineNumber":243,"content":"          ],"},{"type":"INSERT","lineNumber":244,"content":"        ),"},{"type":"INSERT","lineNumber":245,"content":"      ),"},{"type":"DELETE","lineNumber":246,"oldContent":"  Widget _buildMonthDaySelector() {"},{"type":"DELETE","lineNumber":247,"oldContent":"    return Wrap("},{"type":"DELETE","lineNumber":248,"oldContent":"      spacing: 8,"},{"type":"DELETE","lineNumber":1000,"oldContent":"      "},{"type":"DELETE","lineNumber":1001,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1004,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1003,"content":"      "},{"type":"INSERT","lineNumber":1004,"content":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1007,"oldContent":"      );"},{"type":"INSERT","lineNumber":1008,"content":"        colorValue: _selectedColor.toArgb(),"},{"type":"INSERT","lineNumber":1009,"content":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1013,"content":"      );"},{"type":"DELETE","lineNumber":1016,"oldContent":""},{"type":"INSERT","lineNumber":1018,"content":"      "},{"type":"INSERT","lineNumber":1019,"content":"      if (habitService == null) {"},{"type":"INSERT","lineNumber":1020,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1021,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1022,"content":"            content: Text('Habit service not available'),"},{"type":"INSERT","lineNumber":1023,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1024,"content":"          ),"},{"type":"INSERT","lineNumber":1025,"content":"        );"},{"type":"INSERT","lineNumber":1026,"content":"        return;"},{"type":"INSERT","lineNumber":1027,"content":"      }"},{"type":"INSERT","lineNumber":1028,"content":""},{"type":"DELETE","lineNumber":1020,"oldContent":"      "},{"type":"DELETE","lineNumber":1023,"oldContent":"      if (habitService == null) {"},{"type":"DELETE","lineNumber":1026,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1029,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1037,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1031,"oldContent":"            content: Text('Habit service not available'),"},{"type":"DELETE","lineNumber":1034,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1037,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1038,"oldContent":"        );"},{"type":"INSERT","lineNumber":1043,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1044,"content":"          SnackBar("},{"type":"DELETE","lineNumber":1040,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1043,"oldContent":"      }"},{"type":"DELETE","lineNumber":1045,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1046,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1049,"content":""},{"type":"DELETE","lineNumber":1049,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1051,"oldContent":""},{"type":"DELETE","lineNumber":1053,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1055,"oldContent":"      }"},{"type":"DELETE","lineNumber":1057,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1061,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1062,"oldContent":"      // Show success message"},{"type":"INSERT","lineNumber":1061,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1062,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1063,"content":"          ),"},{"type":"INSERT","lineNumber":1064,"content":"        );"},{"type":"MODIFY","lineNumber":1066,"content":"    }","oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1067,"content":"  }"},{"type":"INSERT","lineNumber":1068,"content":"}"},{"type":"INSERT","lineNumber":1069,"content":""}]},{"timestamp":1754464193799,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"import '../../services/logging_service.dart';"},{"type":"MODIFY","lineNumber":190,"content":"                );","oldContent":"                );"},{"type":"MODIFY","lineNumber":195,"content":"              const SizedBox(height: 16),","oldContent":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":209,"oldContent":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":210,"oldContent":"              Text("},{"type":"INSERT","lineNumber":208,"content":"                'Select days of the week:',"},{"type":"INSERT","lineNumber":211,"content":"                    ),"},{"type":"INSERT","lineNumber":214,"content":"              _buildWeekdaySelector(),"},{"type":"DELETE","lineNumber":216,"oldContent":"            ],"},{"type":"DELETE","lineNumber":217,"oldContent":"            Row("},{"type":"DELETE","lineNumber":218,"oldContent":"                Text("},{"type":"DELETE","lineNumber":219,"oldContent":"                  style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":216,"content":"            // Enhanced Monthly Reminders - True calendar view"},{"type":"INSERT","lineNumber":217,"content":"            if (_selectedFrequency == HabitFrequency.monthly) ...["},{"type":"INSERT","lineNumber":218,"content":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":229,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":230,"oldContent":"                    onChanged: (value) {"},{"type":"DELETE","lineNumber":231,"oldContent":"                      final count = int.tryParse(value);"},{"type":"DELETE","lineNumber":232,"oldContent":"                        _targetCount = count;"},{"type":"DELETE","lineNumber":233,"oldContent":"                    },"},{"type":"INSERT","lineNumber":228,"content":"            // Enhanced Yearly Habits - Calendar-style date picker"},{"type":"INSERT","lineNumber":229,"content":"            if (_selectedFrequency == HabitFrequency.yearly) ...["},{"type":"INSERT","lineNumber":230,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":231,"content":"              Text("},{"type":"INSERT","lineNumber":232,"content":"                'Select dates throughout the year:',"},{"type":"DELETE","lineNumber":244,"oldContent":"    );"},{"type":"DELETE","lineNumber":246,"oldContent":"  }"},{"type":"DELETE","lineNumber":248,"oldContent":""},{"type":"DELETE","lineNumber":249,"oldContent":"      runSpacing: 8,"},{"type":"DELETE","lineNumber":250,"oldContent":"        final dayNumber = index + 1;"},{"type":"DELETE","lineNumber":251,"oldContent":"          label: Text(dayNumber.toString()),"},{"type":"DELETE","lineNumber":252,"oldContent":"          onSelected: (selected) {"},{"type":"DELETE","lineNumber":253,"oldContent":"              if (selected) {"},{"type":"DELETE","lineNumber":254,"oldContent":"              } else {"},{"type":"DELETE","lineNumber":255,"oldContent":"              }"},{"type":"DELETE","lineNumber":256,"oldContent":"          },"},{"type":"DELETE","lineNumber":257,"oldContent":"      }),"},{"type":"INSERT","lineNumber":245,"content":"    );"},{"type":"DELETE","lineNumber":259,"oldContent":"  Widget _buildCustomizationSection() {"},{"type":"DELETE","lineNumber":260,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":261,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":262,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":263,"oldContent":"              'Customization',"},{"type":"DELETE","lineNumber":264,"oldContent":"                    fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":265,"oldContent":"            ),"},{"type":"DELETE","lineNumber":266,"oldContent":"            Text("},{"type":"DELETE","lineNumber":267,"oldContent":"              style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":247,"content":""},{"type":"INSERT","lineNumber":248,"content":"  // New: Enhanced hourly time selector"},{"type":"INSERT","lineNumber":249,"content":"  Widget _buildHourlyTimeSelector() {"},{"type":"INSERT","lineNumber":250,"content":"    return Column("},{"type":"INSERT","lineNumber":251,"content":"      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":252,"content":"      children: ["},{"type":"INSERT","lineNumber":253,"content":"        Container("},{"type":"INSERT","lineNumber":254,"content":"          padding: const EdgeInsets.all(12),"},{"type":"INSERT","lineNumber":255,"content":"          decoration: BoxDecoration("},{"type":"INSERT","lineNumber":256,"content":"            border: Border.all(color: Colors.grey.shade300),"},{"type":"INSERT","lineNumber":257,"content":"            borderRadius: BorderRadius.circular(8),"},{"type":"INSERT","lineNumber":258,"content":"          ),"},{"type":"INSERT","lineNumber":259,"content":"          child: Column("},{"type":"INSERT","lineNumber":260,"content":"            children: ["},{"type":"INSERT","lineNumber":261,"content":"              if (_hourlyTimes.isEmpty)"},{"type":"INSERT","lineNumber":262,"content":"                Text("},{"type":"INSERT","lineNumber":263,"content":"                  'No times selected',"},{"type":"INSERT","lineNumber":264,"content":"                  style: TextStyle("},{"type":"INSERT","lineNumber":265,"content":"                    color: Colors.grey.shade600,"},{"type":"INSERT","lineNumber":266,"content":"                    fontStyle: FontStyle.italic,"},{"type":"DELETE","lineNumber":269,"oldContent":"            const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":270,"oldContent":"              spacing: 8,"},{"type":"DELETE","lineNumber":271,"oldContent":"              children: _colors.map((color) {"},{"type":"DELETE","lineNumber":272,"oldContent":"                  onTap: () {"},{"type":"DELETE","lineNumber":273,"oldContent":"                      _selectedColor = color;"},{"type":"DELETE","lineNumber":274,"oldContent":"                  },"},{"type":"DELETE","lineNumber":275,"oldContent":"                    width: 40,"},{"type":"DELETE","lineNumber":276,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":277,"oldContent":"                      color: color,"},{"type":"DELETE","lineNumber":278,"oldContent":"                      border: _selectedColor == color"},{"type":"DELETE","lineNumber":279,"oldContent":"                          ? Border.all(color: Colors.black, width: 3)"},{"type":"DELETE","lineNumber":280,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":281,"oldContent":"                    child: _selectedColor == color"},{"type":"DELETE","lineNumber":282,"oldContent":"                        : null,"},{"type":"DELETE","lineNumber":283,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":284,"oldContent":"              }).toList(),"},{"type":"DELETE","lineNumber":285,"oldContent":"            ),"},{"type":"INSERT","lineNumber":268,"content":"                )"},{"type":"INSERT","lineNumber":269,"content":"              else"},{"type":"INSERT","lineNumber":270,"content":"                Wrap("},{"type":"INSERT","lineNumber":271,"content":"                  spacing: 8,"},{"type":"INSERT","lineNumber":272,"content":"                  runSpacing: 8,"},{"type":"INSERT","lineNumber":273,"content":"                  children: _hourlyTimes.map((time) {"},{"type":"INSERT","lineNumber":274,"content":"                    return Chip("},{"type":"INSERT","lineNumber":275,"content":"                      label: Text(time.format(context)),"},{"type":"INSERT","lineNumber":276,"content":"                      deleteIcon: const Icon(Icons.close, size: 18),"},{"type":"INSERT","lineNumber":277,"content":"                      onDeleted: () {"},{"type":"INSERT","lineNumber":278,"content":"                        setState(() {"},{"type":"INSERT","lineNumber":279,"content":"                          _hourlyTimes.remove(time);"},{"type":"INSERT","lineNumber":280,"content":"                        });"},{"type":"INSERT","lineNumber":281,"content":"                      },"},{"type":"INSERT","lineNumber":282,"content":"                    );"},{"type":"INSERT","lineNumber":283,"content":"                  }).toList(),"},{"type":"INSERT","lineNumber":284,"content":"                ),"},{"type":"DELETE","lineNumber":502,"oldContent":"    try {"},{"type":"INSERT","lineNumber":501,"content":"              ),"},{"type":"DELETE","lineNumber":1001,"oldContent":"      "},{"type":"DELETE","lineNumber":1003,"oldContent":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1002,"content":"      "},{"type":"INSERT","lineNumber":1003,"content":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1006,"oldContent":"        colorValue: _selectedColor.toArgb(),"},{"type":"DELETE","lineNumber":1008,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1007,"content":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int"},{"type":"INSERT","lineNumber":1008,"content":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":1019,"oldContent":"      await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":1021,"oldContent":""},{"type":"DELETE","lineNumber":1024,"oldContent":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":1026,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1029,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1031,"oldContent":"      }"},{"type":"INSERT","lineNumber":1028,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1030,"content":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1031,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1032,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1033,"content":"      }"},{"type":"INSERT","lineNumber":1034,"content":""},{"type":"INSERT","lineNumber":1036,"content":"      if (mounted) {"},{"type":"MODIFY","lineNumber":1042,"content":"        ScaffoldMessenger.of(context).showSnackBar(","oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1043,"content":"          SnackBar("},{"type":"DELETE","lineNumber":1046,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1047,"oldContent":"          SnackBar("},{"type":"INSERT","lineNumber":1048,"content":""},{"type":"DELETE","lineNumber":1051,"oldContent":""},{"type":"DELETE","lineNumber":1058,"oldContent":"      // Show success message"},{"type":"INSERT","lineNumber":1057,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1058,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1059,"content":"          SnackBar("},{"type":"DELETE","lineNumber":1062,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1064,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1065,"oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1064,"content":"      }"},{"type":"MODIFY","lineNumber":1068,"content":"","oldContent":""}]},{"timestamp":1754464202352,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import 'package:table_calendar/table_calendar.dart';"},{"type":"MODIFY","lineNumber":5,"content":"import '../../services/notification_service.dart';","oldContent":"import '../../services/logging_service.dart';"},{"type":"DELETE","lineNumber":29,"oldContent":"  int _targetCount = 1;"},{"type":"INSERT","lineNumber":28,"content":"  DateTime _focusedMonth = DateTime.now(); // New: For calendar navigation"},{"type":"INSERT","lineNumber":81,"content":"            const SizedBox(height: 24),"},{"type":"MODIFY","lineNumber":83,"content":"            const SizedBox(height: 24),","oldContent":"            _buildCustomizationSection(),"},{"type":"DELETE","lineNumber":85,"oldContent":"            _buildNotificationSection(),"},{"type":"MODIFY","lineNumber":156,"content":"    print('DEBUG: Building frequency section, current frequency: $_selectedFrequency'); // Debug print","oldContent":"    print('DEBUG: Building frequency section, current frequency: $_selectedFrequency'); // Debug print"},{"type":"MODIFY","lineNumber":174,"content":"                print('DEBUG: Creating choice chip for frequency: $frequency'); // Debug print","oldContent":"                print('DEBUG: Creating choice chip for frequency: $frequency'); // Debug print"},{"type":"MODIFY","lineNumber":180,"content":"                      print('DEBUG: Selected frequency: $frequency'); // Debug print","oldContent":"                      print('DEBUG: Selected frequency: $frequency'); // Debug print"},{"type":"MODIFY","lineNumber":185,"content":"                        _hourlyTimes.clear();","oldContent":"                        _hourlyTimes.clear();"},{"type":"INSERT","lineNumber":186,"content":"                        _selectedYearlyDates.clear();"},{"type":"DELETE","lineNumber":189,"oldContent":"                );"},{"type":"DELETE","lineNumber":193,"oldContent":"            if (_selectedFrequency == HabitFrequency.weekly) ...["},{"type":"DELETE","lineNumber":194,"oldContent":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":192,"content":"            ),"},{"type":"INSERT","lineNumber":193,"content":"            // Enhanced Hourly Habits - Multiple time picker"},{"type":"INSERT","lineNumber":195,"content":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":198,"content":"                style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":200,"content":"                    ),"},{"type":"DELETE","lineNumber":200,"oldContent":"              _buildWeekdaySelector(),"},{"type":"DELETE","lineNumber":201,"oldContent":"            if (_selectedFrequency == HabitFrequency.monthly) ...["},{"type":"MODIFY","lineNumber":208,"content":"                'Select days of the week:',","oldContent":"                'Select days of the week:',"},{"type":"INSERT","lineNumber":209,"content":"                style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":210,"content":"                      fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":212,"oldContent":"              ),"},{"type":"DELETE","lineNumber":215,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":226,"oldContent":"                  width: 80,"},{"type":"DELETE","lineNumber":227,"oldContent":"            // Enhanced Yearly Habits - Calendar-style date picker"},{"type":"INSERT","lineNumber":226,"content":"              _buildMonthDaySelector(),"},{"type":"INSERT","lineNumber":228,"content":"            // Enhanced Yearly Habits - Calendar-style date picker"},{"type":"DELETE","lineNumber":243,"oldContent":"    );"},{"type":"MODIFY","lineNumber":245,"content":"    );","oldContent":""},{"type":"INSERT","lineNumber":246,"content":"  }"},{"type":"INSERT","lineNumber":247,"content":""},{"type":"DELETE","lineNumber":258,"oldContent":"              if (selected) {"},{"type":"INSERT","lineNumber":267,"content":"                  ),"},{"type":"DELETE","lineNumber":268,"oldContent":"  }"},{"type":"DELETE","lineNumber":338,"oldContent":"      ),"},{"type":"DELETE","lineNumber":339,"oldContent":"    );"},{"type":"DELETE","lineNumber":340,"oldContent":""},{"type":"DELETE","lineNumber":341,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":342,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":343,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":344,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":345,"oldContent":"            Text("},{"type":"DELETE","lineNumber":346,"oldContent":"              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"INSERT","lineNumber":338,"content":"                Expanded("},{"type":"INSERT","lineNumber":339,"content":"                  child: Center("},{"type":"INSERT","lineNumber":340,"content":"                    child: Text("},{"type":"INSERT","lineNumber":341,"content":"                      'Mon',"},{"type":"INSERT","lineNumber":342,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":343,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":344,"content":"                        color: Colors.black,"},{"type":"INSERT","lineNumber":345,"content":"                      ),"},{"type":"INSERT","lineNumber":346,"content":"                    ),"},{"type":"DELETE","lineNumber":348,"oldContent":"            ),"},{"type":"DELETE","lineNumber":349,"oldContent":"            SwitchListTile("},{"type":"DELETE","lineNumber":350,"oldContent":"              subtitle: const Text('Get reminded to complete your habit'),"},{"type":"DELETE","lineNumber":351,"oldContent":"              value: _notificationsEnabled,"},{"type":"DELETE","lineNumber":352,"oldContent":"                setState(() {"},{"type":"DELETE","lineNumber":353,"oldContent":"                  if (!value) {"},{"type":"DELETE","lineNumber":354,"oldContent":"                    _notificationTime = null;"},{"type":"DELETE","lineNumber":355,"oldContent":"                });"},{"type":"DELETE","lineNumber":356,"oldContent":"            ),"},{"type":"DELETE","lineNumber":357,"oldContent":"            if (_notificationsEnabled) ...["},{"type":"DELETE","lineNumber":358,"oldContent":"              ListTile("},{"type":"DELETE","lineNumber":359,"oldContent":"                title: const Text('Notification Time'),"},{"type":"DELETE","lineNumber":360,"oldContent":"                subtitle: Text("},{"type":"DELETE","lineNumber":361,"oldContent":"                      ? _notificationTime!.format(context)"},{"type":"DELETE","lineNumber":363,"oldContent":"                trailing: const Icon(Icons.access_time),"},{"type":"DELETE","lineNumber":364,"oldContent":"              ),"},{"type":"DELETE","lineNumber":365,"oldContent":"          ],"},{"type":"DELETE","lineNumber":366,"oldContent":"        ),"},{"type":"DELETE","lineNumber":367,"oldContent":"    );"},{"type":"DELETE","lineNumber":368,"oldContent":"  }"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"DELETE","lineNumber":371,"oldContent":"    switch (frequency) {"},{"type":"DELETE","lineNumber":372,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":373,"oldContent":"        return 'Hourly';"},{"type":"DELETE","lineNumber":374,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":375,"oldContent":"        return 'Daily';"},{"type":"DELETE","lineNumber":376,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":377,"oldContent":"        return 'Weekly';"},{"type":"DELETE","lineNumber":378,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":379,"oldContent":"        return 'Monthly';"},{"type":"DELETE","lineNumber":380,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":381,"oldContent":"        return 'Yearly';"},{"type":"DELETE","lineNumber":382,"oldContent":"    }"},{"type":"DELETE","lineNumber":383,"oldContent":"  }"},{"type":"DELETE","lineNumber":384,"oldContent":""},{"type":"DELETE","lineNumber":385,"oldContent":"  Future<void> _selectNotificationTime() async {"},{"type":"DELETE","lineNumber":386,"oldContent":"    final TimeOfDay? picked = await showTimePicker("},{"type":"DELETE","lineNumber":387,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":388,"oldContent":"      initialTime: _notificationTime ?? TimeOfDay.now(),"},{"type":"DELETE","lineNumber":389,"oldContent":"    );"},{"type":"DELETE","lineNumber":390,"oldContent":"    if (picked != null) {"},{"type":"DELETE","lineNumber":391,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":392,"oldContent":"        _notificationTime = picked;"},{"type":"DELETE","lineNumber":393,"oldContent":"      });"},{"type":"DELETE","lineNumber":394,"oldContent":"    }"},{"type":"DELETE","lineNumber":395,"oldContent":"  }"},{"type":"DELETE","lineNumber":396,"oldContent":""},{"type":"DELETE","lineNumber":397,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":398,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":399,"oldContent":"    }"},{"type":"DELETE","lineNumber":400,"oldContent":""},{"type":"DELETE","lineNumber":401,"oldContent":"    // Validate frequency-specific requirements"},{"type":"DELETE","lineNumber":402,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":403,"oldContent":"        const SnackBar("},{"type":"INSERT","lineNumber":349,"content":"                Expanded("},{"type":"INSERT","lineNumber":350,"content":"                  child: Center("},{"type":"INSERT","lineNumber":351,"content":"                    child: Text("},{"type":"INSERT","lineNumber":352,"content":"                      'Tue',"},{"type":"INSERT","lineNumber":353,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":354,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":355,"content":"                        color: Colors.black,"},{"type":"INSERT","lineNumber":356,"content":"                      ),"},{"type":"INSERT","lineNumber":357,"content":"                    ),"},{"type":"INSERT","lineNumber":358,"content":"                  ),"},{"type":"INSERT","lineNumber":359,"content":"                ),"},{"type":"INSERT","lineNumber":360,"content":"                Expanded("},{"type":"INSERT","lineNumber":361,"content":"                  child: Center("},{"type":"INSERT","lineNumber":362,"content":"                    child: Text("},{"type":"INSERT","lineNumber":363,"content":"                      'Wed',"},{"type":"INSERT","lineNumber":364,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":365,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":366,"content":"                        color: Colors.black,"},{"type":"INSERT","lineNumber":367,"content":"                      ),"},{"type":"INSERT","lineNumber":368,"content":"                    ),"},{"type":"INSERT","lineNumber":369,"content":"                  ),"},{"type":"INSERT","lineNumber":370,"content":"                ),"},{"type":"INSERT","lineNumber":371,"content":"                Expanded("},{"type":"INSERT","lineNumber":372,"content":"                  child: Center("},{"type":"INSERT","lineNumber":373,"content":"                    child: Text("},{"type":"INSERT","lineNumber":374,"content":"                      'Thu',"},{"type":"INSERT","lineNumber":375,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":376,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":377,"content":"                        color: Colors.black,"},{"type":"INSERT","lineNumber":378,"content":"                      ),"},{"type":"INSERT","lineNumber":379,"content":"                    ),"},{"type":"INSERT","lineNumber":380,"content":"                  ),"},{"type":"INSERT","lineNumber":381,"content":"                ),"},{"type":"INSERT","lineNumber":382,"content":"                Expanded("},{"type":"INSERT","lineNumber":383,"content":"                  child: Center("},{"type":"INSERT","lineNumber":384,"content":"                    child: Text("},{"type":"INSERT","lineNumber":385,"content":"                      'Fri',"},{"type":"INSERT","lineNumber":386,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":387,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":388,"content":"                        color: Colors.black,"},{"type":"INSERT","lineNumber":389,"content":"                      ),"},{"type":"INSERT","lineNumber":390,"content":"                    ),"},{"type":"INSERT","lineNumber":391,"content":"                  ),"},{"type":"INSERT","lineNumber":392,"content":"                ),"},{"type":"INSERT","lineNumber":393,"content":"                Expanded("},{"type":"INSERT","lineNumber":394,"content":"                  child: Center("},{"type":"INSERT","lineNumber":395,"content":"                    child: Text("},{"type":"INSERT","lineNumber":396,"content":"                      'Sat',"},{"type":"INSERT","lineNumber":397,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":398,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":399,"content":"                        color: Colors.red.shade600,"},{"type":"INSERT","lineNumber":400,"content":"                      ),"},{"type":"INSERT","lineNumber":401,"content":"                    ),"},{"type":"INSERT","lineNumber":402,"content":"                  ),"},{"type":"INSERT","lineNumber":403,"content":"                ),"},{"type":"DELETE","lineNumber":407,"oldContent":"      );"},{"type":"DELETE","lineNumber":408,"oldContent":"      return;"},{"type":"DELETE","lineNumber":409,"oldContent":"    }"},{"type":"DELETE","lineNumber":410,"oldContent":""},{"type":"DELETE","lineNumber":411,"oldContent":"    if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"DELETE","lineNumber":412,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":413,"oldContent":"        const SnackBar("},{"type":"INSERT","lineNumber":407,"content":"          // Days"},{"type":"INSERT","lineNumber":408,"content":"          GridView.builder("},{"type":"INSERT","lineNumber":409,"content":"            shrinkWrap: true,"},{"type":"INSERT","lineNumber":410,"content":"            physics: const NeverScrollableScrollPhysics(),"},{"type":"INSERT","lineNumber":411,"content":"            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount("},{"type":"INSERT","lineNumber":412,"content":"              crossAxisCount: 7,"},{"type":"INSERT","lineNumber":413,"content":"              childAspectRatio: 1.2,"},{"type":"DELETE","lineNumber":415,"oldContent":"          content: Text('Please select at least one day for monthly habits'),"},{"type":"DELETE","lineNumber":416,"oldContent":"        ),"},{"type":"DELETE","lineNumber":417,"oldContent":"      );"},{"type":"DELETE","lineNumber":418,"oldContent":"      return;"},{"type":"DELETE","lineNumber":419,"oldContent":"    }"},{"type":"INSERT","lineNumber":415,"content":"            itemCount: 31,"},{"type":"INSERT","lineNumber":416,"content":"            itemBuilder: (context, index) {"},{"type":"INSERT","lineNumber":417,"content":"              final day = index + 1;"},{"type":"INSERT","lineNumber":418,"content":"              final isSelected = _selectedMonthDays.contains(day);"},{"type":"DELETE","lineNumber":421,"oldContent":"    try {"},{"type":"DELETE","lineNumber":422,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"DELETE","lineNumber":423,"oldContent":"      habitServiceAsync.when("},{"type":"DELETE","lineNumber":424,"oldContent":"        data: (habitService) async {"},{"type":"DELETE","lineNumber":425,"oldContent":"          final habit = Habit.create("},{"type":"DELETE","lineNumber":426,"oldContent":"            name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":427,"oldContent":"            description: _descriptionController.text.trim().isEmpty"},{"type":"DELETE","lineNumber":428,"oldContent":"                ? null"},{"type":"DELETE","lineNumber":429,"oldContent":"                : _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":430,"oldContent":"            category: _selectedCategory,"},{"type":"DELETE","lineNumber":431,"oldContent":"            colorValue: _selectedColor.toARGB32(),"},{"type":"DELETE","lineNumber":432,"oldContent":"            frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":433,"oldContent":"            notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":434,"oldContent":"                ? DateTime(2024, 1, 1, _notificationTime!.hour, _notificationTime!.minute)"},{"type":"DELETE","lineNumber":435,"oldContent":"                : null,"},{"type":"DELETE","lineNumber":436,"oldContent":"            monthlySchedule: _selectedMonthDays,"},{"type":"DELETE","lineNumber":437,"oldContent":""},{"type":"DELETE","lineNumber":438,"oldContent":"          await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":439,"oldContent":"          // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":440,"oldContent":"            await _scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":441,"oldContent":"          }"},{"type":"DELETE","lineNumber":442,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":443,"oldContent":"              SnackBar("},{"type":"DELETE","lineNumber":444,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null"},{"type":"INSERT","lineNumber":420,"content":"              return GestureDetector("},{"type":"INSERT","lineNumber":421,"content":"                onTap: () {"},{"type":"INSERT","lineNumber":422,"content":"                  setState(() {"},{"type":"INSERT","lineNumber":423,"content":"                    if (isSelected) {"},{"type":"INSERT","lineNumber":424,"content":"                      _selectedMonthDays.remove(day);"},{"type":"INSERT","lineNumber":425,"content":"                    } else {"},{"type":"INSERT","lineNumber":426,"content":"                      _selectedMonthDays.add(day);"},{"type":"INSERT","lineNumber":427,"content":"                    }"},{"type":"INSERT","lineNumber":428,"content":"                  });"},{"type":"INSERT","lineNumber":429,"content":"                },"},{"type":"INSERT","lineNumber":430,"content":"                child: Container("},{"type":"INSERT","lineNumber":431,"content":"                  margin: const EdgeInsets.all(4),"},{"type":"INSERT","lineNumber":432,"content":"                  decoration: BoxDecoration("},{"type":"INSERT","lineNumber":433,"content":"                    color: isSelected ? _selectedColor : null,"},{"type":"INSERT","lineNumber":434,"content":"                    borderRadius: BorderRadius.circular(8),"},{"type":"INSERT","lineNumber":435,"content":"                    border: Border.all("},{"type":"INSERT","lineNumber":436,"content":"                      color: isSelected ? Colors.transparent : Colors.grey.shade300,"},{"type":"INSERT","lineNumber":437,"content":"                    ),"},{"type":"INSERT","lineNumber":438,"content":"                  ),"},{"type":"INSERT","lineNumber":439,"content":"                  child: Center("},{"type":"INSERT","lineNumber":440,"content":"                    child: Text("},{"type":"INSERT","lineNumber":441,"content":"                      day.toString(),"},{"type":"INSERT","lineNumber":442,"content":"                      style: TextStyle("},{"type":"INSERT","lineNumber":443,"content":"                        fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":444,"content":"                        color: isSelected ? Colors.white : Colors.black,"},{"type":"MODIFY","lineNumber":501,"content":"              ),","oldContent":"              ),"},{"type":"INSERT","lineNumber":628,"content":"    );"},{"type":"INSERT","lineNumber":629,"content":"  }"},{"type":"DELETE","lineNumber":629,"oldContent":"      AppLogger.error('Error scheduling notifications for habit \"${habit.name}\"', e);"},{"type":"DELETE","lineNumber":630,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":877,"oldContent":"    final notificationTime = habit.notificationTime!;"},{"type":"DELETE","lineNumber":878,"oldContent":"  Future<void> _scheduleHabitNotifications(Habit habit) async {"},{"type":"DELETE","lineNumber":879,"oldContent":""},{"type":"DELETE","lineNumber":880,"oldContent":"    }"},{"type":"INSERT","lineNumber":877,"content":"                trailing: const Icon(Icons.access_time),"},{"type":"INSERT","lineNumber":878,"content":"                onTap: _selectNotificationTime,"},{"type":"INSERT","lineNumber":879,"content":"              ),"},{"type":"INSERT","lineNumber":880,"content":"            ],"},{"type":"MODIFY","lineNumber":979,"content":"","oldContent":"      "},{"type":"DELETE","lineNumber":1000,"oldContent":"      "},{"type":"MODIFY","lineNumber":1002,"content":"","oldContent":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1003,"content":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1005,"oldContent":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int"},{"type":"MODIFY","lineNumber":1007,"content":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int","oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1008,"content":"        frequency: _selectedFrequency,"},{"type":"MODIFY","lineNumber":1017,"content":"","oldContent":"      "},{"type":"DELETE","lineNumber":1023,"oldContent":"      await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":1025,"oldContent":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":1027,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1028,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1031,"oldContent":"      }"},{"type":"INSERT","lineNumber":1028,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1030,"content":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1031,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1032,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1033,"content":"      }"},{"type":"MODIFY","lineNumber":1036,"content":"      if (mounted) {","oldContent":"      if (mounted) {"},{"type":"MODIFY","lineNumber":1048,"content":"","oldContent":""},{"type":"INSERT","lineNumber":1056,"content":""},{"type":"DELETE","lineNumber":1057,"oldContent":"      "},{"type":"INSERT","lineNumber":1066,"content":"  }"},{"type":"INSERT","lineNumber":1067,"content":"}"},{"type":"INSERT","lineNumber":1068,"content":""}]},{"timestamp":1754464673209,"changes":[{"type":"INSERT","lineNumber":4,"content":"import '../../domain/model/habit.dart';"},{"type":"DELETE","lineNumber":5,"oldContent":"import '../../services/logging_service.dart';"},{"type":"MODIFY","lineNumber":28,"content":"  DateTime _focusedMonth = DateTime.now(); // New: For calendar navigation","oldContent":"  DateTime _focusedMonth = DateTime.now(); // New: For calendar navigation"},{"type":"MODIFY","lineNumber":81,"content":"            const SizedBox(height: 24),","oldContent":"            const SizedBox(height: 24),"},{"type":"MODIFY","lineNumber":156,"content":"    print('DEBUG: Building frequency section, current frequency: $_selectedFrequency'); // Debug print","oldContent":"    print('DEBUG: Building frequency section, current frequency: $_selectedFrequency'); // Debug print"},{"type":"MODIFY","lineNumber":174,"content":"                print('DEBUG: Creating choice chip for frequency: $frequency'); // Debug print","oldContent":"                print('DEBUG: Creating choice chip for frequency: $frequency'); // Debug print"},{"type":"MODIFY","lineNumber":180,"content":"                      print('DEBUG: Selected frequency: $frequency'); // Debug print","oldContent":"                      print('DEBUG: Selected frequency: $frequency'); // Debug print"},{"type":"INSERT","lineNumber":184,"content":"                        _selectedMonthDays.clear();"},{"type":"DELETE","lineNumber":186,"oldContent":"                        _selectedMonthDays.clear();"},{"type":"MODIFY","lineNumber":192,"content":"            ),","oldContent":"            ),"},{"type":"MODIFY","lineNumber":195,"content":"              const SizedBox(height: 16),","oldContent":"              const SizedBox(height: 16),"},{"type":"MODIFY","lineNumber":201,"content":"              ),","oldContent":"              ),"},{"type":"INSERT","lineNumber":205,"content":"            if (_selectedFrequency == HabitFrequency.weekly) ...["},{"type":"DELETE","lineNumber":208,"oldContent":"                'Select days of the week:',"},{"type":"MODIFY","lineNumber":211,"content":"                    ),","oldContent":"                    ),"},{"type":"MODIFY","lineNumber":228,"content":"            // Enhanced Yearly Habits - Calendar-style date picker","oldContent":"            // Enhanced Yearly Habits - Calendar-style date picker"},{"type":"DELETE","lineNumber":234,"oldContent":"                      final count = int.tryParse(value);"},{"type":"DELETE","lineNumber":235,"oldContent":"                      if (count != null && count > 0) {"},{"type":"DELETE","lineNumber":236,"oldContent":"                      }"},{"type":"DELETE","lineNumber":237,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":238,"oldContent":"                ),"},{"type":"INSERT","lineNumber":234,"content":"                      fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":235,"content":"                    ),"},{"type":"INSERT","lineNumber":236,"content":"              ),"},{"type":"INSERT","lineNumber":237,"content":"              const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":238,"content":"              _buildYearlyCalendarSelector(),"},{"type":"INSERT","lineNumber":244,"content":"      ),"},{"type":"DELETE","lineNumber":246,"oldContent":"      ),"},{"type":"DELETE","lineNumber":288,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":289,"oldContent":"            ),"},{"type":"DELETE","lineNumber":290,"oldContent":"            Wrap("},{"type":"DELETE","lineNumber":291,"oldContent":"              runSpacing: 8,"},{"type":"DELETE","lineNumber":292,"oldContent":"                return GestureDetector("},{"type":"DELETE","lineNumber":293,"oldContent":"                  onTap: () {"},{"type":"DELETE","lineNumber":294,"oldContent":"                      _selectedColor = color;"},{"type":"DELETE","lineNumber":295,"oldContent":"                    });"},{"type":"DELETE","lineNumber":296,"oldContent":"                  child: Container("},{"type":"DELETE","lineNumber":297,"oldContent":"                    height: 40,"},{"type":"DELETE","lineNumber":298,"oldContent":"                    decoration: BoxDecoration("},{"type":"DELETE","lineNumber":299,"oldContent":"                      shape: BoxShape.circle,"},{"type":"DELETE","lineNumber":300,"oldContent":"                      border: _selectedColor == color"},{"type":"DELETE","lineNumber":301,"oldContent":"                          : null,"},{"type":"DELETE","lineNumber":302,"oldContent":"                    child: _selectedColor == color"},{"type":"DELETE","lineNumber":303,"oldContent":"                        ? const Icon(Icons.check, color: Colors.white)"},{"type":"DELETE","lineNumber":304,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":305,"oldContent":"                );"},{"type":"DELETE","lineNumber":306,"oldContent":"            ),"},{"type":"INSERT","lineNumber":288,"content":"                icon: const Icon(Icons.add_alarm),"},{"type":"INSERT","lineNumber":289,"content":"                label: const Text('Add Time'),"},{"type":"INSERT","lineNumber":290,"content":"                style: ElevatedButton.styleFrom("},{"type":"INSERT","lineNumber":291,"content":"                  minimumSize: const Size(double.infinity, 40),"},{"type":"INSERT","lineNumber":292,"content":"                ),"},{"type":"INSERT","lineNumber":293,"content":"              ),"},{"type":"INSERT","lineNumber":294,"content":"            ],"},{"type":"INSERT","lineNumber":295,"content":"          ),"},{"type":"DELETE","lineNumber":308,"oldContent":"      ),"},{"type":"INSERT","lineNumber":297,"content":"        if (_hourlyTimes.isNotEmpty) ...["},{"type":"INSERT","lineNumber":298,"content":"          const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":299,"content":"          Text("},{"type":"INSERT","lineNumber":300,"content":"            '${_hourlyTimes.length} times selected',"},{"type":"INSERT","lineNumber":301,"content":"            style: Theme.of(context).textTheme.bodySmall?.copyWith("},{"type":"INSERT","lineNumber":302,"content":"              color: Colors.green.shade700,"},{"type":"INSERT","lineNumber":303,"content":"              fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":304,"content":"            ),"},{"type":"INSERT","lineNumber":305,"content":"          ),"},{"type":"INSERT","lineNumber":306,"content":"        ],"},{"type":"INSERT","lineNumber":307,"content":"      ],"},{"type":"INSERT","lineNumber":308,"content":"    );"},{"type":"MODIFY","lineNumber":347,"content":"                  ),","oldContent":"                  }"},{"type":"INSERT","lineNumber":348,"content":"                ),"},{"type":"DELETE","lineNumber":362,"oldContent":"            ],"},{"type":"DELETE","lineNumber":405,"oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":406,"oldContent":"          content: Text('Please select at least one day for weekly habits'),"},{"type":"INSERT","lineNumber":405,"content":"            ),"},{"type":"INSERT","lineNumber":406,"content":"          ),"},{"type":"MODIFY","lineNumber":414,"content":"            ),","oldContent":"          content: Text('Please select at least one day for monthly habits'),"},{"type":"INSERT","lineNumber":419,"content":""},{"type":"DELETE","lineNumber":420,"oldContent":"    try {"},{"type":"DELETE","lineNumber":458,"oldContent":"                    ? 'Habit created with notifications scheduled!'"},{"type":"DELETE","lineNumber":459,"oldContent":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":460,"oldContent":"              ),"},{"type":"DELETE","lineNumber":461,"oldContent":"            );"},{"type":"DELETE","lineNumber":462,"oldContent":"          }"},{"type":"DELETE","lineNumber":463,"oldContent":"        loading: () {"},{"type":"DELETE","lineNumber":464,"oldContent":"          // Show loading indicator"},{"type":"DELETE","lineNumber":465,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":466,"oldContent":"              const SnackBar(content: Text('Loading...')),"},{"type":"DELETE","lineNumber":467,"oldContent":"          }"},{"type":"DELETE","lineNumber":468,"oldContent":"        },"},{"type":"DELETE","lineNumber":469,"oldContent":"        error: (error, stack) {"},{"type":"DELETE","lineNumber":470,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":471,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":472,"oldContent":"              SnackBar("},{"type":"DELETE","lineNumber":473,"oldContent":"                content: Text('Error creating habit: $error'),"},{"type":"DELETE","lineNumber":474,"oldContent":"                backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":475,"oldContent":"              ),"},{"type":"DELETE","lineNumber":476,"oldContent":"            );"},{"type":"DELETE","lineNumber":477,"oldContent":"          }"},{"type":"DELETE","lineNumber":478,"oldContent":"        },"},{"type":"DELETE","lineNumber":479,"oldContent":"      );"},{"type":"DELETE","lineNumber":480,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":481,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":482,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":483,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":484,"oldContent":"            content: Text('Error creating habit: $e'),"},{"type":"DELETE","lineNumber":485,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":458,"content":"  Widget _buildYearlyCalendarSelector() {"},{"type":"INSERT","lineNumber":459,"content":"    return Column("},{"type":"INSERT","lineNumber":460,"content":"      crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":461,"content":"      children: ["},{"type":"INSERT","lineNumber":462,"content":"        Container("},{"type":"INSERT","lineNumber":463,"content":"          decoration: BoxDecoration("},{"type":"INSERT","lineNumber":464,"content":"            border: Border.all(color: Colors.grey.shade300),"},{"type":"INSERT","lineNumber":465,"content":"            borderRadius: BorderRadius.circular(8),"},{"type":"DELETE","lineNumber":487,"oldContent":"        );"},{"type":"DELETE","lineNumber":488,"oldContent":"      }"},{"type":"DELETE","lineNumber":489,"oldContent":"    }"},{"type":"DELETE","lineNumber":490,"oldContent":"  }"},{"type":"DELETE","lineNumber":491,"oldContent":""},{"type":"DELETE","lineNumber":492,"oldContent":"  /// Schedule notifications for the created habit based on its frequency"},{"type":"DELETE","lineNumber":493,"oldContent":"  Future<void> _scheduleHabitNotifications(Habit habit) async {"},{"type":"DELETE","lineNumber":494,"oldContent":"    if (!habit.notificationsEnabled || habit.notificationTime == null) {"},{"type":"DELETE","lineNumber":495,"oldContent":"      return;"},{"type":"DELETE","lineNumber":496,"oldContent":"    }"},{"type":"DELETE","lineNumber":497,"oldContent":""},{"type":"DELETE","lineNumber":498,"oldContent":"    final notificationTime = habit.notificationTime!;"},{"type":"DELETE","lineNumber":499,"oldContent":"    final hour = notificationTime.hour;"},{"type":"INSERT","lineNumber":467,"content":"          child: Column("},{"type":"INSERT","lineNumber":468,"content":"            children: ["},{"type":"INSERT","lineNumber":469,"content":"              // Calendar header with month navigation"},{"type":"INSERT","lineNumber":470,"content":"              Container("},{"type":"INSERT","lineNumber":471,"content":"                color: Colors.grey.shade100,"},{"type":"INSERT","lineNumber":472,"content":"                padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),"},{"type":"INSERT","lineNumber":473,"content":"                child: Row("},{"type":"INSERT","lineNumber":474,"content":"                  mainAxisAlignment: MainAxisAlignment.spaceBetween,"},{"type":"INSERT","lineNumber":475,"content":"                  children: ["},{"type":"INSERT","lineNumber":476,"content":"                    IconButton("},{"type":"INSERT","lineNumber":477,"content":"                      onPressed: () {"},{"type":"INSERT","lineNumber":478,"content":"                        setState(() {"},{"type":"INSERT","lineNumber":479,"content":"                          _focusedMonth = DateTime(_focusedMonth.year, _focusedMonth.month - 1);"},{"type":"INSERT","lineNumber":480,"content":"                        });"},{"type":"INSERT","lineNumber":481,"content":"                      },"},{"type":"INSERT","lineNumber":482,"content":"                      icon: const Icon(Icons.chevron_left),"},{"type":"INSERT","lineNumber":483,"content":"                    ),"},{"type":"INSERT","lineNumber":484,"content":"                    Text("},{"type":"INSERT","lineNumber":485,"content":"                      '${_getMonthName(_focusedMonth.month)} ${_focusedMonth.year}',"},{"type":"INSERT","lineNumber":486,"content":"                      style: const TextStyle("},{"type":"INSERT","lineNumber":487,"content":"                        fontSize: 18,"},{"type":"INSERT","lineNumber":488,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":489,"content":"                      ),"},{"type":"INSERT","lineNumber":490,"content":"                    ),"},{"type":"INSERT","lineNumber":491,"content":"                    IconButton("},{"type":"INSERT","lineNumber":492,"content":"                      onPressed: () {"},{"type":"INSERT","lineNumber":493,"content":"                        setState(() {"},{"type":"INSERT","lineNumber":494,"content":"                          _focusedMonth = DateTime(_focusedMonth.year, _focusedMonth.month + 1);"},{"type":"INSERT","lineNumber":495,"content":"                        });"},{"type":"INSERT","lineNumber":496,"content":"                      },"},{"type":"INSERT","lineNumber":497,"content":"                      icon: const Icon(Icons.chevron_right),"},{"type":"INSERT","lineNumber":498,"content":"                    ),"},{"type":"INSERT","lineNumber":499,"content":"                  ],"},{"type":"INSERT","lineNumber":500,"content":"                ),"},{"type":"DELETE","lineNumber":501,"oldContent":"              ),"},{"type":"DELETE","lineNumber":502,"oldContent":"    try {"},{"type":"DELETE","lineNumber":503,"oldContent":"      switch (habit.frequency) {"},{"type":"DELETE","lineNumber":504,"oldContent":"        case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":505,"oldContent":"          await NotificationService.scheduleDailyHabitReminder("},{"type":"DELETE","lineNumber":506,"oldContent":"            habitId: habit.id,"},{"type":"DELETE","lineNumber":507,"oldContent":"            habitName: habit.name,"},{"type":"DELETE","lineNumber":508,"oldContent":"            reminderTime: notificationTime,"},{"type":"DELETE","lineNumber":509,"oldContent":"          );"},{"type":"DELETE","lineNumber":510,"oldContent":"          AppLogger.info('Scheduled daily notification for \"${habit.name}\" at $hour:$minute');"},{"type":"DELETE","lineNumber":511,"oldContent":"          break;"},{"type":"DELETE","lineNumber":512,"oldContent":""},{"type":"DELETE","lineNumber":513,"oldContent":"        case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":514,"oldContent":"          // Schedule notifications for selected weekdays"},{"type":"DELETE","lineNumber":515,"oldContent":"          for (int weekday in habit.weeklySchedule) {"},{"type":"DELETE","lineNumber":516,"oldContent":"            final now = DateTime.now();"},{"type":"DELETE","lineNumber":517,"oldContent":"            DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":518,"oldContent":""},{"type":"DELETE","lineNumber":519,"oldContent":"            // Find the next occurrence of this weekday"},{"type":"DELETE","lineNumber":520,"oldContent":"              nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":521,"oldContent":""},{"type":"DELETE","lineNumber":522,"oldContent":"            if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":523,"oldContent":"            }"},{"type":"DELETE","lineNumber":524,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":525,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":526,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":527,"oldContent":"            );"},{"type":"DELETE","lineNumber":528,"oldContent":"          }"},{"type":"DELETE","lineNumber":529,"oldContent":""},{"type":"DELETE","lineNumber":530,"oldContent":"          // Schedule notifications for selected month days"},{"type":"DELETE","lineNumber":531,"oldContent":"            final now = DateTime.now();"},{"type":"DELETE","lineNumber":532,"oldContent":""},{"type":"DELETE","lineNumber":533,"oldContent":"            if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":534,"oldContent":"            }"},{"type":"DELETE","lineNumber":535,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":536,"oldContent":"              title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":537,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":538,"oldContent":"            );"},{"type":"DELETE","lineNumber":539,"oldContent":"          }"},{"type":"DELETE","lineNumber":540,"oldContent":"          break;"},{"type":"DELETE","lineNumber":541,"oldContent":"        case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":542,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":543,"oldContent":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"DELETE","lineNumber":544,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":545,"oldContent":"              title: '⏰ ${habit.name}',"},{"type":"DELETE","lineNumber":546,"oldContent":"              scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":547,"oldContent":"            );"},{"type":"DELETE","lineNumber":548,"oldContent":"          AppLogger.info('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"DELETE","lineNumber":549,"oldContent":""},{"type":"DELETE","lineNumber":550,"oldContent":"          // Schedule for next year at the same time"},{"type":"DELETE","lineNumber":551,"oldContent":"          final nextNotification = DateTime(now.year + 1, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":552,"oldContent":"          await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":553,"oldContent":"            title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":554,"oldContent":"            scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":502,"content":"              // Days of week header"},{"type":"INSERT","lineNumber":503,"content":"              Container("},{"type":"INSERT","lineNumber":504,"content":"                color: Colors.grey.shade200,"},{"type":"INSERT","lineNumber":505,"content":"                padding: const EdgeInsets.symmetric(vertical: 8),"},{"type":"INSERT","lineNumber":506,"content":"                child: Row("},{"type":"INSERT","lineNumber":507,"content":"                  mainAxisAlignment: MainAxisAlignment.spaceAround,"},{"type":"INSERT","lineNumber":508,"content":"                  children: ["},{"type":"INSERT","lineNumber":509,"content":"                    Expanded("},{"type":"INSERT","lineNumber":510,"content":"                      child: Center("},{"type":"INSERT","lineNumber":512,"content":"                          'Sun',"},{"type":"INSERT","lineNumber":513,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":514,"content":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":515,"content":"                            color: Colors.red.shade600,"},{"type":"INSERT","lineNumber":516,"content":"                          ),"},{"type":"INSERT","lineNumber":517,"content":"                        ),"},{"type":"INSERT","lineNumber":518,"content":"                      ),"},{"type":"INSERT","lineNumber":519,"content":"                    ),"},{"type":"INSERT","lineNumber":520,"content":"                    Expanded("},{"type":"INSERT","lineNumber":521,"content":"                      child: Center("},{"type":"INSERT","lineNumber":522,"content":"                        child: Text("},{"type":"INSERT","lineNumber":523,"content":"                          'Mon',"},{"type":"INSERT","lineNumber":524,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":525,"content":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":526,"content":"                            color: Colors.black,"},{"type":"INSERT","lineNumber":527,"content":"                          ),"},{"type":"INSERT","lineNumber":528,"content":"                        ),"},{"type":"INSERT","lineNumber":529,"content":"                      ),"},{"type":"INSERT","lineNumber":530,"content":"                    ),"},{"type":"INSERT","lineNumber":531,"content":"                    Expanded("},{"type":"INSERT","lineNumber":532,"content":"                      child: Center("},{"type":"INSERT","lineNumber":533,"content":"                        child: Text("},{"type":"INSERT","lineNumber":534,"content":"                          'Tue',"},{"type":"INSERT","lineNumber":535,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":536,"content":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":537,"content":"                            color: Colors.black,"},{"type":"INSERT","lineNumber":538,"content":"                          ),"},{"type":"INSERT","lineNumber":539,"content":"                        ),"},{"type":"INSERT","lineNumber":540,"content":"                      ),"},{"type":"INSERT","lineNumber":541,"content":"                    ),"},{"type":"INSERT","lineNumber":542,"content":"                    Expanded("},{"type":"INSERT","lineNumber":543,"content":"                      child: Center("},{"type":"INSERT","lineNumber":544,"content":"                        child: Text("},{"type":"INSERT","lineNumber":545,"content":"                          'Wed',"},{"type":"INSERT","lineNumber":546,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":547,"content":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":548,"content":"                            color: Colors.black,"},{"type":"INSERT","lineNumber":549,"content":"                          ),"},{"type":"INSERT","lineNumber":550,"content":"                        ),"},{"type":"INSERT","lineNumber":551,"content":"                      ),"},{"type":"INSERT","lineNumber":552,"content":"                    ),"},{"type":"INSERT","lineNumber":553,"content":"                    Expanded("},{"type":"INSERT","lineNumber":554,"content":"                      child: Center("},{"type":"INSERT","lineNumber":555,"content":"                        child: Text("},{"type":"DELETE","lineNumber":629,"oldContent":"    );"},{"type":"DELETE","lineNumber":631,"oldContent":"      ),"},{"type":"DELETE","lineNumber":632,"oldContent":"        ),"},{"type":"DELETE","lineNumber":633,"oldContent":"            ],"},{"type":"DELETE","lineNumber":634,"oldContent":"                onTap: _selectNotificationTime,"},{"type":"DELETE","lineNumber":635,"oldContent":"                trailing: const Icon(Icons.access_time),"},{"type":"DELETE","lineNumber":636,"oldContent":"                      : 'Not set',"},{"type":"DELETE","lineNumber":637,"oldContent":"                      ? _notificationTime!.format(context)"},{"type":"DELETE","lineNumber":638,"oldContent":"                subtitle: Text("},{"type":"DELETE","lineNumber":639,"oldContent":"              ListTile("},{"type":"DELETE","lineNumber":640,"oldContent":"              const SizedBox(height: 8),"},{"type":"DELETE","lineNumber":641,"oldContent":"            ),"},{"type":"DELETE","lineNumber":642,"oldContent":"              },"},{"type":"DELETE","lineNumber":643,"oldContent":"                  }"},{"type":"DELETE","lineNumber":644,"oldContent":"                    _notificationTime = null;"},{"type":"DELETE","lineNumber":645,"oldContent":"                  _notificationsEnabled = value;"},{"type":"DELETE","lineNumber":646,"oldContent":"                setState(() {"},{"type":"DELETE","lineNumber":647,"oldContent":"              value: _notificationsEnabled,"},{"type":"DELETE","lineNumber":648,"oldContent":"              subtitle: const Text('Get reminded to complete your habit'),"},{"type":"DELETE","lineNumber":649,"oldContent":"            SwitchListTile("},{"type":"DELETE","lineNumber":650,"oldContent":"            const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":651,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":652,"oldContent":"                    fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":653,"oldContent":"              'Notifications',"},{"type":"DELETE","lineNumber":654,"oldContent":"            Text("},{"type":"DELETE","lineNumber":655,"oldContent":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"DELETE","lineNumber":656,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":657,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":658,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":660,"oldContent":"  }"},{"type":"INSERT","lineNumber":631,"content":"  Widget _buildYearlyCalendarGrid() {"},{"type":"INSERT","lineNumber":632,"content":"    final firstDayOfMonth = DateTime(_focusedMonth.year, _focusedMonth.month, 1);"},{"type":"INSERT","lineNumber":633,"content":"    final lastDayOfMonth = DateTime(_focusedMonth.year, _focusedMonth.month + 1, 0);"},{"type":"INSERT","lineNumber":634,"content":"    final firstWeekday = firstDayOfMonth.weekday % 7; // Sunday = 0"},{"type":"INSERT","lineNumber":635,"content":"    final daysInMonth = lastDayOfMonth.day;"},{"type":"INSERT","lineNumber":636,"content":""},{"type":"INSERT","lineNumber":637,"content":"    return GridView.builder("},{"type":"INSERT","lineNumber":638,"content":"      shrinkWrap: true,"},{"type":"INSERT","lineNumber":639,"content":"      physics: const NeverScrollableScrollPhysics(),"},{"type":"INSERT","lineNumber":640,"content":"      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount("},{"type":"INSERT","lineNumber":641,"content":"        crossAxisCount: 7,"},{"type":"INSERT","lineNumber":642,"content":"        childAspectRatio: 1.2,"},{"type":"DELETE","lineNumber":662,"oldContent":"        ),"},{"type":"DELETE","lineNumber":663,"oldContent":"            ),"},{"type":"DELETE","lineNumber":664,"oldContent":"              }).toList(),"},{"type":"DELETE","lineNumber":665,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":666,"oldContent":"                        : null,"},{"type":"DELETE","lineNumber":667,"oldContent":"                    child: _selectedColor == color"},{"type":"DELETE","lineNumber":668,"oldContent":"                    ),"},{"type":"INSERT","lineNumber":644,"content":"      itemCount: firstWeekday + daysInMonth,"},{"type":"INSERT","lineNumber":645,"content":"      itemBuilder: (context, index) {"},{"type":"INSERT","lineNumber":646,"content":"        if (index < firstWeekday) {"},{"type":"INSERT","lineNumber":647,"content":"          // Empty cells for days before the first day of the month"},{"type":"INSERT","lineNumber":648,"content":"          return Container();"},{"type":"INSERT","lineNumber":649,"content":"        }"},{"type":"INSERT","lineNumber":650,"content":""},{"type":"INSERT","lineNumber":651,"content":"        final day = index - firstWeekday + 1;"},{"type":"INSERT","lineNumber":652,"content":"        final currentDate = DateTime(_focusedMonth.year, _focusedMonth.month, day);"},{"type":"INSERT","lineNumber":653,"content":"        final normalizedDate = DateTime(currentDate.year, currentDate.month, currentDate.day);"},{"type":"INSERT","lineNumber":654,"content":"        final isSelected = _selectedYearlyDates.contains(normalizedDate);"},{"type":"INSERT","lineNumber":655,"content":"        final isToday = _isSameDay(currentDate, DateTime.now());"},{"type":"INSERT","lineNumber":656,"content":""},{"type":"INSERT","lineNumber":657,"content":"        return GestureDetector("},{"type":"INSERT","lineNumber":658,"content":"          onTap: () {"},{"type":"INSERT","lineNumber":659,"content":"            setState(() {"},{"type":"INSERT","lineNumber":660,"content":"              if (isSelected) {"},{"type":"INSERT","lineNumber":661,"content":"                _selectedYearlyDates.remove(normalizedDate);"},{"type":"INSERT","lineNumber":662,"content":"              } else {"},{"type":"INSERT","lineNumber":663,"content":"                _selectedYearlyDates.add(normalizedDate);"},{"type":"INSERT","lineNumber":664,"content":"              }"},{"type":"INSERT","lineNumber":665,"content":"            });"},{"type":"INSERT","lineNumber":666,"content":"          },"},{"type":"INSERT","lineNumber":667,"content":"          child: Container("},{"type":"INSERT","lineNumber":668,"content":"            margin: const EdgeInsets.all(2),"},{"type":"DELETE","lineNumber":674,"oldContent":"                  child: Container("},{"type":"DELETE","lineNumber":675,"oldContent":"                    });"},{"type":"INSERT","lineNumber":674,"content":"                      : null,"},{"type":"INSERT","lineNumber":675,"content":"              borderRadius: BorderRadius.circular(8),"},{"type":"DELETE","lineNumber":780,"oldContent":"    }"},{"type":"DELETE","lineNumber":781,"oldContent":"      }"},{"type":"DELETE","lineNumber":782,"oldContent":"          ),"},{"type":"DELETE","lineNumber":783,"oldContent":"            content: Text('Error creating habit: $e'),"},{"type":"DELETE","lineNumber":784,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":785,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":786,"oldContent":"        },"},{"type":"DELETE","lineNumber":787,"oldContent":"          }"},{"type":"DELETE","lineNumber":788,"oldContent":"              ),"},{"type":"DELETE","lineNumber":789,"oldContent":"                content: Text('Error creating habit: $error'),"},{"type":"DELETE","lineNumber":790,"oldContent":"              SnackBar("},{"type":"DELETE","lineNumber":791,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":792,"oldContent":"        },"},{"type":"DELETE","lineNumber":793,"oldContent":"          }"},{"type":"DELETE","lineNumber":794,"oldContent":"            );"},{"type":"DELETE","lineNumber":795,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":796,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":797,"oldContent":"        loading: () {"},{"type":"DELETE","lineNumber":798,"oldContent":"          }"},{"type":"DELETE","lineNumber":799,"oldContent":"            context.pop();"},{"type":"DELETE","lineNumber":800,"oldContent":"              ),"},{"type":"DELETE","lineNumber":801,"oldContent":"                    : 'Habit created successfully!'),"},{"type":"DELETE","lineNumber":802,"oldContent":"                    ? 'Habit created with notifications scheduled!'"},{"type":"DELETE","lineNumber":803,"oldContent":"              SnackBar("},{"type":"DELETE","lineNumber":804,"oldContent":"          if (mounted) {"},{"type":"INSERT","lineNumber":780,"content":"            });"},{"type":"INSERT","lineNumber":781,"content":"          },"},{"type":"INSERT","lineNumber":782,"content":"        );"},{"type":"INSERT","lineNumber":783,"content":"      }),"},{"type":"INSERT","lineNumber":784,"content":"    );"},{"type":"INSERT","lineNumber":785,"content":"  }"},{"type":"DELETE","lineNumber":806,"oldContent":"            await _scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":807,"oldContent":"          // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":808,"oldContent":""},{"type":"DELETE","lineNumber":809,"oldContent":""},{"type":"DELETE","lineNumber":810,"oldContent":"            monthlySchedule: _selectedMonthDays,"},{"type":"DELETE","lineNumber":811,"oldContent":"            weeklySchedule: _selectedWeekdays,"},{"type":"DELETE","lineNumber":812,"oldContent":"                ? DateTime(2024, 1, 1, _notificationTime!.hour, _notificationTime!.minute)"},{"type":"DELETE","lineNumber":813,"oldContent":"            notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":814,"oldContent":"            targetCount: _targetCount,"},{"type":"DELETE","lineNumber":815,"oldContent":"            colorValue: _selectedColor.toARGB32(),"},{"type":"DELETE","lineNumber":816,"oldContent":"                : _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":817,"oldContent":"                ? null"},{"type":"DELETE","lineNumber":818,"oldContent":"            name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":819,"oldContent":"          final habit = Habit.create("},{"type":"DELETE","lineNumber":820,"oldContent":"      habitServiceAsync.when("},{"type":"DELETE","lineNumber":821,"oldContent":""},{"type":"DELETE","lineNumber":822,"oldContent":"    try {"},{"type":"DELETE","lineNumber":823,"oldContent":"      return;"},{"type":"DELETE","lineNumber":824,"oldContent":"      );"},{"type":"DELETE","lineNumber":825,"oldContent":""},{"type":"DELETE","lineNumber":826,"oldContent":"      );"},{"type":"INSERT","lineNumber":787,"content":"  Widget _buildCustomizationSection() {"},{"type":"INSERT","lineNumber":788,"content":"    return Card("},{"type":"INSERT","lineNumber":789,"content":"      child: Padding("},{"type":"INSERT","lineNumber":790,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":791,"content":"        child: Column("},{"type":"INSERT","lineNumber":792,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":793,"content":"          children: ["},{"type":"INSERT","lineNumber":794,"content":"            Text("},{"type":"INSERT","lineNumber":795,"content":"              'Customization',"},{"type":"INSERT","lineNumber":796,"content":"              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"INSERT","lineNumber":797,"content":"                    fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":798,"content":"                  ),"},{"type":"INSERT","lineNumber":799,"content":"            ),"},{"type":"INSERT","lineNumber":800,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":801,"content":"            Text("},{"type":"INSERT","lineNumber":802,"content":"              'Choose a color:',"},{"type":"INSERT","lineNumber":803,"content":"              style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":804,"content":"                    fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":805,"content":"                  ),"},{"type":"INSERT","lineNumber":806,"content":"            ),"},{"type":"INSERT","lineNumber":807,"content":"            const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":808,"content":"            Wrap("},{"type":"INSERT","lineNumber":809,"content":"              spacing: 8,"},{"type":"INSERT","lineNumber":810,"content":"              runSpacing: 8,"},{"type":"INSERT","lineNumber":811,"content":"              children: _colors.map((color) {"},{"type":"INSERT","lineNumber":812,"content":"                return GestureDetector("},{"type":"INSERT","lineNumber":813,"content":"                  onTap: () {"},{"type":"INSERT","lineNumber":814,"content":"                    setState(() {"},{"type":"INSERT","lineNumber":815,"content":"                      _selectedColor = color;"},{"type":"INSERT","lineNumber":816,"content":"                    });"},{"type":"INSERT","lineNumber":817,"content":"                  },"},{"type":"INSERT","lineNumber":818,"content":"                  child: Container("},{"type":"INSERT","lineNumber":819,"content":"                    width: 40,"},{"type":"INSERT","lineNumber":820,"content":"                    height: 40,"},{"type":"INSERT","lineNumber":821,"content":"                    decoration: BoxDecoration("},{"type":"INSERT","lineNumber":822,"content":"                      color: color,"},{"type":"INSERT","lineNumber":823,"content":"                      shape: BoxShape.circle,"},{"type":"INSERT","lineNumber":824,"content":"                      border: _selectedColor == color"},{"type":"INSERT","lineNumber":825,"content":"                          ? Border.all(color: Colors.black, width: 3)"},{"type":"INSERT","lineNumber":826,"content":"                          : null,"},{"type":"INSERT","lineNumber":827,"content":"                    ),"},{"type":"INSERT","lineNumber":828,"content":"                    child: _selectedColor == color"},{"type":"INSERT","lineNumber":829,"content":"                        ? const Icon(Icons.check, color: Colors.white)"},{"type":"INSERT","lineNumber":830,"content":"                        : null,"},{"type":"INSERT","lineNumber":831,"content":"                  ),"},{"type":"INSERT","lineNumber":832,"content":"                );"},{"type":"INSERT","lineNumber":833,"content":"              }).toList(),"},{"type":"INSERT","lineNumber":834,"content":"            ),"},{"type":"INSERT","lineNumber":835,"content":"          ],"},{"type":"DELETE","lineNumber":828,"oldContent":""},{"type":"DELETE","lineNumber":829,"oldContent":"    final notificationTime = habit.notificationTime!;"},{"type":"DELETE","lineNumber":830,"oldContent":""},{"type":"DELETE","lineNumber":831,"oldContent":"    }"},{"type":"DELETE","lineNumber":832,"oldContent":"      return;"},{"type":"DELETE","lineNumber":833,"oldContent":"      );"},{"type":"DELETE","lineNumber":834,"oldContent":"        ),"},{"type":"DELETE","lineNumber":835,"oldContent":"          content: Text('Please select at least one date for yearly habits'),"},{"type":"DELETE","lineNumber":836,"oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":837,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":838,"oldContent":"    if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":839,"oldContent":"    // New validation for yearly habits"},{"type":"DELETE","lineNumber":840,"oldContent":""},{"type":"DELETE","lineNumber":841,"oldContent":"    }"},{"type":"DELETE","lineNumber":842,"oldContent":"      return;"},{"type":"DELETE","lineNumber":843,"oldContent":"      );"},{"type":"DELETE","lineNumber":844,"oldContent":"        ),"},{"type":"DELETE","lineNumber":845,"oldContent":"          content: Text('Please select at least one time for hourly habits'),"},{"type":"DELETE","lineNumber":846,"oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":847,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":848,"oldContent":"    if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"DELETE","lineNumber":849,"oldContent":"    // New validation for hourly habits"},{"type":"DELETE","lineNumber":850,"oldContent":""},{"type":"DELETE","lineNumber":851,"oldContent":"      return;"},{"type":"DELETE","lineNumber":852,"oldContent":"      );"},{"type":"DELETE","lineNumber":853,"oldContent":"        ),"},{"type":"DELETE","lineNumber":854,"oldContent":"          content: Text('Please select at least one day for monthly habits'),"},{"type":"DELETE","lineNumber":855,"oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":856,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":857,"oldContent":"    if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"DELETE","lineNumber":858,"oldContent":""},{"type":"DELETE","lineNumber":859,"oldContent":"        ),"},{"type":"DELETE","lineNumber":860,"oldContent":"          content: Text('Please select at least one day for weekly habits'),"},{"type":"DELETE","lineNumber":861,"oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":862,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":863,"oldContent":"    if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"DELETE","lineNumber":864,"oldContent":"    // Validate frequency-specific requirements"},{"type":"DELETE","lineNumber":865,"oldContent":""},{"type":"DELETE","lineNumber":866,"oldContent":"    }"},{"type":"DELETE","lineNumber":867,"oldContent":"      return;"},{"type":"DELETE","lineNumber":868,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":869,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":870,"oldContent":""},{"type":"INSERT","lineNumber":837,"content":"      ),"},{"type":"INSERT","lineNumber":838,"content":"    );"},{"type":"DELETE","lineNumber":872,"oldContent":"    }"},{"type":"DELETE","lineNumber":873,"oldContent":"      });"},{"type":"DELETE","lineNumber":874,"oldContent":"        _notificationTime = picked;"},{"type":"DELETE","lineNumber":875,"oldContent":"      setState(() {"},{"type":"DELETE","lineNumber":876,"oldContent":"    if (picked != null) {"},{"type":"INSERT","lineNumber":840,"content":""},{"type":"INSERT","lineNumber":841,"content":"  Widget _buildNotificationSection() {"},{"type":"INSERT","lineNumber":842,"content":"    return Card("},{"type":"INSERT","lineNumber":843,"content":"      child: Padding("},{"type":"INSERT","lineNumber":844,"content":"        padding: const EdgeInsets.all(16),"},{"type":"INSERT","lineNumber":845,"content":"        child: Column("},{"type":"INSERT","lineNumber":846,"content":"          crossAxisAlignment: CrossAxisAlignment.start,"},{"type":"INSERT","lineNumber":847,"content":"          children: ["},{"type":"INSERT","lineNumber":848,"content":"            Text("},{"type":"INSERT","lineNumber":849,"content":"              'Notifications',"},{"type":"INSERT","lineNumber":850,"content":"              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"INSERT","lineNumber":851,"content":"                    fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":852,"content":"                  ),"},{"type":"INSERT","lineNumber":853,"content":"            ),"},{"type":"INSERT","lineNumber":854,"content":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":855,"content":"            SwitchListTile("},{"type":"INSERT","lineNumber":856,"content":"              title: const Text('Enable Notifications'),"},{"type":"INSERT","lineNumber":857,"content":"              subtitle: const Text('Get reminded to complete your habit'),"},{"type":"INSERT","lineNumber":858,"content":"              value: _notificationsEnabled,"},{"type":"INSERT","lineNumber":859,"content":"              onChanged: (value) {"},{"type":"INSERT","lineNumber":860,"content":"                setState(() {"},{"type":"INSERT","lineNumber":861,"content":"                  _notificationsEnabled = value;"},{"type":"INSERT","lineNumber":862,"content":"                  if (!value) {"},{"type":"INSERT","lineNumber":863,"content":"                    _notificationTime = null;"},{"type":"INSERT","lineNumber":864,"content":"                  }"},{"type":"INSERT","lineNumber":865,"content":"                });"},{"type":"INSERT","lineNumber":866,"content":"              },"},{"type":"INSERT","lineNumber":867,"content":"            ),"},{"type":"INSERT","lineNumber":868,"content":"            if (_notificationsEnabled) ...["},{"type":"INSERT","lineNumber":869,"content":"              const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":870,"content":"              ListTile("},{"type":"INSERT","lineNumber":871,"content":"                title: const Text('Notification Time'),"},{"type":"INSERT","lineNumber":872,"content":"                subtitle: Text("},{"type":"INSERT","lineNumber":873,"content":"                  _notificationTime != null"},{"type":"INSERT","lineNumber":874,"content":"                      ? _notificationTime!.format(context)"},{"type":"INSERT","lineNumber":875,"content":"                      : 'Not set',"},{"type":"INSERT","lineNumber":876,"content":"                ),"},{"type":"INSERT","lineNumber":970,"content":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"DELETE","lineNumber":971,"oldContent":"            backgroundColor: Colors.red,"},{"type":"MODIFY","lineNumber":979,"content":"      ","oldContent":""},{"type":"DELETE","lineNumber":1001,"oldContent":""},{"type":"MODIFY","lineNumber":1002,"content":"      ","oldContent":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1003,"content":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1006,"content":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":1008,"oldContent":"        category: _selectedCategory,"},{"type":"MODIFY","lineNumber":1017,"content":"      ","oldContent":""},{"type":"DELETE","lineNumber":1025,"oldContent":"      await habitService.addHabit(habit);"},{"type":"MODIFY","lineNumber":1027,"content":"","oldContent":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1028,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1029,"content":""},{"type":"INSERT","lineNumber":1030,"content":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":1031,"oldContent":""},{"type":"DELETE","lineNumber":1034,"oldContent":""},{"type":"INSERT","lineNumber":1035,"content":"      // Log the habit creation"},{"type":"DELETE","lineNumber":1036,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1047,"content":"        );"},{"type":"DELETE","lineNumber":1048,"oldContent":""},{"type":"MODIFY","lineNumber":1056,"content":"      ","oldContent":""},{"type":"DELETE","lineNumber":1063,"oldContent":""},{"type":"DELETE","lineNumber":1064,"oldContent":"}"},{"type":"INSERT","lineNumber":1063,"content":"        );"},{"type":"INSERT","lineNumber":1064,"content":"      }"},{"type":"INSERT","lineNumber":1065,"content":"    }"},{"type":"INSERT","lineNumber":1067,"content":"}"},{"type":"INSERT","lineNumber":1068,"content":""}]},{"timestamp":1754491465694,"changes":[{"type":"INSERT","lineNumber":27,"content":"  final Set<DateTime> _selectedYearlyDates = {}; // New: Selected dates for yearly habits"},{"type":"DELETE","lineNumber":28,"oldContent":"  DateTime _focusedMonth = DateTime.now(); // New: For calendar navigation"},{"type":"INSERT","lineNumber":80,"content":"            _buildFrequencySection(),"},{"type":"DELETE","lineNumber":81,"oldContent":"            const SizedBox(height: 24),"},{"type":"INSERT","lineNumber":155,"content":"  Widget _buildFrequencySection() {"},{"type":"DELETE","lineNumber":156,"oldContent":"    print('DEBUG: Building frequency section, current frequency: $_selectedFrequency'); // Debug print"},{"type":"INSERT","lineNumber":173,"content":"              children: HabitFrequency.values.map((frequency) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                print('DEBUG: Creating choice chip for frequency: $frequency'); // Debug print"},{"type":"INSERT","lineNumber":179,"content":"                    if (selected) {"},{"type":"DELETE","lineNumber":180,"oldContent":"                      print('DEBUG: Selected frequency: $frequency'); // Debug print"},{"type":"INSERT","lineNumber":191,"content":"              }).toList(),"},{"type":"DELETE","lineNumber":192,"oldContent":"            ),"},{"type":"INSERT","lineNumber":194,"content":"            if (_selectedFrequency == HabitFrequency.hourly) ...["},{"type":"DELETE","lineNumber":195,"oldContent":"              const SizedBox(height: 16),"},{"type":"MODIFY","lineNumber":197,"content":"                'Select times throughout the day:',","oldContent":"                      fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":199,"content":"                      fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":201,"oldContent":"              ),"},{"type":"INSERT","lineNumber":203,"content":"              _buildHourlyTimeSelector(),"},{"type":"DELETE","lineNumber":204,"oldContent":"              const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":206,"content":"              const SizedBox(height: 16),"},{"type":"DELETE","lineNumber":207,"oldContent":"                'Select days of the month:',"},{"type":"INSERT","lineNumber":210,"content":"                      fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":211,"oldContent":"                    ),"},{"type":"MODIFY","lineNumber":225,"content":"              const SizedBox(height: 8),","oldContent":"                  width: 80,"},{"type":"INSERT","lineNumber":227,"content":"            ],"},{"type":"DELETE","lineNumber":228,"oldContent":"            // Enhanced Yearly Habits - Calendar-style date picker"},{"type":"MODIFY","lineNumber":233,"content":"                style: Theme.of(context).textTheme.bodyMedium?.copyWith(","oldContent":"                    onChanged: (value) {"},{"type":"DELETE","lineNumber":286,"oldContent":"              style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"DELETE","lineNumber":287,"oldContent":"                  ),"},{"type":"INSERT","lineNumber":286,"content":"              ElevatedButton.icon("},{"type":"INSERT","lineNumber":287,"content":"                onPressed: _addHourlyTime,"},{"type":"INSERT","lineNumber":296,"content":"        ),"},{"type":"DELETE","lineNumber":307,"oldContent":"                          ? Border.all(color: Colors.black, width: 3)"},{"type":"DELETE","lineNumber":332,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":333,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":334,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":335,"oldContent":"            Text("},{"type":"DELETE","lineNumber":336,"oldContent":"              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"INSERT","lineNumber":332,"content":"                        fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":333,"content":"                        color: Colors.red.shade600,"},{"type":"INSERT","lineNumber":334,"content":"                      ),"},{"type":"INSERT","lineNumber":335,"content":"                    ),"},{"type":"INSERT","lineNumber":337,"content":"                ),"},{"type":"MODIFY","lineNumber":404,"content":"              ],","oldContent":"        const SnackBar("},{"type":"DELETE","lineNumber":445,"oldContent":"          if (_notificationsEnabled && _notificationTime != null) {"},{"type":"DELETE","lineNumber":446,"oldContent":"          }"},{"type":"DELETE","lineNumber":447,"oldContent":"          if (mounted) {"},{"type":"DELETE","lineNumber":448,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":449,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null"},{"type":"INSERT","lineNumber":445,"content":"                      ),"},{"type":"INSERT","lineNumber":446,"content":"                    ),"},{"type":"INSERT","lineNumber":447,"content":"                  ),"},{"type":"INSERT","lineNumber":448,"content":"                ),"},{"type":"INSERT","lineNumber":449,"content":"              );"},{"type":"INSERT","lineNumber":466,"content":"          ),"},{"type":"DELETE","lineNumber":486,"oldContent":"          ),"},{"type":"INSERT","lineNumber":511,"content":"                        child: Text("},{"type":"DELETE","lineNumber":555,"oldContent":"                        child: Text("},{"type":"DELETE","lineNumber":614,"oldContent":"          );"},{"type":"DELETE","lineNumber":615,"oldContent":"          break;"},{"type":"DELETE","lineNumber":616,"oldContent":"      }"},{"type":"DELETE","lineNumber":617,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":618,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":619,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":620,"oldContent":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"INSERT","lineNumber":614,"content":"                    ),"},{"type":"INSERT","lineNumber":615,"content":"                    deleteIcon: const Icon(Icons.close, size: 16),"},{"type":"INSERT","lineNumber":616,"content":"                    onDeleted: () {"},{"type":"INSERT","lineNumber":617,"content":"                      setState(() {"},{"type":"INSERT","lineNumber":618,"content":"                        _selectedYearlyDates.remove(date);"},{"type":"INSERT","lineNumber":619,"content":"                      });"},{"type":"INSERT","lineNumber":620,"content":"                    },"},{"type":"INSERT","lineNumber":621,"content":"                  ),"},{"type":"INSERT","lineNumber":622,"content":"                );"},{"type":"INSERT","lineNumber":623,"content":"              }).toList(),"},{"type":"INSERT","lineNumber":624,"content":"            ),"},{"type":"DELETE","lineNumber":622,"oldContent":"        );"},{"type":"DELETE","lineNumber":623,"oldContent":"    }"},{"type":"DELETE","lineNumber":624,"oldContent":"  }"},{"type":"DELETE","lineNumber":625,"oldContent":""},{"type":"DELETE","lineNumber":626,"oldContent":"    if (!habit.notificationsEnabled || habit.notificationTime == null) {"},{"type":"DELETE","lineNumber":627,"oldContent":"  Future<void> _scheduleHabitNotifications(Habit habit) async {"},{"type":"INSERT","lineNumber":626,"content":"        ],"},{"type":"INSERT","lineNumber":627,"content":"      ],"},{"type":"INSERT","lineNumber":630,"content":""},{"type":"INSERT","lineNumber":643,"content":"      ),"},{"type":"DELETE","lineNumber":658,"oldContent":"          await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":661,"oldContent":"          );"},{"type":"INSERT","lineNumber":786,"content":""},{"type":"DELETE","lineNumber":805,"oldContent":"        data: (habitService) async {"},{"type":"DELETE","lineNumber":828,"oldContent":"      case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":836,"content":"        ),"},{"type":"INSERT","lineNumber":839,"content":"  }"},{"type":"DELETE","lineNumber":871,"oldContent":"          ),"},{"type":"DELETE","lineNumber":881,"oldContent":"        final notificationService = NotificationService();"},{"type":"DELETE","lineNumber":882,"oldContent":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":883,"oldContent":"      await database.insertHabit(habit);"},{"type":"INSERT","lineNumber":881,"content":"          ],"},{"type":"INSERT","lineNumber":882,"content":"        ),"},{"type":"INSERT","lineNumber":883,"content":"      ),"},{"type":"DELETE","lineNumber":890,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.toList(),"},{"type":"DELETE","lineNumber":891,"oldContent":"        selectedMonthDays: _selectedMonthDays,"},{"type":"DELETE","lineNumber":892,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":893,"oldContent":"        isActive: true,"},{"type":"DELETE","lineNumber":894,"oldContent":"        createdAt: DateTime.now(),"},{"type":"DELETE","lineNumber":895,"oldContent":"        targetCount: _targetCount,"},{"type":"DELETE","lineNumber":896,"oldContent":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":897,"oldContent":"        color: _selectedColor.value,"},{"type":"DELETE","lineNumber":898,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":899,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":900,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":901,"oldContent":"        id: 0, // Will be auto-generated by the database"},{"type":"DELETE","lineNumber":902,"oldContent":"      final habit = Habit("},{"type":"DELETE","lineNumber":903,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":890,"content":"        return 'Hourly';"},{"type":"INSERT","lineNumber":891,"content":"      case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":892,"content":"        return 'Daily';"},{"type":"INSERT","lineNumber":893,"content":"      case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":894,"content":"        return 'Weekly';"},{"type":"INSERT","lineNumber":895,"content":"      case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":896,"content":"        return 'Monthly';"},{"type":"INSERT","lineNumber":897,"content":"      case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":898,"content":"        return 'Yearly';"},{"type":"INSERT","lineNumber":899,"content":"    }"},{"type":"INSERT","lineNumber":900,"content":"  }"},{"type":"INSERT","lineNumber":901,"content":""},{"type":"INSERT","lineNumber":902,"content":"  Future<void> _selectNotificationTime() async {"},{"type":"INSERT","lineNumber":903,"content":"    final TimeOfDay? picked = await showTimePicker("},{"type":"DELETE","lineNumber":938,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":939,"oldContent":"      "},{"type":"DELETE","lineNumber":940,"oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"DELETE","lineNumber":941,"oldContent":""},{"type":"DELETE","lineNumber":942,"oldContent":""},{"type":"DELETE","lineNumber":943,"oldContent":""},{"type":"DELETE","lineNumber":944,"oldContent":""},{"type":"DELETE","lineNumber":945,"oldContent":""},{"type":"DELETE","lineNumber":946,"oldContent":""},{"type":"DELETE","lineNumber":947,"oldContent":""},{"type":"DELETE","lineNumber":948,"oldContent":"      }"},{"type":"DELETE","lineNumber":949,"oldContent":"        );"},{"type":"DELETE","lineNumber":950,"oldContent":"          ),"},{"type":"INSERT","lineNumber":938,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":939,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":940,"content":"            content: Text('Please select at least one day of the week'),"},{"type":"INSERT","lineNumber":942,"content":"          ),"},{"type":"INSERT","lineNumber":943,"content":"        );"},{"type":"INSERT","lineNumber":944,"content":"        return;"},{"type":"INSERT","lineNumber":945,"content":"      }"},{"type":"INSERT","lineNumber":946,"content":""},{"type":"INSERT","lineNumber":947,"content":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":949,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":950,"content":"            content: Text('Please select at least one day of the month'),"},{"type":"INSERT","lineNumber":951,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":952,"content":"          ),"},{"type":"INSERT","lineNumber":953,"content":"        );"},{"type":"INSERT","lineNumber":954,"content":"        return;"},{"type":"INSERT","lineNumber":955,"content":"      }"},{"type":"DELETE","lineNumber":954,"oldContent":""},{"type":"DELETE","lineNumber":955,"oldContent":""},{"type":"DELETE","lineNumber":956,"oldContent":""},{"type":"DELETE","lineNumber":958,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":959,"oldContent":"      "},{"type":"DELETE","lineNumber":960,"oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"DELETE","lineNumber":961,"oldContent":""},{"type":"DELETE","lineNumber":962,"oldContent":""},{"type":"DELETE","lineNumber":963,"oldContent":""},{"type":"DELETE","lineNumber":964,"oldContent":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":958,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":959,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":960,"content":"            content: Text('Please select at least one date for the year'),"},{"type":"INSERT","lineNumber":961,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":962,"content":"          ),"},{"type":"INSERT","lineNumber":963,"content":"        );"},{"type":"INSERT","lineNumber":964,"content":"        return;"},{"type":"MODIFY","lineNumber":969,"content":"          const SnackBar(","oldContent":"        );"},{"type":"INSERT","lineNumber":971,"content":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":972,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1001,"content":"      }"},{"type":"DELETE","lineNumber":1003,"oldContent":"      }"},{"type":"INSERT","lineNumber":1012,"content":"        // Add frequency-specific data for notification scheduling"},{"type":"INSERT","lineNumber":1013,"content":"        selectedWeekdays: _selectedWeekdays,"},{"type":"INSERT","lineNumber":1014,"content":"        selectedMonthDays: _selectedMonthDays,"},{"type":"INSERT","lineNumber":1015,"content":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1016,"content":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"DELETE","lineNumber":1013,"oldContent":"      }"},{"type":"INSERT","lineNumber":1018,"content":""},{"type":"INSERT","lineNumber":1031,"content":"      }"},{"type":"DELETE","lineNumber":1028,"oldContent":"      }"},{"type":"DELETE","lineNumber":1030,"oldContent":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1036,"content":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1052,"oldContent":""},{"type":"DELETE","lineNumber":1053,"oldContent":"  }"},{"type":"DELETE","lineNumber":1054,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1055,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1057,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":1058,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1059,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1060,"content":"      }"},{"type":"DELETE","lineNumber":1059,"oldContent":""},{"type":"DELETE","lineNumber":1060,"oldContent":"}"},{"type":"DELETE","lineNumber":1061,"oldContent":"  }"},{"type":"DELETE","lineNumber":1062,"oldContent":""},{"type":"INSERT","lineNumber":1064,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1065,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1066,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1067,"content":"          ),"},{"type":"INSERT","lineNumber":1070,"content":"    }"},{"type":"INSERT","lineNumber":1071,"content":"  }"},{"type":"INSERT","lineNumber":1072,"content":"}"},{"type":"INSERT","lineNumber":1073,"content":""}]},{"timestamp":1754493135062,"changes":[{"type":"MODIFY","lineNumber":239,"content":"            ],","oldContent":"                  ),"},{"type":"DELETE","lineNumber":309,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":310,"oldContent":"                        ? const Icon(Icons.check, color: Colors.white)"},{"type":"DELETE","lineNumber":311,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":312,"oldContent":"                );"},{"type":"DELETE","lineNumber":313,"oldContent":"            ),"},{"type":"DELETE","lineNumber":314,"oldContent":"          ],"},{"type":"DELETE","lineNumber":315,"oldContent":"      ),"},{"type":"INSERT","lineNumber":309,"content":"  }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"  // New: Enhanced monthly calendar selector showing days of the week"},{"type":"INSERT","lineNumber":312,"content":"  Widget _buildMonthDaySelector() {"},{"type":"INSERT","lineNumber":313,"content":"    return Container("},{"type":"INSERT","lineNumber":314,"content":"      decoration: BoxDecoration("},{"type":"INSERT","lineNumber":315,"content":"        border: Border.all(color: Colors.grey.shade300),"},{"type":"INSERT","lineNumber":336,"content":"                  ),"},{"type":"DELETE","lineNumber":337,"oldContent":"            SwitchListTile("},{"type":"DELETE","lineNumber":455,"oldContent":"                    ? 'Habit created with notifications scheduled!'"},{"type":"DELETE","lineNumber":456,"oldContent":"                backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":457,"oldContent":"              ),"},{"type":"INSERT","lineNumber":455,"content":"  }"},{"type":"INSERT","lineNumber":456,"content":""},{"type":"INSERT","lineNumber":457,"content":"  // New: Enhanced yearly calendar selector for multiple months and days"},{"type":"DELETE","lineNumber":556,"oldContent":"              body: 'Monthly habit reminder - keep up the great work!',"},{"type":"DELETE","lineNumber":557,"oldContent":"              payload: 'habit_${habit.hashCode}_monthday_$monthDay',"},{"type":"DELETE","lineNumber":558,"oldContent":"            AppLogger.info('Scheduled monthly notification for \"${habit.name}\" on day $monthDay at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":559,"oldContent":"          break;"},{"type":"DELETE","lineNumber":560,"oldContent":""},{"type":"DELETE","lineNumber":561,"oldContent":"          // For hourly habits, schedule next few occurrences"},{"type":"DELETE","lineNumber":562,"oldContent":"          for (int i = 1; i <= 24; i++) { // Schedule next 24 hours"},{"type":"DELETE","lineNumber":563,"oldContent":"            final nextNotification = DateTime(now.year, now.month, now.day, now.hour + i, minute);"},{"type":"DELETE","lineNumber":564,"oldContent":"            await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":565,"oldContent":"              title: '⏰ ${habit.name}',"},{"type":"DELETE","lineNumber":566,"oldContent":"              body: 'Hourly reminder - time for your habit!',"},{"type":"DELETE","lineNumber":567,"oldContent":"              payload: 'habit_${habit.hashCode}_hourly_$i',"},{"type":"DELETE","lineNumber":568,"oldContent":"          }"},{"type":"DELETE","lineNumber":569,"oldContent":"          AppLogger.info('Scheduled 24 hourly notifications for \"${habit.name}\"');"},{"type":"DELETE","lineNumber":570,"oldContent":""},{"type":"DELETE","lineNumber":571,"oldContent":"          // Schedule for next year at the same time"},{"type":"DELETE","lineNumber":572,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":573,"oldContent":""},{"type":"DELETE","lineNumber":574,"oldContent":"          await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":575,"oldContent":"            title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":576,"oldContent":"            scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":577,"oldContent":"            payload: 'habit_${habit.hashCode}_yearly',"},{"type":"DELETE","lineNumber":578,"oldContent":"          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"INSERT","lineNumber":556,"content":"                          'Thu',"},{"type":"INSERT","lineNumber":559,"content":"                            color: Colors.black,"},{"type":"INSERT","lineNumber":560,"content":"                          ),"},{"type":"INSERT","lineNumber":561,"content":"                        ),"},{"type":"INSERT","lineNumber":562,"content":"                      ),"},{"type":"INSERT","lineNumber":563,"content":"                    ),"},{"type":"INSERT","lineNumber":564,"content":"                    Expanded("},{"type":"INSERT","lineNumber":565,"content":"                      child: Center("},{"type":"INSERT","lineNumber":566,"content":"                        child: Text("},{"type":"INSERT","lineNumber":567,"content":"                          'Fri',"},{"type":"INSERT","lineNumber":568,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":569,"content":"                            fontWeight: FontWeight.bold,"},{"type":"INSERT","lineNumber":570,"content":"                            color: Colors.black,"},{"type":"INSERT","lineNumber":571,"content":"                          ),"},{"type":"INSERT","lineNumber":572,"content":"                        ),"},{"type":"INSERT","lineNumber":573,"content":"                      ),"},{"type":"INSERT","lineNumber":574,"content":"                    ),"},{"type":"INSERT","lineNumber":575,"content":"                    Expanded("},{"type":"INSERT","lineNumber":576,"content":"                      child: Center("},{"type":"INSERT","lineNumber":577,"content":"                        child: Text("},{"type":"INSERT","lineNumber":578,"content":"                          'Sat',"},{"type":"INSERT","lineNumber":579,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":580,"content":"                            fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":622,"oldContent":""},{"type":"INSERT","lineNumber":625,"content":"          ),"},{"type":"MODIFY","lineNumber":644,"content":"      itemCount: firstWeekday + daysInMonth,","oldContent":"      itemCount: firstWeekday + daysInMonth,"},{"type":"DELETE","lineNumber":680,"oldContent":"      runSpacing: 8,"},{"type":"DELETE","lineNumber":681,"oldContent":"      spacing: 8,"},{"type":"DELETE","lineNumber":682,"oldContent":"    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];"},{"type":"DELETE","lineNumber":683,"oldContent":"    final notificationTime = habit.notificationTime!;"},{"type":"DELETE","lineNumber":684,"oldContent":"            targetCount: _targetCount,"},{"type":"DELETE","lineNumber":685,"oldContent":"            frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":686,"oldContent":"            colorValue: _selectedColor.toARGB32(),"},{"type":"DELETE","lineNumber":687,"oldContent":"            category: _selectedCategory,"},{"type":"DELETE","lineNumber":688,"oldContent":"                : _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":689,"oldContent":"                ? null"},{"type":"DELETE","lineNumber":690,"oldContent":"            description: _descriptionController.text.trim().isEmpty"},{"type":"DELETE","lineNumber":691,"oldContent":"            name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":692,"oldContent":"          final habit = Habit.create("},{"type":"DELETE","lineNumber":693,"oldContent":"        data: (habitService) async {"},{"type":"DELETE","lineNumber":694,"oldContent":"      habitServiceAsync.when("},{"type":"DELETE","lineNumber":695,"oldContent":""},{"type":"DELETE","lineNumber":696,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"DELETE","lineNumber":697,"oldContent":"    try {"},{"type":"DELETE","lineNumber":698,"oldContent":"    }"},{"type":"DELETE","lineNumber":699,"oldContent":"    }"},{"type":"DELETE","lineNumber":700,"oldContent":"      return;"},{"type":"DELETE","lineNumber":701,"oldContent":"      );"},{"type":"INSERT","lineNumber":680,"content":"            child: Center("},{"type":"INSERT","lineNumber":681,"content":"              child: Text("},{"type":"INSERT","lineNumber":682,"content":"                day.toString(),"},{"type":"INSERT","lineNumber":683,"content":"                style: TextStyle("},{"type":"INSERT","lineNumber":684,"content":"                  fontWeight: FontWeight.w500,"},{"type":"INSERT","lineNumber":685,"content":"                  color: isSelected"},{"type":"INSERT","lineNumber":686,"content":"                      ? Colors.white"},{"type":"INSERT","lineNumber":687,"content":"                      : isToday"},{"type":"INSERT","lineNumber":688,"content":"                          ? _selectedColor"},{"type":"INSERT","lineNumber":689,"content":"                          : Colors.black,"},{"type":"INSERT","lineNumber":690,"content":"                ),"},{"type":"INSERT","lineNumber":691,"content":"              ),"},{"type":"INSERT","lineNumber":692,"content":"            ),"},{"type":"INSERT","lineNumber":693,"content":"          ),"},{"type":"INSERT","lineNumber":694,"content":"        );"},{"type":"INSERT","lineNumber":695,"content":"      },"},{"type":"DELETE","lineNumber":703,"oldContent":"      initialTime: _notificationTime ?? TimeOfDay.now(),"},{"type":"DELETE","lineNumber":704,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":705,"oldContent":"    final TimeOfDay? picked = await showTimePicker("},{"type":"DELETE","lineNumber":706,"oldContent":"  Future<void> _selectNotificationTime() async {"},{"type":"INSERT","lineNumber":697,"content":"  }"},{"type":"INSERT","lineNumber":699,"content":"  String _getMonthName(int month) {"},{"type":"INSERT","lineNumber":700,"content":"    const monthNames = ["},{"type":"INSERT","lineNumber":701,"content":"      'January', 'February', 'March', 'April', 'May', 'June',"},{"type":"INSERT","lineNumber":702,"content":"      'July', 'August', 'September', 'October', 'November', 'December'"},{"type":"INSERT","lineNumber":703,"content":"    ];"},{"type":"INSERT","lineNumber":704,"content":"    return monthNames[month - 1];"},{"type":"DELETE","lineNumber":709,"oldContent":"    }"},{"type":"DELETE","lineNumber":710,"oldContent":"        return 'Yearly';"},{"type":"DELETE","lineNumber":711,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":712,"oldContent":"        return 'Monthly';"},{"type":"DELETE","lineNumber":713,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":714,"oldContent":"        return 'Weekly';"},{"type":"DELETE","lineNumber":715,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":716,"oldContent":"        return 'Daily';"},{"type":"DELETE","lineNumber":717,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":718,"oldContent":"        return 'Hourly';"},{"type":"INSERT","lineNumber":706,"content":""},{"type":"INSERT","lineNumber":707,"content":"  bool _isSameDay(DateTime date1, DateTime date2) {"},{"type":"INSERT","lineNumber":708,"content":"    return date1.year == date2.year &&"},{"type":"INSERT","lineNumber":709,"content":"           date1.month == date2.month &&"},{"type":"INSERT","lineNumber":710,"content":"           date1.day == date2.day;"},{"type":"INSERT","lineNumber":711,"content":"  }"},{"type":"INSERT","lineNumber":712,"content":""},{"type":"INSERT","lineNumber":713,"content":"  // Helper method for adding hourly times"},{"type":"INSERT","lineNumber":714,"content":"  Future<void> _addHourlyTime() async {"},{"type":"INSERT","lineNumber":715,"content":"    final TimeOfDay? picked = await showTimePicker("},{"type":"INSERT","lineNumber":716,"content":"      context: context,"},{"type":"INSERT","lineNumber":717,"content":"      initialTime: TimeOfDay.now(),"},{"type":"INSERT","lineNumber":718,"content":"      helpText: 'Select a time for hourly reminders',"},{"type":"DELETE","lineNumber":774,"oldContent":"  }"},{"type":"DELETE","lineNumber":775,"oldContent":"      ),"},{"type":"DELETE","lineNumber":776,"oldContent":"          ],"},{"type":"DELETE","lineNumber":777,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":778,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":779,"oldContent":"      "},{"type":"INSERT","lineNumber":774,"content":"            setState(() {"},{"type":"INSERT","lineNumber":775,"content":"              if (selected) {"},{"type":"INSERT","lineNumber":776,"content":"                _selectedWeekdays.add(dayNumber);"},{"type":"INSERT","lineNumber":777,"content":"              } else {"},{"type":"INSERT","lineNumber":778,"content":"                _selectedWeekdays.remove(dayNumber);"},{"type":"INSERT","lineNumber":779,"content":"              }"},{"type":"MODIFY","lineNumber":836,"content":"        ),","oldContent":"        ),"},{"type":"DELETE","lineNumber":887,"oldContent":"        );"},{"type":"DELETE","lineNumber":888,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":889,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":887,"content":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"INSERT","lineNumber":888,"content":"    switch (frequency) {"},{"type":"INSERT","lineNumber":889,"content":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":905,"oldContent":"      "},{"type":"DELETE","lineNumber":906,"oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"DELETE","lineNumber":907,"oldContent":""},{"type":"DELETE","lineNumber":908,"oldContent":""},{"type":"DELETE","lineNumber":909,"oldContent":""},{"type":"DELETE","lineNumber":910,"oldContent":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":911,"oldContent":""},{"type":"DELETE","lineNumber":912,"oldContent":""},{"type":"DELETE","lineNumber":913,"oldContent":"      }"},{"type":"INSERT","lineNumber":905,"content":"      initialTime: _notificationTime ?? TimeOfDay.now(),"},{"type":"INSERT","lineNumber":906,"content":"      builder: (context, child) {"},{"type":"INSERT","lineNumber":907,"content":"        return Theme("},{"type":"INSERT","lineNumber":908,"content":"          data: Theme.of(context).copyWith("},{"type":"INSERT","lineNumber":909,"content":"            timePickerTheme: TimePickerThemeData("},{"type":"INSERT","lineNumber":910,"content":"              backgroundColor: Theme.of(context).colorScheme.surface,"},{"type":"INSERT","lineNumber":911,"content":"              hourMinuteTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":912,"content":"              dayPeriodTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":913,"content":"              dialHandColor: Theme.of(context).colorScheme.primary,"},{"type":"INSERT","lineNumber":914,"content":"              dialTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":915,"content":"              entryModeIconColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":916,"content":"              helpTextStyle: TextStyle(color: Theme.of(context).colorScheme.onSurface),"},{"type":"INSERT","lineNumber":917,"content":"            ),"},{"type":"DELETE","lineNumber":915,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":916,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":917,"oldContent":""},{"type":"DELETE","lineNumber":918,"oldContent":""},{"type":"DELETE","lineNumber":919,"oldContent":"    try {"},{"type":"DELETE","lineNumber":920,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":921,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":922,"oldContent":""},{"type":"DELETE","lineNumber":923,"oldContent":"  }"},{"type":"INSERT","lineNumber":919,"content":"          child: child!,"},{"type":"INSERT","lineNumber":920,"content":"        );"},{"type":"INSERT","lineNumber":921,"content":"      },"},{"type":"INSERT","lineNumber":922,"content":"    );"},{"type":"INSERT","lineNumber":923,"content":"    if (picked != null) {"},{"type":"INSERT","lineNumber":941,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":948,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":950,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":952,"oldContent":""},{"type":"DELETE","lineNumber":954,"oldContent":""},{"type":"INSERT","lineNumber":956,"content":""},{"type":"DELETE","lineNumber":967,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":968,"oldContent":"      }"},{"type":"INSERT","lineNumber":967,"content":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":968,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"MODIFY","lineNumber":972,"content":"          ),","oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"MODIFY","lineNumber":975,"content":"      }","oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"DELETE","lineNumber":1013,"oldContent":"      );"},{"type":"DELETE","lineNumber":1016,"oldContent":"      // Get HabitService instead of direct database access"},{"type":"DELETE","lineNumber":1018,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":1017,"content":"      );"},{"type":"INSERT","lineNumber":1018,"content":""},{"type":"INSERT","lineNumber":1019,"content":"      // Get HabitService instead of direct database access"},{"type":"INSERT","lineNumber":1020,"content":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"DELETE","lineNumber":1022,"oldContent":""},{"type":"INSERT","lineNumber":1031,"content":"      }"},{"type":"DELETE","lineNumber":1034,"oldContent":"      }"},{"type":"INSERT","lineNumber":1036,"content":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1040,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1054,"oldContent":"        );"},{"type":"DELETE","lineNumber":1055,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1056,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1057,"oldContent":"      "},{"type":"INSERT","lineNumber":1054,"content":"        // Navigate back"},{"type":"INSERT","lineNumber":1055,"content":"        context.pop();"},{"type":"INSERT","lineNumber":1056,"content":"      }"},{"type":"DELETE","lineNumber":1059,"oldContent":""},{"type":"DELETE","lineNumber":1061,"oldContent":"  }"},{"type":"DELETE","lineNumber":1064,"oldContent":"        );"},{"type":"INSERT","lineNumber":1061,"content":"      "},{"type":"INSERT","lineNumber":1062,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1063,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1066,"oldContent":""},{"type":"DELETE","lineNumber":1068,"oldContent":"}"},{"type":"DELETE","lineNumber":1070,"oldContent":"  }"},{"type":"INSERT","lineNumber":1068,"content":"        );"},{"type":"INSERT","lineNumber":1069,"content":"      }"},{"type":"INSERT","lineNumber":1071,"content":"  }"},{"type":"INSERT","lineNumber":1072,"content":"}"},{"type":"INSERT","lineNumber":1073,"content":""}]},{"timestamp":1754493339975,"changes":[{"type":"MODIFY","lineNumber":202,"content":"              const SizedBox(height: 8),","oldContent":"            ],"},{"type":"MODIFY","lineNumber":204,"content":"            ],","oldContent":"            if (_selectedFrequency == HabitFrequency.monthly) ...["},{"type":"MODIFY","lineNumber":285,"content":"              const SizedBox(height: 8),","oldContent":"              style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"DELETE","lineNumber":324,"oldContent":""},{"type":"DELETE","lineNumber":325,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":326,"oldContent":"      child: Padding("},{"type":"DELETE","lineNumber":327,"oldContent":"        child: Column("},{"type":"DELETE","lineNumber":328,"oldContent":"          children: ["},{"type":"INSERT","lineNumber":324,"content":"            child: Row("},{"type":"INSERT","lineNumber":325,"content":"              mainAxisAlignment: MainAxisAlignment.spaceAround,"},{"type":"INSERT","lineNumber":326,"content":"              children: ["},{"type":"INSERT","lineNumber":327,"content":"                Expanded("},{"type":"INSERT","lineNumber":328,"content":"                  child: Center("},{"type":"DELETE","lineNumber":450,"oldContent":"            ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":451,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null"},{"type":"INSERT","lineNumber":450,"content":"            },"},{"type":"INSERT","lineNumber":451,"content":"          ),"},{"type":"INSERT","lineNumber":557,"content":"                          style: TextStyle("},{"type":"INSERT","lineNumber":558,"content":"                            fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":578,"oldContent":"                          style: TextStyle("},{"type":"DELETE","lineNumber":580,"oldContent":"                            fontWeight: FontWeight.bold,"},{"type":"MODIFY","lineNumber":602,"content":"          const SizedBox(height: 8),","oldContent":"      }"},{"type":"DELETE","lineNumber":604,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":605,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":606,"oldContent":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"DELETE","lineNumber":607,"oldContent":"            backgroundColor: Colors.orange,"},{"type":"DELETE","lineNumber":608,"oldContent":"        );"},{"type":"DELETE","lineNumber":609,"oldContent":"    }"},{"type":"DELETE","lineNumber":610,"oldContent":"  }"},{"type":"DELETE","lineNumber":611,"oldContent":""},{"type":"DELETE","lineNumber":612,"oldContent":"            targetCount: _targetCount,"},{"type":"DELETE","lineNumber":613,"oldContent":"            frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":604,"content":"            height: 80,"},{"type":"INSERT","lineNumber":605,"content":"            child: ListView("},{"type":"INSERT","lineNumber":606,"content":"              scrollDirection: Axis.horizontal,"},{"type":"INSERT","lineNumber":607,"content":"              children: _selectedYearlyDates.map((date) {"},{"type":"INSERT","lineNumber":608,"content":"                return Container("},{"type":"INSERT","lineNumber":609,"content":"                  margin: const EdgeInsets.only(right: 8),"},{"type":"INSERT","lineNumber":610,"content":"                  child: Chip("},{"type":"INSERT","lineNumber":611,"content":"                    label: Text("},{"type":"INSERT","lineNumber":612,"content":"                      '${_getMonthName(date.month)} ${date.day}',"},{"type":"INSERT","lineNumber":613,"content":"                      style: const TextStyle(fontSize: 12),"},{"type":"MODIFY","lineNumber":625,"content":"          ),","oldContent":"          ),"},{"type":"INSERT","lineNumber":643,"content":"      ),"},{"type":"DELETE","lineNumber":644,"oldContent":"      itemCount: firstWeekday + daysInMonth,"},{"type":"DELETE","lineNumber":670,"oldContent":"    try {"},{"type":"DELETE","lineNumber":671,"oldContent":""},{"type":"DELETE","lineNumber":672,"oldContent":"    }"},{"type":"INSERT","lineNumber":670,"content":"              color: isSelected"},{"type":"INSERT","lineNumber":671,"content":"                  ? _selectedColor"},{"type":"INSERT","lineNumber":672,"content":"                  : isToday"},{"type":"DELETE","lineNumber":677,"oldContent":"          content: Text('Please select at least one date for yearly habits'),"},{"type":"DELETE","lineNumber":678,"oldContent":"      ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":677,"content":"                color: isSelected || isToday ? Colors.transparent : Colors.grey.shade300,"},{"type":"INSERT","lineNumber":678,"content":"              ),"},{"type":"INSERT","lineNumber":696,"content":"    );"},{"type":"INSERT","lineNumber":698,"content":""},{"type":"DELETE","lineNumber":701,"oldContent":"        }"},{"type":"INSERT","lineNumber":705,"content":"  }"},{"type":"DELETE","lineNumber":706,"oldContent":"            const SnackBar("},{"type":"DELETE","lineNumber":708,"oldContent":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":750,"oldContent":"        hourlyTimes: _hourlyTimes,"},{"type":"DELETE","lineNumber":751,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.toList(),"},{"type":"DELETE","lineNumber":752,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":753,"oldContent":"        isActive: true,"},{"type":"DELETE","lineNumber":754,"oldContent":"        targetCount: _targetCount,"},{"type":"DELETE","lineNumber":755,"oldContent":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":756,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":757,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":758,"oldContent":"        id: 0, // Will be auto-generated by the database"},{"type":"DELETE","lineNumber":759,"oldContent":"      final habit = Habit("},{"type":"INSERT","lineNumber":750,"content":"          });"},{"type":"INSERT","lineNumber":751,"content":"        } else {"},{"type":"INSERT","lineNumber":752,"content":"          ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":753,"content":"            const SnackBar("},{"type":"INSERT","lineNumber":754,"content":"              content: Text('This time is already selected'),"},{"type":"INSERT","lineNumber":755,"content":"              duration: Duration(seconds: 2),"},{"type":"INSERT","lineNumber":756,"content":"            ),"},{"type":"INSERT","lineNumber":757,"content":"          );"},{"type":"INSERT","lineNumber":758,"content":"        }"},{"type":"INSERT","lineNumber":759,"content":"      });"},{"type":"INSERT","lineNumber":835,"content":"          ],"},{"type":"DELETE","lineNumber":836,"oldContent":"        ),"},{"type":"INSERT","lineNumber":880,"content":"              const SizedBox(height: 8),"},{"type":"INSERT","lineNumber":881,"content":"              Row("},{"type":"INSERT","lineNumber":882,"content":"                children: ["},{"type":"INSERT","lineNumber":883,"content":"                  Expanded("},{"type":"INSERT","lineNumber":884,"content":"                    child: ElevatedButton.icon("},{"type":"INSERT","lineNumber":885,"content":"                      onPressed: _testNotification,"},{"type":"INSERT","lineNumber":886,"content":"                      icon: const Icon(Icons.notifications_active),"},{"type":"INSERT","lineNumber":887,"content":"                      label: const Text('Test Notification'),"},{"type":"INSERT","lineNumber":888,"content":"                      style: ElevatedButton.styleFrom("},{"type":"INSERT","lineNumber":889,"content":"                        backgroundColor: Theme.of(context).colorScheme.secondary,"},{"type":"INSERT","lineNumber":890,"content":"                        foregroundColor: Theme.of(context).colorScheme.onSecondary,"},{"type":"INSERT","lineNumber":891,"content":"                      ),"},{"type":"INSERT","lineNumber":892,"content":"                    ),"},{"type":"INSERT","lineNumber":893,"content":"                  ),"},{"type":"INSERT","lineNumber":894,"content":"                  const SizedBox(width: 8),"},{"type":"INSERT","lineNumber":895,"content":"                  Expanded("},{"type":"INSERT","lineNumber":896,"content":"                    child: ElevatedButton.icon("},{"type":"INSERT","lineNumber":897,"content":"                      onPressed: _testScheduledNotification,"},{"type":"INSERT","lineNumber":898,"content":"                      icon: const Icon(Icons.schedule),"},{"type":"INSERT","lineNumber":899,"content":"                      label: const Text('Test in 10s'),"},{"type":"INSERT","lineNumber":900,"content":"                      style: ElevatedButton.styleFrom("},{"type":"INSERT","lineNumber":901,"content":"                        backgroundColor: Theme.of(context).colorScheme.tertiary,"},{"type":"INSERT","lineNumber":902,"content":"                        foregroundColor: Theme.of(context).colorScheme.onTertiary,"},{"type":"INSERT","lineNumber":903,"content":"                      ),"},{"type":"INSERT","lineNumber":904,"content":"                    ),"},{"type":"INSERT","lineNumber":905,"content":"                  ),"},{"type":"INSERT","lineNumber":906,"content":"                ],"},{"type":"INSERT","lineNumber":907,"content":"              ),"},{"type":"DELETE","lineNumber":884,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":912,"content":"    );"},{"type":"DELETE","lineNumber":904,"oldContent":""},{"type":"INSERT","lineNumber":932,"content":"      context: context,"},{"type":"DELETE","lineNumber":915,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":946,"content":"          ),"},{"type":"DELETE","lineNumber":927,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"DELETE","lineNumber":928,"oldContent":"        return;"},{"type":"INSERT","lineNumber":955,"content":"    }"},{"type":"INSERT","lineNumber":956,"content":"  }"},{"type":"DELETE","lineNumber":931,"oldContent":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":959,"content":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":948,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":977,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":955,"oldContent":""},{"type":"DELETE","lineNumber":957,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":984,"content":""},{"type":"INSERT","lineNumber":985,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":966,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":994,"content":""},{"type":"DELETE","lineNumber":974,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1002,"content":"        return;"},{"type":"DELETE","lineNumber":978,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1006,"content":"      final database = databaseAsync.value;"},{"type":"DELETE","lineNumber":980,"oldContent":""},{"type":"DELETE","lineNumber":981,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":982,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":983,"oldContent":"        notificationTime: _notificationTime,"},{"type":"DELETE","lineNumber":984,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":985,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":986,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":987,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1008,"content":"      if (database == null) {"},{"type":"INSERT","lineNumber":1009,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1010,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1011,"content":"            content: Text('Database not available'),"},{"type":"INSERT","lineNumber":1012,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1013,"content":"          ),"},{"type":"INSERT","lineNumber":1014,"content":"        );"},{"type":"INSERT","lineNumber":1015,"content":"        return;"},{"type":"DELETE","lineNumber":1015,"oldContent":"      );"},{"type":"INSERT","lineNumber":1044,"content":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1045,"content":"      );"},{"type":"DELETE","lineNumber":1019,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"DELETE","lineNumber":1021,"oldContent":"    } catch (e) {"},{"type":"INSERT","lineNumber":1049,"content":"      final habitService = habitServiceAsync.value;"},{"type":"DELETE","lineNumber":1045,"oldContent":"  }"},{"type":"DELETE","lineNumber":1046,"oldContent":"        );"},{"type":"INSERT","lineNumber":1073,"content":"      // Show success message"},{"type":"INSERT","lineNumber":1074,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1049,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1050,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1051,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1077,"content":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1078,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":1079,"content":"          ),"},{"type":"INSERT","lineNumber":1087,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1088,"content":"      }"},{"type":"DELETE","lineNumber":1061,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1063,"oldContent":"      }"},{"type":"INSERT","lineNumber":1094,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1095,"content":"          ),"},{"type":"INSERT","lineNumber":1098,"content":"    }"},{"type":"INSERT","lineNumber":1099,"content":"  }"},{"type":"INSERT","lineNumber":1101,"content":""}]},{"timestamp":1754493367474,"changes":[{"type":"MODIFY","lineNumber":240,"content":"            const SizedBox(height: 16),","oldContent":"                ),"},{"type":"DELETE","lineNumber":316,"oldContent":"            ),"},{"type":"DELETE","lineNumber":317,"oldContent":"        ),"},{"type":"DELETE","lineNumber":318,"oldContent":"    );"},{"type":"DELETE","lineNumber":319,"oldContent":"  }"},{"type":"INSERT","lineNumber":316,"content":"        borderRadius: BorderRadius.circular(8),"},{"type":"INSERT","lineNumber":317,"content":"      ),"},{"type":"INSERT","lineNumber":318,"content":"      child: Column("},{"type":"INSERT","lineNumber":319,"content":"        children: ["},{"type":"DELETE","lineNumber":330,"oldContent":"          children: ["},{"type":"DELETE","lineNumber":331,"oldContent":"            Text("},{"type":"INSERT","lineNumber":330,"content":"                      'Sun',"},{"type":"INSERT","lineNumber":331,"content":"                      style: TextStyle("},{"type":"DELETE","lineNumber":453,"oldContent":"                content: Text(_notificationsEnabled && _notificationTime != null"},{"type":"DELETE","lineNumber":454,"oldContent":"                    ? 'Habit created with notifications scheduled!'"},{"type":"INSERT","lineNumber":453,"content":"      ),"},{"type":"INSERT","lineNumber":454,"content":"    );"},{"type":"MODIFY","lineNumber":559,"content":"                            color: Colors.black,","oldContent":"                            color: Colors.black,"},{"type":"DELETE","lineNumber":581,"oldContent":"          final now = DateTime.now();"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"DELETE","lineNumber":583,"oldContent":"          await NotificationService.scheduleNotification("},{"type":"DELETE","lineNumber":584,"oldContent":"            title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":585,"oldContent":"            body: 'Your yearly habit is due - make it count!',"},{"type":"DELETE","lineNumber":586,"oldContent":"            payload: 'habit_${habit.hashCode}_yearly',"},{"type":"DELETE","lineNumber":587,"oldContent":"          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":588,"oldContent":"          break;"},{"type":"INSERT","lineNumber":581,"content":"                            color: Colors.red.shade600,"},{"type":"INSERT","lineNumber":582,"content":"                          ),"},{"type":"INSERT","lineNumber":583,"content":"                        ),"},{"type":"INSERT","lineNumber":584,"content":"                      ),"},{"type":"INSERT","lineNumber":585,"content":"                    ),"},{"type":"INSERT","lineNumber":586,"content":"                  ],"},{"type":"INSERT","lineNumber":587,"content":"                ),"},{"type":"INSERT","lineNumber":588,"content":"              ),"},{"type":"INSERT","lineNumber":624,"content":"            ),"},{"type":"DELETE","lineNumber":625,"oldContent":"          ),"},{"type":"MODIFY","lineNumber":699,"content":"  String _getMonthName(int month) {","oldContent":"  String _getMonthName(int month) {"},{"type":"MODIFY","lineNumber":706,"content":"","oldContent":""},{"type":"DELETE","lineNumber":771,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":772,"oldContent":"      "},{"type":"DELETE","lineNumber":773,"oldContent":"      LoggingService.logError('Failed to create habit', e);"},{"type":"INSERT","lineNumber":771,"content":"          label: Text(weekdays[index]),"},{"type":"INSERT","lineNumber":772,"content":"          selected: _selectedWeekdays.contains(dayNumber),"},{"type":"INSERT","lineNumber":773,"content":"          onSelected: (selected) {"},{"type":"DELETE","lineNumber":881,"oldContent":"            ],"},{"type":"DELETE","lineNumber":883,"oldContent":"          ],"},{"type":"DELETE","lineNumber":885,"oldContent":"        ),"},{"type":"DELETE","lineNumber":887,"oldContent":"      ),"},{"type":"DELETE","lineNumber":890,"oldContent":"  }"},{"type":"DELETE","lineNumber":892,"oldContent":""},{"type":"DELETE","lineNumber":894,"oldContent":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"DELETE","lineNumber":896,"oldContent":"    switch (frequency) {"},{"type":"DELETE","lineNumber":898,"oldContent":"      case HabitFrequency.hourly:"},{"type":"DELETE","lineNumber":900,"oldContent":"        return 'Hourly';"},{"type":"DELETE","lineNumber":902,"oldContent":"      case HabitFrequency.daily:"},{"type":"DELETE","lineNumber":904,"oldContent":"        return 'Daily';"},{"type":"DELETE","lineNumber":906,"oldContent":"      case HabitFrequency.weekly:"},{"type":"DELETE","lineNumber":908,"oldContent":"        return 'Weekly';"},{"type":"DELETE","lineNumber":910,"oldContent":"      case HabitFrequency.monthly:"},{"type":"DELETE","lineNumber":912,"oldContent":"        return 'Monthly';"},{"type":"DELETE","lineNumber":914,"oldContent":"      case HabitFrequency.yearly:"},{"type":"DELETE","lineNumber":916,"oldContent":"        return 'Yearly';"},{"type":"DELETE","lineNumber":918,"oldContent":"    }"},{"type":"DELETE","lineNumber":920,"oldContent":"  }"},{"type":"DELETE","lineNumber":922,"oldContent":""},{"type":"DELETE","lineNumber":924,"oldContent":"  Future<void> _selectNotificationTime() async {"},{"type":"DELETE","lineNumber":926,"oldContent":"    final TimeOfDay? picked = await showTimePicker("},{"type":"DELETE","lineNumber":929,"oldContent":"      initialTime: _notificationTime ?? TimeOfDay.now(),"},{"type":"DELETE","lineNumber":931,"oldContent":"      builder: (context, child) {"},{"type":"INSERT","lineNumber":908,"content":"            ],"},{"type":"INSERT","lineNumber":909,"content":"          ],"},{"type":"INSERT","lineNumber":910,"content":"        ),"},{"type":"INSERT","lineNumber":911,"content":"      ),"},{"type":"INSERT","lineNumber":912,"content":"    );"},{"type":"INSERT","lineNumber":913,"content":"  }"},{"type":"INSERT","lineNumber":914,"content":""},{"type":"INSERT","lineNumber":915,"content":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"INSERT","lineNumber":916,"content":"    switch (frequency) {"},{"type":"INSERT","lineNumber":917,"content":"      case HabitFrequency.hourly:"},{"type":"INSERT","lineNumber":918,"content":"        return 'Hourly';"},{"type":"INSERT","lineNumber":919,"content":"      case HabitFrequency.daily:"},{"type":"INSERT","lineNumber":920,"content":"        return 'Daily';"},{"type":"INSERT","lineNumber":921,"content":"      case HabitFrequency.weekly:"},{"type":"INSERT","lineNumber":922,"content":"        return 'Weekly';"},{"type":"INSERT","lineNumber":923,"content":"      case HabitFrequency.monthly:"},{"type":"INSERT","lineNumber":924,"content":"        return 'Monthly';"},{"type":"INSERT","lineNumber":925,"content":"      case HabitFrequency.yearly:"},{"type":"INSERT","lineNumber":926,"content":"        return 'Yearly';"},{"type":"INSERT","lineNumber":927,"content":"    }"},{"type":"INSERT","lineNumber":928,"content":"  }"},{"type":"INSERT","lineNumber":929,"content":""},{"type":"INSERT","lineNumber":930,"content":"  Future<void> _selectNotificationTime() async {"},{"type":"INSERT","lineNumber":931,"content":"    final TimeOfDay? picked = await showTimePicker("},{"type":"INSERT","lineNumber":932,"content":"      context: context,"},{"type":"INSERT","lineNumber":933,"content":"      initialTime: _notificationTime ?? TimeOfDay.now(),"},{"type":"INSERT","lineNumber":934,"content":"      builder: (context, child) {"},{"type":"DELETE","lineNumber":938,"oldContent":"    );"},{"type":"INSERT","lineNumber":946,"content":"          ),"},{"type":"DELETE","lineNumber":951,"oldContent":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":953,"content":"        _notificationTime = picked;"},{"type":"INSERT","lineNumber":954,"content":"      });"},{"type":"INSERT","lineNumber":955,"content":"    }"},{"type":"INSERT","lineNumber":956,"content":"  }"},{"type":"DELETE","lineNumber":953,"oldContent":""},{"type":"INSERT","lineNumber":958,"content":"  Future<void> _testNotification() async {"},{"type":"INSERT","lineNumber":959,"content":"    try {"},{"type":"INSERT","lineNumber":960,"content":"      print('DEBUG: Testing immediate notification');"},{"type":"INSERT","lineNumber":961,"content":"      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":955,"oldContent":"      context: context,"},{"type":"DELETE","lineNumber":956,"oldContent":"      return;"},{"type":"INSERT","lineNumber":963,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":964,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":965,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":966,"content":"            content: Text('Test notification sent! Check your notification panel.'),"},{"type":"INSERT","lineNumber":967,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":968,"content":"          ),"},{"type":"INSERT","lineNumber":970,"content":"      }"},{"type":"INSERT","lineNumber":971,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":972,"content":"      print('DEBUG: Error sending test notification: $e');"},{"type":"INSERT","lineNumber":973,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":974,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":975,"content":"          SnackBar("},{"type":"INSERT","lineNumber":976,"content":"            content: Text('Failed to send test notification: $e'),"},{"type":"INSERT","lineNumber":978,"content":"          ),"},{"type":"INSERT","lineNumber":979,"content":"        );"},{"type":"INSERT","lineNumber":980,"content":"      }"},{"type":"INSERT","lineNumber":981,"content":"    }"},{"type":"INSERT","lineNumber":982,"content":"  }"},{"type":"INSERT","lineNumber":983,"content":""},{"type":"INSERT","lineNumber":984,"content":"  Future<void> _testScheduledNotification() async {"},{"type":"DELETE","lineNumber":960,"oldContent":"            content: Text('Database not available'),"},{"type":"INSERT","lineNumber":986,"content":"      print('DEBUG: Testing scheduled notification (10 seconds)');"},{"type":"INSERT","lineNumber":987,"content":"      await NotificationService.testScheduledNotification();"},{"type":"INSERT","lineNumber":988,"content":"      "},{"type":"INSERT","lineNumber":989,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":990,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":992,"content":"            content: Text('Scheduled test notification for 10 seconds from now! Watch for it.'),"},{"type":"INSERT","lineNumber":993,"content":"            backgroundColor: Colors.blue,"},{"type":"INSERT","lineNumber":994,"content":"            duration: Duration(seconds: 3),"},{"type":"INSERT","lineNumber":995,"content":"          ),"},{"type":"INSERT","lineNumber":996,"content":"        );"},{"type":"INSERT","lineNumber":997,"content":"      }"},{"type":"INSERT","lineNumber":998,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":999,"content":"      print('DEBUG: Error scheduling test notification: $e');"},{"type":"INSERT","lineNumber":1000,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1002,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1003,"content":"            content: Text('Failed to schedule test notification: $e'),"},{"type":"INSERT","lineNumber":1004,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1005,"content":"          ),"},{"type":"INSERT","lineNumber":1006,"content":"        );"},{"type":"INSERT","lineNumber":1007,"content":"      }"},{"type":"INSERT","lineNumber":1008,"content":"    }"},{"type":"INSERT","lineNumber":1009,"content":"  }"},{"type":"INSERT","lineNumber":1010,"content":""},{"type":"INSERT","lineNumber":1011,"content":"  Future<void> _saveHabit() async {"},{"type":"INSERT","lineNumber":1012,"content":"    if (!_formKey.currentState!.validate()) {"},{"type":"INSERT","lineNumber":1013,"content":"      return;"},{"type":"INSERT","lineNumber":1014,"content":"    }"},{"type":"INSERT","lineNumber":1015,"content":""},{"type":"INSERT","lineNumber":1016,"content":"    try {"},{"type":"INSERT","lineNumber":1017,"content":"      // Validate frequency-specific requirements"},{"type":"INSERT","lineNumber":1018,"content":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":1019,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":970,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1030,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":979,"oldContent":"    }"},{"type":"DELETE","lineNumber":980,"oldContent":"  }"},{"type":"INSERT","lineNumber":1037,"content":""},{"type":"INSERT","lineNumber":1038,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":983,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":990,"oldContent":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1046,"content":"      }"},{"type":"INSERT","lineNumber":1047,"content":""},{"type":"DELETE","lineNumber":997,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1054,"content":"        );"},{"type":"INSERT","lineNumber":1055,"content":"        return;"},{"type":"DELETE","lineNumber":999,"oldContent":"      final habitService = habitServiceAsync.value;"},{"type":"DELETE","lineNumber":1000,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1001,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"DELETE","lineNumber":1002,"oldContent":"      "},{"type":"DELETE","lineNumber":1004,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":1058,"content":"      final databaseAsync = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":1059,"content":"      final database = databaseAsync.value;"},{"type":"INSERT","lineNumber":1060,"content":"      "},{"type":"INSERT","lineNumber":1061,"content":"      if (database == null) {"},{"type":"INSERT","lineNumber":1062,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1063,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1064,"content":"            content: Text('Database not available'),"},{"type":"INSERT","lineNumber":1065,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1066,"content":"          ),"},{"type":"INSERT","lineNumber":1067,"content":"        );"},{"type":"INSERT","lineNumber":1068,"content":"        return;"},{"type":"DELETE","lineNumber":1011,"oldContent":""},{"type":"DELETE","lineNumber":1012,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1013,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1075,"content":"        notificationDateTime = DateTime("},{"type":"INSERT","lineNumber":1076,"content":"          now.year,"},{"type":"INSERT","lineNumber":1077,"content":"          now.month,"},{"type":"INSERT","lineNumber":1078,"content":"          now.day,"},{"type":"INSERT","lineNumber":1079,"content":"          _notificationTime!.hour,"},{"type":"INSERT","lineNumber":1080,"content":"          _notificationTime!.minute,"},{"type":"INSERT","lineNumber":1081,"content":"        );"},{"type":"DELETE","lineNumber":1015,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1016,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1017,"oldContent":"      }"},{"type":"DELETE","lineNumber":1018,"oldContent":"        // Navigate back"},{"type":"DELETE","lineNumber":1019,"oldContent":"      }"},{"type":"DELETE","lineNumber":1020,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1023,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1024,"oldContent":"      // Show success message"},{"type":"DELETE","lineNumber":1025,"oldContent":"      final database = databaseAsync.value;"},{"type":"INSERT","lineNumber":1085,"content":"        name: _nameController.text.trim(),"},{"type":"INSERT","lineNumber":1086,"content":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":1028,"oldContent":"      if (database == null) {"},{"type":"DELETE","lineNumber":1030,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1031,"oldContent":""},{"type":"DELETE","lineNumber":1032,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1033,"oldContent":"      }"},{"type":"DELETE","lineNumber":1034,"oldContent":"            content: Text('Database not available'),"},{"type":"DELETE","lineNumber":1035,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1036,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1090,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":1091,"content":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":1092,"content":"        notificationTime: notificationDateTime,"},{"type":"DELETE","lineNumber":1038,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1040,"oldContent":"        );"},{"type":"DELETE","lineNumber":1042,"oldContent":"        return;"},{"type":"INSERT","lineNumber":1097,"content":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1098,"content":"      );"},{"type":"INSERT","lineNumber":1102,"content":"      final habitService = habitServiceAsync.value;"},{"type":"DELETE","lineNumber":1064,"oldContent":"      }"},{"type":"INSERT","lineNumber":1120,"content":""},{"type":"DELETE","lineNumber":1067,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":1123,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1124,"content":"      }"},{"type":"DELETE","lineNumber":1069,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1126,"content":"      // Show success message"},{"type":"INSERT","lineNumber":1127,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1128,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1071,"oldContent":"      );"},{"type":"DELETE","lineNumber":1072,"oldContent":"  }"},{"type":"DELETE","lineNumber":1073,"oldContent":""},{"type":"DELETE","lineNumber":1074,"oldContent":"      final habitService = habitServiceAsync.value;"},{"type":"INSERT","lineNumber":1130,"content":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1131,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":1132,"content":"          ),"},{"type":"DELETE","lineNumber":1076,"oldContent":"      }"},{"type":"INSERT","lineNumber":1134,"content":""},{"type":"INSERT","lineNumber":1140,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1141,"content":"      }"},{"type":"DELETE","lineNumber":1085,"oldContent":"      }"},{"type":"DELETE","lineNumber":1086,"oldContent":""},{"type":"DELETE","lineNumber":1087,"oldContent":"  }"},{"type":"DELETE","lineNumber":1088,"oldContent":"    }"},{"type":"DELETE","lineNumber":1089,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1145,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1146,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1091,"oldContent":"      }"},{"type":"DELETE","lineNumber":1092,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1094,"oldContent":"      // Show success message"},{"type":"DELETE","lineNumber":1095,"oldContent":"            backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":1096,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1097,"oldContent":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]},{"timestamp":1754494119494,"changes":[{"type":"INSERT","lineNumber":157,"content":"    return Card("},{"type":"DELETE","lineNumber":173,"oldContent":"              children: HabitFrequency.values.map((frequency) {"},{"type":"INSERT","lineNumber":175,"content":"                return ChoiceChip("},{"type":"INSERT","lineNumber":176,"content":"                  label: Text(_getFrequencyDisplayName(frequency)),"},{"type":"DELETE","lineNumber":178,"oldContent":"                      setState(() {"},{"type":"DELETE","lineNumber":179,"oldContent":"                    if (selected) {"},{"type":"INSERT","lineNumber":181,"content":"                      setState(() {"},{"type":"INSERT","lineNumber":182,"content":"                        _selectedFrequency = frequency;"},{"type":"DELETE","lineNumber":182,"oldContent":"                      });"},{"type":"DELETE","lineNumber":183,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":188,"content":"                    }","oldContent":"              }).toList(),"},{"type":"MODIFY","lineNumber":190,"content":"                );","oldContent":"            if (_selectedFrequency == HabitFrequency.weekly) ...["},{"type":"DELETE","lineNumber":200,"oldContent":"              _buildWeekdaySelector(),"},{"type":"MODIFY","lineNumber":200,"content":"                    ),","oldContent":"            ],"},{"type":"INSERT","lineNumber":201,"content":"              ),"},{"type":"MODIFY","lineNumber":207,"content":"              Text(","oldContent":"                      fontWeight: FontWeight.w500,"},{"type":"DELETE","lineNumber":212,"oldContent":"            ],"},{"type":"DELETE","lineNumber":213,"oldContent":"            const SizedBox(height: 16),"},{"type":"INSERT","lineNumber":212,"content":"              ),"},{"type":"INSERT","lineNumber":213,"content":"              const SizedBox(height: 8),"},{"type":"MODIFY","lineNumber":215,"content":"            ],","oldContent":"              children: ["},{"type":"MODIFY","lineNumber":320,"content":"          // Header","oldContent":"    return Card("},{"type":"INSERT","lineNumber":558,"content":"                            fontWeight: FontWeight.bold,"},{"type":"DELETE","lineNumber":559,"oldContent":"                            color: Colors.black,"},{"type":"DELETE","lineNumber":593,"oldContent":"      }"},{"type":"DELETE","lineNumber":594,"oldContent":""},{"type":"DELETE","lineNumber":595,"oldContent":"      AppLogger.error('Error scheduling notifications for habit \"${habit.name}\"', e);"},{"type":"DELETE","lineNumber":596,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":597,"oldContent":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"INSERT","lineNumber":593,"content":"        ),"},{"type":"INSERT","lineNumber":594,"content":"        if (_selectedYearlyDates.isNotEmpty) ...["},{"type":"INSERT","lineNumber":595,"content":"          const SizedBox(height: 12),"},{"type":"INSERT","lineNumber":596,"content":"          Text("},{"type":"INSERT","lineNumber":597,"content":"            'Selected dates (${_selectedYearlyDates.length}):',"},{"type":"INSERT","lineNumber":698,"content":""},{"type":"DELETE","lineNumber":699,"oldContent":"  String _getMonthName(int month) {"},{"type":"INSERT","lineNumber":705,"content":"  }"},{"type":"DELETE","lineNumber":706,"oldContent":""},{"type":"INSERT","lineNumber":895,"content":"                  Expanded("},{"type":"INSERT","lineNumber":896,"content":"                    child: ElevatedButton.icon("},{"type":"INSERT","lineNumber":897,"content":"                      onPressed: _testScheduledNotification,"},{"type":"INSERT","lineNumber":898,"content":"                      icon: const Icon(Icons.schedule),"},{"type":"INSERT","lineNumber":899,"content":"                      label: const Text('Test in 10s'),"},{"type":"INSERT","lineNumber":900,"content":"                      style: ElevatedButton.styleFrom("},{"type":"INSERT","lineNumber":901,"content":"                        backgroundColor: Theme.of(context).colorScheme.tertiary,"},{"type":"INSERT","lineNumber":902,"content":"                        foregroundColor: Theme.of(context).colorScheme.onTertiary,"},{"type":"INSERT","lineNumber":903,"content":"                      ),"},{"type":"INSERT","lineNumber":904,"content":"                    ),"},{"type":"INSERT","lineNumber":905,"content":"                  ),"},{"type":"INSERT","lineNumber":906,"content":"                ],"},{"type":"INSERT","lineNumber":907,"content":"              ),"},{"type":"DELETE","lineNumber":897,"oldContent":"                  Expanded("},{"type":"DELETE","lineNumber":900,"oldContent":"                    child: ElevatedButton.icon("},{"type":"DELETE","lineNumber":903,"oldContent":"                      onPressed: _testScheduledNotification,"},{"type":"DELETE","lineNumber":906,"oldContent":"                      icon: const Icon(Icons.schedule),"},{"type":"DELETE","lineNumber":909,"oldContent":"                      label: const Text('Test in 10s'),"},{"type":"DELETE","lineNumber":912,"oldContent":"                      style: ElevatedButton.styleFrom("},{"type":"DELETE","lineNumber":915,"oldContent":"                        backgroundColor: Theme.of(context).colorScheme.tertiary,"},{"type":"DELETE","lineNumber":918,"oldContent":"                        foregroundColor: Theme.of(context).colorScheme.onTertiary,"},{"type":"DELETE","lineNumber":921,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":924,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":926,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":929,"oldContent":"                ],"},{"type":"DELETE","lineNumber":932,"oldContent":"              ),"},{"type":"MODIFY","lineNumber":935,"content":"        return Theme(","oldContent":"        return Theme("},{"type":"MODIFY","lineNumber":947,"content":"          child: child!,","oldContent":"          child: child!,"},{"type":"DELETE","lineNumber":952,"oldContent":"      return;"},{"type":"DELETE","lineNumber":953,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":952,"content":"      setState(() {"},{"type":"DELETE","lineNumber":956,"oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":959,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":960,"oldContent":"  Future<void> _testNotification() async {"},{"type":"INSERT","lineNumber":958,"content":"  Future<void> _testNotification() async {"},{"type":"DELETE","lineNumber":963,"oldContent":"      await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":966,"oldContent":"        return;"},{"type":"DELETE","lineNumber":967,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":962,"content":""},{"type":"DELETE","lineNumber":969,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":971,"oldContent":"            content: Text('Please select at least one day of the week'),"},{"type":"DELETE","lineNumber":973,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":975,"oldContent":"          ),"},{"type":"DELETE","lineNumber":977,"oldContent":"        );"},{"type":"DELETE","lineNumber":979,"oldContent":"        return;"},{"type":"INSERT","lineNumber":969,"content":"        );"},{"type":"DELETE","lineNumber":981,"oldContent":"      }"},{"type":"DELETE","lineNumber":983,"oldContent":""},{"type":"DELETE","lineNumber":985,"oldContent":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"DELETE","lineNumber":988,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":989,"oldContent":"            content: Text('Please select at least one day of the month'),"},{"type":"DELETE","lineNumber":991,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":977,"content":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":995,"oldContent":"          ),"},{"type":"DELETE","lineNumber":996,"oldContent":"        return;"},{"type":"DELETE","lineNumber":997,"oldContent":"        );"},{"type":"DELETE","lineNumber":1000,"oldContent":"      }"},{"type":"DELETE","lineNumber":1002,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1005,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1006,"oldContent":"            content: Text('Please select at least one date for the year'),"},{"type":"INSERT","lineNumber":985,"content":"    try {"},{"type":"DELETE","lineNumber":1008,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1010,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1011,"oldContent":"      "},{"type":"DELETE","lineNumber":1012,"oldContent":"        );"},{"type":"INSERT","lineNumber":988,"content":""},{"type":"DELETE","lineNumber":1014,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1016,"oldContent":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":991,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":1018,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1020,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1022,"oldContent":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"DELETE","lineNumber":1024,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1026,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1029,"oldContent":"      }"},{"type":"INSERT","lineNumber":1001,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1034,"oldContent":""},{"type":"DELETE","lineNumber":1037,"oldContent":"      }"},{"type":"DELETE","lineNumber":1039,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":1041,"oldContent":""},{"type":"DELETE","lineNumber":1043,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1045,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1047,"oldContent":""},{"type":"DELETE","lineNumber":1052,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1058,"oldContent":"      "},{"type":"DELETE","lineNumber":1059,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1060,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":1061,"oldContent":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int"},{"type":"DELETE","lineNumber":1062,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1021,"content":"            content: Text('Please select at least one day of the week'),"},{"type":"INSERT","lineNumber":1022,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1023,"content":"          ),"},{"type":"INSERT","lineNumber":1024,"content":"        );"},{"type":"INSERT","lineNumber":1025,"content":"        return;"},{"type":"INSERT","lineNumber":1026,"content":"      }"},{"type":"DELETE","lineNumber":1065,"oldContent":"        // Add frequency-specific data for notification scheduling"},{"type":"DELETE","lineNumber":1066,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1067,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":1068,"oldContent":"        selectedMonthDays: _selectedMonthDays,"},{"type":"DELETE","lineNumber":1069,"oldContent":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"DELETE","lineNumber":1070,"oldContent":""},{"type":"DELETE","lineNumber":1071,"oldContent":"      // Get HabitService instead of direct database access"},{"type":"INSERT","lineNumber":1028,"content":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":1029,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1030,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1031,"content":"            content: Text('Please select at least one day of the month'),"},{"type":"INSERT","lineNumber":1032,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1033,"content":"          ),"},{"type":"INSERT","lineNumber":1034,"content":"        );"},{"type":"INSERT","lineNumber":1035,"content":"        return;"},{"type":"DELETE","lineNumber":1073,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"DELETE","lineNumber":1075,"oldContent":"      "},{"type":"DELETE","lineNumber":1076,"oldContent":"      if (habitService == null) {"},{"type":"DELETE","lineNumber":1077,"oldContent":"          SnackBar("},{"type":"INSERT","lineNumber":1038,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":1040,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1041,"content":"            content: Text('Please select at least one date for the year'),"},{"type":"INSERT","lineNumber":1042,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1043,"content":"          ),"},{"type":"INSERT","lineNumber":1044,"content":"        );"},{"type":"INSERT","lineNumber":1045,"content":"        return;"},{"type":"INSERT","lineNumber":1046,"content":"      }"},{"type":"DELETE","lineNumber":1080,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1081,"oldContent":""},{"type":"INSERT","lineNumber":1048,"content":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":1049,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1050,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1051,"content":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1052,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1053,"content":"          ),"},{"type":"DELETE","lineNumber":1083,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1085,"oldContent":"}"},{"type":"DELETE","lineNumber":1089,"oldContent":"      await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":1091,"oldContent":""},{"type":"DELETE","lineNumber":1093,"oldContent":"      // Schedule notifications if enabled"},{"type":"DELETE","lineNumber":1095,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":1097,"oldContent":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"DELETE","lineNumber":1099,"oldContent":""},{"type":"DELETE","lineNumber":1102,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":1104,"oldContent":"      }"},{"type":"INSERT","lineNumber":1069,"content":"      }"},{"type":"DELETE","lineNumber":1108,"oldContent":"}"},{"type":"INSERT","lineNumber":1071,"content":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":1072,"content":"      DateTime? notificationDateTime;"},{"type":"INSERT","lineNumber":1073,"content":"      if (_notificationTime != null) {"},{"type":"INSERT","lineNumber":1074,"content":"        final now = DateTime.now();"},{"type":"DELETE","lineNumber":1110,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1113,"oldContent":"        // Navigate back"},{"type":"DELETE","lineNumber":1115,"oldContent":"        context.pop();"},{"type":"DELETE","lineNumber":1117,"oldContent":"      }"},{"type":"DELETE","lineNumber":1119,"oldContent":"      }"},{"type":"DELETE","lineNumber":1121,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1082,"content":"      }"},{"type":"DELETE","lineNumber":1123,"oldContent":""},{"type":"DELETE","lineNumber":1124,"oldContent":"    }"},{"type":"INSERT","lineNumber":1084,"content":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1087,"content":"        category: _selectedCategory,"},{"type":"INSERT","lineNumber":1088,"content":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int"},{"type":"INSERT","lineNumber":1089,"content":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":1128,"oldContent":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"DELETE","lineNumber":1131,"oldContent":""},{"type":"INSERT","lineNumber":1093,"content":"        // Add frequency-specific data for notification scheduling"},{"type":"INSERT","lineNumber":1094,"content":"        selectedWeekdays: _selectedWeekdays,"},{"type":"INSERT","lineNumber":1095,"content":"        selectedMonthDays: _selectedMonthDays,"},{"type":"INSERT","lineNumber":1096,"content":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1099,"content":""},{"type":"INSERT","lineNumber":1100,"content":"      // Get HabitService instead of direct database access"},{"type":"INSERT","lineNumber":1101,"content":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":1102,"content":"      final habitService = habitServiceAsync.value;"},{"type":"INSERT","lineNumber":1103,"content":"      "},{"type":"INSERT","lineNumber":1104,"content":"      if (habitService == null) {"},{"type":"INSERT","lineNumber":1105,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1106,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1107,"content":"            content: Text('Habit service not available'),"},{"type":"INSERT","lineNumber":1108,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1109,"content":"          ),"},{"type":"DELETE","lineNumber":1135,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1136,"oldContent":"          SnackBar("},{"type":"INSERT","lineNumber":1111,"content":"        return;"},{"type":"DELETE","lineNumber":1138,"oldContent":"      final habitService = habitServiceAsync.value;"},{"type":"DELETE","lineNumber":1139,"oldContent":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1141,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1142,"oldContent":"            backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":1143,"oldContent":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"DELETE","lineNumber":1144,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1114,"content":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1115,"content":""},{"type":"INSERT","lineNumber":1116,"content":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1117,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1118,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1119,"content":"      }"},{"type":"INSERT","lineNumber":1120,"content":""},{"type":"INSERT","lineNumber":1121,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1123,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1124,"content":"      }"},{"type":"INSERT","lineNumber":1125,"content":""},{"type":"INSERT","lineNumber":1127,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1128,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1129,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1130,"content":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1131,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":1132,"content":"          ),"},{"type":"INSERT","lineNumber":1133,"content":"        );"},{"type":"INSERT","lineNumber":1134,"content":""},{"type":"INSERT","lineNumber":1135,"content":"        // Navigate back"},{"type":"INSERT","lineNumber":1136,"content":"        context.pop();"},{"type":"DELETE","lineNumber":1148,"oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1138,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":1139,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1140,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1141,"content":"      }"},{"type":"INSERT","lineNumber":1142,"content":"      "},{"type":"INSERT","lineNumber":1143,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1144,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1145,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1146,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1147,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1148,"content":"          ),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"}]},{"timestamp":1754505311595,"changes":[{"type":"MODIFY","lineNumber":177,"content":"                  selected: _selectedFrequency == frequency,","oldContent":"                  selected: _selectedFrequency == frequency,"},{"type":"MODIFY","lineNumber":183,"content":"                        _selectedWeekdays.clear();","oldContent":"                        _selectedMonthDays.clear();"},{"type":"MODIFY","lineNumber":201,"content":"              ),","oldContent":"            ],"},{"type":"DELETE","lineNumber":322,"oldContent":"    return Card("},{"type":"DELETE","lineNumber":323,"oldContent":"      child: Padding("},{"type":"INSERT","lineNumber":322,"content":"            color: Colors.grey.shade200,"},{"type":"INSERT","lineNumber":323,"content":"            padding: const EdgeInsets.symmetric(vertical: 8),"},{"type":"MODIFY","lineNumber":329,"content":"                    child: Text(","oldContent":"              style: Theme.of(context).textTheme.titleMedium?.copyWith("},{"type":"MODIFY","lineNumber":452,"content":"        ],","oldContent":"                backgroundColor: Colors.green,"},{"type":"DELETE","lineNumber":590,"oldContent":"          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"DELETE","lineNumber":591,"oldContent":"      }"},{"type":"INSERT","lineNumber":590,"content":"              _buildYearlyCalendarGrid(),"},{"type":"INSERT","lineNumber":591,"content":"            ],"},{"type":"MODIFY","lineNumber":600,"content":"            ),","oldContent":"            backgroundColor: Colors.orange,"},{"type":"MODIFY","lineNumber":603,"content":"          SizedBox(","oldContent":"    }"},{"type":"MODIFY","lineNumber":669,"content":"            decoration: BoxDecoration(","oldContent":"      }"},{"type":"MODIFY","lineNumber":676,"content":"              border: Border.all(","oldContent":"    try {"},{"type":"MODIFY","lineNumber":679,"content":"            ),","oldContent":""},{"type":"DELETE","lineNumber":719,"oldContent":"        );"},{"type":"DELETE","lineNumber":720,"oldContent":"          ),"},{"type":"DELETE","lineNumber":721,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":722,"oldContent":"    try {"},{"type":"DELETE","lineNumber":723,"oldContent":""},{"type":"DELETE","lineNumber":724,"oldContent":"      return;"},{"type":"DELETE","lineNumber":725,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"INSERT","lineNumber":719,"content":"      builder: (context, child) {"},{"type":"INSERT","lineNumber":720,"content":"        return Theme("},{"type":"INSERT","lineNumber":721,"content":"          data: Theme.of(context).copyWith("},{"type":"INSERT","lineNumber":722,"content":"            timePickerTheme: TimePickerThemeData("},{"type":"INSERT","lineNumber":723,"content":"              backgroundColor: Theme.of(context).colorScheme.surface,"},{"type":"INSERT","lineNumber":724,"content":"              hourMinuteTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":725,"content":"              dayPeriodTextColor: Theme.of(context).colorScheme.onSurface,"},{"type":"MODIFY","lineNumber":740,"content":"        bool timeExists = _hourlyTimes.any((time) =>","oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":741,"content":"          time.hour == picked.hour && time.minute == picked.minute);"},{"type":"DELETE","lineNumber":742,"oldContent":""},{"type":"DELETE","lineNumber":743,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":744,"oldContent":"      }"},{"type":"DELETE","lineNumber":745,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":746,"oldContent":""},{"type":"DELETE","lineNumber":747,"oldContent":"      "},{"type":"DELETE","lineNumber":748,"oldContent":"      final database = ref.read(databaseProvider);"},{"type":"DELETE","lineNumber":749,"oldContent":"        return;"},{"type":"INSERT","lineNumber":743,"content":"        if (!timeExists) {"},{"type":"INSERT","lineNumber":744,"content":"          _hourlyTimes.add(picked);"},{"type":"INSERT","lineNumber":745,"content":"          // Sort times in chronological order"},{"type":"INSERT","lineNumber":746,"content":"          _hourlyTimes.sort((a, b) {"},{"type":"INSERT","lineNumber":747,"content":"            final aMinutes = a.hour * 60 + a.minute;"},{"type":"INSERT","lineNumber":748,"content":"            final bMinutes = b.hour * 60 + b.minute;"},{"type":"INSERT","lineNumber":749,"content":"            return aMinutes.compareTo(bMinutes);"},{"type":"MODIFY","lineNumber":760,"content":"    }","oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":766,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":767,"oldContent":"      }"},{"type":"DELETE","lineNumber":768,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":769,"oldContent":""},{"type":"DELETE","lineNumber":770,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":766,"content":"      spacing: 8,"},{"type":"INSERT","lineNumber":767,"content":"      runSpacing: 8,"},{"type":"INSERT","lineNumber":768,"content":"      children: List.generate(7, (index) {"},{"type":"INSERT","lineNumber":769,"content":"        final dayNumber = index + 1;"},{"type":"INSERT","lineNumber":770,"content":"        return FilterChip("},{"type":"DELETE","lineNumber":896,"oldContent":"            ],"},{"type":"DELETE","lineNumber":898,"oldContent":"          ],"},{"type":"DELETE","lineNumber":901,"oldContent":"        ),"},{"type":"DELETE","lineNumber":903,"oldContent":"      ),"},{"type":"DELETE","lineNumber":906,"oldContent":"    );"},{"type":"DELETE","lineNumber":908,"oldContent":"  }"},{"type":"DELETE","lineNumber":911,"oldContent":""},{"type":"DELETE","lineNumber":913,"oldContent":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"INSERT","lineNumber":908,"content":"            ],"},{"type":"INSERT","lineNumber":909,"content":"          ],"},{"type":"INSERT","lineNumber":910,"content":"        ),"},{"type":"INSERT","lineNumber":911,"content":"      ),"},{"type":"INSERT","lineNumber":912,"content":"    );"},{"type":"INSERT","lineNumber":913,"content":"  }"},{"type":"INSERT","lineNumber":914,"content":""},{"type":"INSERT","lineNumber":915,"content":"  String _getFrequencyDisplayName(HabitFrequency frequency) {"},{"type":"INSERT","lineNumber":934,"content":"      builder: (context, child) {"},{"type":"DELETE","lineNumber":935,"oldContent":"        return Theme("},{"type":"INSERT","lineNumber":946,"content":"          ),"},{"type":"DELETE","lineNumber":947,"oldContent":"          child: child!,"},{"type":"DELETE","lineNumber":956,"oldContent":"  Future<void> _testNotification() async {"},{"type":"MODIFY","lineNumber":958,"content":"  Future<void> _testNotification() async {","oldContent":"}"},{"type":"INSERT","lineNumber":962,"content":""},{"type":"DELETE","lineNumber":964,"oldContent":"        );"},{"type":"MODIFY","lineNumber":969,"content":"        );","oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":974,"oldContent":"    try {"},{"type":"DELETE","lineNumber":977,"oldContent":""},{"type":"DELETE","lineNumber":979,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":977,"content":"            backgroundColor: Colors.red,"},{"type":"MODIFY","lineNumber":985,"content":"    try {","oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":988,"content":""},{"type":"INSERT","lineNumber":991,"content":"          const SnackBar("},{"type":"MODIFY","lineNumber":995,"content":"          ),","oldContent":"            content: Text('Please select at least one day of the week'),"},{"type":"INSERT","lineNumber":996,"content":"        );"},{"type":"INSERT","lineNumber":997,"content":"      }"},{"type":"INSERT","lineNumber":998,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":999,"content":"      print('DEBUG: Error scheduling test notification: $e');"},{"type":"INSERT","lineNumber":1000,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1001,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1002,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1003,"content":"            content: Text('Failed to schedule test notification: $e'),"},{"type":"INSERT","lineNumber":1006,"content":"        );"},{"type":"INSERT","lineNumber":1007,"content":"      }"},{"type":"INSERT","lineNumber":1008,"content":"    }"},{"type":"INSERT","lineNumber":1009,"content":"  }"},{"type":"INSERT","lineNumber":1010,"content":""},{"type":"INSERT","lineNumber":1011,"content":"  Future<void> _saveHabit() async {"},{"type":"INSERT","lineNumber":1012,"content":"    if (!_formKey.currentState!.validate()) {"},{"type":"INSERT","lineNumber":1013,"content":"      return;"},{"type":"INSERT","lineNumber":1014,"content":"    }"},{"type":"INSERT","lineNumber":1015,"content":""},{"type":"INSERT","lineNumber":1016,"content":"    try {"},{"type":"INSERT","lineNumber":1017,"content":"      // Validate frequency-specific requirements"},{"type":"INSERT","lineNumber":1018,"content":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":1019,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1020,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1021,"content":"            content: Text('Please select at least one day of the week'),"},{"type":"INSERT","lineNumber":1022,"content":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1002,"oldContent":"        );"},{"type":"DELETE","lineNumber":1004,"oldContent":"      }"},{"type":"INSERT","lineNumber":1027,"content":""},{"type":"DELETE","lineNumber":1006,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":1009,"oldContent":"      print('DEBUG: Error scheduling test notification: $e');"},{"type":"DELETE","lineNumber":1011,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1013,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1015,"oldContent":"            content: Text('Failed to schedule test notification: $e'),"},{"type":"DELETE","lineNumber":1018,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1019,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1036,"content":"      }"},{"type":"INSERT","lineNumber":1037,"content":""},{"type":"DELETE","lineNumber":1021,"oldContent":"        );"},{"type":"INSERT","lineNumber":1039,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1023,"oldContent":"      }"},{"type":"DELETE","lineNumber":1026,"oldContent":"    }"},{"type":"DELETE","lineNumber":1029,"oldContent":"  }"},{"type":"DELETE","lineNumber":1034,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":1036,"oldContent":"    if (!_formKey.currentState!.validate()) {"},{"type":"DELETE","lineNumber":1038,"oldContent":"      return;"},{"type":"DELETE","lineNumber":1040,"oldContent":"    }"},{"type":"INSERT","lineNumber":1054,"content":"        );"},{"type":"INSERT","lineNumber":1055,"content":"        return;"},{"type":"INSERT","lineNumber":1056,"content":"      }"},{"type":"DELETE","lineNumber":1044,"oldContent":"    try {"},{"type":"DELETE","lineNumber":1045,"oldContent":"      // Validate frequency-specific requirements"},{"type":"DELETE","lineNumber":1046,"oldContent":"      if (_selectedFrequency == HabitFrequency.weekly && _selectedWeekdays.isEmpty) {"},{"type":"INSERT","lineNumber":1058,"content":"      final databaseAsync = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":1059,"content":"      final database = databaseAsync.value;"},{"type":"INSERT","lineNumber":1060,"content":"      "},{"type":"INSERT","lineNumber":1061,"content":"      if (database == null) {"},{"type":"DELETE","lineNumber":1049,"oldContent":""},{"type":"INSERT","lineNumber":1064,"content":"            content: Text('Database not available'),"},{"type":"INSERT","lineNumber":1065,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1066,"content":"          ),"},{"type":"INSERT","lineNumber":1067,"content":"        );"},{"type":"INSERT","lineNumber":1068,"content":"        return;"},{"type":"INSERT","lineNumber":1070,"content":""},{"type":"DELETE","lineNumber":1053,"oldContent":"      }"},{"type":"DELETE","lineNumber":1056,"oldContent":""},{"type":"DELETE","lineNumber":1057,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1058,"oldContent":"      "},{"type":"DELETE","lineNumber":1059,"oldContent":"      }"},{"type":"INSERT","lineNumber":1075,"content":"        notificationDateTime = DateTime("},{"type":"INSERT","lineNumber":1076,"content":"          now.year,"},{"type":"INSERT","lineNumber":1077,"content":"          now.month,"},{"type":"INSERT","lineNumber":1078,"content":"          now.day,"},{"type":"INSERT","lineNumber":1079,"content":"          _notificationTime!.hour,"},{"type":"INSERT","lineNumber":1080,"content":"          _notificationTime!.minute,"},{"type":"DELETE","lineNumber":1061,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1062,"oldContent":"        return;"},{"type":"INSERT","lineNumber":1083,"content":"      "},{"type":"INSERT","lineNumber":1084,"content":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1085,"content":"        name: _nameController.text.trim(),"},{"type":"INSERT","lineNumber":1086,"content":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":1065,"oldContent":""},{"type":"DELETE","lineNumber":1066,"oldContent":"        colorValue: _selectedColor.value, // Fixed: Use .value to get ARGB int"},{"type":"DELETE","lineNumber":1067,"oldContent":"      final databaseAsync = ref.read(databaseProvider);"},{"type":"INSERT","lineNumber":1088,"content":"        colorValue: _selectedColor.toARGB32(), // Fixed: Use toARGB32() to get ARGB int"},{"type":"DELETE","lineNumber":1069,"oldContent":"      final database = databaseAsync.value;"},{"type":"DELETE","lineNumber":1070,"oldContent":"      "},{"type":"INSERT","lineNumber":1090,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":1091,"content":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":1092,"content":"        notificationTime: notificationDateTime,"},{"type":"DELETE","lineNumber":1073,"oldContent":"      if (database == null) {"},{"type":"DELETE","lineNumber":1076,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1077,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1097,"content":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1098,"content":"      );"},{"type":"DELETE","lineNumber":1080,"oldContent":"            content: Text('Database not available'),"},{"type":"DELETE","lineNumber":1082,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1085,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1088,"oldContent":"        );"},{"type":"DELETE","lineNumber":1090,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1092,"oldContent":"      // Show success message"},{"type":"DELETE","lineNumber":1095,"oldContent":"        notificationDateTime = DateTime("},{"type":"INSERT","lineNumber":1110,"content":"        );"},{"type":"DELETE","lineNumber":1097,"oldContent":"          now.year,"},{"type":"DELETE","lineNumber":1098,"oldContent":"          now.month,"},{"type":"INSERT","lineNumber":1112,"content":"      }"},{"type":"INSERT","lineNumber":1113,"content":""},{"type":"DELETE","lineNumber":1100,"oldContent":"          now.day,"},{"type":"DELETE","lineNumber":1103,"oldContent":"          _notificationTime!.hour,"},{"type":"DELETE","lineNumber":1106,"oldContent":"          _notificationTime!.minute,"},{"type":"DELETE","lineNumber":1109,"oldContent":"        );"},{"type":"DELETE","lineNumber":1111,"oldContent":""},{"type":"INSERT","lineNumber":1122,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1115,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":1116,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"INSERT","lineNumber":1126,"content":"      // Show success message"},{"type":"DELETE","lineNumber":1118,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":1121,"oldContent":"        notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":1123,"oldContent":"        notificationTime: notificationDateTime,"},{"type":"DELETE","lineNumber":1126,"oldContent":"}"},{"type":"DELETE","lineNumber":1128,"oldContent":"  }"},{"type":"DELETE","lineNumber":1130,"oldContent":"    }"},{"type":"DELETE","lineNumber":1133,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1137,"content":"      }"},{"type":"DELETE","lineNumber":1137,"oldContent":"          SnackBar("},{"type":"INSERT","lineNumber":1143,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1144,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1145,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1146,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1147,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1148,"content":"          ),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]},{"timestamp":1754505990802,"changes":[{"type":"INSERT","lineNumber":176,"content":"                  label: Text(_getFrequencyDisplayName(frequency)),"},{"type":"DELETE","lineNumber":177,"oldContent":"                  selected: _selectedFrequency == frequency,"},{"type":"MODIFY","lineNumber":182,"content":"                        _selectedFrequency = frequency;","oldContent":"                        _selectedMonthDays.clear();"},{"type":"MODIFY","lineNumber":321,"content":"          Container(","oldContent":"    return Card("},{"type":"DELETE","lineNumber":598,"oldContent":"            content: Text('Habit created but notifications failed to schedule: $e'),"},{"type":"DELETE","lineNumber":599,"oldContent":"            backgroundColor: Colors.orange,"},{"type":"INSERT","lineNumber":598,"content":"            style: Theme.of(context).textTheme.bodyMedium?.copyWith("},{"type":"INSERT","lineNumber":599,"content":"              fontWeight: FontWeight.w500,"},{"type":"MODIFY","lineNumber":601,"content":"          ),","oldContent":"        );"},{"type":"DELETE","lineNumber":728,"oldContent":"    }"},{"type":"DELETE","lineNumber":729,"oldContent":"  Future<void> _saveHabit() async {"},{"type":"DELETE","lineNumber":730,"oldContent":"      });"},{"type":"DELETE","lineNumber":731,"oldContent":"        _notificationTime = picked;"},{"type":"DELETE","lineNumber":732,"oldContent":""},{"type":"DELETE","lineNumber":733,"oldContent":"    return Wrap("},{"type":"INSERT","lineNumber":728,"content":"              entryModeIconColor: Theme.of(context).colorScheme.onSurface,"},{"type":"INSERT","lineNumber":729,"content":"              helpTextStyle: TextStyle(color: Theme.of(context).colorScheme.onSurface),"},{"type":"INSERT","lineNumber":730,"content":"            ),"},{"type":"INSERT","lineNumber":731,"content":"          ),"},{"type":"INSERT","lineNumber":732,"content":"          child: child!,"},{"type":"INSERT","lineNumber":733,"content":"        );"},{"type":"MODIFY","lineNumber":742,"content":"","oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":764,"oldContent":"      // Log the habit creation"},{"type":"DELETE","lineNumber":765,"oldContent":"      }"},{"type":"INSERT","lineNumber":764,"content":"    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];"},{"type":"INSERT","lineNumber":765,"content":"    return Wrap("},{"type":"INSERT","lineNumber":903,"content":"                      ),"},{"type":"INSERT","lineNumber":904,"content":"                    ),"},{"type":"INSERT","lineNumber":905,"content":"                  ),"},{"type":"INSERT","lineNumber":906,"content":"                ],"},{"type":"INSERT","lineNumber":907,"content":"              ),"},{"type":"DELETE","lineNumber":905,"oldContent":"                      ),"},{"type":"DELETE","lineNumber":907,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":910,"oldContent":"                  ),"},{"type":"DELETE","lineNumber":913,"oldContent":"                ],"},{"type":"DELETE","lineNumber":915,"oldContent":"              ),"},{"type":"MODIFY","lineNumber":958,"content":"  Future<void> _testNotification() async {","oldContent":"  Future<void> _testNotification() async {"},{"type":"MODIFY","lineNumber":962,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":969,"content":"        );","oldContent":"        );"},{"type":"DELETE","lineNumber":975,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":977,"content":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":982,"oldContent":"    try {"},{"type":"MODIFY","lineNumber":985,"content":"    try {","oldContent":""},{"type":"DELETE","lineNumber":989,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":988,"content":""},{"type":"INSERT","lineNumber":991,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":994,"content":"            duration: Duration(seconds: 3),"},{"type":"DELETE","lineNumber":996,"oldContent":"            duration: Duration(seconds: 3),"},{"type":"DELETE","lineNumber":998,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1000,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1002,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1004,"oldContent":"        );"},{"type":"DELETE","lineNumber":1006,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1009,"oldContent":"      }"},{"type":"DELETE","lineNumber":1010,"oldContent":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":1004,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1005,"content":"          ),"},{"type":"DELETE","lineNumber":1013,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1015,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1018,"oldContent":"            content: Text('Please select at least one day of the month'),"},{"type":"DELETE","lineNumber":1021,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1024,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1027,"oldContent":"        );"},{"type":"DELETE","lineNumber":1029,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1033,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1036,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1037,"oldContent":"            content: Text('Please select at least one date for the year'),"},{"type":"DELETE","lineNumber":1038,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1039,"oldContent":""},{"type":"DELETE","lineNumber":1045,"oldContent":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":1028,"content":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":1030,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1031,"content":"            content: Text('Please select at least one day of the month'),"},{"type":"INSERT","lineNumber":1032,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1033,"content":"          ),"},{"type":"INSERT","lineNumber":1034,"content":"        );"},{"type":"INSERT","lineNumber":1035,"content":"        return;"},{"type":"DELETE","lineNumber":1049,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1038,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1051,"oldContent":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1040,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1041,"content":"            content: Text('Please select at least one date for the year'),"},{"type":"INSERT","lineNumber":1044,"content":"        );"},{"type":"INSERT","lineNumber":1045,"content":"        return;"},{"type":"INSERT","lineNumber":1046,"content":"      }"},{"type":"INSERT","lineNumber":1048,"content":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"DELETE","lineNumber":1057,"oldContent":"      }"},{"type":"DELETE","lineNumber":1058,"oldContent":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"DELETE","lineNumber":1059,"oldContent":"      DateTime? notificationDateTime;"},{"type":"INSERT","lineNumber":1051,"content":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1052,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1053,"content":"          ),"},{"type":"DELETE","lineNumber":1061,"oldContent":"      if (_notificationTime != null) {"},{"type":"DELETE","lineNumber":1063,"oldContent":"        final now = DateTime.now();"},{"type":"INSERT","lineNumber":1057,"content":""},{"type":"DELETE","lineNumber":1068,"oldContent":"        );"},{"type":"DELETE","lineNumber":1070,"oldContent":"      // Show success message"},{"type":"INSERT","lineNumber":1062,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1063,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":1072,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":1077,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1069,"content":"      }"},{"type":"DELETE","lineNumber":1079,"oldContent":"        // Add frequency-specific data for notification scheduling"},{"type":"DELETE","lineNumber":1080,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":1081,"oldContent":"        selectedMonthDays: _selectedMonthDays,"},{"type":"INSERT","lineNumber":1071,"content":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":1072,"content":"      DateTime? notificationDateTime;"},{"type":"INSERT","lineNumber":1073,"content":"      if (_notificationTime != null) {"},{"type":"INSERT","lineNumber":1074,"content":"        final now = DateTime.now();"},{"type":"DELETE","lineNumber":1083,"oldContent":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"DELETE","lineNumber":1087,"oldContent":""},{"type":"DELETE","lineNumber":1089,"oldContent":"      // Get HabitService instead of direct database access"},{"type":"DELETE","lineNumber":1091,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":1081,"content":"        );"},{"type":"INSERT","lineNumber":1082,"content":"      }"},{"type":"DELETE","lineNumber":1093,"oldContent":"      final habitService = habitServiceAsync.value;"},{"type":"DELETE","lineNumber":1095,"oldContent":"      "},{"type":"DELETE","lineNumber":1098,"oldContent":"      if (habitService == null) {"},{"type":"DELETE","lineNumber":1099,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1087,"content":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":1101,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1089,"content":"        frequency: _selectedFrequency,"},{"type":"DELETE","lineNumber":1104,"oldContent":"            content: Text('Habit service not available'),"},{"type":"INSERT","lineNumber":1093,"content":"        // Add frequency-specific data for notification scheduling"},{"type":"INSERT","lineNumber":1094,"content":"        selectedWeekdays: _selectedWeekdays,"},{"type":"INSERT","lineNumber":1095,"content":"        selectedMonthDays: _selectedMonthDays,"},{"type":"INSERT","lineNumber":1096,"content":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1097,"content":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1098,"content":"      );"},{"type":"INSERT","lineNumber":1099,"content":""},{"type":"INSERT","lineNumber":1100,"content":"      // Get HabitService instead of direct database access"},{"type":"INSERT","lineNumber":1101,"content":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":1102,"content":"      final habitService = habitServiceAsync.value;"},{"type":"INSERT","lineNumber":1103,"content":"      "},{"type":"INSERT","lineNumber":1104,"content":"      if (habitService == null) {"},{"type":"INSERT","lineNumber":1105,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1106,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1107,"content":"            content: Text('Habit service not available'),"},{"type":"INSERT","lineNumber":1110,"content":"        );"},{"type":"DELETE","lineNumber":1109,"oldContent":"        selectedYearlyDates: _selectedYearlyDates.map((date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}').toList(),"},{"type":"DELETE","lineNumber":1110,"oldContent":"      );"},{"type":"INSERT","lineNumber":1112,"content":"      }"},{"type":"INSERT","lineNumber":1113,"content":""},{"type":"DELETE","lineNumber":1118,"oldContent":"        );"},{"type":"DELETE","lineNumber":1120,"oldContent":"      }"},{"type":"INSERT","lineNumber":1122,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1122,"oldContent":""},{"type":"INSERT","lineNumber":1126,"content":"      // Show success message"},{"type":"DELETE","lineNumber":1128,"oldContent":"      if (mounted) {"},{"type":"DELETE","lineNumber":1130,"oldContent":""},{"type":"DELETE","lineNumber":1131,"oldContent":"}"},{"type":"DELETE","lineNumber":1132,"oldContent":"      // Show success message"},{"type":"DELETE","lineNumber":1133,"oldContent":"    }"},{"type":"INSERT","lineNumber":1131,"content":"            backgroundColor: Colors.green,"},{"type":"INSERT","lineNumber":1132,"content":"          ),"},{"type":"DELETE","lineNumber":1135,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1136,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1137,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1134,"content":""},{"type":"INSERT","lineNumber":1135,"content":"        // Navigate back"},{"type":"INSERT","lineNumber":1136,"content":"        context.pop();"},{"type":"INSERT","lineNumber":1137,"content":"      }"},{"type":"INSERT","lineNumber":1138,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":1140,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1142,"content":"      "},{"type":"INSERT","lineNumber":1143,"content":"      if (mounted) {"},{"type":"INSERT","lineNumber":1144,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1145,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1146,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1147,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1148,"content":"          ),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]},{"timestamp":1754508956232,"changes":[{"type":"MODIFY","lineNumber":589,"content":"              // Calendar grid","oldContent":"          AppLogger.info('Scheduled yearly notification for \"${habit.name}\" at ${nextNotification.toString()}');"},{"type":"MODIFY","lineNumber":592,"content":"          ),","oldContent":""},{"type":"MODIFY","lineNumber":727,"content":"              dialTextColor: Theme.of(context).colorScheme.onSurface,","oldContent":"      }"},{"type":"DELETE","lineNumber":736,"oldContent":"      });"},{"type":"DELETE","lineNumber":737,"oldContent":"  }"},{"type":"DELETE","lineNumber":738,"oldContent":"  Widget _buildWeekdaySelector() {"},{"type":"DELETE","lineNumber":739,"oldContent":"      if (mounted) {"},{"type":"INSERT","lineNumber":736,"content":""},{"type":"INSERT","lineNumber":737,"content":"    if (picked != null) {"},{"type":"INSERT","lineNumber":738,"content":"      setState(() {"},{"type":"INSERT","lineNumber":739,"content":"        // Check if time is not already added"},{"type":"DELETE","lineNumber":762,"oldContent":"    try {"},{"type":"DELETE","lineNumber":763,"oldContent":"      setState(() {"},{"type":"INSERT","lineNumber":762,"content":""},{"type":"INSERT","lineNumber":763,"content":"  Widget _buildWeekdaySelector() {"},{"type":"DELETE","lineNumber":904,"oldContent":"            ],"},{"type":"DELETE","lineNumber":906,"oldContent":"          ],"},{"type":"MODIFY","lineNumber":908,"content":"            ],","oldContent":"        ),"},{"type":"INSERT","lineNumber":909,"content":"          ],"},{"type":"INSERT","lineNumber":910,"content":"        ),"},{"type":"INSERT","lineNumber":957,"content":""},{"type":"DELETE","lineNumber":958,"oldContent":"  Future<void> _testNotification() async {"},{"type":"INSERT","lineNumber":961,"content":"      await NotificationService.showTestNotification();"},{"type":"DELETE","lineNumber":962,"oldContent":""},{"type":"INSERT","lineNumber":968,"content":"          ),"},{"type":"DELETE","lineNumber":969,"oldContent":"        );"},{"type":"MODIFY","lineNumber":977,"content":"            backgroundColor: Colors.red,","oldContent":"            backgroundColor: Colors.red,"},{"type":"MODIFY","lineNumber":985,"content":"    try {","oldContent":"    try {"},{"type":"MODIFY","lineNumber":988,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":991,"content":"          const SnackBar(","oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1001,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1002,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1004,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1005,"content":"          ),"},{"type":"DELETE","lineNumber":1017,"oldContent":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"DELETE","lineNumber":1019,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1021,"oldContent":"            content: Text('Please select at least one day of the month'),"},{"type":"DELETE","lineNumber":1023,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1025,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1026,"oldContent":"        );"},{"type":"DELETE","lineNumber":1028,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1030,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1031,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1033,"oldContent":"            content: Text('Please select at least one date for the year'),"},{"type":"DELETE","lineNumber":1037,"oldContent":"        );"},{"type":"INSERT","lineNumber":1028,"content":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":1029,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1030,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1031,"content":"            content: Text('Please select at least one day of the month'),"},{"type":"INSERT","lineNumber":1032,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1033,"content":"          ),"},{"type":"INSERT","lineNumber":1034,"content":"        );"},{"type":"DELETE","lineNumber":1041,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1042,"oldContent":"      }"},{"type":"DELETE","lineNumber":1043,"oldContent":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":1038,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1046,"oldContent":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1040,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1041,"content":"            content: Text('Please select at least one date for the year'),"},{"type":"DELETE","lineNumber":1048,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1050,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1044,"content":"        );"},{"type":"INSERT","lineNumber":1045,"content":"        return;"},{"type":"INSERT","lineNumber":1046,"content":"      }"},{"type":"INSERT","lineNumber":1048,"content":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"DELETE","lineNumber":1054,"oldContent":""},{"type":"INSERT","lineNumber":1051,"content":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1052,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1053,"content":"          ),"},{"type":"DELETE","lineNumber":1056,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1058,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1057,"content":""},{"type":"DELETE","lineNumber":1063,"oldContent":"      }"},{"type":"DELETE","lineNumber":1065,"oldContent":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":1062,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1063,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":1067,"oldContent":"      DateTime? notificationDateTime;"},{"type":"DELETE","lineNumber":1068,"oldContent":"      if (_notificationTime != null) {"},{"type":"DELETE","lineNumber":1070,"oldContent":"        final now = DateTime.now();"},{"type":"DELETE","lineNumber":1074,"oldContent":""},{"type":"DELETE","lineNumber":1075,"oldContent":"        );"},{"type":"INSERT","lineNumber":1070,"content":""},{"type":"INSERT","lineNumber":1071,"content":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":1072,"content":"      DateTime? notificationDateTime;"},{"type":"INSERT","lineNumber":1073,"content":"      if (_notificationTime != null) {"},{"type":"INSERT","lineNumber":1074,"content":"        final now = DateTime.now();"},{"type":"DELETE","lineNumber":1081,"oldContent":"        category: _selectedCategory,"},{"type":"DELETE","lineNumber":1083,"oldContent":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1081,"content":"        );"},{"type":"INSERT","lineNumber":1082,"content":"      }"},{"type":"INSERT","lineNumber":1084,"content":"      final habit = Habit.create("},{"type":"INSERT","lineNumber":1085,"content":"        name: _nameController.text.trim(),"},{"type":"INSERT","lineNumber":1086,"content":"        description: _descriptionController.text.trim(),"},{"type":"INSERT","lineNumber":1087,"content":"        category: _selectedCategory,"},{"type":"INSERT","lineNumber":1088,"content":"        colorValue: _selectedColor.toARGB32(), // Fixed: Use toARGB32() to get ARGB int"},{"type":"INSERT","lineNumber":1089,"content":"        frequency: _selectedFrequency,"},{"type":"INSERT","lineNumber":1090,"content":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"INSERT","lineNumber":1091,"content":"        notificationsEnabled: _notificationsEnabled,"},{"type":"INSERT","lineNumber":1092,"content":"        notificationTime: notificationDateTime,"},{"type":"DELETE","lineNumber":1088,"oldContent":"      final habit = Habit.create("},{"type":"DELETE","lineNumber":1091,"oldContent":"        name: _nameController.text.trim(),"},{"type":"DELETE","lineNumber":1093,"oldContent":"        description: _descriptionController.text.trim(),"},{"type":"DELETE","lineNumber":1097,"oldContent":"        colorValue: _selectedColor.toARGB32(), // Fixed: Use toARGB32() to get ARGB int"},{"type":"DELETE","lineNumber":1100,"oldContent":"        targetCount: 1, // Default to 1 since we removed the UI"},{"type":"DELETE","lineNumber":1102,"oldContent":"        notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":1105,"oldContent":"        notificationTime: notificationDateTime,"},{"type":"MODIFY","lineNumber":1108,"content":"            backgroundColor: Colors.red,","oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1110,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1112,"oldContent":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":1111,"content":"        return;"},{"type":"INSERT","lineNumber":1114,"content":"      await habitService.addHabit(habit);"},{"type":"DELETE","lineNumber":1122,"oldContent":"}"},{"type":"DELETE","lineNumber":1124,"oldContent":"  }"},{"type":"DELETE","lineNumber":1125,"oldContent":"    }"},{"type":"DELETE","lineNumber":1126,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1123,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1124,"content":"      }"},{"type":"INSERT","lineNumber":1125,"content":""},{"type":"DELETE","lineNumber":1128,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1129,"oldContent":"          SnackBar("},{"type":"INSERT","lineNumber":1128,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1129,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1130,"content":"            content: Text('Habit \"${habit.name}\" created successfully!'),"},{"type":"INSERT","lineNumber":1133,"content":"        );"},{"type":"DELETE","lineNumber":1134,"oldContent":"    }"},{"type":"DELETE","lineNumber":1139,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1140,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1139,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1142,"oldContent":"          SnackBar("},{"type":"DELETE","lineNumber":1143,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1141,"content":"      }"},{"type":"INSERT","lineNumber":1144,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1145,"content":"          SnackBar("},{"type":"INSERT","lineNumber":1146,"content":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"INSERT","lineNumber":1147,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1148,"content":"          ),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]},{"timestamp":1754513766711,"changes":[{"type":"DELETE","lineNumber":29,"oldContent":"  int _targetCount = 1;"},{"type":"INSERT","lineNumber":79,"content":"            const SizedBox(height: 24),"},{"type":"DELETE","lineNumber":85,"oldContent":"            _buildNotificationSection(),"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"DELETE","lineNumber":158,"oldContent":"    return Card("},{"type":"INSERT","lineNumber":173,"content":"              children: HabitFrequency.values.map((frequency) {"},{"type":"DELETE","lineNumber":177,"oldContent":"                  label: Text(_getFrequencyDisplayName(frequency)),"},{"type":"INSERT","lineNumber":179,"content":"                    if (selected) {"},{"type":"MODIFY","lineNumber":734,"content":"      },","oldContent":"      setState(() {"},{"type":"MODIFY","lineNumber":761,"content":"  }","oldContent":"      await habitService.addHabit(habit);"},{"type":"INSERT","lineNumber":906,"content":"                ],"},{"type":"INSERT","lineNumber":907,"content":"              ),"},{"type":"DELETE","lineNumber":909,"oldContent":"        ),"},{"type":"DELETE","lineNumber":910,"oldContent":"              ),"},{"type":"MODIFY","lineNumber":970,"content":"      }","oldContent":"        );"},{"type":"INSERT","lineNumber":976,"content":"            content: Text('Failed to send test notification: $e'),"},{"type":"DELETE","lineNumber":977,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":978,"oldContent":"      if (_notificationsEnabled) {"},{"type":"DELETE","lineNumber":979,"oldContent":"      final habitServiceAsync = ref.read(habitServiceProvider);"},{"type":"INSERT","lineNumber":978,"content":"          ),"},{"type":"INSERT","lineNumber":979,"content":"        );"},{"type":"INSERT","lineNumber":984,"content":"  Future<void> _testScheduledNotification() async {"},{"type":"DELETE","lineNumber":985,"oldContent":"    try {"},{"type":"INSERT","lineNumber":987,"content":"      await NotificationService.testScheduledNotification();"},{"type":"DELETE","lineNumber":988,"oldContent":""},{"type":"INSERT","lineNumber":990,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":991,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1002,"oldContent":"            backgroundColor: Colors.red,"},{"type":"MODIFY","lineNumber":1004,"content":"            backgroundColor: Colors.red,","oldContent":"          ),"},{"type":"INSERT","lineNumber":1005,"content":"          ),"},{"type":"INSERT","lineNumber":1022,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1023,"content":"          ),"},{"type":"INSERT","lineNumber":1024,"content":"        );"},{"type":"INSERT","lineNumber":1025,"content":"        return;"},{"type":"INSERT","lineNumber":1026,"content":"      }"},{"type":"INSERT","lineNumber":1027,"content":""},{"type":"DELETE","lineNumber":1024,"oldContent":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1029,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1031,"oldContent":"        );"},{"type":"DELETE","lineNumber":1034,"oldContent":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"DELETE","lineNumber":1036,"oldContent":"        return;"},{"type":"INSERT","lineNumber":1038,"content":"      if (_selectedFrequency == HabitFrequency.yearly && _selectedYearlyDates.isEmpty) {"},{"type":"INSERT","lineNumber":1039,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1038,"oldContent":"      }"},{"type":"INSERT","lineNumber":1042,"content":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1043,"content":"          ),"},{"type":"DELETE","lineNumber":1041,"oldContent":""},{"type":"DELETE","lineNumber":1043,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1045,"oldContent":"            backgroundColor: Colors.red,"},{"type":"INSERT","lineNumber":1047,"content":""},{"type":"DELETE","lineNumber":1047,"oldContent":"          ),"},{"type":"INSERT","lineNumber":1049,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1050,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":1049,"oldContent":""},{"type":"DELETE","lineNumber":1051,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1053,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1055,"oldContent":""},{"type":"INSERT","lineNumber":1057,"content":""},{"type":"DELETE","lineNumber":1060,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"MODIFY","lineNumber":1062,"content":"        ScaffoldMessenger.of(context).showSnackBar(","oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1063,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1066,"content":"          ),"},{"type":"INSERT","lineNumber":1067,"content":"        );"},{"type":"INSERT","lineNumber":1068,"content":"        return;"},{"type":"INSERT","lineNumber":1069,"content":"      }"},{"type":"DELETE","lineNumber":1068,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1070,"oldContent":"        );"},{"type":"DELETE","lineNumber":1072,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1074,"oldContent":"      }"},{"type":"INSERT","lineNumber":1079,"content":"          _notificationTime!.hour,"},{"type":"INSERT","lineNumber":1080,"content":"          _notificationTime!.minute,"},{"type":"DELETE","lineNumber":1081,"oldContent":"          _notificationTime!.hour,"},{"type":"INSERT","lineNumber":1083,"content":"      "},{"type":"DELETE","lineNumber":1083,"oldContent":"          _notificationTime!.minute,"},{"type":"DELETE","lineNumber":1085,"oldContent":"      "},{"type":"DELETE","lineNumber":1087,"oldContent":"        // Add frequency-specific data for notification scheduling"},{"type":"DELETE","lineNumber":1089,"oldContent":"        selectedWeekdays: _selectedWeekdays,"},{"type":"DELETE","lineNumber":1092,"oldContent":"        selectedMonthDays: _selectedMonthDays,"},{"type":"DELETE","lineNumber":1094,"oldContent":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1093,"content":"        // Add frequency-specific data for notification scheduling"},{"type":"INSERT","lineNumber":1094,"content":"        selectedWeekdays: _selectedWeekdays,"},{"type":"INSERT","lineNumber":1095,"content":"        selectedMonthDays: _selectedMonthDays,"},{"type":"INSERT","lineNumber":1096,"content":"        hourlyTimes: _hourlyTimes.map((time) => '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}').toList(),"},{"type":"INSERT","lineNumber":1107,"content":"            content: Text('Habit service not available'),"},{"type":"DELETE","lineNumber":1108,"oldContent":"            backgroundColor: Colors.red,"},{"type":"MODIFY","lineNumber":1111,"content":"        return;","oldContent":"        return;"},{"type":"INSERT","lineNumber":1113,"content":""},{"type":"INSERT","lineNumber":1116,"content":"      // Schedule notifications if enabled"},{"type":"INSERT","lineNumber":1117,"content":"      if (_notificationsEnabled) {"},{"type":"INSERT","lineNumber":1118,"content":"        await NotificationService.scheduleHabitNotifications(habit);"},{"type":"INSERT","lineNumber":1119,"content":"      }"},{"type":"DELETE","lineNumber":1116,"oldContent":""},{"type":"DELETE","lineNumber":1117,"oldContent":"  }"},{"type":"DELETE","lineNumber":1118,"oldContent":"    }"},{"type":"DELETE","lineNumber":1119,"oldContent":"        );"},{"type":"DELETE","lineNumber":1120,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1121,"oldContent":"            content: Text('Failed to create habit: ${e.toString()}'),"},{"type":"DELETE","lineNumber":1122,"oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1121,"content":"      // Log the habit creation"},{"type":"INSERT","lineNumber":1123,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"INSERT","lineNumber":1127,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1130,"oldContent":"      }"},{"type":"INSERT","lineNumber":1140,"content":"        print('Failed to create habit: $e'); // Using print instead of LoggingService for now"},{"type":"DELETE","lineNumber":1141,"oldContent":"}"},{"type":"INSERT","lineNumber":1142,"content":"      "},{"type":"INSERT","lineNumber":1143,"content":"      if (mounted) {"},{"type":"DELETE","lineNumber":1143,"oldContent":"      }"},{"type":"DELETE","lineNumber":1145,"oldContent":"        );"},{"type":"MODIFY","lineNumber":1148,"content":"          ),","oldContent":"          ),"},{"type":"INSERT","lineNumber":1149,"content":"        );"},{"type":"INSERT","lineNumber":1150,"content":"      }"},{"type":"INSERT","lineNumber":1151,"content":"    }"},{"type":"INSERT","lineNumber":1152,"content":"  }"},{"type":"INSERT","lineNumber":1153,"content":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]},{"timestamp":1754607297322,"changes":[{"type":"MODIFY","lineNumber":79,"content":"            const SizedBox(height: 24),","oldContent":"            const SizedBox(height: 24),"},{"type":"MODIFY","lineNumber":154,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":173,"content":"              children: HabitFrequency.values.map((frequency) {","oldContent":"              children: HabitFrequency.values.map((frequency) {"},{"type":"MODIFY","lineNumber":179,"content":"                    if (selected) {","oldContent":"                    if (selected) {"},{"type":"INSERT","lineNumber":241,"content":"            // Remove the target count section completely"},{"type":"DELETE","lineNumber":242,"oldContent":"          ],"},{"type":"MODIFY","lineNumber":908,"content":"            ],","oldContent":"            ],"},{"type":"INSERT","lineNumber":1003,"content":"            content: Text('Failed to schedule test notification: $e'),"},{"type":"DELETE","lineNumber":1005,"oldContent":"            content: Text('Failed to schedule test notification: $e'),"},{"type":"DELETE","lineNumber":1023,"oldContent":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"DELETE","lineNumber":1025,"oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"DELETE","lineNumber":1028,"oldContent":"          const SnackBar("},{"type":"DELETE","lineNumber":1030,"oldContent":"            content: Text('Please select at least one day of the month'),"},{"type":"INSERT","lineNumber":1028,"content":"      if (_selectedFrequency == HabitFrequency.monthly && _selectedMonthDays.isEmpty) {"},{"type":"INSERT","lineNumber":1029,"content":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1030,"content":"          const SnackBar("},{"type":"INSERT","lineNumber":1031,"content":"            content: Text('Please select at least one day of the month'),"},{"type":"DELETE","lineNumber":1038,"oldContent":"          const SnackBar("},{"type":"INSERT","lineNumber":1040,"content":"          const SnackBar("},{"type":"DELETE","lineNumber":1042,"oldContent":"        );"},{"type":"MODIFY","lineNumber":1044,"content":"        );","oldContent":"        return;"},{"type":"INSERT","lineNumber":1045,"content":"        return;"},{"type":"DELETE","lineNumber":1047,"oldContent":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"DELETE","lineNumber":1049,"oldContent":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"INSERT","lineNumber":1048,"content":"      if (_selectedFrequency == HabitFrequency.hourly && _hourlyTimes.isEmpty) {"},{"type":"INSERT","lineNumber":1051,"content":"            content: Text('Please select at least one time for hourly reminders'),"},{"type":"MODIFY","lineNumber":1057,"content":"","oldContent":""},{"type":"INSERT","lineNumber":1061,"content":"      if (database == null) {"},{"type":"DELETE","lineNumber":1063,"oldContent":"      if (database == null) {"},{"type":"DELETE","lineNumber":1067,"oldContent":""},{"type":"DELETE","lineNumber":1069,"oldContent":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"INSERT","lineNumber":1070,"content":""},{"type":"INSERT","lineNumber":1071,"content":"      // Convert TimeOfDay to DateTime if notification time is set"},{"type":"MODIFY","lineNumber":1081,"content":"        );","oldContent":"        );"},{"type":"MODIFY","lineNumber":1084,"content":"      final habit = Habit.create(","oldContent":"      final habit = Habit.create("},{"type":"MODIFY","lineNumber":1091,"content":"        notificationsEnabled: _notificationsEnabled,","oldContent":"        // Add frequency-specific data for notification scheduling"},{"type":"INSERT","lineNumber":1092,"content":"        notificationTime: notificationDateTime,"},{"type":"INSERT","lineNumber":1093,"content":"        // Add frequency-specific data for notification scheduling"},{"type":"DELETE","lineNumber":1094,"oldContent":"        notificationsEnabled: _notificationsEnabled,"},{"type":"DELETE","lineNumber":1096,"oldContent":"        notificationTime: notificationDateTime,"},{"type":"INSERT","lineNumber":1110,"content":"        );"},{"type":"DELETE","lineNumber":1111,"oldContent":"        return;"},{"type":"DELETE","lineNumber":1116,"oldContent":""},{"type":"INSERT","lineNumber":1120,"content":""},{"type":"MODIFY","lineNumber":1123,"content":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now","oldContent":"        print('Habit created: ${habit.name}'); // Using print instead of LoggingService for now"},{"type":"MODIFY","lineNumber":1144,"content":"        ScaffoldMessenger.of(context).showSnackBar(","oldContent":"        ScaffoldMessenger.of(context).showSnackBar("},{"type":"INSERT","lineNumber":1147,"content":"            backgroundColor: Colors.red,"},{"type":"DELETE","lineNumber":1148,"oldContent":"          ),"},{"type":"DELETE","lineNumber":1150,"oldContent":""},{"type":"MODIFY","lineNumber":1153,"content":"}","oldContent":"}"},{"type":"INSERT","lineNumber":1154,"content":""}]}]},"C:/HabitV8/pubspec.yaml":{"filePath":"C:/HabitV8/pubspec.yaml","baseContent":"name: habitv8\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.8.1\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n  flutter_local_notifications: ^18.0.1\n  permission_handler: ^12.0.1\n  device_info_plus: ^11.5.0\n  hive: ^2.2.3\n  hive_flutter: ^1.1.0\n  flutter_riverpod: ^2.5.1\n  go_router: ^16.1.0\n  health: ^13.1.1\n  device_calendar: ^4.3.3\n  fl_chart: ^1.0.0  # Replaced charts_flutter and sunburst_chart with modern fl_chart\n  tflite_flutter: ^0.11.0\n  path_provider: ^2.1.3\n  flutter_launcher_icons: ^0.14.4\n  flutter_native_splash: ^2.4.0\n  intl: ^0.20.2\n  shared_preferences: ^2.2.2\n  timezone: ^0.9.4\n  logger: ^2.4.0\n  table_calendar: ^3.0.9  # Added for enhanced calendar UI components\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^5.0.0\n  hive_generator: ^2.0.1\n  build_runner: ^2.4.13\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n","baseTimestamp":1754457616179},"C:/HabitV8/android/app/build.gradle.kts":{"filePath":"C:/HabitV8/android/app/build.gradle.kts","baseContent":"plugins {\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.\n    id(\"dev.flutter.flutter-gradle-plugin\")\n}\n\nandroid {\n    namespace = \"com.example.habitv8\"\n    compileSdk = 34\n    ndkVersion = \"25.1.8937393\"\n\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n\n    defaultConfig {\n        applicationId = \"com.example.habitv8\"\n        minSdk = 21\n        targetSdk = 34\n        versionCode = flutter.versionCode\n        versionName = flutter.versionName\n    }\n\n    buildTypes {\n        release {\n            signingConfig = signingConfigs.getByName(\"debug\")\n        }\n    }\n}\n\nflutter {\n    source = \"../..\"\n}\n\ndependencies {\n    coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:2.0.4\")\n}\n","baseTimestamp":1754458554680,"deltas":[{"timestamp":1754458612455,"changes":[{"type":"MODIFY","lineNumber":9,"content":"    compileSdk = 36","oldContent":"    compileSdk = 34"},{"type":"MODIFY","lineNumber":24,"content":"        targetSdk = 36","oldContent":"        targetSdk = 34"}]},{"timestamp":1754458695934,"changes":[{"type":"MODIFY","lineNumber":10,"content":"    ndkVersion = \"27.0.12077973\"","oldContent":"    ndkVersion = \"25.1.8937393\""},{"type":"INSERT","lineNumber":15,"content":"        isCoreLibraryDesugaringEnabled = true"}]},{"timestamp":1754458777679,"changes":[{"type":"MODIFY","lineNumber":24,"content":"        minSdk = 26","oldContent":"        minSdk = 21"}]},{"timestamp":1754460034195,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"        sourceCompatibility = JavaVersion.VERSION_1_8"},{"type":"MODIFY","lineNumber":13,"content":"        sourceCompatibility = JavaVersion.VERSION_11","oldContent":"        targetCompatibility = JavaVersion.VERSION_1_8"},{"type":"INSERT","lineNumber":14,"content":"        targetCompatibility = JavaVersion.VERSION_11"},{"type":"MODIFY","lineNumber":19,"content":"        jvmTarget = \"11\"","oldContent":"        jvmTarget = \"1.8\""}]},{"timestamp":1754461117383,"changes":[{"type":"MODIFY","lineNumber":14,"content":"        targetCompatibility = JavaVersion.VERSION_11","oldContent":"        targetCompatibility = JavaVersion.VERSION_1_8"}]},{"timestamp":1754461139163,"changes":[{"type":"INSERT","lineNumber":20,"content":"        freeCompilerArgs += listOf("},{"type":"INSERT","lineNumber":21,"content":"            \"-opt-in=kotlin.RequiresOptIn\","},{"type":"INSERT","lineNumber":22,"content":"            \"-Xopt-in=kotlin.ExperimentalStdlibApi\""},{"type":"INSERT","lineNumber":23,"content":"        )"}]},{"timestamp":1754461377280,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"    }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"    defaultConfig {"},{"type":"INSERT","lineNumber":24,"content":"    }"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"    defaultConfig {"}]},{"timestamp":1754462281763,"changes":[{"type":"DELETE","lineNumber":22,"oldContent":"    }"},{"type":"INSERT","lineNumber":23,"content":"        )"},{"type":"INSERT","lineNumber":24,"content":"    }"},{"type":"DELETE","lineNumber":26,"oldContent":"        )"}]},{"timestamp":1754462823137,"changes":[{"type":"MODIFY","lineNumber":23,"content":"        )","oldContent":"        )"}]},{"timestamp":1754463150574,"changes":[{"type":"INSERT","lineNumber":22,"content":"            \"-Xopt-in=kotlin.ExperimentalStdlibApi\""},{"type":"DELETE","lineNumber":23,"oldContent":"        )"}]}]},"C:/HabitV8/android/settings.gradle.kts":{"filePath":"C:/HabitV8/android/settings.gradle.kts","baseContent":"pluginManagement {\n    val flutterSdkPath = run {\n        val properties = java.util.Properties()\n        file(\"local.properties\").inputStream().use { properties.load(it) }\n        val flutterSdkPath = properties.getProperty(\"flutter.sdk\")\n        require(flutterSdkPath != null) { \"flutter.sdk not set in local.properties\" }\n        flutterSdkPath\n    }\n\n    includeBuild(\"$flutterSdkPath/packages/flutter_tools/gradle\")\n\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n\nplugins {\n    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0.0\"\n    id(\"com.android.application\") version \"8.1.0\" apply false\n    id(\"org.jetbrains.kotlin.android\") version \"1.9.10\" apply false\n}\n\ninclude(\":app\")\n","baseTimestamp":1754458949693,"deltas":[{"timestamp":1754459899095,"changes":[{"type":"MODIFY","lineNumber":20,"content":"    id(\"com.android.application\") version \"8.2.1\" apply false","oldContent":"    id(\"com.android.application\") version \"8.1.0\" apply false"}]},{"timestamp":1754460021887,"changes":[{"type":"MODIFY","lineNumber":20,"content":"    id(\"com.android.application\") version \"8.3.0\" apply false","oldContent":"    id(\"com.android.application\") version \"8.2.1\" apply false"}]},{"timestamp":1754462282994,"changes":[{"type":"INSERT","lineNumber":21,"content":"    id(\"com.android.application\") version \"8.2.1\" apply false"}]},{"timestamp":1754462287615,"changes":[{"type":"DELETE","lineNumber":19,"oldContent":"    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0.0\""},{"type":"MODIFY","lineNumber":19,"content":"    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0id(\"com.android.application\") version \"8.3.0\" apply false","oldContent":"    id(\"com.android.application\") version \"8.3.0\" apply false"}]},{"timestamp":1754462492228,"changes":[{"type":"MODIFY","lineNumber":19,"content":"    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0.0\"","oldContent":"    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0id(\"com.android.application\") version \"8.3.0\" apply false"}]},{"timestamp":1754462608218,"changes":[{"type":"MODIFY","lineNumber":20,"content":"    id(\"com.android.application\") version \"8.3.0\" apply false","oldContent":"    id(\"com.android.application\") version \"8.2.1\" apply false"}]}]},"C:/HabitV8/android/gradle.properties":{"filePath":"C:/HabitV8/android/gradle.properties","baseContent":"org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n\n# Set Java version for all modules\norg.gradle.java.home=\nandroid.compileSdkVersion=34\nandroid.buildToolsVersion=34.0.0\n","baseTimestamp":1754460123181,"deltas":[{"timestamp":1754460167230,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"# Set Java version for all modules"},{"type":"DELETE","lineNumber":5,"oldContent":"org.gradle.java.home="},{"type":"INSERT","lineNumber":4,"content":"# Set Android build settings"}]},{"timestamp":1754461167385,"changes":[{"type":"INSERT","lineNumber":8,"content":"# Kotlin compiler options to suppress delicate API warnings"},{"type":"INSERT","lineNumber":9,"content":"kotlin.code.style=official"},{"type":"INSERT","lineNumber":10,"content":"kotlin.incremental=true"},{"type":"INSERT","lineNumber":11,"content":""}]},{"timestamp":1754461377032,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":""},{"type":"INSERT","lineNumber":11,"content":""}]}]},"C:/HabitV8/lib/services/notification_service.dart":{"filePath":"C:/HabitV8/lib/services/notification_service.dart","baseContent":"import 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:device_info_plus/device_info_plus.dart';\nimport 'dart:io';\nimport 'dart:convert';\nimport 'logging_service.dart';\n\nclass NotificationService {\n  static final FlutterLocalNotificationsPlugin _notificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  static bool _isInitialized = false;\n\n  // Callback for handling notification actions\n  static Function(String habitId, String action)? onNotificationAction;\n\n  /// Initialize the notification service\n  static Future<void> initialize() async {\n    if (_isInitialized) return;\n\n    // Android initialization settings\n    const AndroidInitializationSettings initializationSettingsAndroid =\n        AndroidInitializationSettings('@mipmap/ic_launcher');\n\n    // iOS initialization settings\n    const DarwinInitializationSettings initializationSettingsIOS =\n        DarwinInitializationSettings(\n      requestAlertPermission: true,\n      requestBadgePermission: true,\n      requestSoundPermission: true,\n    );\n\n    // Combined initialization settings\n    const InitializationSettings initializationSettings =\n        InitializationSettings(\n      android: initializationSettingsAndroid,\n      iOS: initializationSettingsIOS,\n    );\n\n    // Initialize the plugin\n    await _notificationsPlugin.initialize(\n      initializationSettings,\n      onDidReceiveNotificationResponse: _onNotificationTapped,\n    );\n\n    // Request permissions for Android 13+\n    if (Platform.isAndroid) {\n      await _requestAndroidPermissions();\n    }\n\n    _isInitialized = true;\n  }\n\n  /// Check if device is running Android 12+ (API level 31+)\n  static Future<bool> _isAndroid12Plus() async {\n    if (!Platform.isAndroid) return false;\n\n    try {\n      final DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();\n      final AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;\n      return androidInfo.version.sdkInt >= 31; // Android 12 = API 31\n    } catch (e) {\n      AppLogger.error('Error checking Android version', e);\n      return false; // Assume older version if error\n    }\n  }\n\n  /// Check if device is running Android 12+ (API level 31+) - public version\n  static Future<bool> isAndroid12Plus() async {\n    return await _isAndroid12Plus();\n  }\n\n  /// Request Android notification permissions with enhanced exact alarm handling\n  static Future<void> _requestAndroidPermissions() async {\n    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n        _notificationsPlugin.resolvePlatformSpecificImplementation<\n            AndroidFlutterLocalNotificationsPlugin>();\n\n    if (androidImplementation != null) {\n      // Request notification permission\n      await androidImplementation.requestNotificationsPermission();\n\n      // Check if we're on Android 12+ and handle exact alarms accordingly\n      final bool isAndroid12Plus = await _isAndroid12Plus();\n\n      if (isAndroid12Plus) {\n        AppLogger.info('Android 12+ detected - requesting exact alarm permissions');\n\n        // Request exact alarms permission (Android 12+)\n        try {\n          final bool? exactAlarmPermission =\n              await androidImplementation.requestExactAlarmsPermission();\n          AppLogger.info('Exact alarm permission granted: $exactAlarmPermission');\n\n          if (exactAlarmPermission != true) {\n            AppLogger.warning(\n                'WARNING: Exact alarm permission not granted. Scheduled notifications may not work on Android 12+');\n            AppLogger.warning(\n                'User may need to manually enable \"Alarms & reminders\" in app settings');\n          }\n        } catch (e) {\n          AppLogger.error('Error requesting exact alarm permission', e);\n        }\n      } else {\n        AppLogger.info('Android 11 or below detected - exact alarm permissions not required');\n      }\n    }\n  }\n\n  /// Handle notification tap and actions\n  static void _onNotificationTapped(NotificationResponse notificationResponse) {\n    final String? payload = notificationResponse.payload;\n    if (payload != null) {\n      AppLogger.info('Notification tapped with payload: $payload');\n      \n      try {\n        final Map<String, dynamic> data = jsonDecode(payload);\n        final String? habitId = data['habitId'];\n        final String? action = notificationResponse.actionId;\n        \n        if (habitId != null && action != null) {\n          // Handle the action\n          _handleNotificationAction(habitId, action);\n        }\n      } catch (e) {\n        AppLogger.error('Error parsing notification payload', e);\n      }\n    }\n  }\n\n  /// Handle notification actions (Complete/Snooze)\n  static void _handleNotificationAction(String habitId, String action) {\n    switch (action) {\n      case 'complete':\n        onNotificationAction?.call(habitId, 'complete');\n        break;\n      case 'snooze':\n        onNotificationAction?.call(habitId, 'snooze');\n        break;\n    }\n  }\n\n  /// Show an immediate notification\n  static Future<void> showNotification({\n    required int id,\n    required String title,\n    required String body,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_channel',\n      'Habit Notifications',\n      channelDescription: 'Notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n      showWhen: false,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    await _notificationsPlugin.show(\n      id,\n      title,\n      body,\n      platformChannelSpecifics,\n      payload: payload,\n    );\n  }\n\n  /// Schedule a notification for a specific time using device local time\n  static Future<void> scheduleNotification({\n    required int id,\n    required String title,\n    required String body,\n    required DateTime scheduledTime,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_scheduled_channel',\n      'Scheduled Habit Notifications',\n      channelDescription: 'Scheduled notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    // Simple and reliable timezone conversion\n    final deviceNow = DateTime.now();\n    final localScheduledTime = scheduledTime.toLocal();\n\n    AppLogger.info('Device current time: $deviceNow');\n    AppLogger.info('Target scheduled time: $localScheduledTime');\n    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');\n\n    // Create TZDateTime directly from the local scheduled time\n    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);\n\n    AppLogger.info('TZ Scheduled time: $tzScheduledTime');\n    AppLogger.info('TZ Local timezone: ${tz.local.name}');\n\n    await _notificationsPlugin.zonedSchedule(\n      id,\n      title,\n      body,\n      tzScheduledTime,\n      platformChannelSpecifics,\n      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n      payload: payload,\n    );\n  }\n\n  /// Schedule daily recurring notifications\n  static Future<void> scheduleDailyNotification({\n    required int id,\n    required String title,\n    required String body,\n    required int hour,\n    required int minute,\n    String? payload,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_daily_channel',\n      'Daily Habit Notifications',\n      channelDescription: 'Daily recurring notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails();\n\n    const NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\n    tz.TZDateTime scheduledDate = tz.TZDateTime(\n      tz.local,\n      now.year,\n      now.month,\n      now.day,\n      hour,\n      minute,\n    );\n\n    // If the scheduled time is in the past, schedule for tomorrow\n    if (scheduledDate.isBefore(now)) {\n      scheduledDate = scheduledDate.add(const Duration(days: 1));\n    }\n\n    await _notificationsPlugin.zonedSchedule(\n      id,\n      title,\n      body,\n      scheduledDate,\n      platformChannelSpecifics,\n      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n      matchDateTimeComponents: DateTimeComponents.time,\n      payload: payload,\n    );\n  }\n\n  /// Schedule daily habit reminder - wrapper method for specific habit reminders\n  static Future<void> scheduleDailyHabitReminder({\n    required String habitId,\n    required String habitName,\n    required DateTime reminderTime,\n  }) async {\n    final id = habitId.hashCode; // Generate unique ID from habit ID\n    final hour = reminderTime.hour;\n    final minute = reminderTime.minute;\n\n    await scheduleDailyNotification(\n      id: id,\n      title: 'Habit Reminder',\n      body: 'Time to complete your habit: $habitName',\n      hour: hour,\n      minute: minute,\n      payload: jsonEncode({\n        'habitId': habitId,\n        'habitName': habitName,\n        'type': 'habit_reminder',\n      }),\n    );\n  }\n\n  /// Cancel a specific notification\n  static Future<void> cancelNotification(int id) async {\n    await _notificationsPlugin.cancel(id);\n  }\n\n  /// Cancel all notifications\n  static Future<void> cancelAllNotifications() async {\n    await _notificationsPlugin.cancelAll();\n  }\n\n  /// Cancel all notifications for a specific habit\n  static Future<void> cancelHabitNotifications(int habitId) async {\n    if (!_isInitialized) await initialize();\n    \n    // Cancel the main notification\n    await _notificationsPlugin.cancel(habitId);\n    \n    // Cancel related notifications (for weekly/monthly schedules)\n    for (int i = 1; i <= 31; i++) {\n      await _notificationsPlugin.cancel(habitId * 100 + i);\n    }\n    \n    AppLogger.info('Cancelled all notifications for habit ID: $habitId');\n  }\n\n  /// Schedule notifications for a habit based on its frequency and settings\n  static Future<void> scheduleHabitNotifications(dynamic habit) async {\n    if (!_isInitialized) await initialize();\n    \n    // Skip if notifications are disabled or no notification time is set\n    if (!habit.notificationsEnabled || habit.notificationTime == null) {\n      AppLogger.info('Notifications disabled for habit: ${habit.name}');\n      return;\n    }\n\n    final notificationTime = habit.notificationTime;\n    final hour = notificationTime.hour;\n    final minute = notificationTime.minute;\n\n    try {\n      // Cancel any existing notifications for this habit first\n      await cancelHabitNotifications(habit.id);\n      \n      switch (habit.frequency.toString().split('.').last) {\n        case 'daily':\n          await _scheduleDailyHabitNotifications(habit, hour, minute);\n          break;\n          \n        case 'weekly':\n          await _scheduleWeeklyHabitNotifications(habit, hour, minute);\n          break;\n          \n        case 'monthly':\n          await _scheduleMonthlyHabitNotifications(habit, hour, minute);\n          break;\n          \n        case 'yearly':\n          await _scheduleYearlyHabitNotifications(habit, hour, minute);\n          break;\n          \n        case 'hourly':\n          await _scheduleHourlyHabitNotifications(habit);\n          break;\n          \n        default:\n          AppLogger.warning('Unknown habit frequency: ${habit.frequency}');\n      }\n      \n      AppLogger.info('Successfully scheduled notifications for habit: ${habit.name}');\n    } catch (e) {\n      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);\n    }\n  }\n\n  /// Schedule daily habit notifications\n  static Future<void> _scheduleDailyHabitNotifications(dynamic habit, int hour, int minute) async {\n    final now = DateTime.now();\n    DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);\n    \n    // If the time has passed today, schedule for tomorrow\n    if (nextNotification.isBefore(now)) {\n      nextNotification = nextNotification.add(const Duration(days: 1));\n    }\n\n    await scheduleNotification(\n      id: habit.id,\n      title: '🎯 ${habit.name}',\n      body: 'Time to complete your daily habit! Keep your streak going.',\n      scheduledTime: nextNotification,\n      payload: jsonEncode({\n        'habitId': habit.id.toString(),\n        'type': 'daily_reminder'\n      }),\n    );\n  }\n\n  /// Schedule weekly habit notifications\n  static Future<void> _scheduleWeeklyHabitNotifications(dynamic habit, int hour, int minute) async {\n    final selectedWeekdays = habit.selectedWeekdays ?? <int>[];\n    final now = DateTime.now();\n\n    for (int weekday in selectedWeekdays) {\n      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);\n      \n      // Find the next occurrence of this weekday\n      while (nextNotification.weekday != weekday) {\n        nextNotification = nextNotification.add(const Duration(days: 1));\n      }\n      \n      // If the time has passed today, schedule for next week\n      if (nextNotification.isBefore(now)) {\n        nextNotification = nextNotification.add(const Duration(days: 7));\n      }\n\n      await scheduleNotification(\n        id: habit.id * 100 + weekday,\n        title: '🎯 ${habit.name}',\n        body: 'Time to complete your weekly habit! Don\\'t break your streak.',\n        scheduledTime: nextNotification,\n        payload: jsonEncode({\n          'habitId': habit.id.toString(),\n          'type': 'weekly_reminder',\n          'weekday': weekday\n        }),\n      );\n    }\n  }\n\n  /// Schedule monthly habit notifications\n  static Future<void> _scheduleMonthlyHabitNotifications(dynamic habit, int hour, int minute) async {\n    final selectedMonthDays = habit.selectedMonthDays ?? <int>[];\n    final now = DateTime.now();\n\n    for (int monthDay in selectedMonthDays) {\n      DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);\n      \n      // If the day has passed this month, schedule for next month\n      if (nextNotification.isBefore(now)) {\n        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);\n      }\n      \n      // Handle case where the day doesn't exist in the target month\n      try {\n        nextNotification = DateTime(nextNotification.year, nextNotification.month, monthDay, hour, minute);\n      } catch (e) {\n        // Skip this month if the day doesn't exist (e.g., Feb 30)\n        continue;\n      }\n\n      await scheduleNotification(\n        id: habit.id * 100 + monthDay,\n        title: '🎯 ${habit.name}',\n        body: 'Time to complete your monthly habit! Stay consistent.',\n        scheduledTime: nextNotification,\n        payload: jsonEncode({\n          'habitId': habit.id.toString(),\n          'type': 'monthly_reminder',\n          'monthDay': monthDay\n        }),\n      );\n    }\n  }\n\n  /// Schedule yearly habit notifications\n  static Future<void> _scheduleYearlyHabitNotifications(dynamic habit, int hour, int minute) async {\n    final selectedYearlyDates = habit.selectedYearlyDates ?? <DateTime>[];\n    final now = DateTime.now();\n\n    for (DateTime date in selectedYearlyDates) {\n      DateTime nextNotification = DateTime(now.year, date.month, date.day, hour, minute);\n      \n      // If the date has passed this year, schedule for next year\n      if (nextNotification.isBefore(now)) {\n        nextNotification = DateTime(now.year + 1, date.month, date.day, hour, minute);\n      }\n\n      await scheduleNotification(\n        id: habit.id * 100 + date.month * 31 + date.day,\n        title: '🎯 ${habit.name}',\n        body: 'Time to complete your yearly habit! This is your special day.',\n        scheduledTime: nextNotification,\n        payload: jsonEncode({\n          'habitId': habit.id.toString(),\n          'type': 'yearly_reminder',\n          'month': date.month,\n          'day': date.day\n        }),\n      );\n    }\n  }\n\n  /// Schedule hourly habit notifications\n  static Future<void> _scheduleHourlyHabitNotifications(dynamic habit) async {\n    final hourlyTimes = habit.hourlyTimes ?? <dynamic>[];\n    final now = DateTime.now();\n\n    for (var timeOfDay in hourlyTimes) {\n      final hour = timeOfDay.hour;\n      final minute = timeOfDay.minute;\n      \n      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);\n      \n      // If the time has passed today, schedule for tomorrow\n      if (nextNotification.isBefore(now)) {\n        nextNotification = nextNotification.add(const Duration(days: 1));\n      }\n\n      await scheduleNotification(\n        id: habit.id * 100 + hour * 60 + minute,\n        title: '⏰ ${habit.name}',\n        body: 'Hourly reminder: Time for your habit!',\n        scheduledTime: nextNotification,\n        payload: jsonEncode({\n          'habitId': habit.id.toString(),\n          'type': 'hourly_reminder',\n          'hour': hour,\n          'minute': minute\n        }),\n      );\n    }\n  }\n\n  /// Get pending notifications\n  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {\n    return await _notificationsPlugin.pendingNotificationRequests();\n  }\n\n  /// Check if notifications are enabled\n  static Future<bool> areNotificationsEnabled() async {\n    if (Platform.isAndroid) {\n      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n          _notificationsPlugin.resolvePlatformSpecificImplementation<\n              AndroidFlutterLocalNotificationsPlugin>();\n\n      if (androidImplementation != null) {\n        return await androidImplementation.areNotificationsEnabled() ?? false;\n      }\n    }\n\n    // For iOS, we assume they're enabled if the user granted permission\n    return true;\n  }\n\n  /// Test notification - useful for debugging\n  static Future<void> showTestNotification() async {\n    await showNotification(\n      id: 999,\n      title: '🎯 Test Notification',\n      body: 'This is a test notification to verify the system is working!',\n      payload: 'test_notification',\n    );\n  }\n\n  /// Show an actionable habit notification with Complete and Snooze buttons\n  static Future<void> showHabitNotification({\n    required int id,\n    required String habitId,\n    required String title,\n    required String body,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    final AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_channel',\n      'Habit Notifications',\n      channelDescription: 'Notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n      showWhen: false,\n      actions: [\n        const AndroidNotificationAction(\n          'complete',\n          'Complete',\n          showsUserInterface: false,\n        ),\n        const AndroidNotificationAction(\n          'snooze',\n          'Snooze 30min',\n          showsUserInterface: false,\n        ),\n      ],\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails(\n      categoryIdentifier: 'habit_category',\n    );\n\n    final NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    final payload = jsonEncode({\n      'habitId': habitId,\n      'type': 'habit_reminder',\n    });\n\n    await _notificationsPlugin.show(\n      id,\n      title,\n      body,\n      platformChannelSpecifics,\n      payload: payload,\n    );\n  }\n\n  /// Schedule a habit notification with action buttons\n  static Future<void> scheduleHabitNotification({\n    required int id,\n    required String habitId,\n    required String title,\n    required String body,\n    required DateTime scheduledTime,\n  }) async {\n    if (!_isInitialized) await initialize();\n\n    final AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n      'habit_scheduled_channel',\n      'Scheduled Habit Notifications',\n      channelDescription: 'Scheduled notifications for habit reminders',\n      importance: Importance.max,\n      priority: Priority.high,\n      actions: [\n        const AndroidNotificationAction(\n          'complete',\n          'Complete',\n          showsUserInterface: false,\n        ),\n        const AndroidNotificationAction(\n          'snooze',\n          'Snooze 30min',\n          showsUserInterface: false,\n        ),\n      ],\n    );\n\n    const DarwinNotificationDetails iOSPlatformChannelSpecifics =\n        DarwinNotificationDetails(\n      categoryIdentifier: 'habit_category',\n    );\n\n    final NotificationDetails platformChannelSpecifics = NotificationDetails(\n      android: androidPlatformChannelSpecifics,\n      iOS: iOSPlatformChannelSpecifics,\n    );\n\n    final deviceNow = DateTime.now();\n    final localScheduledTime = scheduledTime.toLocal();\n\n    AppLogger.info('Device current time: $deviceNow');\n    AppLogger.info('Target scheduled time: $localScheduledTime');\n    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');\n\n    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);\n\n    AppLogger.info('TZ Scheduled time: $tzScheduledTime');\n    AppLogger.info('TZ Local timezone: ${tz.local.name}');\n\n    final payload = jsonEncode({\n      'habitId': habitId,\n      'type': 'habit_reminder',\n    });\n\n    await _notificationsPlugin.zonedSchedule(\n      id,\n      title,\n      body,\n      tzScheduledTime,\n      platformChannelSpecifics,\n      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\n      uiLocalNotificationDateInterpretation:\n          UILocalNotificationDateInterpretation.absoluteTime,\n      payload: payload,\n    );\n  }\n\n  /// Snooze a notification for 30 minutes\n  static Future<void> snoozeNotification({\n    required int id,\n    required String habitId,\n    required String title,\n    required String body,\n  }) async {\n    // Cancel the current notification\n    await _notificationsPlugin.cancel(id);\n    \n    // Schedule a new one for 30 minutes later\n    final snoozeTime = DateTime.now().add(const Duration(minutes: 30));\n    \n    await scheduleHabitNotification(\n      id: id,\n      habitId: habitId,\n      title: title,\n      body: body,\n      scheduledTime: snoozeTime,\n    );\n    \n    AppLogger.info('Notification snoozed for 30 minutes');\n  }\n\n  /// Debug method to check exact alarm permissions and timezone\n  static Future<Map<String, dynamic>> getSchedulingDebugInfo() async {\n    final Map<String, dynamic> debugInfo = {};\n\n    if (Platform.isAndroid) {\n      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n          _notificationsPlugin.resolvePlatformSpecificImplementation<\n              AndroidFlutterLocalNotificationsPlugin>();\n\n      if (androidImplementation != null) {\n        debugInfo['notificationsEnabled'] = await androidImplementation.areNotificationsEnabled();\n\n        // Check exact alarm permission status\n        final bool canScheduleExact = await canScheduleExactAlarms();\n        debugInfo['canScheduleExactAlarms'] = canScheduleExact;\n        debugInfo['isAndroid12Plus'] = await _isAndroid12Plus();\n      }\n    }\n\n    // Get device's actual local timezone instead of hardcoded one\n    final now = DateTime.now();\n    final tzNow = tz.TZDateTime.now(tz.local);\n\n    debugInfo['deviceLocalTime'] = now.toString();\n    debugInfo['tzLocalTime'] = tzNow.toString();\n    debugInfo['timezone'] = tz.local.name;\n    debugInfo['timezoneOffset'] = now.timeZoneOffset.inHours;\n    debugInfo['deviceTimezoneOffset'] = now.timeZoneOffset.toString();\n\n    // Test scheduled time (10 seconds from now)\n    final testTime = now.add(const Duration(seconds: 10));\n    debugInfo['testScheduledTime'] = testTime.toString();\n\n    return debugInfo;\n  }\n\n  /// Enhanced test method for scheduled notifications with comprehensive logging\n  static Future<void> testScheduledNotification() async {\n    AppLogger.info('=== Testing Scheduled Notification ===');\n\n    final debugInfo = await getSchedulingDebugInfo();\n    AppLogger.info('Debug Info: $debugInfo');\n\n    // Check if exact alarms are enabled\n    final canScheduleExact = await canScheduleExactAlarms();\n    AppLogger.info('Can schedule exact alarms: $canScheduleExact');\n\n    if (!canScheduleExact) {\n      AppLogger.error('ERROR: Exact alarm permission not granted!');\n      return;\n    }\n\n    final now = tz.TZDateTime.now(tz.local);\n    final scheduledTime = now.add(const Duration(seconds: 10));\n\n    AppLogger.info('Current time: $now');\n    AppLogger.info('Scheduled time: $scheduledTime');\n    AppLogger.info('Time difference: ${scheduledTime.difference(now).inSeconds} seconds');\n\n    try {\n      // Cancel any existing test notifications first\n      await cancelNotification(1001);\n      AppLogger.info('Cancelled any existing test notifications');\n\n      await scheduleNotification(\n        id: 1001,\n        title: '🔔 Debug Scheduled Test',\n        body: 'This notification was scheduled at ${now.toString().substring(11, 19)} and should fire at ${scheduledTime.toString().substring(11, 19)}',\n        scheduledTime: scheduledTime.toLocal(),\n        payload: 'debug_scheduled_test',\n      );\n      AppLogger.info('Scheduled notification successfully queued');\n\n      // Check if it was actually scheduled\n      final pending = await getPendingNotifications();\n      AppLogger.info('Pending notifications: ${pending.length}');\n      for (var notification in pending) {\n        AppLogger.info('- ID: ${notification.id}, Title: ${notification.title}');\n      }\n\n      // Add a verification step\n      AppLogger.info('Verification: Notification system should deliver the notification in 10 seconds');\n      AppLogger.info('Watch your device for the notification!');\n\n    } catch (e) {\n      AppLogger.error('Error scheduling notification', e);\n      AppLogger.error('Stack trace: ${StackTrace.current}');\n    }\n  }\n\n  /// Check if exact alarm permission is granted (Android 12+)\n  static Future<bool> canScheduleExactAlarms() async {\n    if (!Platform.isAndroid) return true;\n\n    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n        _notificationsPlugin.resolvePlatformSpecificImplementation<\n            AndroidFlutterLocalNotificationsPlugin>();\n\n    if (androidImplementation != null) {\n      try {\n        // Check if device is Android 12+\n        final bool isAndroid12Plus = await _isAndroid12Plus();\n\n        if (isAndroid12Plus) {\n          // On Android 12+, check if exact alarms are permitted\n          final bool? canSchedule = await androidImplementation.canScheduleExactNotifications();\n          AppLogger.info('Can schedule exact alarms: $canSchedule');\n          return canSchedule ?? false;\n        } else {\n          // Android 11 and below don't need exact alarm permission\n          return true;\n        }\n      } catch (e) {\n        AppLogger.error('Error checking exact alarm permission', e);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /// Open Android settings to allow exact alarms (Android 12+)\n  static Future<void> openExactAlarmSettings() async {\n    if (!Platform.isAndroid) return;\n\n    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\n        _notificationsPlugin.resolvePlatformSpecificImplementation<\n            AndroidFlutterLocalNotificationsPlugin>();\n\n    if (androidImplementation != null) {\n      try {\n        await androidImplementation.requestExactAlarmsPermission();\n        AppLogger.info('Opened exact alarm settings');\n      } catch (e) {\n        AppLogger.error('Error opening exact alarm settings', e);\n      }\n    }\n  }\n}\n","baseTimestamp":1754463512022,"deltas":[{"timestamp":1754508956151,"changes":[{"type":"MODIFY","lineNumber":208,"content":"    ","oldContent":""},{"type":"INSERT","lineNumber":214,"content":"    print('DEBUG: Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":215,"oldContent":""},{"type":"INSERT","lineNumber":220,"content":"    }"},{"type":"DELETE","lineNumber":221,"oldContent":""},{"type":"INSERT","lineNumber":240,"content":"        );"},{"type":"DELETE","lineNumber":241,"oldContent":"        print('DEBUG: TZ Scheduled time (method 2): $tzScheduledTime');"},{"type":"DELETE","lineNumber":252,"oldContent":"    print('DEBUG: TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":253,"oldContent":"    print('DEBUG: TZ offset: ${tzScheduledTime.timeZoneOffset}');"},{"type":"DELETE","lineNumber":255,"oldContent":"    print('DEBUG: Device vs TZ offset match: ${deviceNow.timeZoneOffset == tzScheduledTime.timeZoneOffset}');"},{"type":"DELETE","lineNumber":257,"oldContent":""},{"type":"INSERT","lineNumber":255,"content":"    }"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"    print('DEBUG: TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":258,"content":"    print('DEBUG: TZ offset: ${tzScheduledTime.timeZoneOffset}');"},{"type":"INSERT","lineNumber":259,"content":"    print('DEBUG: Device vs TZ offset match: ${deviceNow.timeZoneOffset == tzScheduledTime.timeZoneOffset}');"},{"type":"INSERT","lineNumber":260,"content":"    "},{"type":"DELETE","lineNumber":261,"oldContent":"    }"},{"type":"DELETE","lineNumber":263,"oldContent":""},{"type":"MODIFY","lineNumber":264,"content":"    ","oldContent":""},{"type":"DELETE","lineNumber":266,"oldContent":"      return; // Don't schedule past notifications"},{"type":"DELETE","lineNumber":268,"oldContent":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":267,"content":"      return; // Don't schedule past notifications"},{"type":"MODIFY","lineNumber":270,"content":"    AppLogger.info('Device current time: $deviceNow');","oldContent":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":271,"content":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"MODIFY","lineNumber":310,"content":"      channelDescription: 'Daily recurring notifications for habit reminders',","oldContent":"      channelDescription: 'Daily recurring notifications for habit reminders',"},{"type":"DELETE","lineNumber":312,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":315,"oldContent":"    );"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":320,"oldContent":"    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);"},{"type":"DELETE","lineNumber":322,"oldContent":"    tz.TZDateTime scheduledDate = tz.TZDateTime("},{"type":"INSERT","lineNumber":320,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":321,"content":"    );"},{"type":"INSERT","lineNumber":322,"content":""},{"type":"INSERT","lineNumber":323,"content":"    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);"},{"type":"INSERT","lineNumber":324,"content":"    tz.TZDateTime scheduledDate = tz.TZDateTime("},{"type":"INSERT","lineNumber":417,"content":"    }"},{"type":"DELETE","lineNumber":418,"oldContent":""},{"type":"INSERT","lineNumber":424,"content":""},{"type":"DELETE","lineNumber":425,"oldContent":"    try {"},{"type":"INSERT","lineNumber":436,"content":"          await _scheduleDailyHabitNotifications(habit, hour, minute);"},{"type":"INSERT","lineNumber":437,"content":"          break;"},{"type":"DELETE","lineNumber":438,"oldContent":"          await _scheduleDailyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":442,"oldContent":"          break;"},{"type":"DELETE","lineNumber":445,"oldContent":""},{"type":"MODIFY","lineNumber":448,"content":"","oldContent":"        case 'yearly':"},{"type":"INSERT","lineNumber":449,"content":"        case 'yearly':"},{"type":"INSERT","lineNumber":450,"content":"          print('DEBUG: Scheduling yearly notifications');"},{"type":"DELETE","lineNumber":452,"oldContent":"          print('DEBUG: Scheduling yearly notifications');"},{"type":"DELETE","lineNumber":454,"oldContent":"          await _scheduleHourlyHabitNotifications(habit);"},{"type":"MODIFY","lineNumber":456,"content":"          await _scheduleHourlyHabitNotifications(habit);","oldContent":"          break;"},{"type":"INSERT","lineNumber":457,"content":"          break;"},{"type":"DELETE","lineNumber":459,"oldContent":"          AppLogger.warning('Unknown habit frequency: ${habit.frequency}');"},{"type":"MODIFY","lineNumber":461,"content":"          AppLogger.warning('Unknown habit frequency: ${habit.frequency}');","oldContent":"      }"},{"type":"INSERT","lineNumber":462,"content":"      }"},{"type":"INSERT","lineNumber":464,"content":"      print('DEBUG: Successfully scheduled notifications for habit: ${habit.name}');"},{"type":"DELETE","lineNumber":466,"oldContent":"      print('DEBUG: Successfully scheduled notifications for habit: ${habit.name}');"},{"type":"MODIFY","lineNumber":468,"content":"      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);","oldContent":"      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);"},{"type":"INSERT","lineNumber":469,"content":"      rethrow; // Re-throw so the UI can show the error"},{"type":"DELETE","lineNumber":471,"oldContent":"      rethrow; // Re-throw so the UI can show the error"},{"type":"MODIFY","lineNumber":476,"content":"    final now = DateTime.now();","oldContent":"    final now = DateTime.now();"},{"type":"MODIFY","lineNumber":479,"content":"    print('DEBUG: Current time: $now');","oldContent":"    print('DEBUG: Current time: $now');"},{"type":"DELETE","lineNumber":482,"oldContent":"      print('DEBUG: Time has passed today, scheduling for tomorrow: $nextNotification');"},{"type":"MODIFY","lineNumber":485,"content":"      print('DEBUG: Time has passed today, scheduling for tomorrow: $nextNotification');","oldContent":"    } else {"},{"type":"INSERT","lineNumber":486,"content":"    } else {"},{"type":"DELETE","lineNumber":488,"oldContent":"    try {"},{"type":"DELETE","lineNumber":489,"oldContent":"      await scheduleNotification("},{"type":"INSERT","lineNumber":490,"content":"    try {"},{"type":"INSERT","lineNumber":491,"content":"      await scheduleNotification("},{"type":"DELETE","lineNumber":513,"oldContent":"      }"},{"type":"INSERT","lineNumber":514,"content":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":515,"content":""},{"type":"INSERT","lineNumber":516,"content":"      // Find the next occurrence of this weekday"},{"type":"INSERT","lineNumber":517,"content":"      while (nextNotification.weekday != weekday) {"},{"type":"INSERT","lineNumber":518,"content":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":519,"content":"      }"},{"type":"INSERT","lineNumber":520,"content":""},{"type":"DELETE","lineNumber":517,"oldContent":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":521,"oldContent":""},{"type":"DELETE","lineNumber":522,"oldContent":"      // Find the next occurrence of this weekday"},{"type":"DELETE","lineNumber":524,"oldContent":"      while (nextNotification.weekday != weekday) {"},{"type":"DELETE","lineNumber":527,"oldContent":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":530,"oldContent":""},{"type":"INSERT","lineNumber":553,"content":"      // Handle case where the day doesn't exist in the target month"},{"type":"DELETE","lineNumber":554,"oldContent":"      try {"}]},{"timestamp":1754509033375,"changes":[{"type":"INSERT","lineNumber":253,"content":"        print('DEBUG: TZ Scheduled time (UTC fallback): $tzScheduledTime');"},{"type":"INSERT","lineNumber":254,"content":"      }"},{"type":"DELETE","lineNumber":255,"oldContent":"        print('DEBUG: TZ Scheduled time (UTC fallback): $tzScheduledTime');"},{"type":"DELETE","lineNumber":258,"oldContent":"      }"},{"type":"MODIFY","lineNumber":261,"content":"    // Additional validation","oldContent":"    // Additional validation"},{"type":"MODIFY","lineNumber":267,"content":"      return; // Don't schedule past notifications","oldContent":"      return; // Don't schedule past notifications"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"DELETE","lineNumber":271,"oldContent":""},{"type":"INSERT","lineNumber":309,"content":"      'Daily Habit Notifications',"},{"type":"DELETE","lineNumber":310,"oldContent":"      channelDescription: 'Daily recurring notifications for habit reminders',"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":319,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":320,"oldContent":""},{"type":"DELETE","lineNumber":322,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":324,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"MODIFY","lineNumber":438,"content":"","oldContent":""},{"type":"INSERT","lineNumber":447,"content":"          break;"},{"type":"DELETE","lineNumber":449,"oldContent":"          break;"},{"type":"INSERT","lineNumber":455,"content":"          print('DEBUG: Scheduling hourly notifications');"},{"type":"DELETE","lineNumber":457,"oldContent":"          print('DEBUG: Scheduling hourly notifications');"},{"type":"INSERT","lineNumber":460,"content":"          print('DEBUG: Unknown frequency: $frequency');"},{"type":"DELETE","lineNumber":462,"oldContent":"          print('DEBUG: Unknown frequency: $frequency');"},{"type":"INSERT","lineNumber":467,"content":"      print('DEBUG: Error scheduling notifications: $e');"},{"type":"DELETE","lineNumber":468,"oldContent":"      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);"},{"type":"INSERT","lineNumber":475,"content":"    print('DEBUG: Scheduling daily notifications for ${habit.name}');"},{"type":"DELETE","lineNumber":476,"oldContent":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":478,"content":"    "},{"type":"DELETE","lineNumber":479,"oldContent":"    print('DEBUG: Current time: $now');"},{"type":"INSERT","lineNumber":484,"content":"      nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":486,"oldContent":"      nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":488,"oldContent":"    try {"},{"type":"DELETE","lineNumber":490,"oldContent":"      await scheduleNotification("},{"type":"DELETE","lineNumber":492,"oldContent":"        id: habit.id,"},{"type":"INSERT","lineNumber":490,"content":"    try {"},{"type":"INSERT","lineNumber":491,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":492,"content":"        id: habit.id.hashCode, // Convert String ID to int using hashCode"},{"type":"MODIFY","lineNumber":514,"content":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);","oldContent":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":516,"oldContent":"      // If the time has passed today, schedule for next week"},{"type":"DELETE","lineNumber":518,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":519,"content":"      }"},{"type":"INSERT","lineNumber":520,"content":""},{"type":"INSERT","lineNumber":521,"content":"      // If the time has passed today, schedule for next week"},{"type":"INSERT","lineNumber":522,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":523,"oldContent":"      }"},{"type":"DELETE","lineNumber":525,"oldContent":""}]},{"timestamp":1754509057193,"changes":[{"type":"MODIFY","lineNumber":255,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":260,"content":"    "},{"type":"DELETE","lineNumber":261,"oldContent":"    // Additional validation"},{"type":"INSERT","lineNumber":266,"content":"      print('DEBUG: ERROR - TZ scheduled time is in the past!');"},{"type":"DELETE","lineNumber":267,"oldContent":"      return; // Don't schedule past notifications"},{"type":"DELETE","lineNumber":318,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"MODIFY","lineNumber":320,"content":"      iOS: iOSPlatformChannelSpecifics,","oldContent":"    );"},{"type":"INSERT","lineNumber":321,"content":"    );"},{"type":"INSERT","lineNumber":437,"content":"          break;"},{"type":"DELETE","lineNumber":438,"oldContent":""},{"type":"INSERT","lineNumber":489,"content":""},{"type":"DELETE","lineNumber":491,"oldContent":""},{"type":"INSERT","lineNumber":513,"content":"    for (int weekday in selectedWeekdays) {"},{"type":"DELETE","lineNumber":514,"oldContent":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":517,"oldContent":"      }"},{"type":"MODIFY","lineNumber":519,"content":"      }","oldContent":""},{"type":"INSERT","lineNumber":520,"content":""},{"type":"MODIFY","lineNumber":523,"content":"        nextNotification = nextNotification.add(const Duration(days: 7));","oldContent":"        nextNotification = nextNotification.add(const Duration(days: 7));"},{"type":"MODIFY","lineNumber":527,"content":"        id: habit.id.hashCode * 100 + weekday, // Convert String ID to int using hashCode","oldContent":"        id: habit.id * 100 + weekday,"}]},{"timestamp":1754509081822,"changes":[{"type":"INSERT","lineNumber":254,"content":"      }"},{"type":"DELETE","lineNumber":255,"oldContent":"    }"},{"type":"INSERT","lineNumber":319,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":321,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":518,"content":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":520,"oldContent":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":522,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":523,"oldContent":"        nextNotification = nextNotification.add(const Duration(days: 7));"},{"type":"MODIFY","lineNumber":562,"content":"        id: habit.id.hashCode * 100 + monthDay, // Convert String ID to int using hashCode","oldContent":"        id: habit.id * 100 + monthDay,"}]},{"timestamp":1754509106149,"changes":[{"type":"MODIFY","lineNumber":589,"content":"        id: habit.id.hashCode * 100 + date.month * 31 + date.day, // Convert String ID to int using hashCode","oldContent":"        id: habit.id * 100 + date.month * 31 + date.day,"}]},{"timestamp":1754509551232,"changes":[{"type":"MODIFY","lineNumber":620,"content":"        id: habit.id.hashCode * 100 + hour * 60 + minute, // Convert String ID to int using hashCode","oldContent":"        id: habit.id * 100 + hour * 60 + minute,"}]},{"timestamp":1754509576807,"changes":[{"type":"MODIFY","lineNumber":427,"content":"      await cancelHabitNotifications(habit.id.hashCode); // Convert String ID to int using hashCode","oldContent":"      await cancelHabitNotifications(habit.id);"}]},{"timestamp":1754509740299,"changes":[{"type":"MODIFY","lineNumber":208,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":215,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":260,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":264,"content":"","oldContent":"    "}]},{"timestamp":1754510118515,"changes":[{"type":"DELETE","lineNumber":609,"oldContent":"      final hour = timeOfDay.hour;"},{"type":"MODIFY","lineNumber":609,"content":"      final hour = timeOfDay.hour as int;","oldContent":"      final minute = timeOfDay.minute;"},{"type":"INSERT","lineNumber":610,"content":"      final minute = timeOfDay.minute as int;"}]},{"timestamp":1754510465010,"changes":[{"type":"MODIFY","lineNumber":610,"content":"      final minute = timeOfDay.minute as int;","oldContent":"      final minute = timeOfDay.minute;"},{"type":"INSERT","lineNumber":634,"content":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"INSERT","lineNumber":635,"content":"  static int _generateSafeId(String habitId) {"},{"type":"INSERT","lineNumber":636,"content":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"INSERT","lineNumber":637,"content":"    int hash = 0;"},{"type":"INSERT","lineNumber":638,"content":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"INSERT","lineNumber":639,"content":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"INSERT","lineNumber":640,"content":"    }"},{"type":"INSERT","lineNumber":641,"content":"    return hash;"},{"type":"INSERT","lineNumber":642,"content":"  }"},{"type":"INSERT","lineNumber":643,"content":""}]},{"timestamp":1754510496327,"changes":[{"type":"MODIFY","lineNumber":427,"content":"      await cancelHabitNotifications(_generateSafeId(habit.id)); // Use safe ID generation","oldContent":"      await cancelHabitNotifications(habit.id.hashCode); // Convert String ID to int using hashCode"},{"type":"DELETE","lineNumber":635,"oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":637,"oldContent":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"DELETE","lineNumber":639,"oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"DELETE","lineNumber":641,"oldContent":"  }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":645,"oldContent":"  /// Check if notifications are enabled"},{"type":"DELETE","lineNumber":647,"oldContent":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"DELETE","lineNumber":649,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":651,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":644,"content":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":645,"content":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"INSERT","lineNumber":646,"content":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"INSERT","lineNumber":647,"content":"  }"},{"type":"INSERT","lineNumber":648,"content":""},{"type":"INSERT","lineNumber":649,"content":"  /// Check if notifications are enabled"},{"type":"INSERT","lineNumber":650,"content":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"INSERT","lineNumber":651,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":652,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="}]},{"timestamp":1754510521182,"changes":[{"type":"MODIFY","lineNumber":492,"content":"        id: _generateSafeId(habit.id), // Use safe ID generation","oldContent":"        id: habit.id.hashCode, // Convert String ID to int using hashCode"},{"type":"DELETE","lineNumber":639,"oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":640,"content":"    }"},{"type":"INSERT","lineNumber":641,"content":"    return hash;"},{"type":"INSERT","lineNumber":642,"content":"  }"},{"type":"INSERT","lineNumber":643,"content":""},{"type":"INSERT","lineNumber":644,"content":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":643,"oldContent":"    }"},{"type":"DELETE","lineNumber":646,"oldContent":"    return hash;"},{"type":"DELETE","lineNumber":649,"oldContent":"  }"},{"type":"DELETE","lineNumber":652,"oldContent":""}]},{"timestamp":1754510548192,"changes":[{"type":"MODIFY","lineNumber":527,"content":"        id: _generateSafeId(habit.id) * 100 + weekday, // Use safe ID generation","oldContent":"        id: habit.id.hashCode * 100 + weekday, // Convert String ID to int using hashCode"},{"type":"MODIFY","lineNumber":640,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":642,"oldContent":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"MODIFY","lineNumber":645,"content":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {","oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"INSERT","lineNumber":646,"content":"    return await _notificationsPlugin.pendingNotificationRequests();"}]},{"timestamp":1754510573927,"changes":[{"type":"MODIFY","lineNumber":562,"content":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation","oldContent":"        id: habit.id.hashCode * 100 + monthDay, // Convert String ID to int using hashCode"},{"type":"INSERT","lineNumber":639,"content":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"DELETE","lineNumber":640,"oldContent":"    }"},{"type":"MODIFY","lineNumber":643,"content":"","oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"INSERT","lineNumber":644,"content":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":646,"oldContent":"  /// Get pending notifications"}]},{"timestamp":1754510598913,"changes":[{"type":"MODIFY","lineNumber":589,"content":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation","oldContent":"        id: habit.id.hashCode * 100 + date.month * 31 + date.day, // Convert String ID to int using hashCode"}]},{"timestamp":1754510622117,"changes":[{"type":"MODIFY","lineNumber":389,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":392,"content":"","oldContent":"    "},{"type":"MODIFY","lineNumber":397,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":403,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":404,"oldContent":"    "},{"type":"INSERT","lineNumber":403,"content":"    print('DEBUG: Starting notification scheduling for habit: ${habit.name}');"},{"type":"INSERT","lineNumber":404,"content":"    print('DEBUG: Notifications enabled: ${habit.notificationsEnabled}');"},{"type":"DELETE","lineNumber":418,"oldContent":"      // Cancel any existing notifications for this habit first"},{"type":"DELETE","lineNumber":419,"oldContent":"      "},{"type":"DELETE","lineNumber":420,"oldContent":"      switch (habit.frequency.toString().split('.').last) {"},{"type":"DELETE","lineNumber":421,"oldContent":"        case 'daily':"},{"type":"INSERT","lineNumber":418,"content":""},{"type":"INSERT","lineNumber":419,"content":"    final notificationTime = habit.notificationTime;"},{"type":"INSERT","lineNumber":420,"content":"    final hour = notificationTime.hour;"},{"type":"INSERT","lineNumber":421,"content":"    final minute = notificationTime.minute;"},{"type":"DELETE","lineNumber":425,"oldContent":"          "},{"type":"DELETE","lineNumber":426,"oldContent":"        case 'weekly':"},{"type":"INSERT","lineNumber":425,"content":"    try {"},{"type":"INSERT","lineNumber":426,"content":"      // Cancel any existing notifications for this habit first"},{"type":"DELETE","lineNumber":451,"oldContent":"      AppLogger.info('Successfully scheduled notifications for habit: ${habit.name}');"},{"type":"DELETE","lineNumber":452,"oldContent":"    } catch (e) {"},{"type":"INSERT","lineNumber":451,"content":"          await _scheduleYearlyHabitNotifications(habit, hour, minute);"},{"type":"INSERT","lineNumber":452,"content":"          break;"},{"type":"MODIFY","lineNumber":463,"content":"","oldContent":"    // If the time has passed today, schedule for tomorrow"},{"type":"DELETE","lineNumber":465,"oldContent":"    if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":466,"oldContent":"    }"},{"type":"INSERT","lineNumber":465,"content":"      AppLogger.info('Successfully scheduled notifications for habit: ${habit.name}');"},{"type":"INSERT","lineNumber":466,"content":"    } catch (e) {"},{"type":"MODIFY","lineNumber":468,"content":"      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);","oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"    await scheduleNotification("},{"type":"DELETE","lineNumber":471,"oldContent":"      title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":470,"content":"    }"},{"type":"INSERT","lineNumber":471,"content":"  }"},{"type":"DELETE","lineNumber":473,"oldContent":"      payload: jsonEncode({"},{"type":"DELETE","lineNumber":474,"oldContent":"        'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":473,"content":"  /// Schedule daily habit notifications"},{"type":"INSERT","lineNumber":474,"content":"  static Future<void> _scheduleDailyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"DELETE","lineNumber":476,"oldContent":"        'type': 'daily_reminder'"},{"type":"DELETE","lineNumber":477,"oldContent":"    );"},{"type":"INSERT","lineNumber":476,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":477,"content":"    DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"MODIFY","lineNumber":512,"content":"","oldContent":"      DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"MODIFY","lineNumber":531,"content":"        payload: jsonEncode({","oldContent":"      "},{"type":"INSERT","lineNumber":532,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":533,"content":"          'type': 'weekly_reminder',"},{"type":"INSERT","lineNumber":534,"content":"          'weekday': weekday"},{"type":"INSERT","lineNumber":535,"content":"        }),"},{"type":"INSERT","lineNumber":536,"content":"      );"},{"type":"INSERT","lineNumber":537,"content":"    }"},{"type":"INSERT","lineNumber":538,"content":"  }"},{"type":"INSERT","lineNumber":539,"content":""},{"type":"INSERT","lineNumber":540,"content":"  /// Schedule monthly habit notifications"},{"type":"INSERT","lineNumber":541,"content":"  static Future<void> _scheduleMonthlyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"INSERT","lineNumber":542,"content":"    final selectedMonthDays = habit.selectedMonthDays ?? <int>[];"},{"type":"INSERT","lineNumber":543,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":544,"content":""},{"type":"INSERT","lineNumber":545,"content":"    for (int monthDay in selectedMonthDays) {"},{"type":"INSERT","lineNumber":546,"content":"      DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":547,"content":""},{"type":"INSERT","lineNumber":548,"content":"      // If the day has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":549,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":550,"content":"        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":551,"content":"      }"},{"type":"INSERT","lineNumber":552,"content":""},{"type":"INSERT","lineNumber":559,"content":"      }"},{"type":"DELETE","lineNumber":539,"oldContent":""},{"type":"DELETE","lineNumber":540,"oldContent":"        id: habit.id * 100 + monthDay,"},{"type":"INSERT","lineNumber":561,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":562,"content":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"INSERT","lineNumber":565,"content":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":547,"oldContent":""},{"type":"DELETE","lineNumber":553,"oldContent":"      // Handle case where the day doesn't exist in the target month"},{"type":"DELETE","lineNumber":561,"oldContent":"      "},{"type":"DELETE","lineNumber":562,"oldContent":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"      // If the date has passed this year, schedule for next year"},{"type":"DELETE","lineNumber":568,"oldContent":"        id: habit.id * 100 + date.month * 31 + date.day,"},{"type":"INSERT","lineNumber":589,"content":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":591,"content":"        body: 'Time to complete your yearly habit! This is your special day.',"},{"type":"INSERT","lineNumber":597,"content":"          'day': date.day"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"DELETE","lineNumber":583,"oldContent":"      // If the date has passed this year, schedule for next year"},{"type":"INSERT","lineNumber":605,"content":"    final hourlyTimes = habit.hourlyTimes ?? <dynamic>[];"},{"type":"DELETE","lineNumber":587,"oldContent":"      final hour = timeOfDay.hour;"},{"type":"DELETE","lineNumber":588,"oldContent":"      final minute = timeOfDay.minute;"},{"type":"DELETE","lineNumber":589,"oldContent":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":609,"content":"      final hour = timeOfDay.hour as int;"},{"type":"INSERT","lineNumber":610,"content":"      final minute = timeOfDay.minute as int;"},{"type":"INSERT","lineNumber":611,"content":""},{"type":"DELETE","lineNumber":591,"oldContent":"      "},{"type":"INSERT","lineNumber":613,"content":""},{"type":"DELETE","lineNumber":598,"oldContent":"        id: habit.id * 100 + hour * 60 + minute,"},{"type":"INSERT","lineNumber":620,"content":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"INSERT","lineNumber":627,"content":"          'hour': hour,"},{"type":"DELETE","lineNumber":609,"oldContent":"      final hour = timeOfDay.hour as int;"},{"type":"DELETE","lineNumber":610,"oldContent":"      final minute = timeOfDay.minute as int;"},{"type":"INSERT","lineNumber":632,"content":"  }"},{"type":"DELETE","lineNumber":612,"oldContent":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":634,"content":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"INSERT","lineNumber":635,"content":"  static int _generateSafeId(String habitId) {"},{"type":"INSERT","lineNumber":636,"content":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"INSERT","lineNumber":637,"content":"    int hash = 0;"},{"type":"INSERT","lineNumber":638,"content":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"INSERT","lineNumber":639,"content":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"INSERT","lineNumber":640,"content":"    }"},{"type":"INSERT","lineNumber":641,"content":"    return hash;"},{"type":"INSERT","lineNumber":642,"content":"  }"},{"type":"DELETE","lineNumber":614,"oldContent":"      // If the time has passed today, schedule for tomorrow"},{"type":"INSERT","lineNumber":644,"content":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":645,"content":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"DELETE","lineNumber":620,"oldContent":"        id: habit.id.hashCode * 100 + hour * 60 + minute, // Convert String ID to int using hashCode"},{"type":"INSERT","lineNumber":651,"content":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":634,"oldContent":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"DELETE","lineNumber":635,"oldContent":"  static int _generateSafeId(String habitId) {"},{"type":"DELETE","lineNumber":636,"oldContent":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"DELETE","lineNumber":637,"oldContent":"    int hash = 0;"},{"type":"DELETE","lineNumber":638,"oldContent":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"DELETE","lineNumber":639,"oldContent":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"DELETE","lineNumber":640,"oldContent":"    }"},{"type":"DELETE","lineNumber":641,"oldContent":"    return hash;"},{"type":"INSERT","lineNumber":665,"content":"  /// Test notification - useful for debugging"},{"type":"INSERT","lineNumber":666,"content":"  static Future<void> showTestNotification() async {"},{"type":"INSERT","lineNumber":667,"content":"    await showNotification("},{"type":"INSERT","lineNumber":668,"content":"      id: 999,"},{"type":"INSERT","lineNumber":669,"content":"      title: '🎯 Test Notification',"},{"type":"INSERT","lineNumber":670,"content":"      body: 'This is a test notification to verify the system is working!',"},{"type":"INSERT","lineNumber":671,"content":"      payload: 'test_notification',"},{"type":"INSERT","lineNumber":672,"content":"    );"},{"type":"DELETE","lineNumber":644,"oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":645,"oldContent":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"DELETE","lineNumber":646,"oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"DELETE","lineNumber":647,"oldContent":"  }"},{"type":"DELETE","lineNumber":648,"oldContent":""},{"type":"DELETE","lineNumber":649,"oldContent":"  /// Check if notifications are enabled"},{"type":"DELETE","lineNumber":650,"oldContent":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"DELETE","lineNumber":651,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":652,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":675,"content":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"DELETE","lineNumber":655,"oldContent":""},{"type":"INSERT","lineNumber":678,"content":"    required String habitId,"}]},{"timestamp":1754513648235,"changes":[{"type":"MODIFY","lineNumber":407,"content":"    if (!_isInitialized) {","oldContent":"      AppLogger.info('Notifications disabled for habit: ${habit.name}');"},{"type":"INSERT","lineNumber":408,"content":"      print('DEBUG: Initializing notification service');"},{"type":"INSERT","lineNumber":409,"content":"      await initialize();"},{"type":"DELETE","lineNumber":409,"oldContent":"    final notificationTime = habit.notificationTime;"},{"type":"DELETE","lineNumber":410,"oldContent":"    final hour = notificationTime.hour;"},{"type":"MODIFY","lineNumber":423,"content":"    print('DEBUG: Scheduling for $hour:$minute');","oldContent":"        case 'weekly':"},{"type":"DELETE","lineNumber":428,"oldContent":"          break;"},{"type":"DELETE","lineNumber":429,"oldContent":"        case 'yearly':"},{"type":"DELETE","lineNumber":430,"oldContent":"          await _scheduleYearlyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":431,"oldContent":"          "},{"type":"INSERT","lineNumber":428,"content":"      print('DEBUG: Cancelled existing notifications for habit ID: ${habit.id}');"},{"type":"INSERT","lineNumber":429,"content":""},{"type":"INSERT","lineNumber":430,"content":"      final frequency = habit.frequency.toString().split('.').last;"},{"type":"INSERT","lineNumber":431,"content":"      print('DEBUG: Habit frequency: $frequency');"},{"type":"MODIFY","lineNumber":433,"content":"      switch (frequency) {","oldContent":"          await _scheduleHourlyHabitNotifications(habit);"},{"type":"MODIFY","lineNumber":453,"content":"","oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":479,"oldContent":"      "},{"type":"DELETE","lineNumber":480,"oldContent":"      // If the time has passed today, schedule for next week"},{"type":"DELETE","lineNumber":481,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":479,"content":"    print('DEBUG: Current time: $now');"},{"type":"INSERT","lineNumber":480,"content":"    print('DEBUG: Initial notification time: $nextNotification');"},{"type":"INSERT","lineNumber":481,"content":""},{"type":"MODIFY","lineNumber":487,"content":"      print('DEBUG: Scheduling for today: $nextNotification');","oldContent":""},{"type":"INSERT","lineNumber":493,"content":"        title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":494,"content":"        body: 'Time to complete your daily habit! Keep your streak going.',"},{"type":"INSERT","lineNumber":496,"content":"        payload: jsonEncode({"},{"type":"DELETE","lineNumber":495,"oldContent":"          'weekday': weekday"},{"type":"INSERT","lineNumber":498,"content":"          'type': 'daily_reminder'"},{"type":"INSERT","lineNumber":499,"content":"        }),"},{"type":"INSERT","lineNumber":501,"content":"      print('DEBUG: Successfully scheduled daily notification for ${habit.name}');"},{"type":"INSERT","lineNumber":502,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":503,"content":"      print('DEBUG: Error scheduling daily notification: $e');"},{"type":"INSERT","lineNumber":504,"content":"      rethrow;"},{"type":"INSERT","lineNumber":505,"content":"    }"},{"type":"DELETE","lineNumber":498,"oldContent":"  /// Schedule monthly habit notifications"},{"type":"DELETE","lineNumber":499,"oldContent":"    final selectedMonthDays = habit.selectedMonthDays ?? <int>[];"},{"type":"DELETE","lineNumber":500,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":501,"oldContent":"    for (int monthDay in selectedMonthDays) {"},{"type":"DELETE","lineNumber":502,"oldContent":"      "},{"type":"DELETE","lineNumber":503,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":504,"oldContent":"      }"},{"type":"DELETE","lineNumber":505,"oldContent":"      // Handle case where the day doesn't exist in the target month"},{"type":"DELETE","lineNumber":506,"oldContent":"  }"},{"type":"DELETE","lineNumber":533,"oldContent":"          'habitId': habit.id.toString(),"},{"type":"DELETE","lineNumber":535,"oldContent":"          'type': 'monthly_reminder',"},{"type":"DELETE","lineNumber":537,"oldContent":"          'monthDay': monthDay"},{"type":"DELETE","lineNumber":540,"oldContent":"      );"},{"type":"DELETE","lineNumber":542,"oldContent":"    }"},{"type":"DELETE","lineNumber":544,"oldContent":"  }"},{"type":"DELETE","lineNumber":546,"oldContent":""},{"type":"DELETE","lineNumber":549,"oldContent":"    final selectedYearlyDates = habit.selectedYearlyDates ?? <DateTime>[];"},{"type":"DELETE","lineNumber":552,"oldContent":"    final now = DateTime.now();"},{"type":"DELETE","lineNumber":554,"oldContent":""},{"type":"DELETE","lineNumber":555,"oldContent":"    for (DateTime date in selectedYearlyDates) {"},{"type":"DELETE","lineNumber":557,"oldContent":"      DateTime nextNotification = DateTime(now.year, date.month, date.day, hour, minute);"},{"type":"DELETE","lineNumber":559,"oldContent":"      "},{"type":"DELETE","lineNumber":562,"oldContent":"      // If the date has passed this year, schedule for next year"},{"type":"DELETE","lineNumber":564,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":566,"oldContent":"        nextNotification = DateTime(now.year + 1, date.month, date.day, hour, minute);"},{"type":"INSERT","lineNumber":552,"content":""},{"type":"INSERT","lineNumber":553,"content":"      // Handle case where the day doesn't exist in the target month"},{"type":"INSERT","lineNumber":554,"content":"      try {"},{"type":"INSERT","lineNumber":555,"content":"        nextNotification = DateTime(nextNotification.year, nextNotification.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":556,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":557,"content":"        // Skip this month if the day doesn't exist (e.g., Feb 30)"},{"type":"INSERT","lineNumber":558,"content":"        continue;"},{"type":"INSERT","lineNumber":561,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":562,"content":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"INSERT","lineNumber":563,"content":"        title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":564,"content":"        body: 'Time to complete your monthly habit! Stay consistent.',"},{"type":"INSERT","lineNumber":565,"content":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":566,"content":"        payload: jsonEncode({"},{"type":"INSERT","lineNumber":567,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":568,"content":"          'type': 'monthly_reminder',"},{"type":"INSERT","lineNumber":569,"content":"          'monthDay': monthDay"},{"type":"INSERT","lineNumber":570,"content":"        }),"},{"type":"INSERT","lineNumber":571,"content":"      );"},{"type":"INSERT","lineNumber":572,"content":"    }"},{"type":"INSERT","lineNumber":573,"content":"  }"},{"type":"INSERT","lineNumber":575,"content":"  /// Schedule yearly habit notifications"},{"type":"INSERT","lineNumber":576,"content":"  static Future<void> _scheduleYearlyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"INSERT","lineNumber":577,"content":"    final selectedYearlyDates = habit.selectedYearlyDates ?? <DateTime>[];"},{"type":"INSERT","lineNumber":578,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":579,"content":""},{"type":"INSERT","lineNumber":580,"content":"    for (DateTime date in selectedYearlyDates) {"},{"type":"INSERT","lineNumber":581,"content":"      DateTime nextNotification = DateTime(now.year, date.month, date.day, hour, minute);"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"      // If the date has passed this year, schedule for next year"},{"type":"INSERT","lineNumber":584,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":585,"content":"        nextNotification = DateTime(now.year + 1, date.month, date.day, hour, minute);"},{"type":"INSERT","lineNumber":586,"content":"      }"},{"type":"INSERT","lineNumber":587,"content":""},{"type":"DELETE","lineNumber":572,"oldContent":"        id: habit.id * 100 + date.month * 31 + date.day,"},{"type":"INSERT","lineNumber":589,"content":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"DELETE","lineNumber":576,"oldContent":"      }"},{"type":"DELETE","lineNumber":579,"oldContent":"      await scheduleNotification("},{"type":"DELETE","lineNumber":580,"oldContent":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"INSERT","lineNumber":595,"content":"          'type': 'yearly_reminder',"},{"type":"INSERT","lineNumber":596,"content":"          'month': date.month,"},{"type":"INSERT","lineNumber":597,"content":"          'day': date.day"},{"type":"DELETE","lineNumber":583,"oldContent":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"INSERT","lineNumber":604,"content":"  static Future<void> _scheduleHourlyHabitNotifications(dynamic habit) async {"},{"type":"DELETE","lineNumber":591,"oldContent":"      final hour = timeOfDay.hour;"},{"type":"DELETE","lineNumber":592,"oldContent":"      final minute = timeOfDay.minute;"},{"type":"DELETE","lineNumber":593,"oldContent":"      "},{"type":"INSERT","lineNumber":609,"content":"      final hour = timeOfDay.hour as int;"},{"type":"INSERT","lineNumber":610,"content":"      final minute = timeOfDay.minute as int;"},{"type":"INSERT","lineNumber":611,"content":""},{"type":"DELETE","lineNumber":595,"oldContent":"      "},{"type":"INSERT","lineNumber":613,"content":""},{"type":"DELETE","lineNumber":601,"oldContent":"      // If the date has passed this year, schedule for next year"},{"type":"DELETE","lineNumber":603,"oldContent":"        id: habit.id * 100 + hour * 60 + minute,"},{"type":"INSERT","lineNumber":620,"content":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"DELETE","lineNumber":605,"oldContent":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":622,"content":"        body: 'Hourly reminder: Time for your habit!',"},{"type":"INSERT","lineNumber":623,"content":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":624,"content":"        payload: jsonEncode({"},{"type":"DELETE","lineNumber":607,"oldContent":"        body: 'Time to complete your yearly habit! This is your special day.',"},{"type":"INSERT","lineNumber":626,"content":"          'type': 'hourly_reminder',"},{"type":"INSERT","lineNumber":631,"content":"    }"},{"type":"DELETE","lineNumber":613,"oldContent":"          'day': date.day"},{"type":"INSERT","lineNumber":634,"content":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"INSERT","lineNumber":635,"content":"  static int _generateSafeId(String habitId) {"},{"type":"INSERT","lineNumber":636,"content":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"INSERT","lineNumber":637,"content":"    int hash = 0;"},{"type":"INSERT","lineNumber":638,"content":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"INSERT","lineNumber":639,"content":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"INSERT","lineNumber":640,"content":"    }"},{"type":"INSERT","lineNumber":641,"content":"    return hash;"},{"type":"INSERT","lineNumber":642,"content":"  }"},{"type":"INSERT","lineNumber":643,"content":""},{"type":"INSERT","lineNumber":644,"content":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":621,"oldContent":"    final hourlyTimes = habit.hourlyTimes ?? <dynamic>[];"},{"type":"DELETE","lineNumber":626,"oldContent":"      final hour = timeOfDay.hour as int;"},{"type":"DELETE","lineNumber":627,"oldContent":"      final minute = timeOfDay.minute as int;"},{"type":"DELETE","lineNumber":629,"oldContent":""},{"type":"DELETE","lineNumber":630,"oldContent":""},{"type":"DELETE","lineNumber":631,"oldContent":""},{"type":"INSERT","lineNumber":656,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":657,"content":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"INSERT","lineNumber":658,"content":"      }"},{"type":"DELETE","lineNumber":637,"oldContent":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"INSERT","lineNumber":664,"content":""},{"type":"INSERT","lineNumber":670,"content":"      body: 'This is a test notification to verify the system is working!',"},{"type":"DELETE","lineNumber":644,"oldContent":"          'hour': hour,"},{"type":"INSERT","lineNumber":673,"content":"  }"},{"type":"DELETE","lineNumber":650,"oldContent":"  }"},{"type":"DELETE","lineNumber":653,"oldContent":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"DELETE","lineNumber":654,"oldContent":"  static int _generateSafeId(String habitId) {"},{"type":"DELETE","lineNumber":655,"oldContent":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"DELETE","lineNumber":656,"oldContent":"    int hash = 0;"},{"type":"DELETE","lineNumber":657,"oldContent":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"DELETE","lineNumber":658,"oldContent":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"DELETE","lineNumber":659,"oldContent":"    }"},{"type":"DELETE","lineNumber":660,"oldContent":"    return hash;"},{"type":"DELETE","lineNumber":661,"oldContent":"  }"},{"type":"DELETE","lineNumber":662,"oldContent":"  }"},{"type":"INSERT","lineNumber":680,"content":"    required String body,"},{"type":"INSERT","lineNumber":681,"content":"  }) async {"},{"type":"INSERT","lineNumber":682,"content":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":664,"oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":665,"oldContent":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"DELETE","lineNumber":666,"oldContent":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":684,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":685,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":686,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":687,"content":"      'Habit Notifications',"},{"type":"INSERT","lineNumber":688,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":691,"content":"      showWhen: false,"},{"type":"DELETE","lineNumber":678,"oldContent":"  /// Test notification - useful for debugging"},{"type":"DELETE","lineNumber":680,"oldContent":"  static Future<void> showTestNotification() async {"},{"type":"DELETE","lineNumber":682,"oldContent":"    await showNotification("},{"type":"DELETE","lineNumber":684,"oldContent":"      id: 999,"},{"type":"DELETE","lineNumber":686,"oldContent":"      title: '🎯 Test Notification',"},{"type":"DELETE","lineNumber":688,"oldContent":"      body: 'This is a test notification to verify the system is working!',"},{"type":"DELETE","lineNumber":690,"oldContent":"      payload: 'test_notification',"},{"type":"DELETE","lineNumber":692,"oldContent":"    );"},{"type":"DELETE","lineNumber":696,"oldContent":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"DELETE","lineNumber":700,"oldContent":"    required String habitId,"}]},{"timestamp":1754513946474,"changes":[{"type":"MODIFY","lineNumber":205,"content":"    // Enhanced timezone handling with detailed debugging","oldContent":"    // Simple and reliable timezone conversion"},{"type":"DELETE","lineNumber":209,"oldContent":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"DELETE","lineNumber":210,"oldContent":""},{"type":"DELETE","lineNumber":211,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"DELETE","lineNumber":212,"oldContent":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"DELETE","lineNumber":213,"oldContent":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":209,"content":"    print('DEBUG: === Notification Scheduling Debug ===');"},{"type":"INSERT","lineNumber":210,"content":"    print('DEBUG: Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":211,"content":"    print('DEBUG: Original scheduled time: $scheduledTime');"},{"type":"INSERT","lineNumber":212,"content":"    print('DEBUG: Local scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":213,"content":"    print('DEBUG: Device timezone offset: ${deviceNow.timeZoneOffset}');"},{"type":"DELETE","lineNumber":216,"oldContent":"      id,"},{"type":"DELETE","lineNumber":217,"oldContent":"      body,"},{"type":"DELETE","lineNumber":218,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":219,"oldContent":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":216,"content":"    // Validate scheduling time"},{"type":"INSERT","lineNumber":217,"content":"    if (localScheduledTime.isBefore(deviceNow)) {"},{"type":"INSERT","lineNumber":218,"content":"      print('DEBUG: WARNING - Scheduled time is in the past!');"},{"type":"INSERT","lineNumber":219,"content":"      print('DEBUG: Past by: ${deviceNow.difference(localScheduledTime).inSeconds} seconds');"},{"type":"DELETE","lineNumber":222,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":223,"oldContent":"    );"},{"type":"DELETE","lineNumber":224,"oldContent":"  }"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"DELETE","lineNumber":226,"oldContent":"  /// Schedule daily recurring notifications"},{"type":"DELETE","lineNumber":227,"oldContent":"  static Future<void> scheduleDailyNotification({"},{"type":"DELETE","lineNumber":228,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":229,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":230,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":231,"oldContent":"    required int minute,"},{"type":"DELETE","lineNumber":232,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":233,"oldContent":""},{"type":"DELETE","lineNumber":234,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":235,"oldContent":"      'Daily Habit Notifications',"},{"type":"DELETE","lineNumber":236,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":237,"oldContent":"    );"},{"type":"DELETE","lineNumber":238,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"INSERT","lineNumber":222,"content":"    // Create TZDateTime with better error handling"},{"type":"INSERT","lineNumber":223,"content":"    tz.TZDateTime tzScheduledTime;"},{"type":"INSERT","lineNumber":224,"content":"    try {"},{"type":"INSERT","lineNumber":225,"content":"      // First try to create from the local scheduled time"},{"type":"INSERT","lineNumber":226,"content":"      tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":227,"content":"      print('DEBUG: TZ Scheduled time (method 1): $tzScheduledTime');"},{"type":"INSERT","lineNumber":228,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":229,"content":"      print('DEBUG: TZDateTime.from failed: $e');"},{"type":"INSERT","lineNumber":230,"content":"      // Fallback: create manually"},{"type":"INSERT","lineNumber":231,"content":"      try {"},{"type":"INSERT","lineNumber":232,"content":"        tzScheduledTime = tz.TZDateTime("},{"type":"INSERT","lineNumber":233,"content":"          tz.local,"},{"type":"INSERT","lineNumber":234,"content":"          localScheduledTime.year,"},{"type":"INSERT","lineNumber":235,"content":"          localScheduledTime.month,"},{"type":"INSERT","lineNumber":236,"content":"          localScheduledTime.day,"},{"type":"INSERT","lineNumber":237,"content":"          localScheduledTime.hour,"},{"type":"INSERT","lineNumber":238,"content":"          localScheduledTime.minute,"},{"type":"INSERT","lineNumber":239,"content":"          localScheduledTime.second,"},{"type":"INSERT","lineNumber":335,"content":"      scheduledDate = scheduledDate.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":336,"content":"    }"},{"type":"INSERT","lineNumber":337,"content":""},{"type":"INSERT","lineNumber":338,"content":"    await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":339,"content":"      id,"},{"type":"INSERT","lineNumber":340,"content":"      title,"},{"type":"INSERT","lineNumber":341,"content":"      body,"},{"type":"INSERT","lineNumber":342,"content":"      scheduledDate,"},{"type":"INSERT","lineNumber":343,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":344,"content":"      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"INSERT","lineNumber":345,"content":"      uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":346,"content":"          UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"INSERT","lineNumber":347,"content":"      matchDateTimeComponents: DateTimeComponents.time,"},{"type":"INSERT","lineNumber":348,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":349,"content":"    );"},{"type":"INSERT","lineNumber":350,"content":"  }"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"INSERT","lineNumber":352,"content":"  /// Schedule daily habit reminder - wrapper method for specific habit reminders"},{"type":"INSERT","lineNumber":353,"content":"  static Future<void> scheduleDailyHabitReminder({"},{"type":"INSERT","lineNumber":354,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":355,"content":"    required String habitName,"},{"type":"INSERT","lineNumber":356,"content":"    required DateTime reminderTime,"},{"type":"INSERT","lineNumber":357,"content":"  }) async {"},{"type":"INSERT","lineNumber":358,"content":"    final id = habitId.hashCode; // Generate unique ID from habit ID"},{"type":"INSERT","lineNumber":359,"content":"    final hour = reminderTime.hour;"},{"type":"INSERT","lineNumber":360,"content":"    final minute = reminderTime.minute;"},{"type":"INSERT","lineNumber":361,"content":""},{"type":"INSERT","lineNumber":362,"content":"    await scheduleDailyNotification("},{"type":"INSERT","lineNumber":363,"content":"      id: id,"},{"type":"INSERT","lineNumber":364,"content":"      title: 'Habit Reminder',"},{"type":"INSERT","lineNumber":365,"content":"      body: 'Time to complete your habit: $habitName',"},{"type":"INSERT","lineNumber":366,"content":"      hour: hour,"},{"type":"INSERT","lineNumber":367,"content":"      minute: minute,"},{"type":"INSERT","lineNumber":368,"content":"      payload: jsonEncode({"},{"type":"INSERT","lineNumber":369,"content":"        'habitId': habitId,"},{"type":"INSERT","lineNumber":370,"content":"        'habitName': habitName,"},{"type":"INSERT","lineNumber":371,"content":"        'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":372,"content":"      }),"},{"type":"INSERT","lineNumber":373,"content":"    );"},{"type":"INSERT","lineNumber":374,"content":"  }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"  /// Cancel a specific notification"},{"type":"INSERT","lineNumber":377,"content":"  static Future<void> cancelNotification(int id) async {"},{"type":"INSERT","lineNumber":378,"content":"    await _notificationsPlugin.cancel(id);"},{"type":"INSERT","lineNumber":379,"content":"  }"},{"type":"INSERT","lineNumber":380,"content":""},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":387,"content":"  static Future<void> cancelHabitNotifications(int habitId) async {"},{"type":"INSERT","lineNumber":389,"content":""},{"type":"DELETE","lineNumber":342,"oldContent":"    "},{"type":"INSERT","lineNumber":391,"content":"    await _notificationsPlugin.cancel(habitId);"},{"type":"INSERT","lineNumber":392,"content":""},{"type":"INSERT","lineNumber":393,"content":"    // Cancel related notifications (for weekly/monthly schedules)"},{"type":"INSERT","lineNumber":395,"content":"      await _notificationsPlugin.cancel(habitId * 100 + i);"},{"type":"DELETE","lineNumber":345,"oldContent":"    AppLogger.info('Cancelled all notifications for habit ID: $habitId');"},{"type":"DELETE","lineNumber":347,"oldContent":"  static Future<void> scheduleHabitNotifications(dynamic habit) async {"},{"type":"DELETE","lineNumber":348,"oldContent":"    "},{"type":"DELETE","lineNumber":349,"oldContent":"    if (!habit.notificationsEnabled || habit.notificationTime == null) {"},{"type":"DELETE","lineNumber":350,"oldContent":"      return;"},{"type":"DELETE","lineNumber":351,"oldContent":""},{"type":"DELETE","lineNumber":352,"oldContent":"    final hour = notificationTime.hour;"},{"type":"DELETE","lineNumber":353,"oldContent":""},{"type":"DELETE","lineNumber":354,"oldContent":"      // Cancel any existing notifications for this habit first"},{"type":"DELETE","lineNumber":355,"oldContent":"      "},{"type":"DELETE","lineNumber":356,"oldContent":"      switch (habit.frequency.toString().split('.').last) {"},{"type":"DELETE","lineNumber":357,"oldContent":"        case 'daily':"},{"type":"DELETE","lineNumber":358,"oldContent":"          await _scheduleDailyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":359,"oldContent":"          break;"},{"type":"DELETE","lineNumber":360,"oldContent":"          "},{"type":"DELETE","lineNumber":361,"oldContent":"        case 'weekly':"},{"type":"DELETE","lineNumber":362,"oldContent":"          await _scheduleWeeklyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":363,"oldContent":"          break;"},{"type":"DELETE","lineNumber":364,"oldContent":"          "},{"type":"DELETE","lineNumber":365,"oldContent":"        case 'monthly':"},{"type":"DELETE","lineNumber":366,"oldContent":"          await _scheduleMonthlyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":367,"oldContent":"          break;"},{"type":"DELETE","lineNumber":368,"oldContent":"          "},{"type":"DELETE","lineNumber":369,"oldContent":"        case 'yearly':"},{"type":"DELETE","lineNumber":370,"oldContent":"          await _scheduleYearlyHabitNotifications(habit, hour, minute);"},{"type":"DELETE","lineNumber":371,"oldContent":"          break;"},{"type":"DELETE","lineNumber":372,"oldContent":"          "},{"type":"DELETE","lineNumber":373,"oldContent":"        case 'hourly':"},{"type":"DELETE","lineNumber":374,"oldContent":"          await _scheduleHourlyHabitNotifications(habit);"},{"type":"DELETE","lineNumber":375,"oldContent":"          break;"},{"type":"DELETE","lineNumber":376,"oldContent":"          "},{"type":"DELETE","lineNumber":377,"oldContent":"        default:"},{"type":"DELETE","lineNumber":378,"oldContent":"          AppLogger.warning('Unknown habit frequency: ${habit.frequency}');"},{"type":"DELETE","lineNumber":379,"oldContent":"      }"},{"type":"DELETE","lineNumber":380,"oldContent":"      "},{"type":"DELETE","lineNumber":381,"oldContent":"      AppLogger.info('Successfully scheduled notifications for habit: ${habit.name}');"},{"type":"DELETE","lineNumber":382,"oldContent":"    } catch (e) {"},{"type":"DELETE","lineNumber":383,"oldContent":"      AppLogger.error('Failed to schedule notifications for habit: ${habit.name}', e);"},{"type":"DELETE","lineNumber":384,"oldContent":"    }"},{"type":"INSERT","lineNumber":398,"content":"    AppLogger.info('Cancelled all notifications for habit ID: $habitId');"},{"type":"DELETE","lineNumber":387,"oldContent":"  /// Schedule daily habit notifications"},{"type":"DELETE","lineNumber":388,"oldContent":"  static Future<void> _scheduleDailyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"DELETE","lineNumber":390,"oldContent":"    DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"DELETE","lineNumber":391,"oldContent":"    "},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"DELETE","lineNumber":393,"oldContent":"    if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":394,"oldContent":"      nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"DELETE","lineNumber":395,"oldContent":"    }"},{"type":"DELETE","lineNumber":396,"oldContent":""},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"      id: habit.id,"},{"type":"DELETE","lineNumber":399,"oldContent":"      title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":400,"oldContent":"      body: 'Time to complete your daily habit! Keep your streak going.',"},{"type":"DELETE","lineNumber":401,"oldContent":"      scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":402,"oldContent":"      payload: jsonEncode({"},{"type":"INSERT","lineNumber":401,"content":"  /// Schedule notifications for a habit based on its frequency and settings"},{"type":"INSERT","lineNumber":402,"content":"  static Future<void> scheduleHabitNotifications(dynamic habit) async {"},{"type":"DELETE","lineNumber":409,"oldContent":"  }"},{"type":"DELETE","lineNumber":411,"oldContent":"  static Future<void> _scheduleWeeklyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"INSERT","lineNumber":410,"content":"    }"},{"type":"INSERT","lineNumber":411,"content":""},{"type":"DELETE","lineNumber":494,"oldContent":"          'habitId': habit.id.toString(),"},{"type":"DELETE","lineNumber":496,"oldContent":"          'monthDay': monthDay"},{"type":"INSERT","lineNumber":495,"content":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":498,"oldContent":"  /// Schedule yearly habit notifications"},{"type":"DELETE","lineNumber":499,"oldContent":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":497,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":500,"content":"      );"},{"type":"INSERT","lineNumber":506,"content":"  }"},{"type":"DELETE","lineNumber":536,"oldContent":"      // If the time has passed today, schedule for tomorrow"},{"type":"DELETE","lineNumber":537,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":538,"oldContent":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":536,"content":"      );"},{"type":"INSERT","lineNumber":537,"content":"    }"},{"type":"INSERT","lineNumber":538,"content":"  }"},{"type":"MODIFY","lineNumber":543,"content":"    final now = DateTime.now();","oldContent":"        body: 'Hourly reminder: Time for your habit!',"},{"type":"INSERT","lineNumber":545,"content":"    for (int monthDay in selectedMonthDays) {"},{"type":"INSERT","lineNumber":546,"content":"      DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":547,"content":""},{"type":"INSERT","lineNumber":548,"content":"      // If the day has passed this month, schedule for next month"},{"type":"INSERT","lineNumber":549,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":550,"content":"        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":551,"content":"      }"},{"type":"INSERT","lineNumber":552,"content":""},{"type":"DELETE","lineNumber":546,"oldContent":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":550,"oldContent":"    for (int monthDay in selectedMonthDays) {"},{"type":"DELETE","lineNumber":553,"oldContent":"      DateTime nextNotification = DateTime(now.year, now.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":559,"content":"      }"},{"type":"DELETE","lineNumber":556,"oldContent":"      // If the day has passed this month, schedule for next month"},{"type":"DELETE","lineNumber":559,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":562,"oldContent":"        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":565,"oldContent":"      }"},{"type":"DELETE","lineNumber":567,"oldContent":""},{"type":"DELETE","lineNumber":569,"oldContent":""},{"type":"DELETE","lineNumber":571,"oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"DELETE","lineNumber":573,"oldContent":"  }"},{"type":"DELETE","lineNumber":576,"oldContent":"  /// Check if notifications are enabled"},{"type":"DELETE","lineNumber":577,"oldContent":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"INSERT","lineNumber":574,"content":""},{"type":"DELETE","lineNumber":579,"oldContent":"    if (Platform.isAndroid) {"},{"type":"DELETE","lineNumber":582,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":584,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":588,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":590,"oldContent":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"DELETE","lineNumber":593,"oldContent":"      }"},{"type":"INSERT","lineNumber":586,"content":"      }"},{"type":"INSERT","lineNumber":587,"content":""},{"type":"INSERT","lineNumber":588,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":589,"content":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":590,"content":"        title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":591,"content":"        body: 'Time to complete your yearly habit! This is your special day.',"},{"type":"INSERT","lineNumber":592,"content":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":593,"content":"        payload: jsonEncode({"},{"type":"INSERT","lineNumber":594,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":595,"content":"          'type': 'yearly_reminder',"},{"type":"INSERT","lineNumber":596,"content":"          'month': date.month,"},{"type":"INSERT","lineNumber":597,"content":"          'day': date.day"},{"type":"INSERT","lineNumber":598,"content":"        }),"},{"type":"INSERT","lineNumber":599,"content":"      );"},{"type":"INSERT","lineNumber":601,"content":"  }"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"INSERT","lineNumber":603,"content":"  /// Schedule hourly habit notifications"},{"type":"INSERT","lineNumber":604,"content":"  static Future<void> _scheduleHourlyHabitNotifications(dynamic habit) async {"},{"type":"INSERT","lineNumber":605,"content":"    final hourlyTimes = habit.hourlyTimes ?? <dynamic>[];"},{"type":"INSERT","lineNumber":606,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":607,"content":""},{"type":"INSERT","lineNumber":608,"content":"    for (var timeOfDay in hourlyTimes) {"},{"type":"INSERT","lineNumber":609,"content":"      final hour = timeOfDay.hour as int;"},{"type":"INSERT","lineNumber":610,"content":"      final minute = timeOfDay.minute as int;"},{"type":"INSERT","lineNumber":611,"content":""},{"type":"INSERT","lineNumber":612,"content":"      DateTime nextNotification = DateTime(now.year, now.month, now.day, hour, minute);"},{"type":"INSERT","lineNumber":613,"content":""},{"type":"INSERT","lineNumber":614,"content":"      // If the time has passed today, schedule for tomorrow"},{"type":"INSERT","lineNumber":615,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":616,"content":"        nextNotification = nextNotification.add(const Duration(days: 1));"},{"type":"INSERT","lineNumber":619,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":620,"content":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"INSERT","lineNumber":621,"content":"        title: '⏰ ${habit.name}',"},{"type":"INSERT","lineNumber":622,"content":"        body: 'Hourly reminder: Time for your habit!',"},{"type":"INSERT","lineNumber":623,"content":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":624,"content":"        payload: jsonEncode({"},{"type":"INSERT","lineNumber":625,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":626,"content":"          'type': 'hourly_reminder',"},{"type":"INSERT","lineNumber":627,"content":"          'hour': hour,"},{"type":"INSERT","lineNumber":628,"content":"          'minute': minute"},{"type":"INSERT","lineNumber":629,"content":"        }),"},{"type":"INSERT","lineNumber":630,"content":"      );"},{"type":"INSERT","lineNumber":631,"content":"    }"},{"type":"INSERT","lineNumber":632,"content":"  }"},{"type":"INSERT","lineNumber":634,"content":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"INSERT","lineNumber":635,"content":"  static int _generateSafeId(String habitId) {"},{"type":"INSERT","lineNumber":636,"content":"    // Generate a much smaller base hash to leave room for multiplications and additions"},{"type":"INSERT","lineNumber":637,"content":"    int hash = 0;"},{"type":"INSERT","lineNumber":638,"content":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"INSERT","lineNumber":639,"content":"      hash = ((hash << 3) - hash + habitId.codeUnitAt(i)) & 0xFFFFFF; // Use 24 bits max"},{"type":"INSERT","lineNumber":640,"content":"    }"},{"type":"INSERT","lineNumber":641,"content":"    // Ensure we have a reasonable range for the base ID (1-16777215)"},{"type":"INSERT","lineNumber":642,"content":"    return (hash % 16777215) + 1;"},{"type":"INSERT","lineNumber":644,"content":""},{"type":"INSERT","lineNumber":645,"content":"  /// Get pending notifications"},{"type":"INSERT","lineNumber":646,"content":"  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {"},{"type":"INSERT","lineNumber":647,"content":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"INSERT","lineNumber":648,"content":"  }"},{"type":"INSERT","lineNumber":649,"content":""},{"type":"INSERT","lineNumber":650,"content":"  /// Check if notifications are enabled"},{"type":"INSERT","lineNumber":651,"content":"  static Future<bool> areNotificationsEnabled() async {"},{"type":"INSERT","lineNumber":652,"content":"    if (Platform.isAndroid) {"},{"type":"INSERT","lineNumber":653,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":654,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":655,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":656,"content":""},{"type":"INSERT","lineNumber":657,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":658,"content":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"INSERT","lineNumber":659,"content":"      }"},{"type":"INSERT","lineNumber":660,"content":"    }"},{"type":"INSERT","lineNumber":661,"content":""},{"type":"INSERT","lineNumber":662,"content":"    // For iOS, we assume they're enabled if the user granted permission"},{"type":"INSERT","lineNumber":663,"content":"    return true;"},{"type":"INSERT","lineNumber":664,"content":"  }"},{"type":"INSERT","lineNumber":665,"content":""},{"type":"DELETE","lineNumber":601,"oldContent":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":667,"content":"  static Future<void> showTestNotification() async {"},{"type":"INSERT","lineNumber":669,"content":"      id: 999,"},{"type":"INSERT","lineNumber":671,"content":"      body: 'This is a test notification to verify the system is working!',"},{"type":"INSERT","lineNumber":672,"content":"      payload: 'test_notification',"},{"type":"INSERT","lineNumber":673,"content":"    );"},{"type":"INSERT","lineNumber":674,"content":"  }"},{"type":"INSERT","lineNumber":675,"content":""},{"type":"INSERT","lineNumber":676,"content":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"INSERT","lineNumber":677,"content":"  static Future<void> showHabitNotification({"},{"type":"DELETE","lineNumber":605,"oldContent":"          'type': 'yearly_reminder',"},{"type":"DELETE","lineNumber":606,"oldContent":"          'month': date.month,"},{"type":"INSERT","lineNumber":679,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":680,"content":"    required String title,"},{"type":"INSERT","lineNumber":681,"content":"    required String body,"},{"type":"DELETE","lineNumber":608,"oldContent":"          'day': date.day"},{"type":"INSERT","lineNumber":683,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":685,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":687,"content":"      'habit_channel',"},{"type":"DELETE","lineNumber":612,"oldContent":""},{"type":"DELETE","lineNumber":613,"oldContent":""},{"type":"INSERT","lineNumber":689,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":690,"content":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":615,"oldContent":"  static Future<void> _scheduleHourlyHabitNotifications(dynamic habit) async {"},{"type":"INSERT","lineNumber":692,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":694,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":695,"content":"          'complete',"},{"type":"INSERT","lineNumber":696,"content":"          'Complete',"},{"type":"INSERT","lineNumber":698,"content":"        ),"},{"type":"DELETE","lineNumber":619,"oldContent":"      final hour = timeOfDay.hour as int;"},{"type":"DELETE","lineNumber":621,"oldContent":"      final minute = timeOfDay.minute as int;"},{"type":"DELETE","lineNumber":623,"oldContent":""},{"type":"DELETE","lineNumber":626,"oldContent":""},{"type":"INSERT","lineNumber":705,"content":"    );"},{"type":"DELETE","lineNumber":633,"oldContent":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"DELETE","lineNumber":635,"oldContent":"        body: 'Hourly reminder: Time for your habit!',"},{"type":"DELETE","lineNumber":637,"oldContent":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":639,"oldContent":"        payload: jsonEncode({"},{"type":"DELETE","lineNumber":642,"oldContent":"          'type': 'hourly_reminder',"},{"type":"DELETE","lineNumber":644,"oldContent":"    }"},{"type":"INSERT","lineNumber":717,"content":"    final payload = jsonEncode({"},{"type":"INSERT","lineNumber":718,"content":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":719,"content":"      'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":720,"content":"    });"},{"type":"DELETE","lineNumber":647,"oldContent":"  /// Generate a safe 32-bit integer ID from a string"},{"type":"INSERT","lineNumber":723,"content":"      id,"},{"type":"DELETE","lineNumber":649,"oldContent":"  static int _generateSafeId(String habitId) {"},{"type":"DELETE","lineNumber":651,"oldContent":"    // Use a simple hash that fits within 32-bit signed integer range"},{"type":"DELETE","lineNumber":653,"oldContent":"    int hash = 0;"},{"type":"DELETE","lineNumber":654,"oldContent":"    for (int i = 0; i < habitId.length; i++) {"},{"type":"INSERT","lineNumber":727,"content":"      payload: payload,"},{"type":"DELETE","lineNumber":656,"oldContent":"      hash = ((hash << 5) - hash + habitId.codeUnitAt(i)) & 0x7FFFFFFF;"},{"type":"DELETE","lineNumber":658,"oldContent":"    }"},{"type":"DELETE","lineNumber":660,"oldContent":"    return hash;"},{"type":"DELETE","lineNumber":662,"oldContent":"  }"},{"type":"DELETE","lineNumber":664,"oldContent":""},{"type":"DELETE","lineNumber":666,"oldContent":"  /// Get pending notifications"},{"type":"DELETE","lineNumber":674,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":675,"oldContent":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"DELETE","lineNumber":676,"oldContent":"      }"},{"type":"DELETE","lineNumber":677,"oldContent":""},{"type":"DELETE","lineNumber":678,"oldContent":""},{"type":"INSERT","lineNumber":741,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":742,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":743,"content":"      'habit_scheduled_channel',"},{"type":"INSERT","lineNumber":744,"content":"      'Scheduled Habit Notifications',"},{"type":"INSERT","lineNumber":745,"content":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"INSERT","lineNumber":746,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":747,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":748,"content":"      actions: ["},{"type":"INSERT","lineNumber":749,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":752,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":753,"content":"        ),"},{"type":"DELETE","lineNumber":682,"oldContent":"      body: 'This is a test notification to verify the system is working!',"},{"type":"DELETE","lineNumber":686,"oldContent":"  }"},{"type":"DELETE","lineNumber":693,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":694,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":696,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":698,"oldContent":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":699,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":701,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":702,"oldContent":"      'Habit Notifications',"},{"type":"DELETE","lineNumber":704,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":706,"oldContent":"      showWhen: false,"},{"type":"INSERT","lineNumber":782,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":785,"content":"      'habitId': habitId,"}]},{"timestamp":1754513988922,"changes":[{"type":"DELETE","lineNumber":272,"oldContent":"      tz.local,"},{"type":"DELETE","lineNumber":273,"oldContent":"      now.month,"},{"type":"DELETE","lineNumber":274,"oldContent":"      now.day,"},{"type":"DELETE","lineNumber":275,"oldContent":"      minute,"},{"type":"DELETE","lineNumber":276,"oldContent":"    );"},{"type":"DELETE","lineNumber":277,"oldContent":"    // If the scheduled time is in the past, schedule for tomorrow"},{"type":"DELETE","lineNumber":278,"oldContent":"    if (scheduledDate.isBefore(now)) {"},{"type":"DELETE","lineNumber":279,"oldContent":"    }"},{"type":"INSERT","lineNumber":272,"content":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":273,"content":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"INSERT","lineNumber":274,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":281,"oldContent":"      id,"},{"type":"DELETE","lineNumber":282,"oldContent":"      title,"},{"type":"DELETE","lineNumber":283,"oldContent":"      scheduledDate,"},{"type":"DELETE","lineNumber":284,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":285,"oldContent":"      uiLocalNotificationDateInterpretation:"},{"type":"DELETE","lineNumber":286,"oldContent":"      matchDateTimeComponents: DateTimeComponents.time,"},{"type":"DELETE","lineNumber":287,"oldContent":"    );"},{"type":"INSERT","lineNumber":276,"content":"    try {"},{"type":"INSERT","lineNumber":277,"content":"      await _notificationsPlugin.zonedSchedule("},{"type":"INSERT","lineNumber":278,"content":"        id,"},{"type":"INSERT","lineNumber":279,"content":"        title,"},{"type":"INSERT","lineNumber":280,"content":"        body,"},{"type":"INSERT","lineNumber":281,"content":"        tzScheduledTime,"},{"type":"INSERT","lineNumber":282,"content":"        platformChannelSpecifics,"},{"type":"INSERT","lineNumber":283,"content":"        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,"},{"type":"INSERT","lineNumber":284,"content":"        uiLocalNotificationDateInterpretation:"},{"type":"INSERT","lineNumber":285,"content":"            UILocalNotificationDateInterpretation.absoluteTime,"},{"type":"INSERT","lineNumber":286,"content":"        payload: payload,"},{"type":"INSERT","lineNumber":287,"content":"      );"},{"type":"INSERT","lineNumber":288,"content":"      print('DEBUG: Notification successfully scheduled with plugin');"},{"type":"INSERT","lineNumber":289,"content":"    } catch (e) {"},{"type":"INSERT","lineNumber":290,"content":"      print('DEBUG: Plugin scheduling failed: $e');"},{"type":"INSERT","lineNumber":291,"content":"      throw Exception('Failed to schedule notification: $e');"},{"type":"INSERT","lineNumber":292,"content":"    }"},{"type":"DELETE","lineNumber":289,"oldContent":"  /// Schedule daily habit reminder - wrapper method for specific habit reminders"},{"type":"DELETE","lineNumber":290,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":291,"oldContent":"    required String habitName,"},{"type":"INSERT","lineNumber":294,"content":""},{"type":"INSERT","lineNumber":295,"content":"  /// Schedule daily recurring notifications"},{"type":"INSERT","lineNumber":296,"content":"  static Future<void> scheduleDailyNotification({"},{"type":"INSERT","lineNumber":297,"content":"    required int id,"},{"type":"INSERT","lineNumber":298,"content":"    required String title,"},{"type":"INSERT","lineNumber":299,"content":"    required String body,"},{"type":"INSERT","lineNumber":300,"content":"    required int hour,"},{"type":"INSERT","lineNumber":301,"content":"    required int minute,"},{"type":"INSERT","lineNumber":302,"content":"    String? payload,"},{"type":"DELETE","lineNumber":293,"oldContent":"    final id = habitId.hashCode; // Generate unique ID from habit ID"},{"type":"DELETE","lineNumber":294,"oldContent":"    final minute = reminderTime.minute;"},{"type":"INSERT","lineNumber":304,"content":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":296,"oldContent":"      id: id,"},{"type":"DELETE","lineNumber":297,"oldContent":"      title: 'Habit Reminder',"},{"type":"DELETE","lineNumber":298,"oldContent":"      hour: hour,"},{"type":"DELETE","lineNumber":299,"oldContent":"      minute: minute,"},{"type":"DELETE","lineNumber":300,"oldContent":"        'habitId': habitId,"},{"type":"DELETE","lineNumber":301,"oldContent":"        'habitName': habitName,"},{"type":"DELETE","lineNumber":302,"oldContent":"      }),"},{"type":"DELETE","lineNumber":303,"oldContent":"    );"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"  /// Cancel a specific notification"},{"type":"DELETE","lineNumber":306,"oldContent":"    await _notificationsPlugin.cancel(id);"},{"type":"DELETE","lineNumber":307,"oldContent":"  }"},{"type":"DELETE","lineNumber":308,"oldContent":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":306,"content":"    const AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":307,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":308,"content":"      'habit_daily_channel',"},{"type":"DELETE","lineNumber":336,"oldContent":"    AppLogger.info('Cancelled all notifications for habit ID: $habitId');"},{"type":"DELETE","lineNumber":338,"oldContent":"  }"},{"type":"DELETE","lineNumber":340,"oldContent":""},{"type":"DELETE","lineNumber":342,"oldContent":"  /// Schedule notifications for a habit based on its frequency and settings"},{"type":"DELETE","lineNumber":344,"oldContent":"  static Future<void> scheduleHabitNotifications(dynamic habit) async {"},{"type":"DELETE","lineNumber":346,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":348,"oldContent":"    "},{"type":"DELETE","lineNumber":351,"oldContent":"    if (!habit.notificationsEnabled || habit.notificationTime == null) {"},{"type":"DELETE","lineNumber":353,"oldContent":"      AppLogger.info('Notifications disabled for habit: ${habit.name}');"},{"type":"DELETE","lineNumber":356,"oldContent":"    }"},{"type":"DELETE","lineNumber":391,"oldContent":""},{"type":"INSERT","lineNumber":381,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":382,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":383,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"INSERT","lineNumber":386,"content":"  /// Cancel all notifications for a specific habit"},{"type":"INSERT","lineNumber":388,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":390,"content":"    // Cancel the main notification"},{"type":"INSERT","lineNumber":394,"content":"    for (int i = 1; i <= 31; i++) {"},{"type":"INSERT","lineNumber":396,"content":"    }"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":399,"content":"  }"},{"type":"INSERT","lineNumber":400,"content":""},{"type":"MODIFY","lineNumber":405,"content":"    print('DEBUG: Notification time: ${habit.notificationTime}');","oldContent":"      }),"},{"type":"MODIFY","lineNumber":410,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":412,"content":"    // Skip if notifications are disabled or no notification time is set","oldContent":""},{"type":"MODIFY","lineNumber":458,"content":"","oldContent":"      // If the day has passed this month, schedule for next month"},{"type":"MODIFY","lineNumber":472,"content":"","oldContent":"        id: habit.id * 100 + monthDay,"},{"type":"DELETE","lineNumber":494,"oldContent":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":496,"oldContent":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":495,"content":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":498,"oldContent":"      );"},{"type":"INSERT","lineNumber":497,"content":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":500,"content":"      );"},{"type":"MODIFY","lineNumber":506,"content":"  }","oldContent":"  }"},{"type":"MODIFY","lineNumber":527,"content":"        id: _generateSafeId(habit.id + '_week_$weekday'), // Use string concatenation for uniqueness","oldContent":"        id: _generateSafeId(habit.id) * 100 + weekday, // Use safe ID generation"},{"type":"MODIFY","lineNumber":539,"content":"","oldContent":"    return await _notificationsPlugin.pendingNotificationRequests();"},{"type":"DELETE","lineNumber":546,"oldContent":"      // Handle case where the day doesn't exist in the target month"},{"type":"DELETE","lineNumber":549,"oldContent":"      try {"},{"type":"DELETE","lineNumber":551,"oldContent":"        nextNotification = DateTime(nextNotification.year, nextNotification.month, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":553,"oldContent":"      } catch (e) {"},{"type":"DELETE","lineNumber":556,"oldContent":"        // Skip this month if the day doesn't exist (e.g., Feb 30)"},{"type":"INSERT","lineNumber":553,"content":"      // Handle case where the day doesn't exist in the target month"},{"type":"INSERT","lineNumber":554,"content":"      try {"},{"type":"INSERT","lineNumber":555,"content":"        nextNotification = DateTime(nextNotification.year, nextNotification.month, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":556,"content":"      } catch (e) {"},{"type":"INSERT","lineNumber":557,"content":"        // Skip this month if the day doesn't exist (e.g., Feb 30)"},{"type":"INSERT","lineNumber":559,"content":"      }"},{"type":"MODIFY","lineNumber":562,"content":"        id: _generateSafeId(habit.id + '_month_$monthDay'), // Use string concatenation for uniqueness","oldContent":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"DELETE","lineNumber":563,"oldContent":"      }"},{"type":"DELETE","lineNumber":572,"oldContent":""},{"type":"INSERT","lineNumber":574,"content":""},{"type":"DELETE","lineNumber":580,"oldContent":"      }"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"DELETE","lineNumber":584,"oldContent":"      await scheduleNotification("},{"type":"DELETE","lineNumber":585,"oldContent":"        id: _generateSafeId(habit.id) * 100 + date.month * 31 + date.day, // Use safe ID generation"},{"type":"INSERT","lineNumber":583,"content":"      // If the date has passed this year, schedule for next year"},{"type":"INSERT","lineNumber":584,"content":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":585,"content":"        nextNotification = DateTime(now.year + 1, date.month, date.day, hour, minute);"},{"type":"INSERT","lineNumber":586,"content":"      }"},{"type":"INSERT","lineNumber":587,"content":""},{"type":"INSERT","lineNumber":588,"content":"      await scheduleNotification("},{"type":"INSERT","lineNumber":589,"content":"        id: _generateSafeId(habit.id + '_year_${date.month}_${date.day}'), // Use string concatenation for uniqueness"},{"type":"DELETE","lineNumber":589,"oldContent":"      // If the date has passed this year, schedule for next year"},{"type":"DELETE","lineNumber":591,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"DELETE","lineNumber":594,"oldContent":"        nextNotification = DateTime(now.year + 1, date.month, date.day, hour, minute);"},{"type":"DELETE","lineNumber":596,"oldContent":""},{"type":"DELETE","lineNumber":598,"oldContent":"      }"},{"type":"DELETE","lineNumber":600,"oldContent":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"DELETE","lineNumber":602,"oldContent":""},{"type":"DELETE","lineNumber":604,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":605,"oldContent":"    required String title,"},{"type":"INSERT","lineNumber":600,"content":"    }"},{"type":"DELETE","lineNumber":608,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":610,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":612,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":616,"oldContent":"      'Habit Notifications',"},{"type":"DELETE","lineNumber":619,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":621,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":623,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":627,"oldContent":"      actions: ["},{"type":"DELETE","lineNumber":630,"oldContent":"          'Complete',"},{"type":"DELETE","lineNumber":631,"oldContent":"          'snooze',"},{"type":"DELETE","lineNumber":632,"oldContent":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":617,"content":"      }"},{"type":"INSERT","lineNumber":618,"content":""},{"type":"DELETE","lineNumber":634,"oldContent":"        id: _generateSafeId(habit.id) * 100 + hour * 60 + minute, // Use safe ID generation"},{"type":"DELETE","lineNumber":635,"oldContent":"        ),"},{"type":"INSERT","lineNumber":620,"content":"        id: _generateSafeId(habit.id + '_hour_${hour}_$minute'), // Use string concatenation for uniqueness"},{"type":"DELETE","lineNumber":638,"oldContent":"      ],"},{"type":"DELETE","lineNumber":641,"oldContent":"    );"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":646,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":648,"oldContent":"      categoryIdentifier: 'habit_category',"},{"type":"DELETE","lineNumber":650,"oldContent":"    );"},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"DELETE","lineNumber":654,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":656,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":633,"content":""},{"type":"DELETE","lineNumber":658,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":661,"oldContent":"    );"},{"type":"DELETE","lineNumber":664,"oldContent":""},{"type":"DELETE","lineNumber":667,"oldContent":"    final payload = jsonEncode({"},{"type":"DELETE","lineNumber":669,"oldContent":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":643,"content":"  }"},{"type":"DELETE","lineNumber":672,"oldContent":""},{"type":"DELETE","lineNumber":674,"oldContent":"      title,"},{"type":"DELETE","lineNumber":676,"oldContent":"      body,"},{"type":"DELETE","lineNumber":679,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":682,"oldContent":"    );"},{"type":"DELETE","lineNumber":685,"oldContent":"  }"},{"type":"DELETE","lineNumber":689,"oldContent":"  /// Schedule a habit notification with action buttons"},{"type":"DELETE","lineNumber":692,"oldContent":"  static Future<void> scheduleHabitNotification({"},{"type":"DELETE","lineNumber":695,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":698,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":701,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":704,"oldContent":"    required String body,"},{"type":"INSERT","lineNumber":666,"content":"  /// Test notification - useful for debugging"},{"type":"DELETE","lineNumber":706,"oldContent":"    required DateTime scheduledTime,"},{"type":"DELETE","lineNumber":707,"oldContent":"  }) async {"},{"type":"INSERT","lineNumber":668,"content":"    await showNotification("},{"type":"DELETE","lineNumber":709,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":710,"oldContent":""},{"type":"INSERT","lineNumber":670,"content":"      title: '🎯 Test Notification',"},{"type":"DELETE","lineNumber":712,"oldContent":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":714,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":716,"oldContent":"      'habit_scheduled_channel',"},{"type":"INSERT","lineNumber":678,"content":"    required int id,"},{"type":"DELETE","lineNumber":722,"oldContent":"        ),"},{"type":"DELETE","lineNumber":724,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":726,"oldContent":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":682,"content":"  }) async {"},{"type":"INSERT","lineNumber":684,"content":""},{"type":"INSERT","lineNumber":685,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":686,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":687,"content":"      'habit_channel',"},{"type":"INSERT","lineNumber":688,"content":"      'Habit Notifications',"},{"type":"INSERT","lineNumber":689,"content":"      channelDescription: 'Notifications for habit reminders',"},{"type":"INSERT","lineNumber":690,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":691,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":692,"content":"      showWhen: false,"},{"type":"INSERT","lineNumber":693,"content":"      actions: ["},{"type":"INSERT","lineNumber":694,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":695,"content":"          'complete',"},{"type":"INSERT","lineNumber":696,"content":"          'Complete',"},{"type":"DELETE","lineNumber":730,"oldContent":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":699,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":700,"content":"          'snooze',"},{"type":"INSERT","lineNumber":701,"content":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":702,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":703,"content":"        ),"},{"type":"DELETE","lineNumber":732,"oldContent":"      'habit_channel',"},{"type":"DELETE","lineNumber":735,"oldContent":"      channelDescription: 'Notifications for habit reminders',"},{"type":"DELETE","lineNumber":737,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":740,"oldContent":"      showWhen: false,"},{"type":"INSERT","lineNumber":711,"content":""},{"type":"INSERT","lineNumber":712,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":713,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":714,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":715,"content":"    );"},{"type":"INSERT","lineNumber":716,"content":""},{"type":"INSERT","lineNumber":717,"content":"    final payload = jsonEncode({"},{"type":"INSERT","lineNumber":718,"content":"      'habitId': habitId,"},{"type":"INSERT","lineNumber":719,"content":"      'type': 'habit_reminder',"},{"type":"INSERT","lineNumber":720,"content":"    });"},{"type":"INSERT","lineNumber":721,"content":""},{"type":"INSERT","lineNumber":722,"content":"    await _notificationsPlugin.show("},{"type":"INSERT","lineNumber":723,"content":"      id,"},{"type":"INSERT","lineNumber":724,"content":"      title,"},{"type":"INSERT","lineNumber":725,"content":"      body,"},{"type":"INSERT","lineNumber":726,"content":"      platformChannelSpecifics,"},{"type":"INSERT","lineNumber":727,"content":"      payload: payload,"},{"type":"INSERT","lineNumber":728,"content":"    );"},{"type":"INSERT","lineNumber":729,"content":"  }"},{"type":"INSERT","lineNumber":730,"content":""},{"type":"INSERT","lineNumber":731,"content":"  /// Schedule a habit notification with action buttons"},{"type":"INSERT","lineNumber":732,"content":"  static Future<void> scheduleHabitNotification({"},{"type":"INSERT","lineNumber":733,"content":"    required int id,"},{"type":"INSERT","lineNumber":734,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":735,"content":"    required String title,"},{"type":"INSERT","lineNumber":736,"content":"    required String body,"},{"type":"INSERT","lineNumber":737,"content":"    required DateTime scheduledTime,"},{"type":"INSERT","lineNumber":738,"content":"  }) async {"},{"type":"INSERT","lineNumber":739,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":740,"content":""},{"type":"INSERT","lineNumber":741,"content":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":742,"content":"        AndroidNotificationDetails("},{"type":"INSERT","lineNumber":743,"content":"      'habit_scheduled_channel',"},{"type":"INSERT","lineNumber":744,"content":"      'Scheduled Habit Notifications',"},{"type":"INSERT","lineNumber":745,"content":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"INSERT","lineNumber":746,"content":"      importance: Importance.max,"},{"type":"INSERT","lineNumber":747,"content":"      priority: Priority.high,"},{"type":"INSERT","lineNumber":748,"content":"      actions: ["},{"type":"DELETE","lineNumber":744,"oldContent":""},{"type":"DELETE","lineNumber":746,"oldContent":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"INSERT","lineNumber":752,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":754,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":755,"content":"          'snooze',"},{"type":"INSERT","lineNumber":756,"content":"          'Snooze 30min',"},{"type":"INSERT","lineNumber":757,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":758,"content":"        ),"},{"type":"INSERT","lineNumber":759,"content":"      ],"},{"type":"INSERT","lineNumber":760,"content":"    );"},{"type":"INSERT","lineNumber":761,"content":""},{"type":"INSERT","lineNumber":762,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":763,"content":"        DarwinNotificationDetails("},{"type":"INSERT","lineNumber":764,"content":"      categoryIdentifier: 'habit_category',"},{"type":"INSERT","lineNumber":765,"content":"    );"},{"type":"INSERT","lineNumber":766,"content":""},{"type":"INSERT","lineNumber":767,"content":"    final NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":751,"oldContent":"    );"},{"type":"DELETE","lineNumber":762,"oldContent":"    final payload = jsonEncode({"},{"type":"DELETE","lineNumber":764,"oldContent":"      'habitId': habitId,"},{"type":"DELETE","lineNumber":766,"oldContent":"      'type': 'habit_reminder',"},{"type":"DELETE","lineNumber":768,"oldContent":"    });"},{"type":"DELETE","lineNumber":772,"oldContent":"      id,"},{"type":"DELETE","lineNumber":777,"oldContent":"      payload: payload,"},{"type":"DELETE","lineNumber":792,"oldContent":"    final AndroidNotificationDetails androidPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":794,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":796,"oldContent":"      'habit_scheduled_channel',"},{"type":"DELETE","lineNumber":798,"oldContent":"      'Scheduled Habit Notifications',"},{"type":"DELETE","lineNumber":800,"oldContent":"      channelDescription: 'Scheduled notifications for habit reminders',"},{"type":"DELETE","lineNumber":802,"oldContent":"      importance: Importance.max,"},{"type":"DELETE","lineNumber":804,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":806,"oldContent":"      actions: ["},{"type":"DELETE","lineNumber":808,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":812,"oldContent":"          showsUserInterface: false,"},{"type":"DELETE","lineNumber":814,"oldContent":"        ),"},{"type":"DELETE","lineNumber":844,"oldContent":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"DELETE","lineNumber":848,"oldContent":"      'habitId': habitId,"}]},{"timestamp":1754514022772,"changes":[{"type":"MODIFY","lineNumber":221,"content":"","oldContent":"      id,"},{"type":"DELETE","lineNumber":241,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":242,"oldContent":""},{"type":"DELETE","lineNumber":243,"oldContent":"        AndroidNotificationDetails("},{"type":"DELETE","lineNumber":244,"oldContent":"      'Daily Habit Notifications',"},{"type":"DELETE","lineNumber":245,"oldContent":"      channelDescription: 'Daily recurring notifications for habit reminders',"},{"type":"DELETE","lineNumber":246,"oldContent":"      priority: Priority.high,"},{"type":"DELETE","lineNumber":247,"oldContent":"    );"},{"type":"DELETE","lineNumber":248,"oldContent":""},{"type":"DELETE","lineNumber":249,"oldContent":"        DarwinNotificationDetails();"},{"type":"DELETE","lineNumber":250,"oldContent":"    const NotificationDetails platformChannelSpecifics = NotificationDetails("},{"type":"DELETE","lineNumber":251,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":252,"oldContent":"    );"},{"type":"INSERT","lineNumber":241,"content":"        print('DEBUG: TZ Scheduled time (method 2): $tzScheduledTime');"},{"type":"INSERT","lineNumber":242,"content":"      } catch (e2) {"},{"type":"INSERT","lineNumber":243,"content":"        print('DEBUG: Manual TZDateTime creation failed: $e2');"},{"type":"INSERT","lineNumber":244,"content":"        // Ultimate fallback: use UTC"},{"type":"INSERT","lineNumber":245,"content":"        tzScheduledTime = tz.TZDateTime.utc("},{"type":"INSERT","lineNumber":246,"content":"          localScheduledTime.year,"},{"type":"INSERT","lineNumber":247,"content":"          localScheduledTime.month,"},{"type":"INSERT","lineNumber":248,"content":"          localScheduledTime.day,"},{"type":"INSERT","lineNumber":249,"content":"          localScheduledTime.hour,"},{"type":"INSERT","lineNumber":250,"content":"          localScheduledTime.minute,"},{"type":"INSERT","lineNumber":251,"content":"          localScheduledTime.second,"},{"type":"INSERT","lineNumber":252,"content":"        );"},{"type":"INSERT","lineNumber":275,"content":""},{"type":"DELETE","lineNumber":280,"oldContent":"      platformChannelSpecifics,"},{"type":"DELETE","lineNumber":289,"oldContent":""},{"type":"DELETE","lineNumber":294,"oldContent":"    required String habitName,"},{"type":"INSERT","lineNumber":293,"content":"  }"},{"type":"DELETE","lineNumber":297,"oldContent":"    final id = habitId.hashCode; // Generate unique ID from habit ID"},{"type":"INSERT","lineNumber":303,"content":"  }) async {"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":313,"content":"    );"},{"type":"DELETE","lineNumber":314,"oldContent":""},{"type":"DELETE","lineNumber":325,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":326,"oldContent":"  }"},{"type":"INSERT","lineNumber":325,"content":"      tz.local,"},{"type":"INSERT","lineNumber":326,"content":"      now.year,"},{"type":"INSERT","lineNumber":327,"content":"      now.month,"},{"type":"INSERT","lineNumber":328,"content":"      now.day,"},{"type":"INSERT","lineNumber":329,"content":"      hour,"},{"type":"INSERT","lineNumber":330,"content":"      minute,"},{"type":"INSERT","lineNumber":331,"content":"    );"},{"type":"DELETE","lineNumber":328,"oldContent":"  static Future<void> cancelHabitNotifications(int habitId) async {"},{"type":"DELETE","lineNumber":329,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":330,"oldContent":"    // Cancel the main notification"},{"type":"DELETE","lineNumber":331,"oldContent":"    "},{"type":"DELETE","lineNumber":332,"oldContent":"    // Cancel related notifications (for weekly/monthly schedules)"},{"type":"DELETE","lineNumber":333,"oldContent":"      await _notificationsPlugin.cancel(habitId * 100 + i);"},{"type":"DELETE","lineNumber":334,"oldContent":"    }"},{"type":"INSERT","lineNumber":333,"content":"    // If the scheduled time is in the past, schedule for tomorrow"},{"type":"INSERT","lineNumber":334,"content":"    if (scheduledDate.isBefore(now)) {"},{"type":"DELETE","lineNumber":371,"oldContent":"  /// Cancel all notifications"},{"type":"DELETE","lineNumber":373,"oldContent":"  static Future<void> cancelAllNotifications() async {"},{"type":"DELETE","lineNumber":375,"oldContent":"    await _notificationsPlugin.cancelAll();"},{"type":"DELETE","lineNumber":379,"oldContent":"  /// Cancel all notifications for a specific habit"},{"type":"DELETE","lineNumber":382,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":385,"oldContent":"    // Cancel the main notification"},{"type":"INSERT","lineNumber":381,"content":"  /// Cancel all notifications"},{"type":"INSERT","lineNumber":382,"content":"  static Future<void> cancelAllNotifications() async {"},{"type":"INSERT","lineNumber":383,"content":"    await _notificationsPlugin.cancelAll();"},{"type":"DELETE","lineNumber":389,"oldContent":"    for (int i = 1; i <= 31; i++) {"},{"type":"INSERT","lineNumber":386,"content":"  /// Cancel all notifications for a specific habit"},{"type":"INSERT","lineNumber":388,"content":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":392,"oldContent":"    }"},{"type":"INSERT","lineNumber":390,"content":"    // Cancel the main notification"},{"type":"INSERT","lineNumber":393,"content":"    // Cancel related notifications with safe approach - try common patterns"},{"type":"INSERT","lineNumber":394,"content":"    // For weekly notifications (7 days)"},{"type":"INSERT","lineNumber":395,"content":"    for (int weekday = 1; weekday <= 7; weekday++) {"},{"type":"INSERT","lineNumber":396,"content":"      await _notificationsPlugin.cancel(_generateSafeId(habitId.toString() + '_week_$weekday'));"},{"type":"INSERT","lineNumber":397,"content":"    }"},{"type":"INSERT","lineNumber":398,"content":"    "},{"type":"INSERT","lineNumber":399,"content":"    // For monthly notifications (31 days)"},{"type":"INSERT","lineNumber":400,"content":"    for (int monthDay = 1; monthDay <= 31; monthDay++) {"},{"type":"INSERT","lineNumber":401,"content":"      await _notificationsPlugin.cancel(_generateSafeId(habitId.toString() + '_month_$monthDay'));"},{"type":"INSERT","lineNumber":402,"content":"    }"},{"type":"INSERT","lineNumber":403,"content":"    "},{"type":"INSERT","lineNumber":404,"content":"    // For yearly notifications (12 months x 31 days)"},{"type":"INSERT","lineNumber":405,"content":"    for (int month = 1; month <= 12; month++) {"},{"type":"INSERT","lineNumber":406,"content":"      for (int day = 1; day <= 31; day++) {"},{"type":"INSERT","lineNumber":407,"content":"        await _notificationsPlugin.cancel(_generateSafeId(habitId.toString() + '_year_${month}_$day'));"},{"type":"INSERT","lineNumber":408,"content":"      }"},{"type":"INSERT","lineNumber":409,"content":"    }"},{"type":"INSERT","lineNumber":410,"content":"    "},{"type":"INSERT","lineNumber":411,"content":"    // For hourly notifications (24 hours x 60 minutes)"},{"type":"INSERT","lineNumber":412,"content":"    for (int hour = 0; hour < 24; hour++) {"},{"type":"INSERT","lineNumber":413,"content":"      for (int minute = 0; minute < 60; minute += 15) { // Check every 15 minutes"},{"type":"INSERT","lineNumber":414,"content":"        await _notificationsPlugin.cancel(_generateSafeId(habitId.toString() + '_hour_${hour}_$minute'));"},{"type":"INSERT","lineNumber":415,"content":"      }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"DELETE","lineNumber":396,"oldContent":"    // Cancel related notifications (for weekly/monthly schedules)"},{"type":"INSERT","lineNumber":418,"content":"    AppLogger.info('Cancelled all notifications for habit ID: $habitId');"},{"type":"DELETE","lineNumber":398,"oldContent":"      await _notificationsPlugin.cancel(habitId * 100 + i);"},{"type":"DELETE","lineNumber":400,"oldContent":"    AppLogger.info('Cancelled all notifications for habit ID: $habitId');"},{"type":"DELETE","lineNumber":406,"oldContent":"    );"},{"type":"INSERT","lineNumber":426,"content":"    "},{"type":"INSERT","lineNumber":429,"content":"      await initialize();"},{"type":"DELETE","lineNumber":410,"oldContent":"    }"},{"type":"DELETE","lineNumber":414,"oldContent":""},{"type":"DELETE","lineNumber":415,"oldContent":"    for (int weekday in selectedWeekdays) {"},{"type":"DELETE","lineNumber":416,"oldContent":"      "},{"type":"INSERT","lineNumber":434,"content":"      print('DEBUG: Skipping notifications - disabled or no time set');"},{"type":"INSERT","lineNumber":435,"content":"      AppLogger.info('Notifications disabled for habit: ${habit.name}');"},{"type":"INSERT","lineNumber":436,"content":"      return;"},{"type":"DELETE","lineNumber":422,"oldContent":"      // If the time has passed today, schedule for next week"},{"type":"INSERT","lineNumber":442,"content":"    "},{"type":"DELETE","lineNumber":432,"oldContent":"        payload: jsonEncode({"},{"type":"INSERT","lineNumber":452,"content":"      "},{"type":"DELETE","lineNumber":434,"oldContent":"          'weekday': weekday"},{"type":"DELETE","lineNumber":435,"oldContent":"      );"},{"type":"INSERT","lineNumber":454,"content":"        case 'daily':"},{"type":"INSERT","lineNumber":455,"content":"          print('DEBUG: Scheduling daily notifications');"},{"type":"DELETE","lineNumber":442,"oldContent":"  /// Schedule monthly habit notifications"},{"type":"DELETE","lineNumber":443,"oldContent":"    final selectedMonthDays = habit.selectedMonthDays ?? <int>[];"},{"type":"INSERT","lineNumber":462,"content":"          break;"},{"type":"INSERT","lineNumber":463,"content":""},{"type":"DELETE","lineNumber":494,"oldContent":"        scheduledTime: nextNotification,"},{"type":"DELETE","lineNumber":496,"oldContent":"          'habitId': habit.id.toString(),"},{"type":"INSERT","lineNumber":515,"content":"        scheduledTime: nextNotification,"},{"type":"INSERT","lineNumber":517,"content":"          'habitId': habit.id.toString(),"},{"type":"DELETE","lineNumber":499,"oldContent":"      );"},{"type":"INSERT","lineNumber":520,"content":"      );"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"DELETE","lineNumber":506,"oldContent":"  }"},{"type":"DELETE","lineNumber":508,"oldContent":"      final hour = timeOfDay.hour;"},{"type":"DELETE","lineNumber":509,"oldContent":"      "},{"type":"DELETE","lineNumber":510,"oldContent":"      "},{"type":"DELETE","lineNumber":511,"oldContent":"      if (nextNotification.isBefore(now)) {"},{"type":"INSERT","lineNumber":528,"content":"  /// Schedule weekly habit notifications"},{"type":"INSERT","lineNumber":529,"content":"  static Future<void> _scheduleWeeklyHabitNotifications(dynamic habit, int hour, int minute) async {"},{"type":"INSERT","lineNumber":530,"content":"    final selectedWeekdays = habit.selectedWeekdays ?? <int>[];"},{"type":"INSERT","lineNumber":531,"content":"    final now = DateTime.now();"},{"type":"INSERT","lineNumber":570,"content":"        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"INSERT","lineNumber":571,"content":"      }"},{"type":"INSERT","lineNumber":572,"content":""},{"type":"DELETE","lineNumber":552,"oldContent":"        nextNotification = DateTime(now.year, now.month + 1, monthDay, hour, minute);"},{"type":"DELETE","lineNumber":554,"oldContent":"      }"},{"type":"DELETE","lineNumber":557,"oldContent":""},{"type":"DELETE","lineNumber":562,"oldContent":"        id: _generateSafeId(habit.id) * 100 + monthDay, // Use safe ID generation"},{"type":"INSERT","lineNumber":583,"content":"        title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":573,"oldContent":""},{"type":"INSERT","lineNumber":594,"content":""},{"type":"DELETE","lineNumber":581,"oldContent":"      // If the date has passed this year, schedule for next year"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"INSERT","lineNumber":603,"content":"      // If the date has passed this year, schedule for next year"},{"type":"DELETE","lineNumber":587,"oldContent":""},{"type":"DELETE","lineNumber":588,"oldContent":"        title: '🎯 ${habit.name}',"},{"type":"DELETE","lineNumber":590,"oldContent":"        body: 'Time to complete your yearly habit! This is your special day.',"},{"type":"INSERT","lineNumber":610,"content":"        title: '🎯 ${habit.name}',"},{"type":"INSERT","lineNumber":611,"content":"        body: 'Time to complete your yearly habit! This is your special day.',"},{"type":"DELETE","lineNumber":598,"oldContent":"    }"},{"type":"INSERT","lineNumber":620,"content":"    }"},{"type":"DELETE","lineNumber":608,"oldContent":"      }"},{"type":"DELETE","lineNumber":610,"oldContent":""},{"type":"DELETE","lineNumber":612,"oldContent":"        id: _generateSafeId(habit.id + '_hour_${hour}_$minute'), // Use string concatenation for uniqueness"},{"type":"INSERT","lineNumber":637,"content":"      }"},{"type":"INSERT","lineNumber":640,"content":"        id: _generateSafeId(habit.id + '_hour_${hour}_$minute'), // Use string concatenation for uniqueness"},{"type":"DELETE","lineNumber":627,"oldContent":"  }"},{"type":"INSERT","lineNumber":653,"content":""},{"type":"DELETE","lineNumber":641,"oldContent":"  /// Test notification - useful for debugging"},{"type":"DELETE","lineNumber":643,"oldContent":"    await showNotification("},{"type":"DELETE","lineNumber":645,"oldContent":"      title: '🎯 Test Notification',"},{"type":"INSERT","lineNumber":663,"content":"  }"},{"type":"DELETE","lineNumber":651,"oldContent":"    required int id,"},{"type":"DELETE","lineNumber":655,"oldContent":"  }) async {"},{"type":"DELETE","lineNumber":657,"oldContent":""},{"type":"INSERT","lineNumber":673,"content":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"INSERT","lineNumber":674,"content":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"INSERT","lineNumber":675,"content":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"INSERT","lineNumber":676,"content":""},{"type":"INSERT","lineNumber":677,"content":"      if (androidImplementation != null) {"},{"type":"INSERT","lineNumber":678,"content":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"INSERT","lineNumber":679,"content":"      }"},{"type":"INSERT","lineNumber":680,"content":"    }"},{"type":"INSERT","lineNumber":681,"content":""},{"type":"INSERT","lineNumber":682,"content":"    // For iOS, we assume they're enabled if the user granted permission"},{"type":"INSERT","lineNumber":683,"content":"    return true;"},{"type":"INSERT","lineNumber":684,"content":"  }"},{"type":"INSERT","lineNumber":685,"content":""},{"type":"INSERT","lineNumber":686,"content":"  /// Test notification - useful for debugging"},{"type":"INSERT","lineNumber":687,"content":"  static Future<void> showTestNotification() async {"},{"type":"INSERT","lineNumber":688,"content":"    await showNotification("},{"type":"INSERT","lineNumber":689,"content":"      id: 999,"},{"type":"INSERT","lineNumber":690,"content":"      title: '🎯 Test Notification',"},{"type":"INSERT","lineNumber":691,"content":"      body: 'This is a test notification to verify the system is working!',"},{"type":"INSERT","lineNumber":692,"content":"      payload: 'test_notification',"},{"type":"INSERT","lineNumber":693,"content":"    );"},{"type":"INSERT","lineNumber":694,"content":"  }"},{"type":"INSERT","lineNumber":695,"content":""},{"type":"INSERT","lineNumber":696,"content":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"INSERT","lineNumber":697,"content":"  static Future<void> showHabitNotification({"},{"type":"INSERT","lineNumber":698,"content":"    required int id,"},{"type":"INSERT","lineNumber":699,"content":"    required String habitId,"},{"type":"INSERT","lineNumber":700,"content":"    required String title,"},{"type":"INSERT","lineNumber":701,"content":"    required String body,"},{"type":"INSERT","lineNumber":702,"content":"  }) async {"},{"type":"INSERT","lineNumber":703,"content":"    if (!_isInitialized) await initialize();"},{"type":"INSERT","lineNumber":704,"content":""},{"type":"DELETE","lineNumber":661,"oldContent":"      final AndroidFlutterLocalNotificationsPlugin? androidImplementation ="},{"type":"DELETE","lineNumber":663,"oldContent":"          _notificationsPlugin.resolvePlatformSpecificImplementation<"},{"type":"DELETE","lineNumber":665,"oldContent":"              AndroidFlutterLocalNotificationsPlugin>();"},{"type":"DELETE","lineNumber":668,"oldContent":""},{"type":"DELETE","lineNumber":670,"oldContent":"      if (androidImplementation != null) {"},{"type":"DELETE","lineNumber":673,"oldContent":"        return await androidImplementation.areNotificationsEnabled() ?? false;"},{"type":"DELETE","lineNumber":675,"oldContent":"      }"},{"type":"DELETE","lineNumber":678,"oldContent":"    }"},{"type":"DELETE","lineNumber":679,"oldContent":""},{"type":"INSERT","lineNumber":717,"content":"          showsUserInterface: false,"},{"type":"INSERT","lineNumber":718,"content":"        ),"},{"type":"DELETE","lineNumber":681,"oldContent":"    // For iOS, we assume they're enabled if the user granted permission"},{"type":"DELETE","lineNumber":683,"oldContent":"    return true;"},{"type":"DELETE","lineNumber":686,"oldContent":"  }"},{"type":"INSERT","lineNumber":724,"content":"      ],"},{"type":"INSERT","lineNumber":725,"content":"    );"},{"type":"DELETE","lineNumber":689,"oldContent":"  static Future<void> showTestNotification() async {"},{"type":"DELETE","lineNumber":690,"oldContent":"      id: 999,"},{"type":"INSERT","lineNumber":727,"content":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"INSERT","lineNumber":728,"content":"        DarwinNotificationDetails("},{"type":"INSERT","lineNumber":729,"content":"      categoryIdentifier: 'habit_category',"},{"type":"INSERT","lineNumber":730,"content":"    );"},{"type":"DELETE","lineNumber":692,"oldContent":"      body: 'This is a test notification to verify the system is working!',"},{"type":"DELETE","lineNumber":695,"oldContent":"      payload: 'test_notification',"},{"type":"DELETE","lineNumber":698,"oldContent":"    );"},{"type":"DELETE","lineNumber":701,"oldContent":"  }"},{"type":"DELETE","lineNumber":703,"oldContent":""},{"type":"DELETE","lineNumber":705,"oldContent":"  /// Show an actionable habit notification with Complete and Snooze buttons"},{"type":"DELETE","lineNumber":707,"oldContent":"  static Future<void> showHabitNotification({"},{"type":"DELETE","lineNumber":709,"oldContent":"    required String habitId,"},{"type":"DELETE","lineNumber":712,"oldContent":"    required String title,"},{"type":"DELETE","lineNumber":715,"oldContent":"    required String body,"},{"type":"DELETE","lineNumber":718,"oldContent":"    if (!_isInitialized) await initialize();"},{"type":"DELETE","lineNumber":720,"oldContent":"          showsUserInterface: false,"},{"type":"DELETE","lineNumber":722,"oldContent":"        ),"},{"type":"DELETE","lineNumber":725,"oldContent":"      ],"},{"type":"DELETE","lineNumber":728,"oldContent":"    );"},{"type":"DELETE","lineNumber":730,"oldContent":""},{"type":"DELETE","lineNumber":733,"oldContent":"    const DarwinNotificationDetails iOSPlatformChannelSpecifics ="},{"type":"DELETE","lineNumber":736,"oldContent":"        DarwinNotificationDetails("},{"type":"DELETE","lineNumber":738,"oldContent":"      categoryIdentifier: 'habit_category',"},{"type":"DELETE","lineNumber":741,"oldContent":"    );"},{"type":"DELETE","lineNumber":743,"oldContent":"        const AndroidNotificationAction("},{"type":"DELETE","lineNumber":745,"oldContent":"          'complete',"},{"type":"DELETE","lineNumber":748,"oldContent":"          'Complete',"},{"type":"DELETE","lineNumber":751,"oldContent":"        ),"},{"type":"DELETE","lineNumber":753,"oldContent":"      android: androidPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":754,"oldContent":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"DELETE","lineNumber":755,"oldContent":"    );"},{"type":"INSERT","lineNumber":769,"content":"        const AndroidNotificationAction("},{"type":"INSERT","lineNumber":770,"content":"          'complete',"},{"type":"INSERT","lineNumber":771,"content":"          'Complete',"},{"type":"DELETE","lineNumber":757,"oldContent":""},{"type":"DELETE","lineNumber":758,"oldContent":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":773,"content":"        ),"},{"type":"DELETE","lineNumber":760,"oldContent":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"DELETE","lineNumber":762,"oldContent":""},{"type":"DELETE","lineNumber":764,"oldContent":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"DELETE","lineNumber":766,"oldContent":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"DELETE","lineNumber":768,"oldContent":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"DELETE","lineNumber":770,"oldContent":""},{"type":"DELETE","lineNumber":772,"oldContent":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"DELETE","lineNumber":774,"oldContent":""},{"type":"DELETE","lineNumber":777,"oldContent":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"DELETE","lineNumber":780,"oldContent":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":788,"content":"      android: androidPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":789,"content":"      iOS: iOSPlatformChannelSpecifics,"},{"type":"INSERT","lineNumber":790,"content":"    );"},{"type":"INSERT","lineNumber":792,"content":"    final deviceNow = DateTime.now();"},{"type":"INSERT","lineNumber":793,"content":"    final localScheduledTime = scheduledTime.toLocal();"},{"type":"INSERT","lineNumber":794,"content":""},{"type":"INSERT","lineNumber":795,"content":"    AppLogger.info('Device current time: $deviceNow');"},{"type":"INSERT","lineNumber":796,"content":"    AppLogger.info('Target scheduled time: $localScheduledTime');"},{"type":"INSERT","lineNumber":797,"content":"    AppLogger.info('Time until notification: ${localScheduledTime.difference(deviceNow).inSeconds} seconds');"},{"type":"INSERT","lineNumber":798,"content":""},{"type":"INSERT","lineNumber":799,"content":"    final tzScheduledTime = tz.TZDateTime.from(localScheduledTime, tz.local);"},{"type":"INSERT","lineNumber":800,"content":""},{"type":"INSERT","lineNumber":801,"content":"    AppLogger.info('TZ Scheduled time: $tzScheduledTime');"},{"type":"INSERT","lineNumber":802,"content":"    AppLogger.info('TZ Local timezone: ${tz.local.name}');"},{"type":"INSERT","lineNumber":803,"content":""}]}]}}}