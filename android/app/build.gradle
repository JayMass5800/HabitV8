plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

// Load keystore properties
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.habittracker.habitv8"
    compileSdk 36
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
            "-opt-in=kotlin.RequiresOptIn",
            "-Xopt-in=kotlin.ExperimentalStdlibApi"
        ]
    }

    defaultConfig {
        applicationId "com.habittracker.habitv8"
        minSdk 26
        targetSdk 36
        versionCode flutter.versionCode
        versionName flutter.versionName
        
        // Add these for better Play Store compatibility
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Fix for 16 KB native library alignment
        ndk {
            // Ensure native libraries are aligned for 16 KB page sizes
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
        }
        
        // Manifest placeholders for health permissions control
        manifestPlaceholders = [
            healthPermissionsOnly: "true",
            healthPermissionsRestricted: "true",
            healthDataTypesMinimal: "true"
        ]
    }

    // Configure packaging options for native library alignment
    packagingOptions {
        jniLibs {
            // Modern approach for 16 KB alignment - let AGP handle it automatically
            useLegacyPackaging false
        }
        // Ensure proper alignment for all native libraries
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0'
            ]
        }
    }

    // Additional configuration for 16 KB page size support
    bundle {
        language {
            // Disable language splits to ensure proper native library packaging
            enableSplit false
        }
        density {
            // Disable density splits to ensure proper native library packaging
            enableSplit false
        }
        abi {
            // Enable ABI splits but ensure proper alignment
            enableSplit true
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Ensure unused health permissions are stripped
            manifestPlaceholders = [stripUnusedHealthPermissions: "true"]
            
            // Configure manifest merger to remove unwanted permissions
            androidResources {
                additionalParameters '--extra-packages', 'com.habittracker.habitv8.health'
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    
    // Health Connect dependencies - latest version with all features
    implementation 'androidx.health.connect:connect-client:1.2.0-alpha01'
    
    // Coroutines for async operations
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
    
    // Activity recognition
    implementation 'com.google.android.gms:play-services-location:21.2.0'
}

// Add task to verify SCHEDULE_EXACT_ALARMS permission is present
tasks.register('verifyExactAlarmsPermission') {
    doLast {
        def releaseManifest = file("${layout.buildDirectory.get()}/intermediates/merged_manifests/release/AndroidManifest.xml")
        if (releaseManifest.exists()) {
            def manifestContent = releaseManifest.text
            if (manifestContent.contains("android.permission.SCHEDULE_EXACT_ALARMS")) {
                println "✓ SCHEDULE_EXACT_ALARMS permission found in release manifest"
            } else {
                println "✗ SCHEDULE_EXACT_ALARMS permission MISSING from release manifest"
                println "Manifest content preview:"
                println manifestContent.substring(0, Math.min(1000, manifestContent.length()))
            }
        } else {
            println "Release manifest not found at expected location"
        }
    }
}

// Apply Flutter plugin at the very end
apply plugin: 'dev.flutter.flutter-gradle-plugin'