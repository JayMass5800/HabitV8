// Custom Gradle script to ensure critical health permissions are included in the AAB
// This addresses the need for heart rate, background health data, and activity recognition

// Use afterEvaluate to ensure Android plugin is configured
afterEvaluate {
    android.applicationVariants.configureEach { variant ->
        if (variant.buildType.name == 'release') {
            // Task to add required permissions after build
            def addPermissionsTask = tasks.register("add${variant.name.capitalize()}HealthPermissions") {
                doLast {
                    println "Adding critical health permissions for ${variant.name}"
                    
                    // Find the merged manifest
                    def mergedManifest = file("${layout.buildDirectory.get()}/intermediates/merged_manifests/${variant.name}/AndroidManifest.xml")
                    if (mergedManifest.exists()) {
                        def manifestText = mergedManifest.text
                        
                        // Check if manifest already has the permissions
                        def requiredPermissions = [
                            'android.permission.health.READ_HEART_RATE',
                            'android.permission.health.READ_HEALTH_DATA_IN_BACKGROUND',
                            'android.permission.health.READ_STEPS',
                            'android.permission.health.READ_ACTIVE_CALORIES_BURNED',
                            'android.permission.health.READ_TOTAL_CALORIES_BURNED',
                            'android.permission.health.READ_SLEEP',
                            'android.permission.health.READ_HYDRATION',
                            'android.permission.health.READ_MINDFULNESS',
                            'android.permission.health.READ_WEIGHT',
                            'android.permission.ACTIVITY_RECOGNITION',
                            'com.google.android.gms.permission.ACTIVITY_RECOGNITION',
                            'android.permission.FOREGROUND_SERVICE',
                            'android.permission.FOREGROUND_SERVICE_HEALTH',
                            'android.permission.SCHEDULE_EXACT_ALARMS'
                        ]
                        
                        def manifestUpdated = false
                        def updatedManifest = manifestText
                        
                        // Add each permission if it's not already in the manifest
                        requiredPermissions.each { permission ->
                            if (!manifestText.contains("android:name=\"${permission}\"")) {
                                println "Adding missing permission: ${permission}"
                                
                                // Find the position to insert the permission (after the last uses-permission)
                                // Look for both self-closing and regular closing tags
                                def lastPermissionIndex = Math.max(
                                    updatedManifest.lastIndexOf("</uses-permission>"),
                                    updatedManifest.lastIndexOf("<uses-permission android:name=\"android.permission.health.READ_HEALTH_DATA_IN_BACKGROUND\" />")
                                )
                                
                                if (lastPermissionIndex > 0) {
                                    def insertPosition
                                    if (updatedManifest.substring(lastPermissionIndex).startsWith("</uses-permission>")) {
                                        insertPosition = lastPermissionIndex + "</uses-permission>".length()
                                    } else {
                                        // Find the end of the self-closing tag
                                        insertPosition = updatedManifest.indexOf("/>", lastPermissionIndex) + 2
                                    }
                                    
                                    def permissionTag = "\n    <uses-permission android:name=\"${permission}\" />"
                                    
                                    updatedManifest = new StringBuilder(updatedManifest).insert(insertPosition, permissionTag).toString()
                                    manifestUpdated = true
                                } else {
                                    // If no uses-permission found, insert after uses-sdk
                                    def usesSdkIndex = updatedManifest.indexOf("</uses-sdk>")
                                    if (usesSdkIndex > 0) {
                                        def insertPosition = usesSdkIndex + "</uses-sdk>".length()
                                        def permissionTag = "\n\n    <uses-permission android:name=\"${permission}\" />"
                                        
                                        updatedManifest = new StringBuilder(updatedManifest).insert(insertPosition, permissionTag).toString()
                                        manifestUpdated = true
                                    }
                                }
                            }
                        }
                        
                        // Write updated manifest back if changes were made
                        if (manifestUpdated) {
                            mergedManifest.text = updatedManifest
                            println "Added missing health permissions to manifest"
                        } else {
                            println "All required permissions already present in manifest"
                        }
                    }
                }
            }
            
            // Configure task dependencies
            tasks.named("process${variant.name.capitalize()}Manifest").configure {
                finalizedBy(addPermissionsTask)
            }
            
            tasks.matching { it.name.contains("package${variant.name.capitalize()}") }.configureEach {
                dependsOn(addPermissionsTask)
            }
            
            tasks.matching { it.name.contains("bundle${variant.name.capitalize()}") }.configureEach {
                dependsOn(addPermissionsTask)
            }
        }
    }
}